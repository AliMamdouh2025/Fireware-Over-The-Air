
Bootloader_Shehab_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000338c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000048c  08003498  08003498  00013498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003924  08003924  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08003924  08003924  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003924  08003924  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003924  08003924  00013924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003928  08003928  00013928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800392c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20000070  08003998  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  08003998  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000833f  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ef0  00000000  00000000  00028417  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000898  00000000  00000000  0002a308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000066e  00000000  00000000  0002aba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017d5c  00000000  00000000  0002b20e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bb00  00000000  00000000  00042f6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00083247  00000000  00000000  0004ea6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002554  00000000  00000000  000d1cb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000d4208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003480 	.word	0x08003480

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003480 	.word	0x08003480

0800014c <BL_UART_Fetch_Host_Commend>:
	CBL_CHANGE_ROP_Level_CMD,
	CBL_JUMP_TO_APP
};

/*======================== Software Interface Definations  ====================*/
BL_Status BL_UART_Fetch_Host_Commend(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	/* To detect the status of function */
	BL_Status Status = BL_NACK;
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
	/* To dtect the status of uart in transmitting and receiving data */
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 8000156:	2301      	movs	r3, #1
 8000158:	71bb      	strb	r3, [r7, #6]
	/* The data length that the host should be transmit at first */
	uint8_t Data_Length = 0;
 800015a:	2300      	movs	r3, #0
 800015c:	717b      	strb	r3, [r7, #5]

	/* To clear buffer of RX and prevent carbadge messages of buffer */
	memset(BL_HostBuffer, 0, BL_HOST_BUFFER_RX_LENGTH);
 800015e:	22c8      	movs	r2, #200	; 0xc8
 8000160:	2100      	movs	r1, #0
 8000162:	484b      	ldr	r0, [pc, #300]	; (8000290 <BL_UART_Fetch_Host_Commend+0x144>)
 8000164:	f002 fcfa 	bl	8002b5c <memset>

#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
	BL_PrintMassage("Bootloader started..\r\n");
 8000168:	484a      	ldr	r0, [pc, #296]	; (8000294 <BL_UART_Fetch_Host_Commend+0x148>)
 800016a:	f000 fb9d 	bl	80008a8 <BL_PrintMassage>
#endif

	/* Host commend format :
	   => Commend Length  (1 byte = Data_Length )
	  */
	HAL_Status = HAL_UART_Receive(BL_HOST_COMMUNICATION_UART, BL_HostBuffer, 1,
 800016e:	f04f 33ff 	mov.w	r3, #4294967295
 8000172:	2201      	movs	r2, #1
 8000174:	4946      	ldr	r1, [pc, #280]	; (8000290 <BL_UART_Fetch_Host_Commend+0x144>)
 8000176:	4848      	ldr	r0, [pc, #288]	; (8000298 <BL_UART_Fetch_Host_Commend+0x14c>)
 8000178:	f002 fb41 	bl	80027fe <HAL_UART_Receive>
 800017c:	4603      	mov	r3, r0
 800017e:	71bb      	strb	r3, [r7, #6]
			HAL_MAX_DELAY);

	if (HAL_Status != HAL_OK){
 8000180:	79bb      	ldrb	r3, [r7, #6]
 8000182:	2b00      	cmp	r3, #0
 8000184:	d002      	beq.n	800018c <BL_UART_Fetch_Host_Commend+0x40>
		Status = BL_NACK ;
 8000186:	2300      	movs	r3, #0
 8000188:	71fb      	strb	r3, [r7, #7]
 800018a:	e07c      	b.n	8000286 <BL_UART_Fetch_Host_Commend+0x13a>
		 Where :
		 => Commend Code is the order that Host want to do in code
		 => Delails explain what you transmit
		 => CRC is safety algorthim on code
		 */
		Data_Length = BL_HostBuffer[0];
 800018c:	4b40      	ldr	r3, [pc, #256]	; (8000290 <BL_UART_Fetch_Host_Commend+0x144>)
 800018e:	781b      	ldrb	r3, [r3, #0]
 8000190:	717b      	strb	r3, [r7, #5]

		/* we determine the number of recieving bytes next from the first number transmit in first
		   time (using buffer Data_Length and store them in BL_HostBuffer) */
		HAL_Status = HAL_UART_Receive(BL_HOST_COMMUNICATION_UART, &BL_HostBuffer[1],
 8000192:	797b      	ldrb	r3, [r7, #5]
 8000194:	b29a      	uxth	r2, r3
 8000196:	f04f 33ff 	mov.w	r3, #4294967295
 800019a:	4940      	ldr	r1, [pc, #256]	; (800029c <BL_UART_Fetch_Host_Commend+0x150>)
 800019c:	483e      	ldr	r0, [pc, #248]	; (8000298 <BL_UART_Fetch_Host_Commend+0x14c>)
 800019e:	f002 fb2e 	bl	80027fe <HAL_UART_Receive>
 80001a2:	4603      	mov	r3, r0
 80001a4:	71bb      	strb	r3, [r7, #6]
				Data_Length, HAL_MAX_DELAY);

		if (HAL_Status != HAL_OK){
 80001a6:	79bb      	ldrb	r3, [r7, #6]
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	d002      	beq.n	80001b2 <BL_UART_Fetch_Host_Commend+0x66>
			Status = BL_NACK ;
 80001ac:	2300      	movs	r3, #0
 80001ae:	71fb      	strb	r3, [r7, #7]
 80001b0:	e069      	b.n	8000286 <BL_UART_Fetch_Host_Commend+0x13a>
		}
		else {
			/* To jump on the target function from the previous commend */
			switch (BL_HostBuffer[1]) {
 80001b2:	4b37      	ldr	r3, [pc, #220]	; (8000290 <BL_UART_Fetch_Host_Commend+0x144>)
 80001b4:	785b      	ldrb	r3, [r3, #1]
 80001b6:	3b10      	subs	r3, #16
 80001b8:	2b12      	cmp	r3, #18
 80001ba:	d85e      	bhi.n	800027a <BL_UART_Fetch_Host_Commend+0x12e>
 80001bc:	a201      	add	r2, pc, #4	; (adr r2, 80001c4 <BL_UART_Fetch_Host_Commend+0x78>)
 80001be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001c2:	bf00      	nop
 80001c4:	08000211 	.word	0x08000211
 80001c8:	0800021d 	.word	0x0800021d
 80001cc:	08000229 	.word	0x08000229
 80001d0:	08000235 	.word	0x08000235
 80001d4:	08000241 	.word	0x08000241
 80001d8:	0800024d 	.word	0x0800024d
 80001dc:	08000259 	.word	0x08000259
 80001e0:	0800027b 	.word	0x0800027b
 80001e4:	0800027b 	.word	0x0800027b
 80001e8:	0800027b 	.word	0x0800027b
 80001ec:	0800027b 	.word	0x0800027b
 80001f0:	0800027b 	.word	0x0800027b
 80001f4:	0800027b 	.word	0x0800027b
 80001f8:	0800027b 	.word	0x0800027b
 80001fc:	0800027b 	.word	0x0800027b
 8000200:	0800027b 	.word	0x0800027b
 8000204:	0800027b 	.word	0x0800027b
 8000208:	08000265 	.word	0x08000265
 800020c:	08000271 	.word	0x08000271
				case CBL_GET_VER_CMD :
					Bootloader_Get_Version(BL_HostBuffer);
 8000210:	481f      	ldr	r0, [pc, #124]	; (8000290 <BL_UART_Fetch_Host_Commend+0x144>)
 8000212:	f000 f85b 	bl	80002cc <Bootloader_Get_Version>
					Status = BL_OK ;
 8000216:	2301      	movs	r3, #1
 8000218:	71fb      	strb	r3, [r7, #7]
					break;
 800021a:	e034      	b.n	8000286 <BL_UART_Fetch_Host_Commend+0x13a>
				case CBL_GET_HELP_CMD :
					Bootloader_Get_Help(BL_HostBuffer);
 800021c:	481c      	ldr	r0, [pc, #112]	; (8000290 <BL_UART_Fetch_Host_Commend+0x144>)
 800021e:	f000 f871 	bl	8000304 <Bootloader_Get_Help>
					Status = BL_OK ;
 8000222:	2301      	movs	r3, #1
 8000224:	71fb      	strb	r3, [r7, #7]
					break;
 8000226:	e02e      	b.n	8000286 <BL_UART_Fetch_Host_Commend+0x13a>
				case CBL_GET_CID_CMD :
					Bootloader_Get_chip_Identification_Number(BL_HostBuffer);
 8000228:	4819      	ldr	r0, [pc, #100]	; (8000290 <BL_UART_Fetch_Host_Commend+0x144>)
 800022a:	f000 f8b7 	bl	800039c <Bootloader_Get_chip_Identification_Number>
					Status = BL_OK ;
 800022e:	2301      	movs	r3, #1
 8000230:	71fb      	strb	r3, [r7, #7]
					break;
 8000232:	e028      	b.n	8000286 <BL_UART_Fetch_Host_Commend+0x13a>
				case CBL_GET_RDP_STATUS_CMD :
					Bootloader_Read_Protection_Level(BL_HostBuffer);
 8000234:	4816      	ldr	r0, [pc, #88]	; (8000290 <BL_UART_Fetch_Host_Commend+0x144>)
 8000236:	f000 f8df 	bl	80003f8 <Bootloader_Read_Protection_Level>
					Status = BL_OK ;
 800023a:	2301      	movs	r3, #1
 800023c:	71fb      	strb	r3, [r7, #7]
					break;
 800023e:	e022      	b.n	8000286 <BL_UART_Fetch_Host_Commend+0x13a>
				case CBL_GO_TO_ADDER_CMD :
					Bootloader_Jump_To_Address(BL_HostBuffer);
 8000240:	4813      	ldr	r0, [pc, #76]	; (8000290 <BL_UART_Fetch_Host_Commend+0x144>)
 8000242:	f000 f91d 	bl	8000480 <Bootloader_Jump_To_Address>
					Status = BL_OK ;
 8000246:	2301      	movs	r3, #1
 8000248:	71fb      	strb	r3, [r7, #7]
					break;
 800024a:	e01c      	b.n	8000286 <BL_UART_Fetch_Host_Commend+0x13a>
				case CBL_FLASH_ERASE_CMD :
					Bootloader_Erase_Flash(BL_HostBuffer);
 800024c:	4810      	ldr	r0, [pc, #64]	; (8000290 <BL_UART_Fetch_Host_Commend+0x144>)
 800024e:	f000 f9e7 	bl	8000620 <Bootloader_Erase_Flash>
					Status = BL_OK ;
 8000252:	2301      	movs	r3, #1
 8000254:	71fb      	strb	r3, [r7, #7]
					break;
 8000256:	e016      	b.n	8000286 <BL_UART_Fetch_Host_Commend+0x13a>
				case CBL_MEM_WRITE_CMD :
					Bootloader_Memory_Write(BL_HostBuffer);
 8000258:	480d      	ldr	r0, [pc, #52]	; (8000290 <BL_UART_Fetch_Host_Commend+0x144>)
 800025a:	f000 fa67 	bl	800072c <Bootloader_Memory_Write>
					Status = BL_OK ;
 800025e:	2301      	movs	r3, #1
 8000260:	71fb      	strb	r3, [r7, #7]
					break;
 8000262:	e010      	b.n	8000286 <BL_UART_Fetch_Host_Commend+0x13a>
				case CBL_CHANGE_ROP_Level_CMD :
					Bootloader_Change_Read_Protection_Level(BL_HostBuffer);
 8000264:	480a      	ldr	r0, [pc, #40]	; (8000290 <BL_UART_Fetch_Host_Commend+0x144>)
 8000266:	f000 fae7 	bl	8000838 <Bootloader_Change_Read_Protection_Level>
					Status = BL_OK ;
 800026a:	2301      	movs	r3, #1
 800026c:	71fb      	strb	r3, [r7, #7]
					break;
 800026e:	e00a      	b.n	8000286 <BL_UART_Fetch_Host_Commend+0x13a>
				case CBL_JUMP_TO_APP :
					Bootloader_Jump_To_User_App();
 8000270:	f000 f93a 	bl	80004e8 <Bootloader_Jump_To_User_App>
					Status = BL_OK ;
 8000274:	2301      	movs	r3, #1
 8000276:	71fb      	strb	r3, [r7, #7]
					break;
 8000278:	e005      	b.n	8000286 <BL_UART_Fetch_Host_Commend+0x13a>
				default :
					BL_PrintMassage ("Invalid commend code recieved from host !! \r\n ");
 800027a:	4809      	ldr	r0, [pc, #36]	; (80002a0 <BL_UART_Fetch_Host_Commend+0x154>)
 800027c:	f000 fb14 	bl	80008a8 <BL_PrintMassage>
					Status = BL_NACK ;
 8000280:	2300      	movs	r3, #0
 8000282:	71fb      	strb	r3, [r7, #7]
					break;
 8000284:	bf00      	nop
			}
		}
	}
	return Status;
 8000286:	79fb      	ldrb	r3, [r7, #7]
}
 8000288:	4618      	mov	r0, r3
 800028a:	3708      	adds	r7, #8
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}
 8000290:	2000008c 	.word	0x2000008c
 8000294:	08003498 	.word	0x08003498
 8000298:	20000160 	.word	0x20000160
 800029c:	2000008d 	.word	0x2000008d
 80002a0:	080034b0 	.word	0x080034b0

080002a4 <Bootloader_Send_Data_To_Host>:
	uint8_t ACK_Value = CBL_SEND_NACK;
	Bootloader_Send_Data_To_Host(&ACK_Value, 1);
}

/* Function to communicate with host */
static void Bootloader_Send_Data_To_Host(uint8_t *Host_Buffer , uint32_t Data_Len){
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
 80002ac:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(BL_HOST_COMMUNICATION_UART,(uint8_t*) Host_Buffer,(uint16_t) Data_Len, HAL_MAX_DELAY);
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	b29a      	uxth	r2, r3
 80002b2:	f04f 33ff 	mov.w	r3, #4294967295
 80002b6:	6879      	ldr	r1, [r7, #4]
 80002b8:	4803      	ldr	r0, [pc, #12]	; (80002c8 <Bootloader_Send_Data_To_Host+0x24>)
 80002ba:	f002 fa1d 	bl	80026f8 <HAL_UART_Transmit>
}
 80002be:	bf00      	nop
 80002c0:	3708      	adds	r7, #8
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	20000160 	.word	0x20000160

080002cc <Bootloader_Get_Version>:

/* To get version of bootloader to check on the leatest version
   To delay with this commend you should send :
   1- Data length = 0x01
   2- Commend number = 0x10 */
static void Bootloader_Get_Version (uint8_t *Host_Buffer){
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b084      	sub	sp, #16
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
	/* Buffering the version and vendor id's in BL_Version */
	uint8_t BL_Version[4] = { CBL_VENDOR_ID, CBL_SW_MAJOR_VERSION,
 80002d4:	4b08      	ldr	r3, [pc, #32]	; (80002f8 <Bootloader_Get_Version+0x2c>)
 80002d6:	60fb      	str	r3, [r7, #12]
	/* used to define the beginning of CRC address in buffer */
	//uint16_t Host_CMD_Packet_Len = 0 ;
	/* Used to get CRC data */
	//uint32_t Host_CRC32 = 0 ;
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
	BL_PrintMassage ("Read bootloader version \r\n");
 80002d8:	4808      	ldr	r0, [pc, #32]	; (80002fc <Bootloader_Get_Version+0x30>)
 80002da:	f000 fae5 	bl	80008a8 <BL_PrintMassage>
		/* Sending Acknowledge message and number of bytes which will be sent */
		//Bootloader_Send_ACK(4);
		/* Sending the version and vendor id's to meet the target from commend */
		//Bootloader_Send_Data_To_Host(BL_Version,4);
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
		BL_PrintMassage("Bootloader Version %d.%d.%d\r\n",BL_Version[1],BL_Version[2],BL_Version[3]);
 80002de:	7b7b      	ldrb	r3, [r7, #13]
 80002e0:	4619      	mov	r1, r3
 80002e2:	7bbb      	ldrb	r3, [r7, #14]
 80002e4:	461a      	mov	r2, r3
 80002e6:	7bfb      	ldrb	r3, [r7, #15]
 80002e8:	4805      	ldr	r0, [pc, #20]	; (8000300 <Bootloader_Get_Version+0x34>)
 80002ea:	f000 fadd 	bl	80008a8 <BL_PrintMassage>
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
		BL_PrintMassage("CRC is failed\r\n");
#endif
		Bootloader_Send_NACK();
	}*/
}
 80002ee:	bf00      	nop
 80002f0:	3710      	adds	r7, #16
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	00010164 	.word	0x00010164
 80002fc:	080034e0 	.word	0x080034e0
 8000300:	080034fc 	.word	0x080034fc

08000304 <Bootloader_Get_Help>:

/* To get the help commends
   To delay with this commend you should send :
	1- Data length = 0x01
	2- Commend number = 0x11 */
static void Bootloader_Get_Help (uint8_t *Host_Buffer){
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
	//uint16_t Host_CMD_Packet_Len = 0 ;  /* used to define the beginning of CRC address in buffer */
	//uint32_t Host_CRC32 = 0 ;           /* Used to get CRC data */

#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
	BL_PrintMassage ("All supported commends code \r\n");
 800030c:	481c      	ldr	r0, [pc, #112]	; (8000380 <Bootloader_Get_Help+0x7c>)
 800030e:	f000 facb 	bl	80008a8 <BL_PrintMassage>
		//Bootloader_Send_ACK(12);
		/* Sending the list of commends to meet the target from commend */
		//Bootloader_Send_Data_To_Host(Bootloader_Supported_CMDs,12);
	BL_PrintMassage(
			"CBL_GET_VER_CMD %x\r\nCBL_GET_HELP_CMD %x\r\nCBL_GET_CID_CMD %x\r\n",
			Bootloader_Supported_CMDs[0], Bootloader_Supported_CMDs[1],
 8000312:	4b1c      	ldr	r3, [pc, #112]	; (8000384 <Bootloader_Get_Help+0x80>)
 8000314:	781b      	ldrb	r3, [r3, #0]
	BL_PrintMassage(
 8000316:	4619      	mov	r1, r3
			Bootloader_Supported_CMDs[0], Bootloader_Supported_CMDs[1],
 8000318:	4b1a      	ldr	r3, [pc, #104]	; (8000384 <Bootloader_Get_Help+0x80>)
 800031a:	785b      	ldrb	r3, [r3, #1]
	BL_PrintMassage(
 800031c:	461a      	mov	r2, r3
			Bootloader_Supported_CMDs[2]);
 800031e:	4b19      	ldr	r3, [pc, #100]	; (8000384 <Bootloader_Get_Help+0x80>)
 8000320:	789b      	ldrb	r3, [r3, #2]
	BL_PrintMassage(
 8000322:	4819      	ldr	r0, [pc, #100]	; (8000388 <Bootloader_Get_Help+0x84>)
 8000324:	f000 fac0 	bl	80008a8 <BL_PrintMassage>
	BL_PrintMassage(
			"CBL_GET_RDP_STATUS_CMD %x\r\nCBL_GO_TO_ADDER_CMD %x\r\nCBL_FLASH_ERASE_CMD %x\r\n",
			Bootloader_Supported_CMDs[3], Bootloader_Supported_CMDs[4],
 8000328:	4b16      	ldr	r3, [pc, #88]	; (8000384 <Bootloader_Get_Help+0x80>)
 800032a:	78db      	ldrb	r3, [r3, #3]
	BL_PrintMassage(
 800032c:	4619      	mov	r1, r3
			Bootloader_Supported_CMDs[3], Bootloader_Supported_CMDs[4],
 800032e:	4b15      	ldr	r3, [pc, #84]	; (8000384 <Bootloader_Get_Help+0x80>)
 8000330:	791b      	ldrb	r3, [r3, #4]
	BL_PrintMassage(
 8000332:	461a      	mov	r2, r3
			Bootloader_Supported_CMDs[5]);
 8000334:	4b13      	ldr	r3, [pc, #76]	; (8000384 <Bootloader_Get_Help+0x80>)
 8000336:	795b      	ldrb	r3, [r3, #5]
	BL_PrintMassage(
 8000338:	4814      	ldr	r0, [pc, #80]	; (800038c <Bootloader_Get_Help+0x88>)
 800033a:	f000 fab5 	bl	80008a8 <BL_PrintMassage>
	BL_PrintMassage(
			"CBL_MEM_WRITE_CMD %x\r\nCBL_EN_R_W_PROTECT_CMD %x\r\nCBL_MEM_READ_CMD %x\r\n",
			Bootloader_Supported_CMDs[6], Bootloader_Supported_CMDs[7],
 800033e:	4b11      	ldr	r3, [pc, #68]	; (8000384 <Bootloader_Get_Help+0x80>)
 8000340:	799b      	ldrb	r3, [r3, #6]
	BL_PrintMassage(
 8000342:	4619      	mov	r1, r3
			Bootloader_Supported_CMDs[6], Bootloader_Supported_CMDs[7],
 8000344:	4b0f      	ldr	r3, [pc, #60]	; (8000384 <Bootloader_Get_Help+0x80>)
 8000346:	79db      	ldrb	r3, [r3, #7]
	BL_PrintMassage(
 8000348:	461a      	mov	r2, r3
			Bootloader_Supported_CMDs[8]);
 800034a:	4b0e      	ldr	r3, [pc, #56]	; (8000384 <Bootloader_Get_Help+0x80>)
 800034c:	7a1b      	ldrb	r3, [r3, #8]
	BL_PrintMassage(
 800034e:	4810      	ldr	r0, [pc, #64]	; (8000390 <Bootloader_Get_Help+0x8c>)
 8000350:	f000 faaa 	bl	80008a8 <BL_PrintMassage>
	BL_PrintMassage(
			"CBL_READ_SECTOR_STATUS_CMD %x\r\nCBL_OTP_READ_CMD %x\r\nCBL_CHANGE_ROP_Level_CMD %x\r\n",
			Bootloader_Supported_CMDs[9], Bootloader_Supported_CMDs[10],
 8000354:	4b0b      	ldr	r3, [pc, #44]	; (8000384 <Bootloader_Get_Help+0x80>)
 8000356:	7a5b      	ldrb	r3, [r3, #9]
	BL_PrintMassage(
 8000358:	4619      	mov	r1, r3
			Bootloader_Supported_CMDs[9], Bootloader_Supported_CMDs[10],
 800035a:	4b0a      	ldr	r3, [pc, #40]	; (8000384 <Bootloader_Get_Help+0x80>)
 800035c:	7a9b      	ldrb	r3, [r3, #10]
	BL_PrintMassage(
 800035e:	461a      	mov	r2, r3
			Bootloader_Supported_CMDs[11]);
 8000360:	4b08      	ldr	r3, [pc, #32]	; (8000384 <Bootloader_Get_Help+0x80>)
 8000362:	7adb      	ldrb	r3, [r3, #11]
	BL_PrintMassage(
 8000364:	480b      	ldr	r0, [pc, #44]	; (8000394 <Bootloader_Get_Help+0x90>)
 8000366:	f000 fa9f 	bl	80008a8 <BL_PrintMassage>
	BL_PrintMassage("CBL_JUMP_TO_APP %x\r\n",Bootloader_Supported_CMDs[12]);
 800036a:	4b06      	ldr	r3, [pc, #24]	; (8000384 <Bootloader_Get_Help+0x80>)
 800036c:	7b1b      	ldrb	r3, [r3, #12]
 800036e:	4619      	mov	r1, r3
 8000370:	4809      	ldr	r0, [pc, #36]	; (8000398 <Bootloader_Get_Help+0x94>)
 8000372:	f000 fa99 	bl	80008a8 <BL_PrintMassage>
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
		BL_PrintMassage("CRC is failed\r\n");
#endif
		Bootloader_Send_NACK();
	}*/
}
 8000376:	bf00      	nop
 8000378:	3708      	adds	r7, #8
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	0800351c 	.word	0x0800351c
 8000384:	20000000 	.word	0x20000000
 8000388:	0800353c 	.word	0x0800353c
 800038c:	0800357c 	.word	0x0800357c
 8000390:	080035c8 	.word	0x080035c8
 8000394:	08003610 	.word	0x08003610
 8000398:	08003664 	.word	0x08003664

0800039c <Bootloader_Get_chip_Identification_Number>:

/* To get Micro-controller number
   To delay with this commend you should send :
	1- Data length = 0x01
	2- Commend number = 0x12 */
static void Bootloader_Get_chip_Identification_Number (uint8_t *Host_Buffer){
 800039c:	b580      	push	{r7, lr}
 800039e:	b084      	sub	sp, #16
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
	/* used to define the beginning of CRC address in buffer */
	//uint16_t Host_CMD_Packet_Len = 0 ;
	/* Used to get CRC data */
	//uint32_t Host_CRC32 = 0 ;
	/* Identify the id of used MCU */
	uint16_t MCU_IdentificationNumber = 0 ;
 80003a4:	2300      	movs	r3, #0
 80003a6:	81fb      	strh	r3, [r7, #14]

#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
	BL_PrintMassage ("Read MCU chip identification number \r\n");
 80003a8:	4808      	ldr	r0, [pc, #32]	; (80003cc <Bootloader_Get_chip_Identification_Number+0x30>)
 80003aa:	f000 fa7d 	bl	80008a8 <BL_PrintMassage>
	/*if ( CRC_OK == Bootloader_CRC_Verify(Host_Buffer, (Host_CMD_Packet_Len - CRC_TYPE_SIZE), Host_CRC32)){
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
		BL_PrintMassage("CRC is passed\r\n");
#endif*/
		/* Get MCU chip identification number */
		MCU_IdentificationNumber = (uint16_t)((DBGMCU->IDCODE)&0x00000FFF);
 80003ae:	4b08      	ldr	r3, [pc, #32]	; (80003d0 <Bootloader_Get_chip_Identification_Number+0x34>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	b29b      	uxth	r3, r3
 80003b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80003b8:	81fb      	strh	r3, [r7, #14]

		/* Report MCU chip identification number */
		//Bootloader_Send_ACK(2);
		//Bootloader_Send_Data_To_Host((uint8_t *)(&MCU_IdentificationNumber),2);
		BL_PrintMassage("IdentificationNumber = %x\r\n",MCU_IdentificationNumber);
 80003ba:	89fb      	ldrh	r3, [r7, #14]
 80003bc:	4619      	mov	r1, r3
 80003be:	4805      	ldr	r0, [pc, #20]	; (80003d4 <Bootloader_Get_chip_Identification_Number+0x38>)
 80003c0:	f000 fa72 	bl	80008a8 <BL_PrintMassage>
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
		BL_PrintMassage("CRC is failed\r\n");
#endif
		Bootloader_Send_NACK();
	}*/
}
 80003c4:	bf00      	nop
 80003c6:	3710      	adds	r7, #16
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	0800367c 	.word	0x0800367c
 80003d0:	e0042000 	.word	0xe0042000
 80003d4:	080036a4 	.word	0x080036a4

080003d8 <CBL_STM32F103_GET_RDP_Level>:

static void CBL_STM32F103_GET_RDP_Level (uint8_t *RDP_Level){
 80003d8:	b580      	push	{r7, lr}
 80003da:	b08a      	sub	sp, #40	; 0x28
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
	/* paramter input for function that get level of memory */
	FLASH_OBProgramInitTypeDef FLASH_OBProgram ;
	/* Get level of memory */
	HAL_FLASHEx_OBGetConfig(&FLASH_OBProgram);
 80003e0:	f107 030c 	add.w	r3, r7, #12
 80003e4:	4618      	mov	r0, r3
 80003e6:	f001 f87d 	bl	80014e4 <HAL_FLASHEx_OBGetConfig>
	/* Assign protection level in parameter [in\out] */
	*RDP_Level = (uint8_t)FLASH_OBProgram.RDPLevel ;
 80003ea:	7f3a      	ldrb	r2, [r7, #28]
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	701a      	strb	r2, [r3, #0]
}
 80003f0:	bf00      	nop
 80003f2:	3728      	adds	r7, #40	; 0x28
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}

080003f8 <Bootloader_Read_Protection_Level>:

/* To get the protection level of flash memory in Micro-controller number
   To delay with this commend you should send :
	1- Data length = 0x01
	2- Commend number = 0x13 */
static void Bootloader_Read_Protection_Level (uint8_t *Host_Buffer){
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b084      	sub	sp, #16
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
	/* used to define the beginning of CRC address in buffer */
	//uint16_t Host_CMD_Packet_Len = 0 ;
	/* Used to get CRC data */
	//uint32_t Host_CRC32 = 0 ;
	/* Level of protection */
	uint8_t RDP_Level = 0 ;
 8000400:	2300      	movs	r3, #0
 8000402:	73fb      	strb	r3, [r7, #15]

#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
	BL_PrintMassage ("Read the flash protection out level \r\n");
 8000404:	4808      	ldr	r0, [pc, #32]	; (8000428 <Bootloader_Read_Protection_Level+0x30>)
 8000406:	f000 fa4f 	bl	80008a8 <BL_PrintMassage>
		BL_PrintMassage("CRC is passed\r\n");
#endif*/
		/* Report acknowledge message*/
		//Bootloader_Send_ACK(1);
		/* Read protection level */
		CBL_STM32F103_GET_RDP_Level(&RDP_Level);
 800040a:	f107 030f 	add.w	r3, r7, #15
 800040e:	4618      	mov	r0, r3
 8000410:	f7ff ffe2 	bl	80003d8 <CBL_STM32F103_GET_RDP_Level>
		/* Report level */
		//Bootloader_Send_Data_To_Host((uint8_t *)(&RDP_Level),1);
		BL_PrintMassage("Protection level = %x\r\n",RDP_Level);
 8000414:	7bfb      	ldrb	r3, [r7, #15]
 8000416:	4619      	mov	r1, r3
 8000418:	4804      	ldr	r0, [pc, #16]	; (800042c <Bootloader_Read_Protection_Level+0x34>)
 800041a:	f000 fa45 	bl	80008a8 <BL_PrintMassage>
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
		BL_PrintMassage("CRC is failed\r\n");
#endif
		Bootloader_Send_NACK();
	}*/
}
 800041e:	bf00      	nop
 8000420:	3710      	adds	r7, #16
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	080036c0 	.word	0x080036c0
 800042c:	080036e8 	.word	0x080036e8

08000430 <Host_Jump_Address_Verfication>:


static uint8_t Host_Jump_Address_Verfication (uint32_t Jump_Address){
 8000430:	b480      	push	{r7}
 8000432:	b085      	sub	sp, #20
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
	/* TO check on state of given address is in region or not */
	uint8_t Address_Verification_State = ADDRESS_IS_INVALID ;
 8000438:	2300      	movs	r3, #0
 800043a:	73fb      	strb	r3, [r7, #15]
	if (Jump_Address>= SRAM_BASE && Jump_Address <=STM32F103_SRAM_END){
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000442:	d306      	bcc.n	8000452 <Host_Jump_Address_Verfication+0x22>
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	4a0c      	ldr	r2, [pc, #48]	; (8000478 <Host_Jump_Address_Verfication+0x48>)
 8000448:	4293      	cmp	r3, r2
 800044a:	d802      	bhi.n	8000452 <Host_Jump_Address_Verfication+0x22>
		Address_Verification_State = ADDRESS_IS_VALID ;
 800044c:	2301      	movs	r3, #1
 800044e:	73fb      	strb	r3, [r7, #15]
 8000450:	e00c      	b.n	800046c <Host_Jump_Address_Verfication+0x3c>
	}
	else if(Jump_Address>= FLASH_BASE && Jump_Address <=STM32F103_FLASH_END){
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000458:	d306      	bcc.n	8000468 <Host_Jump_Address_Verfication+0x38>
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4a07      	ldr	r2, [pc, #28]	; (800047c <Host_Jump_Address_Verfication+0x4c>)
 800045e:	4293      	cmp	r3, r2
 8000460:	d802      	bhi.n	8000468 <Host_Jump_Address_Verfication+0x38>
		Address_Verification_State = ADDRESS_IS_VALID ;
 8000462:	2301      	movs	r3, #1
 8000464:	73fb      	strb	r3, [r7, #15]
 8000466:	e001      	b.n	800046c <Host_Jump_Address_Verfication+0x3c>
	}
	else {
		Address_Verification_State = ADDRESS_IS_INVALID ;
 8000468:	2300      	movs	r3, #0
 800046a:	73fb      	strb	r3, [r7, #15]
	}
	return Address_Verification_State ;
 800046c:	7bfb      	ldrb	r3, [r7, #15]
}
 800046e:	4618      	mov	r0, r3
 8000470:	3714      	adds	r7, #20
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr
 8000478:	20005000 	.word	0x20005000
 800047c:	08010000 	.word	0x08010000

08000480 <Bootloader_Jump_To_Address>:
	1- Data length = 0x05
	2- Commend number = 0x14
	3- Wanted address = (4bytes) --> you should enter address in Realterm as this example
	0x0800014c --enter--> 0x4c then 0x01 then 0x00 then 0x08
	*/
static void Bootloader_Jump_To_Address (uint8_t *Host_Buffer){
 8000480:	b580      	push	{r7, lr}
 8000482:	b086      	sub	sp, #24
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
	/* used to define the beginning of CRC address in buffer */
	//uint16_t Host_CMD_Packet_Len = 0 ;
	/* Used to get CRC data */
	//uint32_t Host_CRC32 = 0 ;
	/* Buffering address */
	uint32_t Host_Jump_Address = 0 ;
 8000488:	2300      	movs	r3, #0
 800048a:	617b      	str	r3, [r7, #20]
	/* TO check on state of given address is in region or not */
	uint8_t Address_Verification_State = ADDRESS_IS_INVALID ;
 800048c:	2300      	movs	r3, #0
 800048e:	74fb      	strb	r3, [r7, #19]

#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
	BL_PrintMassage ("Bootloader jump to specified address \r\n");
 8000490:	4811      	ldr	r0, [pc, #68]	; (80004d8 <Bootloader_Jump_To_Address+0x58>)
 8000492:	f000 fa09 	bl	80008a8 <BL_PrintMassage>
#endif*/
		/* Report MCU chip identification number */
		//Bootloader_Send_ACK(1);

		/* To get the content of this address */
		Host_Jump_Address = *((uint32_t *) &(Host_Buffer[2])) ;
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800049c:	617b      	str	r3, [r7, #20]

		/* To verify that the address in the region of memory */
		Address_Verification_State = Host_Jump_Address_Verfication(Host_Jump_Address);
 800049e:	6978      	ldr	r0, [r7, #20]
 80004a0:	f7ff ffc6 	bl	8000430 <Host_Jump_Address_Verfication>
 80004a4:	4603      	mov	r3, r0
 80004a6:	74fb      	strb	r3, [r7, #19]

		if (Address_Verification_State == ADDRESS_IS_VALID ){
 80004a8:	7cfb      	ldrb	r3, [r7, #19]
 80004aa:	2b01      	cmp	r3, #1
 80004ac:	d10c      	bne.n	80004c8 <Bootloader_Jump_To_Address+0x48>
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
		BL_PrintMassage("Address verification sucessed\r\n");
 80004ae:	480b      	ldr	r0, [pc, #44]	; (80004dc <Bootloader_Jump_To_Address+0x5c>)
 80004b0:	f000 f9fa 	bl	80008a8 <BL_PrintMassage>
#endif
			/* - Prepare the address to jump
			   - Increment 1 to be in thumb instruction */
			Jump_Ptr Jump_Address = (Jump_Ptr) (Host_Jump_Address + 1) ;
 80004b4:	697b      	ldr	r3, [r7, #20]
 80004b6:	3301      	adds	r3, #1
 80004b8:	60fb      	str	r3, [r7, #12]
			Jump_Address();
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	4798      	blx	r3
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
		BL_PrintMassage("Jumped to : 0x%X \r\n",Jump_Address);
 80004be:	68f9      	ldr	r1, [r7, #12]
 80004c0:	4807      	ldr	r0, [pc, #28]	; (80004e0 <Bootloader_Jump_To_Address+0x60>)
 80004c2:	f000 f9f1 	bl	80008a8 <BL_PrintMassage>
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
		BL_PrintMassage("CRC is failed\r\n");
#endif
		Bootloader_Send_NACK();
	}*/
}
 80004c6:	e002      	b.n	80004ce <Bootloader_Jump_To_Address+0x4e>
		BL_PrintMassage("Address verification unsucessed\r\n");
 80004c8:	4806      	ldr	r0, [pc, #24]	; (80004e4 <Bootloader_Jump_To_Address+0x64>)
 80004ca:	f000 f9ed 	bl	80008a8 <BL_PrintMassage>
}
 80004ce:	bf00      	nop
 80004d0:	3718      	adds	r7, #24
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	08003700 	.word	0x08003700
 80004dc:	08003728 	.word	0x08003728
 80004e0:	08003748 	.word	0x08003748
 80004e4:	0800375c 	.word	0x0800375c

080004e8 <Bootloader_Jump_To_User_App>:
    2- update size of bootloader code with suitable size as 17k or 15k
    3- update origin address of application code in flash memory in linker script and size also
    4- update the interrupt vector table to be allocate at start address of code in file (system_stm32f1xx.c)
       SCB->VTOR = FLASH_BASE | 0x8000;
  */
static void Bootloader_Jump_To_User_App (){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
	/* Value of the main stack pointer of our main application */
	uint32_t MSP_Value = *((volatile uint32_t*)FLASH_PAGE_BASE_ADDRESS);
 80004ee:	4b0c      	ldr	r3, [pc, #48]	; (8000520 <Bootloader_Jump_To_User_App+0x38>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	60fb      	str	r3, [r7, #12]
	/* Reset Handler defination function of our main application */
	uint32_t MainAppAddr = *((volatile uint32_t*)(FLASH_PAGE_BASE_ADDRESS+4));
 80004f4:	4b0b      	ldr	r3, [pc, #44]	; (8000524 <Bootloader_Jump_To_User_App+0x3c>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	60bb      	str	r3, [r7, #8]

#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
		BL_PrintMassage("Jump to application\r\n");
 80004fa:	480b      	ldr	r0, [pc, #44]	; (8000528 <Bootloader_Jump_To_User_App+0x40>)
 80004fc:	f000 f9d4 	bl	80008a8 <BL_PrintMassage>
#endif

	/* Declare pointer to function contain the beginning address of application */
	pFunc ResetHandler_Address = (pFunc)MainAppAddr;
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	607b      	str	r3, [r7, #4]

	/* Deinitionalization of modules that used in bootloader and work
	   the configurations of new application */
	HAL_RCC_DeInit(); /* Resets the RCC clock configuration to the default reset state. */
 8000504:	f001 fbfe 	bl	8001d04 <HAL_RCC_DeInit>
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	f383 8808 	msr	MSP, r3
}
 8000512:	bf00      	nop

	/* Reset main stack pointer */
	__set_MSP(MSP_Value);

	/* Jump to Apllication Reset Handler */
	ResetHandler_Address();
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	4798      	blx	r3
}
 8000518:	bf00      	nop
 800051a:	3710      	adds	r7, #16
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	08004400 	.word	0x08004400
 8000524:	08004404 	.word	0x08004404
 8000528:	08003780 	.word	0x08003780

0800052c <Perform_Flash_Erase>:

static uint8_t Perform_Flash_Erase (uint8_t Page_Number, uint8_t Number_Of_Pages){
 800052c:	b580      	push	{r7, lr}
 800052e:	b088      	sub	sp, #32
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	460a      	mov	r2, r1
 8000536:	71fb      	strb	r3, [r7, #7]
 8000538:	4613      	mov	r3, r2
 800053a:	71bb      	strb	r3, [r7, #6]
	/* To check that the sectors in not overflow the size of flash */
	uint8_t Page_validity_Status  = PAGE_INVALID_NUMBER ;
 800053c:	2300      	movs	r3, #0
 800053e:	77fb      	strb	r3, [r7, #31]
	/* Status of erasing flash */
	HAL_StatusTypeDef HAL_Status = HAL_ERROR ;
 8000540:	2301      	movs	r3, #1
 8000542:	77bb      	strb	r3, [r7, #30]
	/* Error sector status */
	uint32_t PageError = 0 ;
 8000544:	2300      	movs	r3, #0
 8000546:	61bb      	str	r3, [r7, #24]
	/* Define struct to configure parameters[in] */
	FLASH_EraseInitTypeDef pEraseInit ;
	/* Define the used bank in flash memory */
	pEraseInit.Banks = FLASH_BANK_1 ;
 8000548:	2301      	movs	r3, #1
 800054a:	60fb      	str	r3, [r7, #12]

	/* trying to erase bootloader --> PAGE_INVALID_NUMBER */
	if (Page_Number <= CBL_PAGE_END){
 800054c:	79fb      	ldrb	r3, [r7, #7]
 800054e:	2b0e      	cmp	r3, #14
 8000550:	d805      	bhi.n	800055e <Perform_Flash_Erase+0x32>
		Page_validity_Status = PAGE_INVALID_NUMBER ;
 8000552:	2300      	movs	r3, #0
 8000554:	77fb      	strb	r3, [r7, #31]
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
	BL_PrintMassage ("It will erase in bootloader code \r\n ");
 8000556:	482d      	ldr	r0, [pc, #180]	; (800060c <Perform_Flash_Erase+0xe0>)
 8000558:	f000 f9a6 	bl	80008a8 <BL_PrintMassage>
 800055c:	e051      	b.n	8000602 <Perform_Flash_Erase+0xd6>
#endif
	}
	/* another pages is agreed but check that is acess the number of pages in flash */
	else if (((Page_Number + Number_Of_Pages) > CBL_FLASH_MAX_PAGES_NUMBER)
 800055e:	79fa      	ldrb	r2, [r7, #7]
 8000560:	79bb      	ldrb	r3, [r7, #6]
 8000562:	4413      	add	r3, r2
 8000564:	2b80      	cmp	r3, #128	; 0x80
 8000566:	dd08      	ble.n	800057a <Perform_Flash_Erase+0x4e>
			&& CBL_FLASH_MASS_ERASE != Page_Number) {
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	2bff      	cmp	r3, #255	; 0xff
 800056c:	d005      	beq.n	800057a <Perform_Flash_Erase+0x4e>
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
	BL_PrintMassage ("It is over the flash size\r\n ");
 800056e:	4828      	ldr	r0, [pc, #160]	; (8000610 <Perform_Flash_Erase+0xe4>)
 8000570:	f000 f99a 	bl	80008a8 <BL_PrintMassage>
#endif
	Page_validity_Status = PAGE_INVALID_NUMBER ;
 8000574:	2300      	movs	r3, #0
 8000576:	77fb      	strb	r3, [r7, #31]
 8000578:	e043      	b.n	8000602 <Perform_Flash_Erase+0xd6>
	}
	/* erase all memory or specific page */
	else {
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
	BL_PrintMassage ("It is in range \r\n ");
 800057a:	4826      	ldr	r0, [pc, #152]	; (8000614 <Perform_Flash_Erase+0xe8>)
 800057c:	f000 f994 	bl	80008a8 <BL_PrintMassage>
#endif
		Page_validity_Status = PAGE_VALID_NUMBER ;
 8000580:	2301      	movs	r3, #1
 8000582:	77fb      	strb	r3, [r7, #31]
		/* Check if he want to erase all memory flash */
		if ( CBL_FLASH_MASS_ERASE == Page_Number  ){
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	2bff      	cmp	r3, #255	; 0xff
 8000588:	d105      	bne.n	8000596 <Perform_Flash_Erase+0x6a>
			pEraseInit.TypeErase = FLASH_TYPEERASE_MASSERASE ;
 800058a:	2302      	movs	r3, #2
 800058c:	60bb      	str	r3, [r7, #8]
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
	BL_PrintMassage ("Mase erase \r\n ");
 800058e:	4822      	ldr	r0, [pc, #136]	; (8000618 <Perform_Flash_Erase+0xec>)
 8000590:	f000 f98a 	bl	80008a8 <BL_PrintMassage>
 8000594:	e00b      	b.n	80005ae <Perform_Flash_Erase+0x82>
#endif
		}
		/* erase specific page */
		else {
			pEraseInit.TypeErase   = FLASH_TYPEERASE_PAGES ;
 8000596:	2300      	movs	r3, #0
 8000598:	60bb      	str	r3, [r7, #8]
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
	BL_PrintMassage ("Page erase \r\n ");
 800059a:	4820      	ldr	r0, [pc, #128]	; (800061c <Perform_Flash_Erase+0xf0>)
 800059c:	f000 f984 	bl	80008a8 <BL_PrintMassage>
#endif
			pEraseInit.PageAddress = ((uint32_t) Page_Number
 80005a0:	79fb      	ldrb	r3, [r7, #7]
					* (STM32F103_FLASH_PAGE_SIZE) + FLASH_BASE);
 80005a2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80005a6:	029b      	lsls	r3, r3, #10
			pEraseInit.PageAddress = ((uint32_t) Page_Number
 80005a8:	613b      	str	r3, [r7, #16]
			pEraseInit.NbPages     = Number_Of_Pages ;
 80005aa:	79bb      	ldrb	r3, [r7, #6]
 80005ac:	617b      	str	r3, [r7, #20]
		}
		/* To unlock flash memory */
		HAL_Status = HAL_FLASH_Unlock();
 80005ae:	f000 fd55 	bl	800105c <HAL_FLASH_Unlock>
 80005b2:	4603      	mov	r3, r0
 80005b4:	77bb      	strb	r3, [r7, #30]
		/* if it's opened correctly */
		if (HAL_Status == HAL_OK){
 80005b6:	7fbb      	ldrb	r3, [r7, #30]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d113      	bne.n	80005e4 <Perform_Flash_Erase+0xb8>
			/* Perform a mass erase or erase the specified FLASH memory sectors */
			HAL_Status = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 80005bc:	f107 0218 	add.w	r2, r7, #24
 80005c0:	f107 0308 	add.w	r3, r7, #8
 80005c4:	4611      	mov	r1, r2
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 fe62 	bl	8001290 <HAL_FLASHEx_Erase>
 80005cc:	4603      	mov	r3, r0
 80005ce:	77bb      	strb	r3, [r7, #30]
			/* To check that the flash memory is erased sucessfully */
			if (HAL_SUCESSFUL_ERASE == PageError){
 80005d0:	69bb      	ldr	r3, [r7, #24]
 80005d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005d6:	d102      	bne.n	80005de <Perform_Flash_Erase+0xb2>
				Page_validity_Status = SUCESSFUL_ERASE ;
 80005d8:	2303      	movs	r3, #3
 80005da:	77fb      	strb	r3, [r7, #31]
 80005dc:	e004      	b.n	80005e8 <Perform_Flash_Erase+0xbc>
			}
			/* didn't erase*/
			else {
				Page_validity_Status = UNSUCESSFUL_ERASE ;
 80005de:	2302      	movs	r3, #2
 80005e0:	77fb      	strb	r3, [r7, #31]
 80005e2:	e001      	b.n	80005e8 <Perform_Flash_Erase+0xbc>
			}
		}
		/* Not opened */
		else {
			Page_validity_Status = UNSUCESSFUL_ERASE ;
 80005e4:	2302      	movs	r3, #2
 80005e6:	77fb      	strb	r3, [r7, #31]
		}
		/* if it erased correctly and opened correctly */
		if (Page_validity_Status == SUCESSFUL_ERASE && HAL_Status == HAL_OK ){
 80005e8:	7ffb      	ldrb	r3, [r7, #31]
 80005ea:	2b03      	cmp	r3, #3
 80005ec:	d107      	bne.n	80005fe <Perform_Flash_Erase+0xd2>
 80005ee:	7fbb      	ldrb	r3, [r7, #30]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d104      	bne.n	80005fe <Perform_Flash_Erase+0xd2>
			/* To lock flash memory */
			HAL_Status = HAL_FLASH_Lock();
 80005f4:	f000 fd58 	bl	80010a8 <HAL_FLASH_Lock>
 80005f8:	4603      	mov	r3, r0
 80005fa:	77bb      	strb	r3, [r7, #30]
 80005fc:	e001      	b.n	8000602 <Perform_Flash_Erase+0xd6>
		}
		/* not erased or opened */
		else {
			Page_validity_Status  = PAGE_INVALID_NUMBER ;
 80005fe:	2300      	movs	r3, #0
 8000600:	77fb      	strb	r3, [r7, #31]
		}
	}

	return Page_validity_Status ;
 8000602:	7ffb      	ldrb	r3, [r7, #31]
}
 8000604:	4618      	mov	r0, r3
 8000606:	3720      	adds	r7, #32
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	08003798 	.word	0x08003798
 8000610:	080037c0 	.word	0x080037c0
 8000614:	080037e0 	.word	0x080037e0
 8000618:	080037f4 	.word	0x080037f4
 800061c:	08003804 	.word	0x08003804

08000620 <Bootloader_Erase_Flash>:

static void Bootloader_Erase_Flash (uint8_t *Host_Buffer){
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	/* used to define the beginning of CRC address in buffer */
	//uint16_t Host_CMD_Packet_Len = 0 ;
	/* Used to get CRC data */
	//uint32_t Host_CRC32 = 0 ;
	/* To check on Erase state */
	uint8_t Erase_Status = UNSUCESSFUL_ERASE ;
 8000628:	2302      	movs	r3, #2
 800062a:	73fb      	strb	r3, [r7, #15]

#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
	BL_PrintMassage ("Mase erase or sector erase of the user flash \r\n ");
 800062c:	4811      	ldr	r0, [pc, #68]	; (8000674 <Bootloader_Erase_Flash+0x54>)
 800062e:	f000 f93b 	bl	80008a8 <BL_PrintMassage>
		BL_PrintMassage("CRC is passed\r\n");
#endif*/
		/* Send acknowledge to host */
		//Bootloader_Send_ACK(1);
		/* Perform Mass erase or sector erase of the yser flash */
		Erase_Status = Perform_Flash_Erase (Host_Buffer[2],Host_Buffer[3]);
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	3302      	adds	r3, #2
 8000636:	781a      	ldrb	r2, [r3, #0]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	3303      	adds	r3, #3
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	4619      	mov	r1, r3
 8000640:	4610      	mov	r0, r2
 8000642:	f7ff ff73 	bl	800052c <Perform_Flash_Erase>
 8000646:	4603      	mov	r3, r0
 8000648:	73fb      	strb	r3, [r7, #15]
		if ( SUCESSFUL_ERASE == Erase_Status){
 800064a:	7bfb      	ldrb	r3, [r7, #15]
 800064c:	2b03      	cmp	r3, #3
 800064e:	d103      	bne.n	8000658 <Bootloader_Erase_Flash+0x38>
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
		BL_PrintMassage("Sucessful erased\r\n");
 8000650:	4809      	ldr	r0, [pc, #36]	; (8000678 <Bootloader_Erase_Flash+0x58>)
 8000652:	f000 f929 	bl	80008a8 <BL_PrintMassage>
 8000656:	e002      	b.n	800065e <Bootloader_Erase_Flash+0x3e>
#endif
		}
		else {
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
		BL_PrintMassage("Unsucessful erased\r\n");
 8000658:	4808      	ldr	r0, [pc, #32]	; (800067c <Bootloader_Erase_Flash+0x5c>)
 800065a:	f000 f925 	bl	80008a8 <BL_PrintMassage>
#endif
		}
		/* Report the erase state */
		Bootloader_Send_Data_To_Host((uint8_t *)(&Erase_Status),1);
 800065e:	f107 030f 	add.w	r3, r7, #15
 8000662:	2101      	movs	r1, #1
 8000664:	4618      	mov	r0, r3
 8000666:	f7ff fe1d 	bl	80002a4 <Bootloader_Send_Data_To_Host>
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
		BL_PrintMassage("CRC is failed\r\n");
#endif
		Bootloader_Send_NACK();
	}*/
}
 800066a:	bf00      	nop
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	08003814 	.word	0x08003814
 8000678:	08003848 	.word	0x08003848
 800067c:	0800385c 	.word	0x0800385c

08000680 <Flash_Memory_Write_Payload>:

static uint8_t Flash_Memory_Write_Payload(uint8_t *Host_PayLoad,
		uint32_t Payload_Start_Address, uint16_t Payload_Len) {
 8000680:	b5b0      	push	{r4, r5, r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0
 8000686:	60f8      	str	r0, [r7, #12]
 8000688:	60b9      	str	r1, [r7, #8]
 800068a:	4613      	mov	r3, r2
 800068c:	80fb      	strh	r3, [r7, #6]
	/* The status in dealing HAL functions */
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 800068e:	2301      	movs	r3, #1
 8000690:	75fb      	strb	r3, [r7, #23]
	/* Status writing in flash memory */
	uint8_t Status = FLASH_PAYLOAD_WRITING_FAILED;
 8000692:	2300      	movs	r3, #0
 8000694:	75bb      	strb	r3, [r7, #22]
	/* The number of words in data appliction sections */
	uint16_t PayLoad_Counter = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	82bb      	strh	r3, [r7, #20]
	/* Writing steps */
	/* Open flash memory */
	HAL_Status = HAL_FLASH_Unlock();
 800069a:	f000 fcdf 	bl	800105c <HAL_FLASH_Unlock>
 800069e:	4603      	mov	r3, r0
 80006a0:	75fb      	strb	r3, [r7, #23]
	/* If it opened */
	if (HAL_Status == HAL_OK) {
 80006a2:	7dfb      	ldrb	r3, [r7, #23]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d124      	bne.n	80006f2 <Flash_Memory_Write_Payload+0x72>
		/* Transfer the data sections word by word */
		for (PayLoad_Counter = 0; PayLoad_Counter < Payload_Len;
 80006a8:	2300      	movs	r3, #0
 80006aa:	82bb      	strh	r3, [r7, #20]
 80006ac:	e01c      	b.n	80006e8 <Flash_Memory_Write_Payload+0x68>
				PayLoad_Counter += 4) {
			HAL_Status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 80006ae:	8aba      	ldrh	r2, [r7, #20]
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	18d1      	adds	r1, r2, r3
					Payload_Start_Address + PayLoad_Counter,
					Host_PayLoad[PayLoad_Counter]);
 80006b4:	8abb      	ldrh	r3, [r7, #20]
 80006b6:	68fa      	ldr	r2, [r7, #12]
 80006b8:	4413      	add	r3, r2
 80006ba:	781b      	ldrb	r3, [r3, #0]
			HAL_Status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	2200      	movs	r2, #0
 80006c0:	461c      	mov	r4, r3
 80006c2:	4615      	mov	r5, r2
 80006c4:	4622      	mov	r2, r4
 80006c6:	462b      	mov	r3, r5
 80006c8:	2002      	movs	r0, #2
 80006ca:	f000 fc57 	bl	8000f7c <HAL_FLASH_Program>
 80006ce:	4603      	mov	r3, r0
 80006d0:	75fb      	strb	r3, [r7, #23]
			/* if function can't write on memory Status be failed */
			if (HAL_Status != HAL_OK) {
 80006d2:	7dfb      	ldrb	r3, [r7, #23]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d002      	beq.n	80006de <Flash_Memory_Write_Payload+0x5e>
				Status = FLASH_PAYLOAD_WRITING_FAILED;
 80006d8:	2300      	movs	r3, #0
 80006da:	75bb      	strb	r3, [r7, #22]
				break;
 80006dc:	e00b      	b.n	80006f6 <Flash_Memory_Write_Payload+0x76>
			} else {
				/* All iterations, It can write on memory make status passed */
				Status = FLASH_PAYLOAD_WRITING_PASSED;
 80006de:	2301      	movs	r3, #1
 80006e0:	75bb      	strb	r3, [r7, #22]
				PayLoad_Counter += 4) {
 80006e2:	8abb      	ldrh	r3, [r7, #20]
 80006e4:	3304      	adds	r3, #4
 80006e6:	82bb      	strh	r3, [r7, #20]
		for (PayLoad_Counter = 0; PayLoad_Counter < Payload_Len;
 80006e8:	8aba      	ldrh	r2, [r7, #20]
 80006ea:	88fb      	ldrh	r3, [r7, #6]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d3de      	bcc.n	80006ae <Flash_Memory_Write_Payload+0x2e>
 80006f0:	e001      	b.n	80006f6 <Flash_Memory_Write_Payload+0x76>
			}
		}
	} else {
		/* If it can't open memory make status failed */
		Status = FLASH_PAYLOAD_WRITING_FAILED;
 80006f2:	2300      	movs	r3, #0
 80006f4:	75bb      	strb	r3, [r7, #22]
	}
	/* If all status is OK so It will lock memory */
	if (Status == FLASH_PAYLOAD_WRITING_PASSED && HAL_Status == HAL_OK) {
 80006f6:	7dbb      	ldrb	r3, [r7, #22]
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	d10f      	bne.n	800071c <Flash_Memory_Write_Payload+0x9c>
 80006fc:	7dfb      	ldrb	r3, [r7, #23]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d10c      	bne.n	800071c <Flash_Memory_Write_Payload+0x9c>
		HAL_Status = HAL_FLASH_Lock();
 8000702:	f000 fcd1 	bl	80010a8 <HAL_FLASH_Lock>
 8000706:	4603      	mov	r3, r0
 8000708:	75fb      	strb	r3, [r7, #23]
		/* Check if it locked it true or not */
		if (HAL_Status != HAL_OK) {
 800070a:	7dfb      	ldrb	r3, [r7, #23]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d002      	beq.n	8000716 <Flash_Memory_Write_Payload+0x96>
			Status = FLASH_PAYLOAD_WRITING_FAILED;
 8000710:	2300      	movs	r3, #0
 8000712:	75bb      	strb	r3, [r7, #22]
		if (HAL_Status != HAL_OK) {
 8000714:	e004      	b.n	8000720 <Flash_Memory_Write_Payload+0xa0>
		} else {
			Status = FLASH_PAYLOAD_WRITING_PASSED;
 8000716:	2301      	movs	r3, #1
 8000718:	75bb      	strb	r3, [r7, #22]
		if (HAL_Status != HAL_OK) {
 800071a:	e001      	b.n	8000720 <Flash_Memory_Write_Payload+0xa0>
		}
	} else {
		/* If one of status is not OK so It will make returned status with failed */
		Status = FLASH_PAYLOAD_WRITING_FAILED;
 800071c:	2300      	movs	r3, #0
 800071e:	75bb      	strb	r3, [r7, #22]
	}
	return Status;
 8000720:	7dbb      	ldrb	r3, [r7, #22]
}
 8000722:	4618      	mov	r0, r3
 8000724:	3718      	adds	r7, #24
 8000726:	46bd      	mov	sp, r7
 8000728:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800072c <Bootloader_Memory_Write>:

static void Bootloader_Memory_Write (uint8_t *Host_Buffer){
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
	/* used to define the beginning of CRC address in buffer */
	//uint16_t Host_CMD_Packet_Len = 0 ;
	/* Used to get CRC data */
	//uint32_t Host_CRC32 = 0 ;
	/* Base address that you will write on */
	uint32_t Host_Address = 0 ;
 8000734:	2300      	movs	r3, #0
 8000736:	60fb      	str	r3, [r7, #12]
	/* Number of bytes that will be sent */
	uint8_t PayLoad_Len = 0 ;
 8000738:	2300      	movs	r3, #0
 800073a:	72fb      	strb	r3, [r7, #11]
	/* The status of input address from the host */
	uint8_t Address_Verfication = ADDRESS_IS_INVALID ;
 800073c:	2300      	movs	r3, #0
 800073e:	72bb      	strb	r3, [r7, #10]
	/* Status writing in flash memory */
	uint8_t Status = FLASH_PAYLOAD_WRITING_FAILED ;
 8000740:	2300      	movs	r3, #0
 8000742:	727b      	strb	r3, [r7, #9]
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
	BL_PrintMassage ("Write data into different memory ");
 8000744:	4815      	ldr	r0, [pc, #84]	; (800079c <Bootloader_Memory_Write+0x70>)
 8000746:	f000 f8af 	bl	80008a8 <BL_PrintMassage>
		BL_PrintMassage("CRC is passed\r\n");
#endif*/
		/* Send acknowledge to host */
		//Bootloader_Send_ACK(1);
		/* Read Base address */
		Host_Address = *((uint32_t *)(&Host_Buffer[2])) ;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000750:	60fb      	str	r3, [r7, #12]
		/* Extract the size of new data in memory */
		PayLoad_Len = Host_Buffer[6] ;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	799b      	ldrb	r3, [r3, #6]
 8000756:	72fb      	strb	r3, [r7, #11]
		/* Verify the given address */
		Address_Verfication = Host_Jump_Address_Verfication(Host_Address);
 8000758:	68f8      	ldr	r0, [r7, #12]
 800075a:	f7ff fe69 	bl	8000430 <Host_Jump_Address_Verfication>
 800075e:	4603      	mov	r3, r0
 8000760:	72bb      	strb	r3, [r7, #10]
		if (Address_Verfication == ADDRESS_IS_VALID){
 8000762:	7abb      	ldrb	r3, [r7, #10]
 8000764:	2b01      	cmp	r3, #1
 8000766:	d10f      	bne.n	8000788 <Bootloader_Memory_Write+0x5c>
			/* Write on memory */
			Status = Flash_Memory_Write_Payload((uint8_t *)&Host_Buffer[7], Host_Address, PayLoad_Len);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	3307      	adds	r3, #7
 800076c:	7afa      	ldrb	r2, [r7, #11]
 800076e:	b292      	uxth	r2, r2
 8000770:	68f9      	ldr	r1, [r7, #12]
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff ff84 	bl	8000680 <Flash_Memory_Write_Payload>
 8000778:	4603      	mov	r3, r0
 800077a:	727b      	strb	r3, [r7, #9]
			/* Report the writing state */
			Bootloader_Send_Data_To_Host((uint8_t *)(&Status),1);
 800077c:	f107 0309 	add.w	r3, r7, #9
 8000780:	2101      	movs	r1, #1
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff fd8e 	bl	80002a4 <Bootloader_Send_Data_To_Host>
		}
		else {
			/* Nothing */
		}
		/* Report the address selection state */
		Bootloader_Send_Data_To_Host((uint8_t *)(&Address_Verfication),1);
 8000788:	f107 030a 	add.w	r3, r7, #10
 800078c:	2101      	movs	r1, #1
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff fd88 	bl	80002a4 <Bootloader_Send_Data_To_Host>
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
		BL_PrintMassage("CRC is failed\r\n");
#endif
		Bootloader_Send_NACK();
	}*/
}
 8000794:	bf00      	nop
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	08003874 	.word	0x08003874

080007a0 <Change_ROP_Level>:

static uint8_t Change_ROP_Level(uint8_t ROP_Level){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08a      	sub	sp, #40	; 0x28
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	71fb      	strb	r3, [r7, #7]
	/* Status of function calling */
	HAL_StatusTypeDef HAL_Status = HAL_ERROR ;
 80007aa:	2301      	movs	r3, #1
 80007ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	/* Parameter[in] of function that configure level of protection */
	FLASH_OBProgramInitTypeDef FLASH_OBProgmInit;
	/* Status of this function */
	uint8_t ROP_Level_Status = ROP_LEVEL_CHANGE_INVALID ;
 80007b0:	2300      	movs	r3, #0
 80007b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* open flash option control registers acess */
	HAL_Status = HAL_FLASH_OB_Unlock();
 80007b6:	f000 fc87 	bl	80010c8 <HAL_FLASH_OB_Unlock>
 80007ba:	4603      	mov	r3, r0
 80007bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	/* check if it is not opened correctly */
	if (HAL_Status != HAL_OK){
 80007c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d003      	beq.n	80007d0 <Change_ROP_Level+0x30>
		ROP_Level_Status = ROP_LEVEL_CHANGE_INVALID ;
 80007c8:	2300      	movs	r3, #0
 80007ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80007ce:	e02c      	b.n	800082a <Change_ROP_Level+0x8a>
	}
	else {
		/* Initialize configurations of parameter[in] for configure level of protection */
		FLASH_OBProgmInit.OptionType = OPTIONBYTE_RDP ; /*!<RDP option byte configuration*/
 80007d0:	2302      	movs	r3, #2
 80007d2:	60bb      	str	r3, [r7, #8]
		FLASH_OBProgmInit.Banks      = FLASH_BANK_1 ;
 80007d4:	2301      	movs	r3, #1
 80007d6:	617b      	str	r3, [r7, #20]
		FLASH_OBProgmInit.RDPLevel   = (uint32_t)ROP_Level ;
 80007d8:	79fb      	ldrb	r3, [r7, #7]
 80007da:	763b      	strb	r3, [r7, #24]
		/* Program option bytes */
		HAL_Status = HAL_FLASHEx_OBProgram(&FLASH_OBProgmInit);
 80007dc:	f107 0308 	add.w	r3, r7, #8
 80007e0:	4618      	mov	r0, r3
 80007e2:	f000 fe03 	bl	80013ec <HAL_FLASHEx_OBProgram>
 80007e6:	4603      	mov	r3, r0
 80007e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		/* Check that it was failed */
		if (HAL_Status != HAL_OK){
 80007ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d008      	beq.n	8000806 <Change_ROP_Level+0x66>
			/* Locking the flash option control registers access */
			HAL_Status = HAL_FLASH_OB_Lock();
 80007f4:	f000 fc84 	bl	8001100 <HAL_FLASH_OB_Lock>
 80007f8:	4603      	mov	r3, r0
 80007fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ROP_Level_Status = ROP_LEVEL_CHANGE_INVALID ;
 80007fe:	2300      	movs	r3, #0
 8000800:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000804:	e011      	b.n	800082a <Change_ROP_Level+0x8a>
		}
		else {
			/* Launch the option byte loading */
			HAL_FLASH_OB_Launch();
 8000806:	f000 fc8b 	bl	8001120 <HAL_FLASH_OB_Launch>
			/* Locking the flash option control registers access */
			HAL_Status = HAL_FLASH_OB_Lock();
 800080a:	f000 fc79 	bl	8001100 <HAL_FLASH_OB_Lock>
 800080e:	4603      	mov	r3, r0
 8000810:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			/* Check that it was failed */
			if (HAL_Status != HAL_OK){
 8000814:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000818:	2b00      	cmp	r3, #0
 800081a:	d003      	beq.n	8000824 <Change_ROP_Level+0x84>
				ROP_Level_Status = ROP_LEVEL_CHANGE_INVALID ;
 800081c:	2300      	movs	r3, #0
 800081e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000822:	e002      	b.n	800082a <Change_ROP_Level+0x8a>
			}
			else {
				/* Locking the flash option control registers access */
				ROP_Level_Status = ROP_LEVEL_CHANGE_VALID;
 8000824:	2301      	movs	r3, #1
 8000826:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		}
	}
	return ROP_Level_Status ;
 800082a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800082e:	4618      	mov	r0, r3
 8000830:	3728      	adds	r7, #40	; 0x28
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <Bootloader_Change_Read_Protection_Level>:

static void Bootloader_Change_Read_Protection_Level(uint8_t *Host_Buffer){
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	/* used to define the beginning of CRC address in buffer */
	//uint16_t Host_CMD_Packet_Len = 0 ;
	/* Used to get CRC data */
	//uint32_t Host_CRC32 = 0 ;
	/* Status of this function */
	uint8_t ROP_Level_Status = ROP_LEVEL_CHANGE_INVALID ;
 8000840:	2300      	movs	r3, #0
 8000842:	73bb      	strb	r3, [r7, #14]
	/* read protection level */
	 uint8_t ROP_Level = 0 ;
 8000844:	2300      	movs	r3, #0
 8000846:	73fb      	strb	r3, [r7, #15]

#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
	BL_PrintMassage ("Change the flash protection out level \r\n ");
 8000848:	4816      	ldr	r0, [pc, #88]	; (80008a4 <Bootloader_Change_Read_Protection_Level+0x6c>)
 800084a:	f000 f82d 	bl	80008a8 <BL_PrintMassage>
		BL_PrintMassage("CRC is passed\r\n");
#endif*/
		/* Report acknowledge message*/
		//Bootloader_Send_ACK(1);
		/* Assign read protection level from buffer */
		ROP_Level = Host_Buffer[2] ;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	789b      	ldrb	r3, [r3, #2]
 8000852:	73fb      	strb	r3, [r7, #15]
		/* reject operation if it was level 2 protection */
		if (ROP_Level == 2){
 8000854:	7bfb      	ldrb	r3, [r7, #15]
 8000856:	2b02      	cmp	r3, #2
 8000858:	d102      	bne.n	8000860 <Bootloader_Change_Read_Protection_Level+0x28>
			ROP_Level_Status = ROP_LEVEL_CHANGE_INVALID ;
 800085a:	2300      	movs	r3, #0
 800085c:	73bb      	strb	r3, [r7, #14]
 800085e:	e017      	b.n	8000890 <Bootloader_Change_Read_Protection_Level+0x58>
		}
		else {
			if ( ROP_Level == 0 ){
 8000860:	7bfb      	ldrb	r3, [r7, #15]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d104      	bne.n	8000870 <Bootloader_Change_Read_Protection_Level+0x38>
				/* 0xAA --> RDP_Level_0 */
				ROP_Level = 0xAA ;
 8000866:	23aa      	movs	r3, #170	; 0xaa
 8000868:	73fb      	strb	r3, [r7, #15]
				ROP_Level_Status = ROP_LEVEL_CHANGE_VALID ;
 800086a:	2301      	movs	r3, #1
 800086c:	73bb      	strb	r3, [r7, #14]
 800086e:	e009      	b.n	8000884 <Bootloader_Change_Read_Protection_Level+0x4c>
			}
			else if ( ROP_Level == 1 ) {
 8000870:	7bfb      	ldrb	r3, [r7, #15]
 8000872:	2b01      	cmp	r3, #1
 8000874:	d104      	bne.n	8000880 <Bootloader_Change_Read_Protection_Level+0x48>
				/* 0x55 --> RDP_Level_1 */
				ROP_Level = 0x55 ;
 8000876:	2355      	movs	r3, #85	; 0x55
 8000878:	73fb      	strb	r3, [r7, #15]
				ROP_Level_Status = ROP_LEVEL_CHANGE_VALID ;
 800087a:	2301      	movs	r3, #1
 800087c:	73bb      	strb	r3, [r7, #14]
 800087e:	e001      	b.n	8000884 <Bootloader_Change_Read_Protection_Level+0x4c>
			}
			else {
				ROP_Level_Status = ROP_LEVEL_CHANGE_INVALID ;
 8000880:	2300      	movs	r3, #0
 8000882:	73bb      	strb	r3, [r7, #14]
			}
			/* Request change the read protection level */
			ROP_Level_Status = Change_ROP_Level( (uint8_t) ROP_Level);
 8000884:	7bfb      	ldrb	r3, [r7, #15]
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff ff8a 	bl	80007a0 <Change_ROP_Level>
 800088c:	4603      	mov	r3, r0
 800088e:	73bb      	strb	r3, [r7, #14]
		}
		Bootloader_Send_Data_To_Host((uint8_t *)(&ROP_Level_Status),1);
 8000890:	f107 030e 	add.w	r3, r7, #14
 8000894:	2101      	movs	r1, #1
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff fd04 	bl	80002a4 <Bootloader_Send_Data_To_Host>
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
		BL_PrintMassage("CRC is failed\r\n");
#endif
		Bootloader_Send_NACK();
	}*/
}
 800089c:	bf00      	nop
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	08003898 	.word	0x08003898

080008a8 <BL_PrintMassage>:

void BL_PrintMassage(char *format, ...) {
 80008a8:	b40f      	push	{r0, r1, r2, r3}
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b09a      	sub	sp, #104	; 0x68
 80008ae:	af00      	add	r7, sp, #0
	char Message[100] = { 0 };
 80008b0:	2300      	movs	r3, #0
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	f107 0308 	add.w	r3, r7, #8
 80008b8:	2260      	movs	r2, #96	; 0x60
 80008ba:	2100      	movs	r1, #0
 80008bc:	4618      	mov	r0, r3
 80008be:	f002 f94d 	bl	8002b5c <memset>
	va_list args;
	/* Enable acess to the variable arguments */
	va_start(args, format);
 80008c2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80008c6:	603b      	str	r3, [r7, #0]
	/* Write the formatted data from variable argument list to string */
	vsprintf(Message, format, args);
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	683a      	ldr	r2, [r7, #0]
 80008cc:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80008ce:	4618      	mov	r0, r3
 80008d0:	f002 f93a 	bl	8002b48 <vsiprintf>
#if  BL_DEBUG_METHOD == BL_ENABLE_UART_DEBUG_MESSAGE
	/* Transmit the formatted data through the defined UART */
	HAL_UART_Transmit(BL_DEBUG_UART, (uint8_t*) Message, (uint16_t)sizeof(Message),
 80008d4:	1d39      	adds	r1, r7, #4
 80008d6:	f04f 33ff 	mov.w	r3, #4294967295
 80008da:	2264      	movs	r2, #100	; 0x64
 80008dc:	4804      	ldr	r0, [pc, #16]	; (80008f0 <BL_PrintMassage+0x48>)
 80008de:	f001 ff0b 	bl	80026f8 <HAL_UART_Transmit>
#elif  BL_DEBUG_METHOD == BL_ENABLE_ETHERNET_DEBUG_MESSAGE
	/* Transmit the formatted data through the defined ETHERNET */
#endif
	/* Perform cleanup for an ap object initialized by a call to va_start */
	va_end(args);
}
 80008e2:	bf00      	nop
 80008e4:	3768      	adds	r7, #104	; 0x68
 80008e6:	46bd      	mov	sp, r7
 80008e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008ec:	b004      	add	sp, #16
 80008ee:	4770      	bx	lr
 80008f0:	20000160 	.word	0x20000160

080008f4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <MX_CRC_Init+0x20>)
 80008fa:	4a07      	ldr	r2, [pc, #28]	; (8000918 <MX_CRC_Init+0x24>)
 80008fc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80008fe:	4805      	ldr	r0, [pc, #20]	; (8000914 <MX_CRC_Init+0x20>)
 8000900:	f000 fb1f 	bl	8000f42 <HAL_CRC_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800090a:	f000 f896 	bl	8000a3a <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000154 	.word	0x20000154
 8000918:	40023000 	.word	0x40023000

0800091c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800091c:	b480      	push	{r7}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a09      	ldr	r2, [pc, #36]	; (8000950 <HAL_CRC_MspInit+0x34>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d10b      	bne.n	8000946 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <HAL_CRC_MspInit+0x38>)
 8000930:	695b      	ldr	r3, [r3, #20]
 8000932:	4a08      	ldr	r2, [pc, #32]	; (8000954 <HAL_CRC_MspInit+0x38>)
 8000934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000938:	6153      	str	r3, [r2, #20]
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <HAL_CRC_MspInit+0x38>)
 800093c:	695b      	ldr	r3, [r3, #20]
 800093e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000946:	bf00      	nop
 8000948:	3714      	adds	r7, #20
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr
 8000950:	40023000 	.word	0x40023000
 8000954:	40021000 	.word	0x40021000

08000958 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800095e:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <MX_GPIO_Init+0x40>)
 8000960:	699b      	ldr	r3, [r3, #24]
 8000962:	4a0d      	ldr	r2, [pc, #52]	; (8000998 <MX_GPIO_Init+0x40>)
 8000964:	f043 0320 	orr.w	r3, r3, #32
 8000968:	6193      	str	r3, [r2, #24]
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <MX_GPIO_Init+0x40>)
 800096c:	699b      	ldr	r3, [r3, #24]
 800096e:	f003 0320 	and.w	r3, r3, #32
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <MX_GPIO_Init+0x40>)
 8000978:	699b      	ldr	r3, [r3, #24]
 800097a:	4a07      	ldr	r2, [pc, #28]	; (8000998 <MX_GPIO_Init+0x40>)
 800097c:	f043 0304 	orr.w	r3, r3, #4
 8000980:	6193      	str	r3, [r2, #24]
 8000982:	4b05      	ldr	r3, [pc, #20]	; (8000998 <MX_GPIO_Init+0x40>)
 8000984:	699b      	ldr	r3, [r3, #24]
 8000986:	f003 0304 	and.w	r3, r3, #4
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	683b      	ldr	r3, [r7, #0]

}
 800098e:	bf00      	nop
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr
 8000998:	40021000 	.word	0x40021000

0800099c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a0:	f000 f970 	bl	8000c84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a4:	f000 f809 	bl	80009ba <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a8:	f7ff ffd6 	bl	8000958 <MX_GPIO_Init>
  MX_CRC_Init();
 80009ac:	f7ff ffa2 	bl	80008f4 <MX_CRC_Init>
  MX_USART2_UART_Init();
 80009b0:	f000 f8ce 	bl	8000b50 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BL_UART_Fetch_Host_Commend();
 80009b4:	f7ff fbca 	bl	800014c <BL_UART_Fetch_Host_Commend>
 80009b8:	e7fc      	b.n	80009b4 <main+0x18>

080009ba <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b090      	sub	sp, #64	; 0x40
 80009be:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c0:	f107 0318 	add.w	r3, r7, #24
 80009c4:	2228      	movs	r2, #40	; 0x28
 80009c6:	2100      	movs	r1, #0
 80009c8:	4618      	mov	r0, r3
 80009ca:	f002 f8c7 	bl	8002b5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009dc:	2302      	movs	r3, #2
 80009de:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009e0:	2301      	movs	r3, #1
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009e4:	2310      	movs	r3, #16
 80009e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e8:	2302      	movs	r3, #2
 80009ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80009ec:	2300      	movs	r3, #0
 80009ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80009f0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80009f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f6:	f107 0318 	add.w	r3, r7, #24
 80009fa:	4618      	mov	r0, r3
 80009fc:	f001 fa1c 	bl	8001e38 <HAL_RCC_OscConfig>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000a06:	f000 f818 	bl	8000a3a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a0a:	230f      	movs	r3, #15
 8000a0c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a16:	2300      	movs	r3, #0
 8000a18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	2100      	movs	r1, #0
 8000a22:	4618      	mov	r0, r3
 8000a24:	f001 fc8a 	bl	800233c <HAL_RCC_ClockConfig>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000a2e:	f000 f804 	bl	8000a3a <Error_Handler>
  }
}
 8000a32:	bf00      	nop
 8000a34:	3740      	adds	r7, #64	; 0x40
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000a3e:	b672      	cpsid	i
}
 8000a40:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a42:	e7fe      	b.n	8000a42 <Error_Handler+0x8>

08000a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <HAL_MspInit+0x40>)
 8000a4c:	699b      	ldr	r3, [r3, #24]
 8000a4e:	4a0d      	ldr	r2, [pc, #52]	; (8000a84 <HAL_MspInit+0x40>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6193      	str	r3, [r2, #24]
 8000a56:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <HAL_MspInit+0x40>)
 8000a58:	699b      	ldr	r3, [r3, #24]
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a62:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <HAL_MspInit+0x40>)
 8000a64:	69db      	ldr	r3, [r3, #28]
 8000a66:	4a07      	ldr	r2, [pc, #28]	; (8000a84 <HAL_MspInit+0x40>)
 8000a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a6c:	61d3      	str	r3, [r2, #28]
 8000a6e:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <HAL_MspInit+0x40>)
 8000a70:	69db      	ldr	r3, [r3, #28]
 8000a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr
 8000a84:	40021000 	.word	0x40021000

08000a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <NMI_Handler+0x4>

08000a8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <HardFault_Handler+0x4>

08000a94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <MemManage_Handler+0x4>

08000a9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <BusFault_Handler+0x4>

08000aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <UsageFault_Handler+0x4>

08000aa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bc80      	pop	{r7}
 8000ab0:	4770      	bx	lr

08000ab2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bc80      	pop	{r7}
 8000abc:	4770      	bx	lr

08000abe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc80      	pop	{r7}
 8000ac8:	4770      	bx	lr

08000aca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ace:	f000 f91f 	bl	8000d10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b086      	sub	sp, #24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ae0:	4a14      	ldr	r2, [pc, #80]	; (8000b34 <_sbrk+0x5c>)
 8000ae2:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <_sbrk+0x60>)
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aec:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <_sbrk+0x64>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d102      	bne.n	8000afa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000af4:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <_sbrk+0x64>)
 8000af6:	4a12      	ldr	r2, [pc, #72]	; (8000b40 <_sbrk+0x68>)
 8000af8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <_sbrk+0x64>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4413      	add	r3, r2
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d207      	bcs.n	8000b18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b08:	f002 f830 	bl	8002b6c <__errno>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	220c      	movs	r2, #12
 8000b10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b12:	f04f 33ff 	mov.w	r3, #4294967295
 8000b16:	e009      	b.n	8000b2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <_sbrk+0x64>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b1e:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <_sbrk+0x64>)
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4413      	add	r3, r2
 8000b26:	4a05      	ldr	r2, [pc, #20]	; (8000b3c <_sbrk+0x64>)
 8000b28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3718      	adds	r7, #24
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20005000 	.word	0x20005000
 8000b38:	00000400 	.word	0x00000400
 8000b3c:	2000015c 	.word	0x2000015c
 8000b40:	20000318 	.word	0x20000318

08000b44 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr

08000b50 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <MX_USART2_UART_Init+0x4c>)
 8000b56:	4a12      	ldr	r2, [pc, #72]	; (8000ba0 <MX_USART2_UART_Init+0x50>)
 8000b58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b5a:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <MX_USART2_UART_Init+0x4c>)
 8000b5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <MX_USART2_UART_Init+0x4c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <MX_USART2_UART_Init+0x4c>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <MX_USART2_UART_Init+0x4c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b74:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <MX_USART2_UART_Init+0x4c>)
 8000b76:	220c      	movs	r2, #12
 8000b78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7a:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <MX_USART2_UART_Init+0x4c>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <MX_USART2_UART_Init+0x4c>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b86:	4805      	ldr	r0, [pc, #20]	; (8000b9c <MX_USART2_UART_Init+0x4c>)
 8000b88:	f001 fd66 	bl	8002658 <HAL_UART_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b92:	f7ff ff52 	bl	8000a3a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000160 	.word	0x20000160
 8000ba0:	40004400 	.word	0x40004400

08000ba4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b088      	sub	sp, #32
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 0310 	add.w	r3, r7, #16
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a1b      	ldr	r2, [pc, #108]	; (8000c2c <HAL_UART_MspInit+0x88>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d12f      	bne.n	8000c24 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bc4:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <HAL_UART_MspInit+0x8c>)
 8000bc6:	69db      	ldr	r3, [r3, #28]
 8000bc8:	4a19      	ldr	r2, [pc, #100]	; (8000c30 <HAL_UART_MspInit+0x8c>)
 8000bca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bce:	61d3      	str	r3, [r2, #28]
 8000bd0:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <HAL_UART_MspInit+0x8c>)
 8000bd2:	69db      	ldr	r3, [r3, #28]
 8000bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bdc:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <HAL_UART_MspInit+0x8c>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	4a13      	ldr	r2, [pc, #76]	; (8000c30 <HAL_UART_MspInit+0x8c>)
 8000be2:	f043 0304 	orr.w	r3, r3, #4
 8000be6:	6193      	str	r3, [r2, #24]
 8000be8:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <HAL_UART_MspInit+0x8c>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	f003 0304 	and.w	r3, r3, #4
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bf4:	2304      	movs	r3, #4
 8000bf6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c00:	f107 0310 	add.w	r3, r7, #16
 8000c04:	4619      	mov	r1, r3
 8000c06:	480b      	ldr	r0, [pc, #44]	; (8000c34 <HAL_UART_MspInit+0x90>)
 8000c08:	f000 fef8 	bl	80019fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c0c:	2308      	movs	r3, #8
 8000c0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c18:	f107 0310 	add.w	r3, r7, #16
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4805      	ldr	r0, [pc, #20]	; (8000c34 <HAL_UART_MspInit+0x90>)
 8000c20:	f000 feec 	bl	80019fc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c24:	bf00      	nop
 8000c26:	3720      	adds	r7, #32
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40004400 	.word	0x40004400
 8000c30:	40021000 	.word	0x40021000
 8000c34:	40010800 	.word	0x40010800

08000c38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c38:	f7ff ff84 	bl	8000b44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c3c:	480b      	ldr	r0, [pc, #44]	; (8000c6c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c3e:	490c      	ldr	r1, [pc, #48]	; (8000c70 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c40:	4a0c      	ldr	r2, [pc, #48]	; (8000c74 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c44:	e002      	b.n	8000c4c <LoopCopyDataInit>

08000c46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c4a:	3304      	adds	r3, #4

08000c4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c50:	d3f9      	bcc.n	8000c46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c52:	4a09      	ldr	r2, [pc, #36]	; (8000c78 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c54:	4c09      	ldr	r4, [pc, #36]	; (8000c7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c58:	e001      	b.n	8000c5e <LoopFillZerobss>

08000c5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c5c:	3204      	adds	r2, #4

08000c5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c60:	d3fb      	bcc.n	8000c5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c62:	f001 ff89 	bl	8002b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c66:	f7ff fe99 	bl	800099c <main>
  bx lr
 8000c6a:	4770      	bx	lr
  ldr r0, =_sdata
 8000c6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c70:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000c74:	0800392c 	.word	0x0800392c
  ldr r2, =_sbss
 8000c78:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c7c:	20000318 	.word	0x20000318

08000c80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c80:	e7fe      	b.n	8000c80 <ADC1_2_IRQHandler>
	...

08000c84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c88:	4b08      	ldr	r3, [pc, #32]	; (8000cac <HAL_Init+0x28>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a07      	ldr	r2, [pc, #28]	; (8000cac <HAL_Init+0x28>)
 8000c8e:	f043 0310 	orr.w	r3, r3, #16
 8000c92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c94:	2003      	movs	r0, #3
 8000c96:	f000 f91d 	bl	8000ed4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c9a:	200f      	movs	r0, #15
 8000c9c:	f000 f808 	bl	8000cb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca0:	f7ff fed0 	bl	8000a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40022000 	.word	0x40022000

08000cb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cb8:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <HAL_InitTick+0x54>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <HAL_InitTick+0x58>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 f92b 	bl	8000f2a <HAL_SYSTICK_Config>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e00e      	b.n	8000cfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2b0f      	cmp	r3, #15
 8000ce2:	d80a      	bhi.n	8000cfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	6879      	ldr	r1, [r7, #4]
 8000ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cec:	f000 f8fd 	bl	8000eea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf0:	4a06      	ldr	r2, [pc, #24]	; (8000d0c <HAL_InitTick+0x5c>)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e000      	b.n	8000cfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000010 	.word	0x20000010
 8000d08:	20000018 	.word	0x20000018
 8000d0c:	20000014 	.word	0x20000014

08000d10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d14:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <HAL_IncTick+0x1c>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <HAL_IncTick+0x20>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4413      	add	r3, r2
 8000d20:	4a03      	ldr	r2, [pc, #12]	; (8000d30 <HAL_IncTick+0x20>)
 8000d22:	6013      	str	r3, [r2, #0]
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr
 8000d2c:	20000018 	.word	0x20000018
 8000d30:	200001a8 	.word	0x200001a8

08000d34 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  return uwTick;
 8000d38:	4b02      	ldr	r3, [pc, #8]	; (8000d44 <HAL_GetTick+0x10>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bc80      	pop	{r7}
 8000d42:	4770      	bx	lr
 8000d44:	200001a8 	.word	0x200001a8

08000d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d58:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <__NVIC_SetPriorityGrouping+0x44>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5e:	68ba      	ldr	r2, [r7, #8]
 8000d60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d64:	4013      	ands	r3, r2
 8000d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d7a:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <__NVIC_SetPriorityGrouping+0x44>)
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	60d3      	str	r3, [r2, #12]
}
 8000d80:	bf00      	nop
 8000d82:	3714      	adds	r7, #20
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bc80      	pop	{r7}
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d94:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <__NVIC_GetPriorityGrouping+0x18>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	0a1b      	lsrs	r3, r3, #8
 8000d9a:	f003 0307 	and.w	r3, r3, #7
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bc80      	pop	{r7}
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	6039      	str	r1, [r7, #0]
 8000db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	db0a      	blt.n	8000dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	490c      	ldr	r1, [pc, #48]	; (8000df8 <__NVIC_SetPriority+0x4c>)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	0112      	lsls	r2, r2, #4
 8000dcc:	b2d2      	uxtb	r2, r2
 8000dce:	440b      	add	r3, r1
 8000dd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd4:	e00a      	b.n	8000dec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	b2da      	uxtb	r2, r3
 8000dda:	4908      	ldr	r1, [pc, #32]	; (8000dfc <__NVIC_SetPriority+0x50>)
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	f003 030f 	and.w	r3, r3, #15
 8000de2:	3b04      	subs	r3, #4
 8000de4:	0112      	lsls	r2, r2, #4
 8000de6:	b2d2      	uxtb	r2, r2
 8000de8:	440b      	add	r3, r1
 8000dea:	761a      	strb	r2, [r3, #24]
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bc80      	pop	{r7}
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	e000e100 	.word	0xe000e100
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b089      	sub	sp, #36	; 0x24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	f1c3 0307 	rsb	r3, r3, #7
 8000e1a:	2b04      	cmp	r3, #4
 8000e1c:	bf28      	it	cs
 8000e1e:	2304      	movcs	r3, #4
 8000e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3304      	adds	r3, #4
 8000e26:	2b06      	cmp	r3, #6
 8000e28:	d902      	bls.n	8000e30 <NVIC_EncodePriority+0x30>
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	3b03      	subs	r3, #3
 8000e2e:	e000      	b.n	8000e32 <NVIC_EncodePriority+0x32>
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e34:	f04f 32ff 	mov.w	r2, #4294967295
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43da      	mvns	r2, r3
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	401a      	ands	r2, r3
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e48:	f04f 31ff 	mov.w	r1, #4294967295
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e52:	43d9      	mvns	r1, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e58:	4313      	orrs	r3, r2
         );
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3724      	adds	r7, #36	; 0x24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr

08000e64 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e68:	f3bf 8f4f 	dsb	sy
}
 8000e6c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <__NVIC_SystemReset+0x24>)
 8000e70:	68db      	ldr	r3, [r3, #12]
 8000e72:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000e76:	4904      	ldr	r1, [pc, #16]	; (8000e88 <__NVIC_SystemReset+0x24>)
 8000e78:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <__NVIC_SystemReset+0x28>)
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e7e:	f3bf 8f4f 	dsb	sy
}
 8000e82:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000e84:	bf00      	nop
 8000e86:	e7fd      	b.n	8000e84 <__NVIC_SystemReset+0x20>
 8000e88:	e000ed00 	.word	0xe000ed00
 8000e8c:	05fa0004 	.word	0x05fa0004

08000e90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ea0:	d301      	bcc.n	8000ea6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e00f      	b.n	8000ec6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <SysTick_Config+0x40>)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eae:	210f      	movs	r1, #15
 8000eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb4:	f7ff ff7a 	bl	8000dac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb8:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <SysTick_Config+0x40>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ebe:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <SysTick_Config+0x40>)
 8000ec0:	2207      	movs	r2, #7
 8000ec2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	e000e010 	.word	0xe000e010

08000ed4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f7ff ff33 	bl	8000d48 <__NVIC_SetPriorityGrouping>
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b086      	sub	sp, #24
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	60b9      	str	r1, [r7, #8]
 8000ef4:	607a      	str	r2, [r7, #4]
 8000ef6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000efc:	f7ff ff48 	bl	8000d90 <__NVIC_GetPriorityGrouping>
 8000f00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	68b9      	ldr	r1, [r7, #8]
 8000f06:	6978      	ldr	r0, [r7, #20]
 8000f08:	f7ff ff7a 	bl	8000e00 <NVIC_EncodePriority>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f12:	4611      	mov	r1, r2
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff ff49 	bl	8000dac <__NVIC_SetPriority>
}
 8000f1a:	bf00      	nop
 8000f1c:	3718      	adds	r7, #24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8000f26:	f7ff ff9d 	bl	8000e64 <__NVIC_SystemReset>

08000f2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f7ff ffac 	bl	8000e90 <SysTick_Config>
 8000f38:	4603      	mov	r3, r0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d101      	bne.n	8000f54 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e00e      	b.n	8000f72 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	795b      	ldrb	r3, [r3, #5]
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d105      	bne.n	8000f6a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2200      	movs	r2, #0
 8000f62:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff fcd9 	bl	800091c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f7e:	b087      	sub	sp, #28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000f96:	4b2f      	ldr	r3, [pc, #188]	; (8001054 <HAL_FLASH_Program+0xd8>)
 8000f98:	7e1b      	ldrb	r3, [r3, #24]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d101      	bne.n	8000fa2 <HAL_FLASH_Program+0x26>
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	e054      	b.n	800104c <HAL_FLASH_Program+0xd0>
 8000fa2:	4b2c      	ldr	r3, [pc, #176]	; (8001054 <HAL_FLASH_Program+0xd8>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000fa8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000fac:	f000 f8da 	bl	8001164 <FLASH_WaitForLastOperation>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8000fb4:	7dfb      	ldrb	r3, [r7, #23]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d144      	bne.n	8001044 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d102      	bne.n	8000fc6 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	757b      	strb	r3, [r7, #21]
 8000fc4:	e007      	b.n	8000fd6 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d102      	bne.n	8000fd2 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	757b      	strb	r3, [r7, #21]
 8000fd0:	e001      	b.n	8000fd6 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000fd2:	2304      	movs	r3, #4
 8000fd4:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	75bb      	strb	r3, [r7, #22]
 8000fda:	e02d      	b.n	8001038 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000fdc:	7dbb      	ldrb	r3, [r7, #22]
 8000fde:	005a      	lsls	r2, r3, #1
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	eb02 0c03 	add.w	ip, r2, r3
 8000fe6:	7dbb      	ldrb	r3, [r7, #22]
 8000fe8:	0119      	lsls	r1, r3, #4
 8000fea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fee:	f1c1 0620 	rsb	r6, r1, #32
 8000ff2:	f1a1 0020 	sub.w	r0, r1, #32
 8000ff6:	fa22 f401 	lsr.w	r4, r2, r1
 8000ffa:	fa03 f606 	lsl.w	r6, r3, r6
 8000ffe:	4334      	orrs	r4, r6
 8001000:	fa23 f000 	lsr.w	r0, r3, r0
 8001004:	4304      	orrs	r4, r0
 8001006:	fa23 f501 	lsr.w	r5, r3, r1
 800100a:	b2a3      	uxth	r3, r4
 800100c:	4619      	mov	r1, r3
 800100e:	4660      	mov	r0, ip
 8001010:	f000 f88c 	bl	800112c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001014:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001018:	f000 f8a4 	bl	8001164 <FLASH_WaitForLastOperation>
 800101c:	4603      	mov	r3, r0
 800101e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001020:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <HAL_FLASH_Program+0xdc>)
 8001022:	691b      	ldr	r3, [r3, #16]
 8001024:	4a0c      	ldr	r2, [pc, #48]	; (8001058 <HAL_FLASH_Program+0xdc>)
 8001026:	f023 0301 	bic.w	r3, r3, #1
 800102a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800102c:	7dfb      	ldrb	r3, [r7, #23]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d107      	bne.n	8001042 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8001032:	7dbb      	ldrb	r3, [r7, #22]
 8001034:	3301      	adds	r3, #1
 8001036:	75bb      	strb	r3, [r7, #22]
 8001038:	7dba      	ldrb	r2, [r7, #22]
 800103a:	7d7b      	ldrb	r3, [r7, #21]
 800103c:	429a      	cmp	r2, r3
 800103e:	d3cd      	bcc.n	8000fdc <HAL_FLASH_Program+0x60>
 8001040:	e000      	b.n	8001044 <HAL_FLASH_Program+0xc8>
      {
        break;
 8001042:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001044:	4b03      	ldr	r3, [pc, #12]	; (8001054 <HAL_FLASH_Program+0xd8>)
 8001046:	2200      	movs	r2, #0
 8001048:	761a      	strb	r2, [r3, #24]

  return status;
 800104a:	7dfb      	ldrb	r3, [r7, #23]
}
 800104c:	4618      	mov	r0, r3
 800104e:	371c      	adds	r7, #28
 8001050:	46bd      	mov	sp, r7
 8001052:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001054:	200001b0 	.word	0x200001b0
 8001058:	40022000 	.word	0x40022000

0800105c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001062:	2300      	movs	r3, #0
 8001064:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001066:	4b0d      	ldr	r3, [pc, #52]	; (800109c <HAL_FLASH_Unlock+0x40>)
 8001068:	691b      	ldr	r3, [r3, #16]
 800106a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800106e:	2b00      	cmp	r3, #0
 8001070:	d00d      	beq.n	800108e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001072:	4b0a      	ldr	r3, [pc, #40]	; (800109c <HAL_FLASH_Unlock+0x40>)
 8001074:	4a0a      	ldr	r2, [pc, #40]	; (80010a0 <HAL_FLASH_Unlock+0x44>)
 8001076:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001078:	4b08      	ldr	r3, [pc, #32]	; (800109c <HAL_FLASH_Unlock+0x40>)
 800107a:	4a0a      	ldr	r2, [pc, #40]	; (80010a4 <HAL_FLASH_Unlock+0x48>)
 800107c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800107e:	4b07      	ldr	r3, [pc, #28]	; (800109c <HAL_FLASH_Unlock+0x40>)
 8001080:	691b      	ldr	r3, [r3, #16]
 8001082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800108e:	79fb      	ldrb	r3, [r7, #7]
}
 8001090:	4618      	mov	r0, r3
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	40022000 	.word	0x40022000
 80010a0:	45670123 	.word	0x45670123
 80010a4:	cdef89ab 	.word	0xcdef89ab

080010a8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80010ac:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <HAL_FLASH_Lock+0x1c>)
 80010ae:	691b      	ldr	r3, [r3, #16]
 80010b0:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <HAL_FLASH_Lock+0x1c>)
 80010b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010b6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	46bd      	mov	sp, r7
 80010be:	bc80      	pop	{r7}
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	40022000 	.word	0x40022000

080010c8 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 80010cc:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <HAL_FLASH_OB_Unlock+0x2c>)
 80010ce:	691b      	ldr	r3, [r3, #16]
 80010d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d107      	bne.n	80010e8 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 80010d8:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_FLASH_OB_Unlock+0x2c>)
 80010da:	4a07      	ldr	r2, [pc, #28]	; (80010f8 <HAL_FLASH_OB_Unlock+0x30>)
 80010dc:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 80010de:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <HAL_FLASH_OB_Unlock+0x2c>)
 80010e0:	4a06      	ldr	r2, [pc, #24]	; (80010fc <HAL_FLASH_OB_Unlock+0x34>)
 80010e2:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 80010e4:	2300      	movs	r3, #0
 80010e6:	e000      	b.n	80010ea <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bc80      	pop	{r7}
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	40022000 	.word	0x40022000
 80010f8:	45670123 	.word	0x45670123
 80010fc:	cdef89ab 	.word	0xcdef89ab

08001100 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 8001104:	4b05      	ldr	r3, [pc, #20]	; (800111c <HAL_FLASH_OB_Lock+0x1c>)
 8001106:	691b      	ldr	r3, [r3, #16]
 8001108:	4a04      	ldr	r2, [pc, #16]	; (800111c <HAL_FLASH_OB_Lock+0x1c>)
 800110a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800110e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	40022000 	.word	0x40022000

08001120 <HAL_FLASH_OB_Launch>:
  * @brief  Launch the option byte loading.
  * @note   This function will reset automatically the MCU.
  * @retval None
  */
void HAL_FLASH_OB_Launch(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* Initiates a system reset request to launch the option byte loading */
  HAL_NVIC_SystemReset();
 8001124:	f7ff fefd 	bl	8000f22 <HAL_NVIC_SystemReset>
}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}

0800112c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	460b      	mov	r3, r1
 8001136:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001138:	4b08      	ldr	r3, [pc, #32]	; (800115c <FLASH_Program_HalfWord+0x30>)
 800113a:	2200      	movs	r2, #0
 800113c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800113e:	4b08      	ldr	r3, [pc, #32]	; (8001160 <FLASH_Program_HalfWord+0x34>)
 8001140:	691b      	ldr	r3, [r3, #16]
 8001142:	4a07      	ldr	r2, [pc, #28]	; (8001160 <FLASH_Program_HalfWord+0x34>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	887a      	ldrh	r2, [r7, #2]
 800114e:	801a      	strh	r2, [r3, #0]
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	200001b0 	.word	0x200001b0
 8001160:	40022000 	.word	0x40022000

08001164 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800116c:	f7ff fde2 	bl	8000d34 <HAL_GetTick>
 8001170:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001172:	e010      	b.n	8001196 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800117a:	d00c      	beq.n	8001196 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d007      	beq.n	8001192 <FLASH_WaitForLastOperation+0x2e>
 8001182:	f7ff fdd7 	bl	8000d34 <HAL_GetTick>
 8001186:	4602      	mov	r2, r0
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	429a      	cmp	r2, r3
 8001190:	d201      	bcs.n	8001196 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e025      	b.n	80011e2 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001196:	4b15      	ldr	r3, [pc, #84]	; (80011ec <FLASH_WaitForLastOperation+0x88>)
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d1e8      	bne.n	8001174 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80011a2:	4b12      	ldr	r3, [pc, #72]	; (80011ec <FLASH_WaitForLastOperation+0x88>)
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	f003 0320 	and.w	r3, r3, #32
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d002      	beq.n	80011b4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80011ae:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <FLASH_WaitForLastOperation+0x88>)
 80011b0:	2220      	movs	r2, #32
 80011b2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80011b4:	4b0d      	ldr	r3, [pc, #52]	; (80011ec <FLASH_WaitForLastOperation+0x88>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	f003 0310 	and.w	r3, r3, #16
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d10b      	bne.n	80011d8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80011c0:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <FLASH_WaitForLastOperation+0x88>)
 80011c2:	69db      	ldr	r3, [r3, #28]
 80011c4:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d105      	bne.n	80011d8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80011cc:	4b07      	ldr	r3, [pc, #28]	; (80011ec <FLASH_WaitForLastOperation+0x88>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d003      	beq.n	80011e0 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80011d8:	f000 f80a 	bl	80011f0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	e000      	b.n	80011e2 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40022000 	.word	0x40022000

080011f0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80011fa:	4b23      	ldr	r3, [pc, #140]	; (8001288 <FLASH_SetErrorCode+0x98>)
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	f003 0310 	and.w	r3, r3, #16
 8001202:	2b00      	cmp	r3, #0
 8001204:	d009      	beq.n	800121a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001206:	4b21      	ldr	r3, [pc, #132]	; (800128c <FLASH_SetErrorCode+0x9c>)
 8001208:	69db      	ldr	r3, [r3, #28]
 800120a:	f043 0302 	orr.w	r3, r3, #2
 800120e:	4a1f      	ldr	r2, [pc, #124]	; (800128c <FLASH_SetErrorCode+0x9c>)
 8001210:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f043 0310 	orr.w	r3, r3, #16
 8001218:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800121a:	4b1b      	ldr	r3, [pc, #108]	; (8001288 <FLASH_SetErrorCode+0x98>)
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	f003 0304 	and.w	r3, r3, #4
 8001222:	2b00      	cmp	r3, #0
 8001224:	d009      	beq.n	800123a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001226:	4b19      	ldr	r3, [pc, #100]	; (800128c <FLASH_SetErrorCode+0x9c>)
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	f043 0301 	orr.w	r3, r3, #1
 800122e:	4a17      	ldr	r2, [pc, #92]	; (800128c <FLASH_SetErrorCode+0x9c>)
 8001230:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f043 0304 	orr.w	r3, r3, #4
 8001238:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800123a:	4b13      	ldr	r3, [pc, #76]	; (8001288 <FLASH_SetErrorCode+0x98>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	2b00      	cmp	r3, #0
 8001244:	d00b      	beq.n	800125e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001246:	4b11      	ldr	r3, [pc, #68]	; (800128c <FLASH_SetErrorCode+0x9c>)
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	f043 0304 	orr.w	r3, r3, #4
 800124e:	4a0f      	ldr	r2, [pc, #60]	; (800128c <FLASH_SetErrorCode+0x9c>)
 8001250:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001252:	4b0d      	ldr	r3, [pc, #52]	; (8001288 <FLASH_SetErrorCode+0x98>)
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	4a0c      	ldr	r2, [pc, #48]	; (8001288 <FLASH_SetErrorCode+0x98>)
 8001258:	f023 0301 	bic.w	r3, r3, #1
 800125c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f240 1201 	movw	r2, #257	; 0x101
 8001264:	4293      	cmp	r3, r2
 8001266:	d106      	bne.n	8001276 <FLASH_SetErrorCode+0x86>
 8001268:	4b07      	ldr	r3, [pc, #28]	; (8001288 <FLASH_SetErrorCode+0x98>)
 800126a:	69db      	ldr	r3, [r3, #28]
 800126c:	4a06      	ldr	r2, [pc, #24]	; (8001288 <FLASH_SetErrorCode+0x98>)
 800126e:	f023 0301 	bic.w	r3, r3, #1
 8001272:	61d3      	str	r3, [r2, #28]
}  
 8001274:	e002      	b.n	800127c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001276:	4a04      	ldr	r2, [pc, #16]	; (8001288 <FLASH_SetErrorCode+0x98>)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	60d3      	str	r3, [r2, #12]
}  
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	40022000 	.word	0x40022000
 800128c:	200001b0 	.word	0x200001b0

08001290 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800129e:	2300      	movs	r3, #0
 80012a0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80012a2:	4b2f      	ldr	r3, [pc, #188]	; (8001360 <HAL_FLASHEx_Erase+0xd0>)
 80012a4:	7e1b      	ldrb	r3, [r3, #24]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d101      	bne.n	80012ae <HAL_FLASHEx_Erase+0x1e>
 80012aa:	2302      	movs	r3, #2
 80012ac:	e053      	b.n	8001356 <HAL_FLASHEx_Erase+0xc6>
 80012ae:	4b2c      	ldr	r3, [pc, #176]	; (8001360 <HAL_FLASHEx_Erase+0xd0>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d116      	bne.n	80012ea <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80012bc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012c0:	f7ff ff50 	bl	8001164 <FLASH_WaitForLastOperation>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d141      	bne.n	800134e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80012ca:	2001      	movs	r0, #1
 80012cc:	f000 f926 	bl	800151c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80012d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012d4:	f7ff ff46 	bl	8001164 <FLASH_WaitForLastOperation>
 80012d8:	4603      	mov	r3, r0
 80012da:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80012dc:	4b21      	ldr	r3, [pc, #132]	; (8001364 <HAL_FLASHEx_Erase+0xd4>)
 80012de:	691b      	ldr	r3, [r3, #16]
 80012e0:	4a20      	ldr	r2, [pc, #128]	; (8001364 <HAL_FLASHEx_Erase+0xd4>)
 80012e2:	f023 0304 	bic.w	r3, r3, #4
 80012e6:	6113      	str	r3, [r2, #16]
 80012e8:	e031      	b.n	800134e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80012ea:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012ee:	f7ff ff39 	bl	8001164 <FLASH_WaitForLastOperation>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d12a      	bne.n	800134e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	f04f 32ff 	mov.w	r2, #4294967295
 80012fe:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	e019      	b.n	800133c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001308:	68b8      	ldr	r0, [r7, #8]
 800130a:	f000 fb57 	bl	80019bc <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800130e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001312:	f7ff ff27 	bl	8001164 <FLASH_WaitForLastOperation>
 8001316:	4603      	mov	r3, r0
 8001318:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800131a:	4b12      	ldr	r3, [pc, #72]	; (8001364 <HAL_FLASHEx_Erase+0xd4>)
 800131c:	691b      	ldr	r3, [r3, #16]
 800131e:	4a11      	ldr	r2, [pc, #68]	; (8001364 <HAL_FLASHEx_Erase+0xd4>)
 8001320:	f023 0302 	bic.w	r3, r3, #2
 8001324:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8001326:	7bfb      	ldrb	r3, [r7, #15]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d003      	beq.n	8001334 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	68ba      	ldr	r2, [r7, #8]
 8001330:	601a      	str	r2, [r3, #0]
            break;
 8001332:	e00c      	b.n	800134e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800133a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	029a      	lsls	r2, r3, #10
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	4413      	add	r3, r2
 8001348:	68ba      	ldr	r2, [r7, #8]
 800134a:	429a      	cmp	r2, r3
 800134c:	d3dc      	bcc.n	8001308 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800134e:	4b04      	ldr	r3, [pc, #16]	; (8001360 <HAL_FLASHEx_Erase+0xd0>)
 8001350:	2200      	movs	r2, #0
 8001352:	761a      	strb	r2, [r3, #24]

  return status;
 8001354:	7bfb      	ldrb	r3, [r7, #15]
}
 8001356:	4618      	mov	r0, r3
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	200001b0 	.word	0x200001b0
 8001364:	40022000 	.word	0x40022000

08001368 <HAL_FLASHEx_OBErase>:
  *         (system reset will occur)
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_FLASHEx_OBErase(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
  uint8_t rdptmp = OB_RDP_LEVEL_0;
 800136e:	23a5      	movs	r3, #165	; 0xa5
 8001370:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	71fb      	strb	r3, [r7, #7]

  /* Get the actual read protection Option Byte value */
  rdptmp = FLASH_OB_GetRDP();
 8001376:	f000 faf5 	bl	8001964 <FLASH_OB_GetRDP>
 800137a:	4603      	mov	r3, r0
 800137c:	71bb      	strb	r3, [r7, #6]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800137e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001382:	f7ff feef 	bl	8001164 <FLASH_WaitForLastOperation>
 8001386:	4603      	mov	r3, r0
 8001388:	71fb      	strb	r3, [r7, #7]

  if(status == HAL_OK)
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d123      	bne.n	80013d8 <HAL_FLASHEx_OBErase+0x70>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001390:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <HAL_FLASHEx_OBErase+0x7c>)
 8001392:	2200      	movs	r2, #0
 8001394:	61da      	str	r2, [r3, #28]

    /* If the previous operation is completed, proceed to erase the option bytes */
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 8001396:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <HAL_FLASHEx_OBErase+0x80>)
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	4a13      	ldr	r2, [pc, #76]	; (80013e8 <HAL_FLASHEx_OBErase+0x80>)
 800139c:	f043 0320 	orr.w	r3, r3, #32
 80013a0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80013a2:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <HAL_FLASHEx_OBErase+0x80>)
 80013a4:	691b      	ldr	r3, [r3, #16]
 80013a6:	4a10      	ldr	r2, [pc, #64]	; (80013e8 <HAL_FLASHEx_OBErase+0x80>)
 80013a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013ac:	6113      	str	r3, [r2, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80013ae:	f24c 3050 	movw	r0, #50000	; 0xc350
 80013b2:	f7ff fed7 	bl	8001164 <FLASH_WaitForLastOperation>
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]

    /* If the erase operation is completed, disable the OPTER Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 80013ba:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <HAL_FLASHEx_OBErase+0x80>)
 80013bc:	691b      	ldr	r3, [r3, #16]
 80013be:	4a0a      	ldr	r2, [pc, #40]	; (80013e8 <HAL_FLASHEx_OBErase+0x80>)
 80013c0:	f023 0320 	bic.w	r3, r3, #32
 80013c4:	6113      	str	r3, [r2, #16]

    if(status == HAL_OK)
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d105      	bne.n	80013d8 <HAL_FLASHEx_OBErase+0x70>
    {
      /* Restore the last read protection Option Byte value */
      status = FLASH_OB_RDP_LevelConfig(rdptmp);
 80013cc:	79bb      	ldrb	r3, [r7, #6]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f000 fa02 	bl	80017d8 <FLASH_OB_RDP_LevelConfig>
 80013d4:	4603      	mov	r3, r0
 80013d6:	71fb      	strb	r3, [r7, #7]
    }
  }

  /* Return the erase status */
  return status;
 80013d8:	79fb      	ldrb	r3, [r7, #7]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200001b0 	.word	0x200001b0
 80013e8:	40022000 	.word	0x40022000

080013ec <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80013f8:	4b39      	ldr	r3, [pc, #228]	; (80014e0 <HAL_FLASHEx_OBProgram+0xf4>)
 80013fa:	7e1b      	ldrb	r3, [r3, #24]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d101      	bne.n	8001404 <HAL_FLASHEx_OBProgram+0x18>
 8001400:	2302      	movs	r3, #2
 8001402:	e069      	b.n	80014d8 <HAL_FLASHEx_OBProgram+0xec>
 8001404:	4b36      	ldr	r3, [pc, #216]	; (80014e0 <HAL_FLASHEx_OBProgram+0xf4>)
 8001406:	2201      	movs	r2, #1
 8001408:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Write protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	2b00      	cmp	r3, #0
 8001414:	d01a      	beq.n	800144c <HAL_FLASHEx_OBProgram+0x60>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d107      	bne.n	800142e <HAL_FLASHEx_OBProgram+0x42>
    {
      /* Enable of Write protection on the selected page */
      status = FLASH_OB_EnableWRP(pOBInit->WRPPage);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	4618      	mov	r0, r3
 8001424:	f000 f896 	bl	8001554 <FLASH_OB_EnableWRP>
 8001428:	4603      	mov	r3, r0
 800142a:	73fb      	strb	r3, [r7, #15]
 800142c:	e006      	b.n	800143c <HAL_FLASHEx_OBProgram+0x50>
    }
    else
    {
      /* Disable of Write protection on the selected page */
      status = FLASH_OB_DisableWRP(pOBInit->WRPPage);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	4618      	mov	r0, r3
 8001434:	f000 f930 	bl	8001698 <FLASH_OB_DisableWRP>
 8001438:	4603      	mov	r3, r0
 800143a:	73fb      	strb	r3, [r7, #15]
    }
    if (status != HAL_OK)
 800143c:	7bfb      	ldrb	r3, [r7, #15]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d004      	beq.n	800144c <HAL_FLASHEx_OBProgram+0x60>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8001442:	4b27      	ldr	r3, [pc, #156]	; (80014e0 <HAL_FLASHEx_OBProgram+0xf4>)
 8001444:	2200      	movs	r2, #0
 8001446:	761a      	strb	r2, [r3, #24]
      return status;
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	e045      	b.n	80014d8 <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* Read protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d00e      	beq.n	8001476 <HAL_FLASHEx_OBProgram+0x8a>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	7c1b      	ldrb	r3, [r3, #16]
 800145c:	4618      	mov	r0, r3
 800145e:	f000 f9bb 	bl	80017d8 <FLASH_OB_RDP_LevelConfig>
 8001462:	4603      	mov	r3, r0
 8001464:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 8001466:	7bfb      	ldrb	r3, [r7, #15]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d004      	beq.n	8001476 <HAL_FLASHEx_OBProgram+0x8a>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 800146c:	4b1c      	ldr	r3, [pc, #112]	; (80014e0 <HAL_FLASHEx_OBProgram+0xf4>)
 800146e:	2200      	movs	r2, #0
 8001470:	761a      	strb	r2, [r3, #24]
      return status;
 8001472:	7bfb      	ldrb	r3, [r7, #15]
 8001474:	e030      	b.n	80014d8 <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* USER configuration */
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	2b00      	cmp	r3, #0
 8001480:	d00e      	beq.n	80014a0 <HAL_FLASHEx_OBProgram+0xb4>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	7c5b      	ldrb	r3, [r3, #17]
 8001486:	4618      	mov	r0, r3
 8001488:	f000 f9f6 	bl	8001878 <FLASH_OB_UserConfig>
 800148c:	4603      	mov	r3, r0
 800148e:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 8001490:	7bfb      	ldrb	r3, [r7, #15]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d004      	beq.n	80014a0 <HAL_FLASHEx_OBProgram+0xb4>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8001496:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <HAL_FLASHEx_OBProgram+0xf4>)
 8001498:	2200      	movs	r2, #0
 800149a:	761a      	strb	r2, [r3, #24]
      return status;
 800149c:	7bfb      	ldrb	r3, [r7, #15]
 800149e:	e01b      	b.n	80014d8 <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* DATA configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_DATA) == OPTIONBYTE_DATA)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0308 	and.w	r3, r3, #8
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d011      	beq.n	80014d0 <HAL_FLASHEx_OBProgram+0xe4>
  {
    status = FLASH_OB_ProgramData(pOBInit->DATAAddress, pOBInit->DATAData);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	695a      	ldr	r2, [r3, #20]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	7e1b      	ldrb	r3, [r3, #24]
 80014b4:	4619      	mov	r1, r3
 80014b6:	4610      	mov	r0, r2
 80014b8:	f000 fa16 	bl	80018e8 <FLASH_OB_ProgramData>
 80014bc:	4603      	mov	r3, r0
 80014be:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d004      	beq.n	80014d0 <HAL_FLASHEx_OBProgram+0xe4>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 80014c6:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <HAL_FLASHEx_OBProgram+0xf4>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	761a      	strb	r2, [r3, #24]
      return status;
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
 80014ce:	e003      	b.n	80014d8 <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80014d0:	4b03      	ldr	r3, [pc, #12]	; (80014e0 <HAL_FLASHEx_OBProgram+0xf4>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	761a      	strb	r2, [r3, #24]

  return status;
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	200001b0 	.word	0x200001b0

080014e4 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2207      	movs	r2, #7
 80014f0:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPPage = FLASH_OB_GetWRP();
 80014f2:	f000 fa2d 	bl	8001950 <FLASH_OB_GetWRP>
 80014f6:	4602      	mov	r2, r0
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 80014fc:	f000 fa32 	bl	8001964 <FLASH_OB_GetRDP>
 8001500:	4603      	mov	r3, r0
 8001502:	b2da      	uxtb	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	741a      	strb	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8001508:	f000 fa48 	bl	800199c <FLASH_OB_GetUser>
 800150c:	4603      	mov	r3, r0
 800150e:	461a      	mov	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	745a      	strb	r2, [r3, #17]
}
 8001514:	bf00      	nop
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001524:	4b09      	ldr	r3, [pc, #36]	; (800154c <FLASH_MassErase+0x30>)
 8001526:	2200      	movs	r2, #0
 8001528:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800152a:	4b09      	ldr	r3, [pc, #36]	; (8001550 <FLASH_MassErase+0x34>)
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	4a08      	ldr	r2, [pc, #32]	; (8001550 <FLASH_MassErase+0x34>)
 8001530:	f043 0304 	orr.w	r3, r3, #4
 8001534:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001536:	4b06      	ldr	r3, [pc, #24]	; (8001550 <FLASH_MassErase+0x34>)
 8001538:	691b      	ldr	r3, [r3, #16]
 800153a:	4a05      	ldr	r2, [pc, #20]	; (8001550 <FLASH_MassErase+0x34>)
 800153c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001540:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr
 800154c:	200001b0 	.word	0x200001b0
 8001550:	40022000 	.word	0x40022000

08001554 <FLASH_OB_EnableWRP>:
  * @param  WriteProtectPage specifies the page(s) to be write protected.
  *         The value of this parameter depend on device used within the same series 
  * @retval HAL status 
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WriteProtectPage)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800155c:	2300      	movs	r3, #0
 800155e:	75fb      	strb	r3, [r7, #23]
  uint16_t WRP0_Data = 0xFFFF;
 8001560:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001564:	82bb      	strh	r3, [r7, #20]
#if defined(FLASH_WRP1_WRP1)
  uint16_t WRP1_Data = 0xFFFF;
 8001566:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800156a:	827b      	strh	r3, [r7, #18]
#endif /* FLASH_WRP1_WRP1 */
#if defined(FLASH_WRP2_WRP2)
  uint16_t WRP2_Data = 0xFFFF;
 800156c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001570:	823b      	strh	r3, [r7, #16]
#endif /* FLASH_WRP2_WRP2 */
#if defined(FLASH_WRP3_WRP3)
  uint16_t WRP3_Data = 0xFFFF;
 8001572:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001576:	81fb      	strh	r3, [r7, #14]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(WriteProtectPage));
    
  /* Get current write protected pages and the new pages to be protected ******/
  WriteProtectPage = (uint32_t)(~((~FLASH_OB_GetWRP()) | WriteProtectPage));
 8001578:	f000 f9ea 	bl	8001950 <FLASH_OB_GetWRP>
 800157c:	4602      	mov	r2, r0
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	43db      	mvns	r3, r3
 8001582:	4013      	ands	r3, r2
 8001584:	607b      	str	r3, [r7, #4]
  
#if defined(OB_WRP_PAGES0TO15MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
#elif defined(OB_WRP_PAGES0TO31MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	b29b      	uxth	r3, r3
 800158a:	b2db      	uxtb	r3, r3
 800158c:	82bb      	strh	r3, [r7, #20]
#endif /* OB_WRP_PAGES0TO31MASK */
  
#if defined(OB_WRP_PAGES16TO31MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8U);
#elif defined(OB_WRP_PAGES32TO63MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8U);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	0a1b      	lsrs	r3, r3, #8
 8001592:	b29b      	uxth	r3, r3
 8001594:	b2db      	uxtb	r3, r3
 8001596:	827b      	strh	r3, [r7, #18]
#endif /* OB_WRP_PAGES32TO63MASK */
 
#if defined(OB_WRP_PAGES64TO95MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES64TO95MASK) >> 16U);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	0c1b      	lsrs	r3, r3, #16
 800159c:	b29b      	uxth	r3, r3
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	823b      	strh	r3, [r7, #16]
#if defined(OB_WRP_PAGES32TO47MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16U);
#endif /* OB_WRP_PAGES32TO47MASK */

#if defined(OB_WRP_PAGES96TO127MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES96TO127MASK) >> 24U); 
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	0e1b      	lsrs	r3, r3, #24
 80015a6:	81fb      	strh	r3, [r7, #14]
#elif defined(OB_WRP_PAGES48TO127MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24U); 
#endif /* OB_WRP_PAGES96TO127MASK */
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80015a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80015ac:	f7ff fdda 	bl	8001164 <FLASH_WaitForLastOperation>
 80015b0:	4603      	mov	r3, r0
 80015b2:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80015b4:	7dfb      	ldrb	r3, [r7, #23]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d162      	bne.n	8001680 <FLASH_OB_EnableWRP+0x12c>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80015ba:	4b34      	ldr	r3, [pc, #208]	; (800168c <FLASH_OB_EnableWRP+0x138>)
 80015bc:	2200      	movs	r2, #0
 80015be:	61da      	str	r2, [r3, #28]

    /* To be able to write again option byte, need to perform a option byte erase */
    status = HAL_FLASHEx_OBErase();
 80015c0:	f7ff fed2 	bl	8001368 <HAL_FLASHEx_OBErase>
 80015c4:	4603      	mov	r3, r0
 80015c6:	75fb      	strb	r3, [r7, #23]
    if (status == HAL_OK)  
 80015c8:	7dfb      	ldrb	r3, [r7, #23]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d158      	bne.n	8001680 <FLASH_OB_EnableWRP+0x12c>
    {
      /* Enable write protection */
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 80015ce:	4b30      	ldr	r3, [pc, #192]	; (8001690 <FLASH_OB_EnableWRP+0x13c>)
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	4a2f      	ldr	r2, [pc, #188]	; (8001690 <FLASH_OB_EnableWRP+0x13c>)
 80015d4:	f043 0310 	orr.w	r3, r3, #16
 80015d8:	6113      	str	r3, [r2, #16]

#if defined(FLASH_WRP0_WRP0)
      if(WRP0_Data != 0xFFU)
 80015da:	8abb      	ldrh	r3, [r7, #20]
 80015dc:	2bff      	cmp	r3, #255	; 0xff
 80015de:	d00d      	beq.n	80015fc <FLASH_OB_EnableWRP+0xa8>
      {
        OB->WRP0 &= WRP0_Data;
 80015e0:	4b2c      	ldr	r3, [pc, #176]	; (8001694 <FLASH_OB_EnableWRP+0x140>)
 80015e2:	891b      	ldrh	r3, [r3, #8]
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	492b      	ldr	r1, [pc, #172]	; (8001694 <FLASH_OB_EnableWRP+0x140>)
 80015e8:	8abb      	ldrh	r3, [r7, #20]
 80015ea:	4013      	ands	r3, r2
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	810b      	strh	r3, [r1, #8]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80015f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80015f4:	f7ff fdb6 	bl	8001164 <FLASH_WaitForLastOperation>
 80015f8:	4603      	mov	r3, r0
 80015fa:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP0_WRP0 */

#if defined(FLASH_WRP1_WRP1)
      if((status == HAL_OK) && (WRP1_Data != 0xFFU))
 80015fc:	7dfb      	ldrb	r3, [r7, #23]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d110      	bne.n	8001624 <FLASH_OB_EnableWRP+0xd0>
 8001602:	8a7b      	ldrh	r3, [r7, #18]
 8001604:	2bff      	cmp	r3, #255	; 0xff
 8001606:	d00d      	beq.n	8001624 <FLASH_OB_EnableWRP+0xd0>
      {
        OB->WRP1 &= WRP1_Data;
 8001608:	4b22      	ldr	r3, [pc, #136]	; (8001694 <FLASH_OB_EnableWRP+0x140>)
 800160a:	895b      	ldrh	r3, [r3, #10]
 800160c:	b29a      	uxth	r2, r3
 800160e:	4921      	ldr	r1, [pc, #132]	; (8001694 <FLASH_OB_EnableWRP+0x140>)
 8001610:	8a7b      	ldrh	r3, [r7, #18]
 8001612:	4013      	ands	r3, r2
 8001614:	b29b      	uxth	r3, r3
 8001616:	814b      	strh	r3, [r1, #10]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001618:	f24c 3050 	movw	r0, #50000	; 0xc350
 800161c:	f7ff fda2 	bl	8001164 <FLASH_WaitForLastOperation>
 8001620:	4603      	mov	r3, r0
 8001622:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP1_WRP1 */

#if defined(FLASH_WRP2_WRP2)
      if((status == HAL_OK) && (WRP2_Data != 0xFFU))
 8001624:	7dfb      	ldrb	r3, [r7, #23]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d110      	bne.n	800164c <FLASH_OB_EnableWRP+0xf8>
 800162a:	8a3b      	ldrh	r3, [r7, #16]
 800162c:	2bff      	cmp	r3, #255	; 0xff
 800162e:	d00d      	beq.n	800164c <FLASH_OB_EnableWRP+0xf8>
      {
        OB->WRP2 &= WRP2_Data;
 8001630:	4b18      	ldr	r3, [pc, #96]	; (8001694 <FLASH_OB_EnableWRP+0x140>)
 8001632:	899b      	ldrh	r3, [r3, #12]
 8001634:	b29a      	uxth	r2, r3
 8001636:	4917      	ldr	r1, [pc, #92]	; (8001694 <FLASH_OB_EnableWRP+0x140>)
 8001638:	8a3b      	ldrh	r3, [r7, #16]
 800163a:	4013      	ands	r3, r2
 800163c:	b29b      	uxth	r3, r3
 800163e:	818b      	strh	r3, [r1, #12]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001640:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001644:	f7ff fd8e 	bl	8001164 <FLASH_WaitForLastOperation>
 8001648:	4603      	mov	r3, r0
 800164a:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP2_WRP2 */

#if defined(FLASH_WRP3_WRP3)
      if((status == HAL_OK) && (WRP3_Data != 0xFFU))
 800164c:	7dfb      	ldrb	r3, [r7, #23]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d110      	bne.n	8001674 <FLASH_OB_EnableWRP+0x120>
 8001652:	89fb      	ldrh	r3, [r7, #14]
 8001654:	2bff      	cmp	r3, #255	; 0xff
 8001656:	d00d      	beq.n	8001674 <FLASH_OB_EnableWRP+0x120>
      {
        OB->WRP3 &= WRP3_Data;
 8001658:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <FLASH_OB_EnableWRP+0x140>)
 800165a:	89db      	ldrh	r3, [r3, #14]
 800165c:	b29a      	uxth	r2, r3
 800165e:	490d      	ldr	r1, [pc, #52]	; (8001694 <FLASH_OB_EnableWRP+0x140>)
 8001660:	89fb      	ldrh	r3, [r7, #14]
 8001662:	4013      	ands	r3, r2
 8001664:	b29b      	uxth	r3, r3
 8001666:	81cb      	strh	r3, [r1, #14]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001668:	f24c 3050 	movw	r0, #50000	; 0xc350
 800166c:	f7ff fd7a 	bl	8001164 <FLASH_WaitForLastOperation>
 8001670:	4603      	mov	r3, r0
 8001672:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP3_WRP3 */

      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <FLASH_OB_EnableWRP+0x13c>)
 8001676:	691b      	ldr	r3, [r3, #16]
 8001678:	4a05      	ldr	r2, [pc, #20]	; (8001690 <FLASH_OB_EnableWRP+0x13c>)
 800167a:	f023 0310 	bic.w	r3, r3, #16
 800167e:	6113      	str	r3, [r2, #16]
    }
  }
  
  return status;
 8001680:	7dfb      	ldrb	r3, [r7, #23]
}
 8001682:	4618      	mov	r0, r3
 8001684:	3718      	adds	r7, #24
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	200001b0 	.word	0x200001b0
 8001690:	40022000 	.word	0x40022000
 8001694:	1ffff800 	.word	0x1ffff800

08001698 <FLASH_OB_DisableWRP>:
  * @param  WriteProtectPage specifies the page(s) to be write unprotected.
  *         The value of this parameter depend on device used within the same series 
  * @retval HAL status 
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WriteProtectPage)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016a0:	2300      	movs	r3, #0
 80016a2:	75fb      	strb	r3, [r7, #23]
  uint16_t WRP0_Data = 0xFFFF;
 80016a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016a8:	82bb      	strh	r3, [r7, #20]
#if defined(FLASH_WRP1_WRP1)
  uint16_t WRP1_Data = 0xFFFF;
 80016aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016ae:	827b      	strh	r3, [r7, #18]
#endif /* FLASH_WRP1_WRP1 */
#if defined(FLASH_WRP2_WRP2)
  uint16_t WRP2_Data = 0xFFFF;
 80016b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016b4:	823b      	strh	r3, [r7, #16]
#endif /* FLASH_WRP2_WRP2 */
#if defined(FLASH_WRP3_WRP3)
  uint16_t WRP3_Data = 0xFFFF;
 80016b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016ba:	81fb      	strh	r3, [r7, #14]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(WriteProtectPage));

  /* Get current write protected pages and the new pages to be unprotected ******/
  WriteProtectPage = (FLASH_OB_GetWRP() | WriteProtectPage);
 80016bc:	f000 f948 	bl	8001950 <FLASH_OB_GetWRP>
 80016c0:	4602      	mov	r2, r0
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	607b      	str	r3, [r7, #4]

#if defined(OB_WRP_PAGES0TO15MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
#elif defined(OB_WRP_PAGES0TO31MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	82bb      	strh	r3, [r7, #20]
#endif /* OB_WRP_PAGES0TO31MASK */
  
#if defined(OB_WRP_PAGES16TO31MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8U);
#elif defined(OB_WRP_PAGES32TO63MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8U);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	0a1b      	lsrs	r3, r3, #8
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	827b      	strh	r3, [r7, #18]
#endif /* OB_WRP_PAGES32TO63MASK */
 
#if defined(OB_WRP_PAGES64TO95MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES64TO95MASK) >> 16U);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	0c1b      	lsrs	r3, r3, #16
 80016de:	b29b      	uxth	r3, r3
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	823b      	strh	r3, [r7, #16]
#if defined(OB_WRP_PAGES32TO47MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16U);
#endif /* OB_WRP_PAGES32TO47MASK */

#if defined(OB_WRP_PAGES96TO127MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES96TO127MASK) >> 24U); 
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	0e1b      	lsrs	r3, r3, #24
 80016e8:	81fb      	strh	r3, [r7, #14]
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24U); 
#endif /* OB_WRP_PAGES96TO127MASK */

    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80016ea:	f24c 3050 	movw	r0, #50000	; 0xc350
 80016ee:	f7ff fd39 	bl	8001164 <FLASH_WaitForLastOperation>
 80016f2:	4603      	mov	r3, r0
 80016f4:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80016f6:	7dfb      	ldrb	r3, [r7, #23]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d162      	bne.n	80017c2 <FLASH_OB_DisableWRP+0x12a>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80016fc:	4b33      	ldr	r3, [pc, #204]	; (80017cc <FLASH_OB_DisableWRP+0x134>)
 80016fe:	2200      	movs	r2, #0
 8001700:	61da      	str	r2, [r3, #28]

    /* To be able to write again option byte, need to perform a option byte erase */
    status = HAL_FLASHEx_OBErase();
 8001702:	f7ff fe31 	bl	8001368 <HAL_FLASHEx_OBErase>
 8001706:	4603      	mov	r3, r0
 8001708:	75fb      	strb	r3, [r7, #23]
    if (status == HAL_OK)  
 800170a:	7dfb      	ldrb	r3, [r7, #23]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d158      	bne.n	80017c2 <FLASH_OB_DisableWRP+0x12a>
    {
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8001710:	4b2f      	ldr	r3, [pc, #188]	; (80017d0 <FLASH_OB_DisableWRP+0x138>)
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	4a2e      	ldr	r2, [pc, #184]	; (80017d0 <FLASH_OB_DisableWRP+0x138>)
 8001716:	f043 0310 	orr.w	r3, r3, #16
 800171a:	6113      	str	r3, [r2, #16]

#if defined(FLASH_WRP0_WRP0)
      if(WRP0_Data != 0xFFU)
 800171c:	8abb      	ldrh	r3, [r7, #20]
 800171e:	2bff      	cmp	r3, #255	; 0xff
 8001720:	d00d      	beq.n	800173e <FLASH_OB_DisableWRP+0xa6>
      {
        OB->WRP0 |= WRP0_Data;
 8001722:	4b2c      	ldr	r3, [pc, #176]	; (80017d4 <FLASH_OB_DisableWRP+0x13c>)
 8001724:	891b      	ldrh	r3, [r3, #8]
 8001726:	b29a      	uxth	r2, r3
 8001728:	492a      	ldr	r1, [pc, #168]	; (80017d4 <FLASH_OB_DisableWRP+0x13c>)
 800172a:	8abb      	ldrh	r3, [r7, #20]
 800172c:	4313      	orrs	r3, r2
 800172e:	b29b      	uxth	r3, r3
 8001730:	810b      	strh	r3, [r1, #8]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001732:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001736:	f7ff fd15 	bl	8001164 <FLASH_WaitForLastOperation>
 800173a:	4603      	mov	r3, r0
 800173c:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP0_WRP0 */

#if defined(FLASH_WRP1_WRP1)
      if((status == HAL_OK) && (WRP1_Data != 0xFFU))
 800173e:	7dfb      	ldrb	r3, [r7, #23]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d110      	bne.n	8001766 <FLASH_OB_DisableWRP+0xce>
 8001744:	8a7b      	ldrh	r3, [r7, #18]
 8001746:	2bff      	cmp	r3, #255	; 0xff
 8001748:	d00d      	beq.n	8001766 <FLASH_OB_DisableWRP+0xce>
      {
        OB->WRP1 |= WRP1_Data;
 800174a:	4b22      	ldr	r3, [pc, #136]	; (80017d4 <FLASH_OB_DisableWRP+0x13c>)
 800174c:	895b      	ldrh	r3, [r3, #10]
 800174e:	b29a      	uxth	r2, r3
 8001750:	4920      	ldr	r1, [pc, #128]	; (80017d4 <FLASH_OB_DisableWRP+0x13c>)
 8001752:	8a7b      	ldrh	r3, [r7, #18]
 8001754:	4313      	orrs	r3, r2
 8001756:	b29b      	uxth	r3, r3
 8001758:	814b      	strh	r3, [r1, #10]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800175a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800175e:	f7ff fd01 	bl	8001164 <FLASH_WaitForLastOperation>
 8001762:	4603      	mov	r3, r0
 8001764:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP1_WRP1 */

#if defined(FLASH_WRP2_WRP2)
      if((status == HAL_OK) && (WRP2_Data != 0xFFU))
 8001766:	7dfb      	ldrb	r3, [r7, #23]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d110      	bne.n	800178e <FLASH_OB_DisableWRP+0xf6>
 800176c:	8a3b      	ldrh	r3, [r7, #16]
 800176e:	2bff      	cmp	r3, #255	; 0xff
 8001770:	d00d      	beq.n	800178e <FLASH_OB_DisableWRP+0xf6>
      {
        OB->WRP2 |= WRP2_Data;
 8001772:	4b18      	ldr	r3, [pc, #96]	; (80017d4 <FLASH_OB_DisableWRP+0x13c>)
 8001774:	899b      	ldrh	r3, [r3, #12]
 8001776:	b29a      	uxth	r2, r3
 8001778:	4916      	ldr	r1, [pc, #88]	; (80017d4 <FLASH_OB_DisableWRP+0x13c>)
 800177a:	8a3b      	ldrh	r3, [r7, #16]
 800177c:	4313      	orrs	r3, r2
 800177e:	b29b      	uxth	r3, r3
 8001780:	818b      	strh	r3, [r1, #12]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001782:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001786:	f7ff fced 	bl	8001164 <FLASH_WaitForLastOperation>
 800178a:	4603      	mov	r3, r0
 800178c:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP2_WRP2 */

#if defined(FLASH_WRP3_WRP3)
      if((status == HAL_OK) && (WRP3_Data != 0xFFU))
 800178e:	7dfb      	ldrb	r3, [r7, #23]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d110      	bne.n	80017b6 <FLASH_OB_DisableWRP+0x11e>
 8001794:	89fb      	ldrh	r3, [r7, #14]
 8001796:	2bff      	cmp	r3, #255	; 0xff
 8001798:	d00d      	beq.n	80017b6 <FLASH_OB_DisableWRP+0x11e>
      {
        OB->WRP3 |= WRP3_Data;
 800179a:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <FLASH_OB_DisableWRP+0x13c>)
 800179c:	89db      	ldrh	r3, [r3, #14]
 800179e:	b29a      	uxth	r2, r3
 80017a0:	490c      	ldr	r1, [pc, #48]	; (80017d4 <FLASH_OB_DisableWRP+0x13c>)
 80017a2:	89fb      	ldrh	r3, [r7, #14]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	81cb      	strh	r3, [r1, #14]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80017aa:	f24c 3050 	movw	r0, #50000	; 0xc350
 80017ae:	f7ff fcd9 	bl	8001164 <FLASH_WaitForLastOperation>
 80017b2:	4603      	mov	r3, r0
 80017b4:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP3_WRP3 */

      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 80017b6:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <FLASH_OB_DisableWRP+0x138>)
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	4a05      	ldr	r2, [pc, #20]	; (80017d0 <FLASH_OB_DisableWRP+0x138>)
 80017bc:	f023 0310 	bic.w	r3, r3, #16
 80017c0:	6113      	str	r3, [r2, #16]
    }
  }
  return status;
 80017c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3718      	adds	r7, #24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	200001b0 	.word	0x200001b0
 80017d0:	40022000 	.word	0x40022000
 80017d4:	1ffff800 	.word	0x1ffff800

080017d8 <FLASH_OB_RDP_LevelConfig>:
  *            @arg @ref OB_RDP_LEVEL_0 No protection
  *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t ReadProtectLevel)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(ReadProtectLevel));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80017e6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80017ea:	f7ff fcbb 	bl	8001164 <FLASH_WaitForLastOperation>
 80017ee:	4603      	mov	r3, r0
 80017f0:	73fb      	strb	r3, [r7, #15]
  
  if(status == HAL_OK)
 80017f2:	7bfb      	ldrb	r3, [r7, #15]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d133      	bne.n	8001860 <FLASH_OB_RDP_LevelConfig+0x88>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80017f8:	4b1c      	ldr	r3, [pc, #112]	; (800186c <FLASH_OB_RDP_LevelConfig+0x94>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	61da      	str	r2, [r3, #28]
    
    /* If the previous operation is completed, proceed to erase the option bytes */
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 80017fe:	4b1c      	ldr	r3, [pc, #112]	; (8001870 <FLASH_OB_RDP_LevelConfig+0x98>)
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	4a1b      	ldr	r2, [pc, #108]	; (8001870 <FLASH_OB_RDP_LevelConfig+0x98>)
 8001804:	f043 0320 	orr.w	r3, r3, #32
 8001808:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800180a:	4b19      	ldr	r3, [pc, #100]	; (8001870 <FLASH_OB_RDP_LevelConfig+0x98>)
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	4a18      	ldr	r2, [pc, #96]	; (8001870 <FLASH_OB_RDP_LevelConfig+0x98>)
 8001810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001814:	6113      	str	r3, [r2, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001816:	f24c 3050 	movw	r0, #50000	; 0xc350
 800181a:	f7ff fca3 	bl	8001164 <FLASH_WaitForLastOperation>
 800181e:	4603      	mov	r3, r0
 8001820:	73fb      	strb	r3, [r7, #15]

    /* If the erase operation is completed, disable the OPTER Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 8001822:	4b13      	ldr	r3, [pc, #76]	; (8001870 <FLASH_OB_RDP_LevelConfig+0x98>)
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	4a12      	ldr	r2, [pc, #72]	; (8001870 <FLASH_OB_RDP_LevelConfig+0x98>)
 8001828:	f023 0320 	bic.w	r3, r3, #32
 800182c:	6113      	str	r3, [r2, #16]

    if(status == HAL_OK)
 800182e:	7bfb      	ldrb	r3, [r7, #15]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d115      	bne.n	8001860 <FLASH_OB_RDP_LevelConfig+0x88>
    {
      /* Enable the Option Bytes Programming operation */
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8001834:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <FLASH_OB_RDP_LevelConfig+0x98>)
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	4a0d      	ldr	r2, [pc, #52]	; (8001870 <FLASH_OB_RDP_LevelConfig+0x98>)
 800183a:	f043 0310 	orr.w	r3, r3, #16
 800183e:	6113      	str	r3, [r2, #16]
      
      WRITE_REG(OB->RDP, ReadProtectLevel);
 8001840:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <FLASH_OB_RDP_LevelConfig+0x9c>)
 8001842:	79fa      	ldrb	r2, [r7, #7]
 8001844:	b292      	uxth	r2, r2
 8001846:	801a      	strh	r2, [r3, #0]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE); 
 8001848:	f24c 3050 	movw	r0, #50000	; 0xc350
 800184c:	f7ff fc8a 	bl	8001164 <FLASH_WaitForLastOperation>
 8001850:	4603      	mov	r3, r0
 8001852:	73fb      	strb	r3, [r7, #15]
      
      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8001854:	4b06      	ldr	r3, [pc, #24]	; (8001870 <FLASH_OB_RDP_LevelConfig+0x98>)
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	4a05      	ldr	r2, [pc, #20]	; (8001870 <FLASH_OB_RDP_LevelConfig+0x98>)
 800185a:	f023 0310 	bic.w	r3, r3, #16
 800185e:	6113      	str	r3, [r2, #16]
    }
  }
  
  return status;
 8001860:	7bfb      	ldrb	r3, [r7, #15]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	200001b0 	.word	0x200001b0
 8001870:	40022000 	.word	0x40022000
 8001874:	1ffff800 	.word	0x1ffff800

08001878 <FLASH_OB_UserConfig>:
  *         FLASH_OBR_nRST_STOP(Bit3),FLASH_OBR_nRST_STDBY(Bit4).
  *         And BFBF2(Bit5) for STM32F101xG and STM32F103xG . 
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t UserConfig)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001882:	2300      	movs	r3, #0
 8001884:	73fb      	strb	r3, [r7, #15]
#if defined(FLASH_BANK2_END)
  assert_param(IS_OB_BOOT1((UserConfig&OB_BOOT1_SET)));
#endif /* FLASH_BANK2_END */

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001886:	f24c 3050 	movw	r0, #50000	; 0xc350
 800188a:	f7ff fc6b 	bl	8001164 <FLASH_WaitForLastOperation>
 800188e:	4603      	mov	r3, r0
 8001890:	73fb      	strb	r3, [r7, #15]
  
  if(status == HAL_OK)
 8001892:	7bfb      	ldrb	r3, [r7, #15]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d11b      	bne.n	80018d0 <FLASH_OB_UserConfig+0x58>
  {     
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001898:	4b10      	ldr	r3, [pc, #64]	; (80018dc <FLASH_OB_UserConfig+0x64>)
 800189a:	2200      	movs	r2, #0
 800189c:	61da      	str	r2, [r3, #28]

    /* Enable the Option Bytes Programming operation */
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 800189e:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <FLASH_OB_UserConfig+0x68>)
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	4a0f      	ldr	r2, [pc, #60]	; (80018e0 <FLASH_OB_UserConfig+0x68>)
 80018a4:	f043 0310 	orr.w	r3, r3, #16
 80018a8:	6113      	str	r3, [r2, #16]
 
#if defined(FLASH_BANK2_END)
    OB->USER = (UserConfig | 0xF0U);
#else
    OB->USER = (UserConfig | 0x88U);
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	f063 0377 	orn	r3, r3, #119	; 0x77
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <FLASH_OB_UserConfig+0x6c>)
 80018b4:	b292      	uxth	r2, r2
 80018b6:	805a      	strh	r2, [r3, #2]
#endif /* FLASH_BANK2_END */

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80018b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80018bc:	f7ff fc52 	bl	8001164 <FLASH_WaitForLastOperation>
 80018c0:	4603      	mov	r3, r0
 80018c2:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the OPTPG Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 80018c4:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <FLASH_OB_UserConfig+0x68>)
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	4a05      	ldr	r2, [pc, #20]	; (80018e0 <FLASH_OB_UserConfig+0x68>)
 80018ca:	f023 0310 	bic.w	r3, r3, #16
 80018ce:	6113      	str	r3, [r2, #16]
  }
  
  return status; 
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	200001b0 	.word	0x200001b0
 80018e0:	40022000 	.word	0x40022000
 80018e4:	1ffff800 	.word	0x1ffff800

080018e8 <FLASH_OB_ProgramData>:
  *         This parameter can be 0x1FFFF804 or 0x1FFFF806. 
  * @param  Data specifies the data to be programmed.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_ProgramData(uint32_t Address, uint8_t Data)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	460b      	mov	r3, r1
 80018f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80018f8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80018fc:	f7ff fc32 	bl	8001164 <FLASH_WaitForLastOperation>
 8001900:	4603      	mov	r3, r0
 8001902:	73fb      	strb	r3, [r7, #15]
  
  if(status == HAL_OK)
 8001904:	7bfb      	ldrb	r3, [r7, #15]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d118      	bne.n	800193c <FLASH_OB_ProgramData+0x54>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800190a:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <FLASH_OB_ProgramData+0x60>)
 800190c:	2200      	movs	r2, #0
 800190e:	61da      	str	r2, [r3, #28]

    /* Enables the Option Bytes Programming operation */
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 8001910:	4b0e      	ldr	r3, [pc, #56]	; (800194c <FLASH_OB_ProgramData+0x64>)
 8001912:	691b      	ldr	r3, [r3, #16]
 8001914:	4a0d      	ldr	r2, [pc, #52]	; (800194c <FLASH_OB_ProgramData+0x64>)
 8001916:	f043 0310 	orr.w	r3, r3, #16
 800191a:	6113      	str	r3, [r2, #16]
    *(__IO uint16_t*)Address = Data;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	78fa      	ldrb	r2, [r7, #3]
 8001920:	b292      	uxth	r2, r2
 8001922:	801a      	strh	r2, [r3, #0]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001924:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001928:	f7ff fc1c 	bl	8001164 <FLASH_WaitForLastOperation>
 800192c:	4603      	mov	r3, r0
 800192e:	73fb      	strb	r3, [r7, #15]
    
    /* If the program operation is completed, disable the OPTPG Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8001930:	4b06      	ldr	r3, [pc, #24]	; (800194c <FLASH_OB_ProgramData+0x64>)
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	4a05      	ldr	r2, [pc, #20]	; (800194c <FLASH_OB_ProgramData+0x64>)
 8001936:	f023 0310 	bic.w	r3, r3, #16
 800193a:	6113      	str	r3, [r2, #16]
  }
  /* Return the Option Byte Data Program Status */
  return status;
 800193c:	7bfb      	ldrb	r3, [r7, #15]
}
 800193e:	4618      	mov	r0, r3
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	200001b0 	.word	0x200001b0
 800194c:	40022000 	.word	0x40022000

08001950 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval The FLASH Write Protection Option Bytes value
  */
static uint32_t FLASH_OB_GetWRP(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (uint32_t)(READ_REG(FLASH->WRPR));
 8001954:	4b02      	ldr	r3, [pc, #8]	; (8001960 <FLASH_OB_GetWRP+0x10>)
 8001956:	6a1b      	ldr	r3, [r3, #32]
}
 8001958:	4618      	mov	r0, r3
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr
 8001960:	40022000 	.word	0x40022000

08001964 <FLASH_OB_GetRDP>:
  *         This parameter can be one of the following values:
  *            @arg @ref OB_RDP_LEVEL_0 No protection
  *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
  uint32_t readstatus = OB_RDP_LEVEL_0;
 800196a:	23a5      	movs	r3, #165	; 0xa5
 800196c:	607b      	str	r3, [r7, #4]
  uint32_t tmp_reg = 0U;
 800196e:	2300      	movs	r3, #0
 8001970:	603b      	str	r3, [r7, #0]
  
  /* Read RDP level bits */
  tmp_reg = READ_BIT(FLASH->OBR, FLASH_OBR_RDPRT);
 8001972:	4b09      	ldr	r3, [pc, #36]	; (8001998 <FLASH_OB_GetRDP+0x34>)
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	603b      	str	r3, [r7, #0]

  if (tmp_reg == FLASH_OBR_RDPRT)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	2b02      	cmp	r3, #2
 8001980:	d102      	bne.n	8001988 <FLASH_OB_GetRDP+0x24>
  {
    readstatus = OB_RDP_LEVEL_1;
 8001982:	2300      	movs	r3, #0
 8001984:	607b      	str	r3, [r7, #4]
 8001986:	e001      	b.n	800198c <FLASH_OB_GetRDP+0x28>
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_0;
 8001988:	23a5      	movs	r3, #165	; 0xa5
 800198a:	607b      	str	r3, [r7, #4]
  }

  return readstatus;
 800198c:	687b      	ldr	r3, [r7, #4]
}
 800198e:	4618      	mov	r0, r3
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr
 8001998:	40022000 	.word	0x40022000

0800199c <FLASH_OB_GetUser>:
  * @retval The FLASH User Option Bytes values: FLASH_OBR_IWDG_SW(Bit2), 
  *         FLASH_OBR_nRST_STOP(Bit3),FLASH_OBR_nRST_STDBY(Bit4).
  *         And FLASH_OBR_BFB2(Bit5) for STM32F101xG and STM32F103xG . 
  */
static uint8_t FLASH_OB_GetUser(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return (uint8_t)((READ_REG(FLASH->OBR) & FLASH_OBR_USER) >> FLASH_POSITION_IWDGSW_BIT);
 80019a0:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <FLASH_OB_GetUser+0x1c>)
 80019a2:	69db      	ldr	r3, [r3, #28]
 80019a4:	089b      	lsrs	r3, r3, #2
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	f003 0307 	and.w	r3, r3, #7
 80019ac:	b2db      	uxtb	r3, r3
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	40022000 	.word	0x40022000

080019bc <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80019c4:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <FLASH_PageErase+0x38>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80019ca:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <FLASH_PageErase+0x3c>)
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	4a0a      	ldr	r2, [pc, #40]	; (80019f8 <FLASH_PageErase+0x3c>)
 80019d0:	f043 0302 	orr.w	r3, r3, #2
 80019d4:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80019d6:	4a08      	ldr	r2, [pc, #32]	; (80019f8 <FLASH_PageErase+0x3c>)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80019dc:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <FLASH_PageErase+0x3c>)
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	4a05      	ldr	r2, [pc, #20]	; (80019f8 <FLASH_PageErase+0x3c>)
 80019e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019e6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc80      	pop	{r7}
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	200001b0 	.word	0x200001b0
 80019f8:	40022000 	.word	0x40022000

080019fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b08b      	sub	sp, #44	; 0x2c
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a06:	2300      	movs	r3, #0
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a0e:	e169      	b.n	8001ce4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a10:	2201      	movs	r2, #1
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	69fa      	ldr	r2, [r7, #28]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	f040 8158 	bne.w	8001cde <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	4a9a      	ldr	r2, [pc, #616]	; (8001c9c <HAL_GPIO_Init+0x2a0>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d05e      	beq.n	8001af6 <HAL_GPIO_Init+0xfa>
 8001a38:	4a98      	ldr	r2, [pc, #608]	; (8001c9c <HAL_GPIO_Init+0x2a0>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d875      	bhi.n	8001b2a <HAL_GPIO_Init+0x12e>
 8001a3e:	4a98      	ldr	r2, [pc, #608]	; (8001ca0 <HAL_GPIO_Init+0x2a4>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d058      	beq.n	8001af6 <HAL_GPIO_Init+0xfa>
 8001a44:	4a96      	ldr	r2, [pc, #600]	; (8001ca0 <HAL_GPIO_Init+0x2a4>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d86f      	bhi.n	8001b2a <HAL_GPIO_Init+0x12e>
 8001a4a:	4a96      	ldr	r2, [pc, #600]	; (8001ca4 <HAL_GPIO_Init+0x2a8>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d052      	beq.n	8001af6 <HAL_GPIO_Init+0xfa>
 8001a50:	4a94      	ldr	r2, [pc, #592]	; (8001ca4 <HAL_GPIO_Init+0x2a8>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d869      	bhi.n	8001b2a <HAL_GPIO_Init+0x12e>
 8001a56:	4a94      	ldr	r2, [pc, #592]	; (8001ca8 <HAL_GPIO_Init+0x2ac>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d04c      	beq.n	8001af6 <HAL_GPIO_Init+0xfa>
 8001a5c:	4a92      	ldr	r2, [pc, #584]	; (8001ca8 <HAL_GPIO_Init+0x2ac>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d863      	bhi.n	8001b2a <HAL_GPIO_Init+0x12e>
 8001a62:	4a92      	ldr	r2, [pc, #584]	; (8001cac <HAL_GPIO_Init+0x2b0>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d046      	beq.n	8001af6 <HAL_GPIO_Init+0xfa>
 8001a68:	4a90      	ldr	r2, [pc, #576]	; (8001cac <HAL_GPIO_Init+0x2b0>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d85d      	bhi.n	8001b2a <HAL_GPIO_Init+0x12e>
 8001a6e:	2b12      	cmp	r3, #18
 8001a70:	d82a      	bhi.n	8001ac8 <HAL_GPIO_Init+0xcc>
 8001a72:	2b12      	cmp	r3, #18
 8001a74:	d859      	bhi.n	8001b2a <HAL_GPIO_Init+0x12e>
 8001a76:	a201      	add	r2, pc, #4	; (adr r2, 8001a7c <HAL_GPIO_Init+0x80>)
 8001a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a7c:	08001af7 	.word	0x08001af7
 8001a80:	08001ad1 	.word	0x08001ad1
 8001a84:	08001ae3 	.word	0x08001ae3
 8001a88:	08001b25 	.word	0x08001b25
 8001a8c:	08001b2b 	.word	0x08001b2b
 8001a90:	08001b2b 	.word	0x08001b2b
 8001a94:	08001b2b 	.word	0x08001b2b
 8001a98:	08001b2b 	.word	0x08001b2b
 8001a9c:	08001b2b 	.word	0x08001b2b
 8001aa0:	08001b2b 	.word	0x08001b2b
 8001aa4:	08001b2b 	.word	0x08001b2b
 8001aa8:	08001b2b 	.word	0x08001b2b
 8001aac:	08001b2b 	.word	0x08001b2b
 8001ab0:	08001b2b 	.word	0x08001b2b
 8001ab4:	08001b2b 	.word	0x08001b2b
 8001ab8:	08001b2b 	.word	0x08001b2b
 8001abc:	08001b2b 	.word	0x08001b2b
 8001ac0:	08001ad9 	.word	0x08001ad9
 8001ac4:	08001aed 	.word	0x08001aed
 8001ac8:	4a79      	ldr	r2, [pc, #484]	; (8001cb0 <HAL_GPIO_Init+0x2b4>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d013      	beq.n	8001af6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ace:	e02c      	b.n	8001b2a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	623b      	str	r3, [r7, #32]
          break;
 8001ad6:	e029      	b.n	8001b2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	3304      	adds	r3, #4
 8001ade:	623b      	str	r3, [r7, #32]
          break;
 8001ae0:	e024      	b.n	8001b2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	3308      	adds	r3, #8
 8001ae8:	623b      	str	r3, [r7, #32]
          break;
 8001aea:	e01f      	b.n	8001b2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	330c      	adds	r3, #12
 8001af2:	623b      	str	r3, [r7, #32]
          break;
 8001af4:	e01a      	b.n	8001b2c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d102      	bne.n	8001b04 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001afe:	2304      	movs	r3, #4
 8001b00:	623b      	str	r3, [r7, #32]
          break;
 8001b02:	e013      	b.n	8001b2c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d105      	bne.n	8001b18 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b0c:	2308      	movs	r3, #8
 8001b0e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69fa      	ldr	r2, [r7, #28]
 8001b14:	611a      	str	r2, [r3, #16]
          break;
 8001b16:	e009      	b.n	8001b2c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b18:	2308      	movs	r3, #8
 8001b1a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	69fa      	ldr	r2, [r7, #28]
 8001b20:	615a      	str	r2, [r3, #20]
          break;
 8001b22:	e003      	b.n	8001b2c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b24:	2300      	movs	r3, #0
 8001b26:	623b      	str	r3, [r7, #32]
          break;
 8001b28:	e000      	b.n	8001b2c <HAL_GPIO_Init+0x130>
          break;
 8001b2a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	2bff      	cmp	r3, #255	; 0xff
 8001b30:	d801      	bhi.n	8001b36 <HAL_GPIO_Init+0x13a>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	e001      	b.n	8001b3a <HAL_GPIO_Init+0x13e>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	3304      	adds	r3, #4
 8001b3a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	2bff      	cmp	r3, #255	; 0xff
 8001b40:	d802      	bhi.n	8001b48 <HAL_GPIO_Init+0x14c>
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	e002      	b.n	8001b4e <HAL_GPIO_Init+0x152>
 8001b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4a:	3b08      	subs	r3, #8
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	210f      	movs	r1, #15
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	401a      	ands	r2, r3
 8001b60:	6a39      	ldr	r1, [r7, #32]
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	fa01 f303 	lsl.w	r3, r1, r3
 8001b68:	431a      	orrs	r2, r3
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 80b1 	beq.w	8001cde <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b7c:	4b4d      	ldr	r3, [pc, #308]	; (8001cb4 <HAL_GPIO_Init+0x2b8>)
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	4a4c      	ldr	r2, [pc, #304]	; (8001cb4 <HAL_GPIO_Init+0x2b8>)
 8001b82:	f043 0301 	orr.w	r3, r3, #1
 8001b86:	6193      	str	r3, [r2, #24]
 8001b88:	4b4a      	ldr	r3, [pc, #296]	; (8001cb4 <HAL_GPIO_Init+0x2b8>)
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	60bb      	str	r3, [r7, #8]
 8001b92:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b94:	4a48      	ldr	r2, [pc, #288]	; (8001cb8 <HAL_GPIO_Init+0x2bc>)
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	089b      	lsrs	r3, r3, #2
 8001b9a:	3302      	adds	r3, #2
 8001b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba4:	f003 0303 	and.w	r3, r3, #3
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	220f      	movs	r2, #15
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a40      	ldr	r2, [pc, #256]	; (8001cbc <HAL_GPIO_Init+0x2c0>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d013      	beq.n	8001be8 <HAL_GPIO_Init+0x1ec>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a3f      	ldr	r2, [pc, #252]	; (8001cc0 <HAL_GPIO_Init+0x2c4>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d00d      	beq.n	8001be4 <HAL_GPIO_Init+0x1e8>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4a3e      	ldr	r2, [pc, #248]	; (8001cc4 <HAL_GPIO_Init+0x2c8>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d007      	beq.n	8001be0 <HAL_GPIO_Init+0x1e4>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4a3d      	ldr	r2, [pc, #244]	; (8001cc8 <HAL_GPIO_Init+0x2cc>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d101      	bne.n	8001bdc <HAL_GPIO_Init+0x1e0>
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e006      	b.n	8001bea <HAL_GPIO_Init+0x1ee>
 8001bdc:	2304      	movs	r3, #4
 8001bde:	e004      	b.n	8001bea <HAL_GPIO_Init+0x1ee>
 8001be0:	2302      	movs	r3, #2
 8001be2:	e002      	b.n	8001bea <HAL_GPIO_Init+0x1ee>
 8001be4:	2301      	movs	r3, #1
 8001be6:	e000      	b.n	8001bea <HAL_GPIO_Init+0x1ee>
 8001be8:	2300      	movs	r3, #0
 8001bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bec:	f002 0203 	and.w	r2, r2, #3
 8001bf0:	0092      	lsls	r2, r2, #2
 8001bf2:	4093      	lsls	r3, r2
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bfa:	492f      	ldr	r1, [pc, #188]	; (8001cb8 <HAL_GPIO_Init+0x2bc>)
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfe:	089b      	lsrs	r3, r3, #2
 8001c00:	3302      	adds	r3, #2
 8001c02:	68fa      	ldr	r2, [r7, #12]
 8001c04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d006      	beq.n	8001c22 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c14:	4b2d      	ldr	r3, [pc, #180]	; (8001ccc <HAL_GPIO_Init+0x2d0>)
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	492c      	ldr	r1, [pc, #176]	; (8001ccc <HAL_GPIO_Init+0x2d0>)
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	608b      	str	r3, [r1, #8]
 8001c20:	e006      	b.n	8001c30 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c22:	4b2a      	ldr	r3, [pc, #168]	; (8001ccc <HAL_GPIO_Init+0x2d0>)
 8001c24:	689a      	ldr	r2, [r3, #8]
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	4928      	ldr	r1, [pc, #160]	; (8001ccc <HAL_GPIO_Init+0x2d0>)
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d006      	beq.n	8001c4a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c3c:	4b23      	ldr	r3, [pc, #140]	; (8001ccc <HAL_GPIO_Init+0x2d0>)
 8001c3e:	68da      	ldr	r2, [r3, #12]
 8001c40:	4922      	ldr	r1, [pc, #136]	; (8001ccc <HAL_GPIO_Init+0x2d0>)
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	60cb      	str	r3, [r1, #12]
 8001c48:	e006      	b.n	8001c58 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c4a:	4b20      	ldr	r3, [pc, #128]	; (8001ccc <HAL_GPIO_Init+0x2d0>)
 8001c4c:	68da      	ldr	r2, [r3, #12]
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	43db      	mvns	r3, r3
 8001c52:	491e      	ldr	r1, [pc, #120]	; (8001ccc <HAL_GPIO_Init+0x2d0>)
 8001c54:	4013      	ands	r3, r2
 8001c56:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d006      	beq.n	8001c72 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c64:	4b19      	ldr	r3, [pc, #100]	; (8001ccc <HAL_GPIO_Init+0x2d0>)
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	4918      	ldr	r1, [pc, #96]	; (8001ccc <HAL_GPIO_Init+0x2d0>)
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	604b      	str	r3, [r1, #4]
 8001c70:	e006      	b.n	8001c80 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c72:	4b16      	ldr	r3, [pc, #88]	; (8001ccc <HAL_GPIO_Init+0x2d0>)
 8001c74:	685a      	ldr	r2, [r3, #4]
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	4914      	ldr	r1, [pc, #80]	; (8001ccc <HAL_GPIO_Init+0x2d0>)
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d021      	beq.n	8001cd0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c8c:	4b0f      	ldr	r3, [pc, #60]	; (8001ccc <HAL_GPIO_Init+0x2d0>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	490e      	ldr	r1, [pc, #56]	; (8001ccc <HAL_GPIO_Init+0x2d0>)
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	600b      	str	r3, [r1, #0]
 8001c98:	e021      	b.n	8001cde <HAL_GPIO_Init+0x2e2>
 8001c9a:	bf00      	nop
 8001c9c:	10320000 	.word	0x10320000
 8001ca0:	10310000 	.word	0x10310000
 8001ca4:	10220000 	.word	0x10220000
 8001ca8:	10210000 	.word	0x10210000
 8001cac:	10120000 	.word	0x10120000
 8001cb0:	10110000 	.word	0x10110000
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	40010000 	.word	0x40010000
 8001cbc:	40010800 	.word	0x40010800
 8001cc0:	40010c00 	.word	0x40010c00
 8001cc4:	40011000 	.word	0x40011000
 8001cc8:	40011400 	.word	0x40011400
 8001ccc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <HAL_GPIO_Init+0x304>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	4909      	ldr	r1, [pc, #36]	; (8001d00 <HAL_GPIO_Init+0x304>)
 8001cda:	4013      	ands	r3, r2
 8001cdc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	fa22 f303 	lsr.w	r3, r2, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f47f ae8e 	bne.w	8001a10 <HAL_GPIO_Init+0x14>
  }
}
 8001cf4:	bf00      	nop
 8001cf6:	bf00      	nop
 8001cf8:	372c      	adds	r7, #44	; 0x2c
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr
 8001d00:	40010400 	.word	0x40010400

08001d04 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001d0a:	f7ff f813 	bl	8000d34 <HAL_GetTick>
 8001d0e:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001d10:	4b45      	ldr	r3, [pc, #276]	; (8001e28 <HAL_RCC_DeInit+0x124>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a44      	ldr	r2, [pc, #272]	; (8001e28 <HAL_RCC_DeInit+0x124>)
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d1e:	f7ff f809 	bl	8000d34 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e077      	b.n	8001e20 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001d30:	4b3d      	ldr	r3, [pc, #244]	; (8001e28 <HAL_RCC_DeInit+0x124>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0f0      	beq.n	8001d1e <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 8001d3c:	4b3a      	ldr	r3, [pc, #232]	; (8001e28 <HAL_RCC_DeInit+0x124>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001d44:	4a38      	ldr	r2, [pc, #224]	; (8001e28 <HAL_RCC_DeInit+0x124>)
 8001d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d4a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001d4c:	f7fe fff2 	bl	8000d34 <HAL_GetTick>
 8001d50:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8001d52:	4b35      	ldr	r3, [pc, #212]	; (8001e28 <HAL_RCC_DeInit+0x124>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	605a      	str	r2, [r3, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8001d58:	e00a      	b.n	8001d70 <HAL_RCC_DeInit+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d5a:	f7fe ffeb 	bl	8000d34 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_DeInit+0x6c>
    {
      return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e057      	b.n	8001e20 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8001d70:	4b2d      	ldr	r3, [pc, #180]	; (8001e28 <HAL_RCC_DeInit+0x124>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 030c 	and.w	r3, r3, #12
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1ee      	bne.n	8001d5a <HAL_RCC_DeInit+0x56>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8001d7c:	4b2b      	ldr	r3, [pc, #172]	; (8001e2c <HAL_RCC_DeInit+0x128>)
 8001d7e:	4a2c      	ldr	r2, [pc, #176]	; (8001e30 <HAL_RCC_DeInit+0x12c>)
 8001d80:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d82:	4b2c      	ldr	r3, [pc, #176]	; (8001e34 <HAL_RCC_DeInit+0x130>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7fe ff92 	bl	8000cb0 <HAL_InitTick>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <HAL_RCC_DeInit+0x92>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e044      	b.n	8001e20 <HAL_RCC_DeInit+0x11c>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001d96:	f7fe ffcd 	bl	8000d34 <HAL_GetTick>
 8001d9a:	6078      	str	r0, [r7, #4]

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001d9c:	4b22      	ldr	r3, [pc, #136]	; (8001e28 <HAL_RCC_DeInit+0x124>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a21      	ldr	r2, [pc, #132]	; (8001e28 <HAL_RCC_DeInit+0x124>)
 8001da2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001da6:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001daa:	f7fe ffc3 	bl	8000d34 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e031      	b.n	8001e20 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001dbc:	4b1a      	ldr	r3, [pc, #104]	; (8001e28 <HAL_RCC_DeInit+0x124>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1f0      	bne.n	8001daa <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Ensure to reset PLLSRC and PLLMUL bits */
  CLEAR_REG(RCC->CFGR);
 8001dc8:	4b17      	ldr	r3, [pc, #92]	; (8001e28 <HAL_RCC_DeInit+0x124>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	605a      	str	r2, [r3, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001dce:	f7fe ffb1 	bl	8000d34 <HAL_GetTick>
 8001dd2:	6078      	str	r0, [r7, #4]

  /* Reset HSEON & CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 8001dd4:	4b14      	ldr	r3, [pc, #80]	; (8001e28 <HAL_RCC_DeInit+0x124>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a13      	ldr	r2, [pc, #76]	; (8001e28 <HAL_RCC_DeInit+0x124>)
 8001dda:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001dde:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_DeInit+0xf0>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001de2:	f7fe ffa7 	bl	8000d34 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b64      	cmp	r3, #100	; 0x64
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_DeInit+0xf0>
    {
      return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e015      	b.n	8001e20 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001df4:	4b0c      	ldr	r3, [pc, #48]	; (8001e28 <HAL_RCC_DeInit+0x124>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1f0      	bne.n	8001de2 <HAL_RCC_DeInit+0xde>
    }
  }

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001e00:	4b09      	ldr	r3, [pc, #36]	; (8001e28 <HAL_RCC_DeInit+0x124>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a08      	ldr	r2, [pc, #32]	; (8001e28 <HAL_RCC_DeInit+0x124>)
 8001e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e0a:	6013      	str	r3, [r2, #0]
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
#endif /* RCC_CFGR2_PREDIV1 */

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8001e0c:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <HAL_RCC_DeInit+0x124>)
 8001e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e10:	4a05      	ldr	r2, [pc, #20]	; (8001e28 <HAL_RCC_DeInit+0x124>)
 8001e12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e16:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8001e18:	4b03      	ldr	r3, [pc, #12]	; (8001e28 <HAL_RCC_DeInit+0x124>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	20000010 	.word	0x20000010
 8001e30:	007a1200 	.word	0x007a1200
 8001e34:	20000014 	.word	0x20000014

08001e38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e272      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f000 8087 	beq.w	8001f66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e58:	4b92      	ldr	r3, [pc, #584]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 030c 	and.w	r3, r3, #12
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d00c      	beq.n	8001e7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e64:	4b8f      	ldr	r3, [pc, #572]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 030c 	and.w	r3, r3, #12
 8001e6c:	2b08      	cmp	r3, #8
 8001e6e:	d112      	bne.n	8001e96 <HAL_RCC_OscConfig+0x5e>
 8001e70:	4b8c      	ldr	r3, [pc, #560]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e7c:	d10b      	bne.n	8001e96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e7e:	4b89      	ldr	r3, [pc, #548]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d06c      	beq.n	8001f64 <HAL_RCC_OscConfig+0x12c>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d168      	bne.n	8001f64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e24c      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e9e:	d106      	bne.n	8001eae <HAL_RCC_OscConfig+0x76>
 8001ea0:	4b80      	ldr	r3, [pc, #512]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a7f      	ldr	r2, [pc, #508]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001ea6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eaa:	6013      	str	r3, [r2, #0]
 8001eac:	e02e      	b.n	8001f0c <HAL_RCC_OscConfig+0xd4>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10c      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x98>
 8001eb6:	4b7b      	ldr	r3, [pc, #492]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a7a      	ldr	r2, [pc, #488]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	4b78      	ldr	r3, [pc, #480]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a77      	ldr	r2, [pc, #476]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	e01d      	b.n	8001f0c <HAL_RCC_OscConfig+0xd4>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ed8:	d10c      	bne.n	8001ef4 <HAL_RCC_OscConfig+0xbc>
 8001eda:	4b72      	ldr	r3, [pc, #456]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a71      	ldr	r2, [pc, #452]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	4b6f      	ldr	r3, [pc, #444]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a6e      	ldr	r2, [pc, #440]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	e00b      	b.n	8001f0c <HAL_RCC_OscConfig+0xd4>
 8001ef4:	4b6b      	ldr	r3, [pc, #428]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a6a      	ldr	r2, [pc, #424]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001efa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001efe:	6013      	str	r3, [r2, #0]
 8001f00:	4b68      	ldr	r3, [pc, #416]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a67      	ldr	r2, [pc, #412]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001f06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d013      	beq.n	8001f3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f14:	f7fe ff0e 	bl	8000d34 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f1c:	f7fe ff0a 	bl	8000d34 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b64      	cmp	r3, #100	; 0x64
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e200      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f2e:	4b5d      	ldr	r3, [pc, #372]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d0f0      	beq.n	8001f1c <HAL_RCC_OscConfig+0xe4>
 8001f3a:	e014      	b.n	8001f66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3c:	f7fe fefa 	bl	8000d34 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f44:	f7fe fef6 	bl	8000d34 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b64      	cmp	r3, #100	; 0x64
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e1ec      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f56:	4b53      	ldr	r3, [pc, #332]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1f0      	bne.n	8001f44 <HAL_RCC_OscConfig+0x10c>
 8001f62:	e000      	b.n	8001f66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d063      	beq.n	800203a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f72:	4b4c      	ldr	r3, [pc, #304]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f003 030c 	and.w	r3, r3, #12
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00b      	beq.n	8001f96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f7e:	4b49      	ldr	r3, [pc, #292]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f003 030c 	and.w	r3, r3, #12
 8001f86:	2b08      	cmp	r3, #8
 8001f88:	d11c      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x18c>
 8001f8a:	4b46      	ldr	r3, [pc, #280]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d116      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f96:	4b43      	ldr	r3, [pc, #268]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d005      	beq.n	8001fae <HAL_RCC_OscConfig+0x176>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d001      	beq.n	8001fae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e1c0      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fae:	4b3d      	ldr	r3, [pc, #244]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	4939      	ldr	r1, [pc, #228]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fc2:	e03a      	b.n	800203a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d020      	beq.n	800200e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fcc:	4b36      	ldr	r3, [pc, #216]	; (80020a8 <HAL_RCC_OscConfig+0x270>)
 8001fce:	2201      	movs	r2, #1
 8001fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd2:	f7fe feaf 	bl	8000d34 <HAL_GetTick>
 8001fd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd8:	e008      	b.n	8001fec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fda:	f7fe feab 	bl	8000d34 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e1a1      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fec:	4b2d      	ldr	r3, [pc, #180]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d0f0      	beq.n	8001fda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff8:	4b2a      	ldr	r3, [pc, #168]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	4927      	ldr	r1, [pc, #156]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8002008:	4313      	orrs	r3, r2
 800200a:	600b      	str	r3, [r1, #0]
 800200c:	e015      	b.n	800203a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800200e:	4b26      	ldr	r3, [pc, #152]	; (80020a8 <HAL_RCC_OscConfig+0x270>)
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002014:	f7fe fe8e 	bl	8000d34 <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800201c:	f7fe fe8a 	bl	8000d34 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e180      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800202e:	4b1d      	ldr	r3, [pc, #116]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1f0      	bne.n	800201c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0308 	and.w	r3, r3, #8
 8002042:	2b00      	cmp	r3, #0
 8002044:	d03a      	beq.n	80020bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d019      	beq.n	8002082 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800204e:	4b17      	ldr	r3, [pc, #92]	; (80020ac <HAL_RCC_OscConfig+0x274>)
 8002050:	2201      	movs	r2, #1
 8002052:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002054:	f7fe fe6e 	bl	8000d34 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800205c:	f7fe fe6a 	bl	8000d34 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e160      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800206e:	4b0d      	ldr	r3, [pc, #52]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8002070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d0f0      	beq.n	800205c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800207a:	2001      	movs	r0, #1
 800207c:	f000 face 	bl	800261c <RCC_Delay>
 8002080:	e01c      	b.n	80020bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002082:	4b0a      	ldr	r3, [pc, #40]	; (80020ac <HAL_RCC_OscConfig+0x274>)
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002088:	f7fe fe54 	bl	8000d34 <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800208e:	e00f      	b.n	80020b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002090:	f7fe fe50 	bl	8000d34 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d908      	bls.n	80020b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e146      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
 80020a2:	bf00      	nop
 80020a4:	40021000 	.word	0x40021000
 80020a8:	42420000 	.word	0x42420000
 80020ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b0:	4b92      	ldr	r3, [pc, #584]	; (80022fc <HAL_RCC_OscConfig+0x4c4>)
 80020b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1e9      	bne.n	8002090 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f000 80a6 	beq.w	8002216 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ca:	2300      	movs	r3, #0
 80020cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ce:	4b8b      	ldr	r3, [pc, #556]	; (80022fc <HAL_RCC_OscConfig+0x4c4>)
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10d      	bne.n	80020f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020da:	4b88      	ldr	r3, [pc, #544]	; (80022fc <HAL_RCC_OscConfig+0x4c4>)
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	4a87      	ldr	r2, [pc, #540]	; (80022fc <HAL_RCC_OscConfig+0x4c4>)
 80020e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e4:	61d3      	str	r3, [r2, #28]
 80020e6:	4b85      	ldr	r3, [pc, #532]	; (80022fc <HAL_RCC_OscConfig+0x4c4>)
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ee:	60bb      	str	r3, [r7, #8]
 80020f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020f2:	2301      	movs	r3, #1
 80020f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f6:	4b82      	ldr	r3, [pc, #520]	; (8002300 <HAL_RCC_OscConfig+0x4c8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d118      	bne.n	8002134 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002102:	4b7f      	ldr	r3, [pc, #508]	; (8002300 <HAL_RCC_OscConfig+0x4c8>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a7e      	ldr	r2, [pc, #504]	; (8002300 <HAL_RCC_OscConfig+0x4c8>)
 8002108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800210c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800210e:	f7fe fe11 	bl	8000d34 <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002116:	f7fe fe0d 	bl	8000d34 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b64      	cmp	r3, #100	; 0x64
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e103      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002128:	4b75      	ldr	r3, [pc, #468]	; (8002300 <HAL_RCC_OscConfig+0x4c8>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0f0      	beq.n	8002116 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d106      	bne.n	800214a <HAL_RCC_OscConfig+0x312>
 800213c:	4b6f      	ldr	r3, [pc, #444]	; (80022fc <HAL_RCC_OscConfig+0x4c4>)
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	4a6e      	ldr	r2, [pc, #440]	; (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	6213      	str	r3, [r2, #32]
 8002148:	e02d      	b.n	80021a6 <HAL_RCC_OscConfig+0x36e>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10c      	bne.n	800216c <HAL_RCC_OscConfig+0x334>
 8002152:	4b6a      	ldr	r3, [pc, #424]	; (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	4a69      	ldr	r2, [pc, #420]	; (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002158:	f023 0301 	bic.w	r3, r3, #1
 800215c:	6213      	str	r3, [r2, #32]
 800215e:	4b67      	ldr	r3, [pc, #412]	; (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002160:	6a1b      	ldr	r3, [r3, #32]
 8002162:	4a66      	ldr	r2, [pc, #408]	; (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002164:	f023 0304 	bic.w	r3, r3, #4
 8002168:	6213      	str	r3, [r2, #32]
 800216a:	e01c      	b.n	80021a6 <HAL_RCC_OscConfig+0x36e>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	2b05      	cmp	r3, #5
 8002172:	d10c      	bne.n	800218e <HAL_RCC_OscConfig+0x356>
 8002174:	4b61      	ldr	r3, [pc, #388]	; (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	4a60      	ldr	r2, [pc, #384]	; (80022fc <HAL_RCC_OscConfig+0x4c4>)
 800217a:	f043 0304 	orr.w	r3, r3, #4
 800217e:	6213      	str	r3, [r2, #32]
 8002180:	4b5e      	ldr	r3, [pc, #376]	; (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002182:	6a1b      	ldr	r3, [r3, #32]
 8002184:	4a5d      	ldr	r2, [pc, #372]	; (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	6213      	str	r3, [r2, #32]
 800218c:	e00b      	b.n	80021a6 <HAL_RCC_OscConfig+0x36e>
 800218e:	4b5b      	ldr	r3, [pc, #364]	; (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	4a5a      	ldr	r2, [pc, #360]	; (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002194:	f023 0301 	bic.w	r3, r3, #1
 8002198:	6213      	str	r3, [r2, #32]
 800219a:	4b58      	ldr	r3, [pc, #352]	; (80022fc <HAL_RCC_OscConfig+0x4c4>)
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	4a57      	ldr	r2, [pc, #348]	; (80022fc <HAL_RCC_OscConfig+0x4c4>)
 80021a0:	f023 0304 	bic.w	r3, r3, #4
 80021a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d015      	beq.n	80021da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ae:	f7fe fdc1 	bl	8000d34 <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b4:	e00a      	b.n	80021cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b6:	f7fe fdbd 	bl	8000d34 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e0b1      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021cc:	4b4b      	ldr	r3, [pc, #300]	; (80022fc <HAL_RCC_OscConfig+0x4c4>)
 80021ce:	6a1b      	ldr	r3, [r3, #32]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0ee      	beq.n	80021b6 <HAL_RCC_OscConfig+0x37e>
 80021d8:	e014      	b.n	8002204 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021da:	f7fe fdab 	bl	8000d34 <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021e0:	e00a      	b.n	80021f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021e2:	f7fe fda7 	bl	8000d34 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e09b      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f8:	4b40      	ldr	r3, [pc, #256]	; (80022fc <HAL_RCC_OscConfig+0x4c4>)
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1ee      	bne.n	80021e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002204:	7dfb      	ldrb	r3, [r7, #23]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d105      	bne.n	8002216 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800220a:	4b3c      	ldr	r3, [pc, #240]	; (80022fc <HAL_RCC_OscConfig+0x4c4>)
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	4a3b      	ldr	r2, [pc, #236]	; (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002210:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002214:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	2b00      	cmp	r3, #0
 800221c:	f000 8087 	beq.w	800232e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002220:	4b36      	ldr	r3, [pc, #216]	; (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 030c 	and.w	r3, r3, #12
 8002228:	2b08      	cmp	r3, #8
 800222a:	d061      	beq.n	80022f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	69db      	ldr	r3, [r3, #28]
 8002230:	2b02      	cmp	r3, #2
 8002232:	d146      	bne.n	80022c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002234:	4b33      	ldr	r3, [pc, #204]	; (8002304 <HAL_RCC_OscConfig+0x4cc>)
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223a:	f7fe fd7b 	bl	8000d34 <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002242:	f7fe fd77 	bl	8000d34 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e06d      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002254:	4b29      	ldr	r3, [pc, #164]	; (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1f0      	bne.n	8002242 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002268:	d108      	bne.n	800227c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800226a:	4b24      	ldr	r3, [pc, #144]	; (80022fc <HAL_RCC_OscConfig+0x4c4>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	4921      	ldr	r1, [pc, #132]	; (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002278:	4313      	orrs	r3, r2
 800227a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800227c:	4b1f      	ldr	r3, [pc, #124]	; (80022fc <HAL_RCC_OscConfig+0x4c4>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a19      	ldr	r1, [r3, #32]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228c:	430b      	orrs	r3, r1
 800228e:	491b      	ldr	r1, [pc, #108]	; (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002290:	4313      	orrs	r3, r2
 8002292:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002294:	4b1b      	ldr	r3, [pc, #108]	; (8002304 <HAL_RCC_OscConfig+0x4cc>)
 8002296:	2201      	movs	r2, #1
 8002298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229a:	f7fe fd4b 	bl	8000d34 <HAL_GetTick>
 800229e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022a0:	e008      	b.n	80022b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a2:	f7fe fd47 	bl	8000d34 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e03d      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022b4:	4b11      	ldr	r3, [pc, #68]	; (80022fc <HAL_RCC_OscConfig+0x4c4>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0f0      	beq.n	80022a2 <HAL_RCC_OscConfig+0x46a>
 80022c0:	e035      	b.n	800232e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c2:	4b10      	ldr	r3, [pc, #64]	; (8002304 <HAL_RCC_OscConfig+0x4cc>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c8:	f7fe fd34 	bl	8000d34 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d0:	f7fe fd30 	bl	8000d34 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e026      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022e2:	4b06      	ldr	r3, [pc, #24]	; (80022fc <HAL_RCC_OscConfig+0x4c4>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f0      	bne.n	80022d0 <HAL_RCC_OscConfig+0x498>
 80022ee:	e01e      	b.n	800232e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	69db      	ldr	r3, [r3, #28]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d107      	bne.n	8002308 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e019      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
 80022fc:	40021000 	.word	0x40021000
 8002300:	40007000 	.word	0x40007000
 8002304:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002308:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <HAL_RCC_OscConfig+0x500>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	429a      	cmp	r2, r3
 800231a:	d106      	bne.n	800232a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002326:	429a      	cmp	r2, r3
 8002328:	d001      	beq.n	800232e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e000      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3718      	adds	r7, #24
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40021000 	.word	0x40021000

0800233c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e0d0      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002350:	4b6a      	ldr	r3, [pc, #424]	; (80024fc <HAL_RCC_ClockConfig+0x1c0>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	429a      	cmp	r2, r3
 800235c:	d910      	bls.n	8002380 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235e:	4b67      	ldr	r3, [pc, #412]	; (80024fc <HAL_RCC_ClockConfig+0x1c0>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f023 0207 	bic.w	r2, r3, #7
 8002366:	4965      	ldr	r1, [pc, #404]	; (80024fc <HAL_RCC_ClockConfig+0x1c0>)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	4313      	orrs	r3, r2
 800236c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800236e:	4b63      	ldr	r3, [pc, #396]	; (80024fc <HAL_RCC_ClockConfig+0x1c0>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	429a      	cmp	r2, r3
 800237a:	d001      	beq.n	8002380 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e0b8      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d020      	beq.n	80023ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	2b00      	cmp	r3, #0
 8002396:	d005      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002398:	4b59      	ldr	r3, [pc, #356]	; (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	4a58      	ldr	r2, [pc, #352]	; (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 800239e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0308 	and.w	r3, r3, #8
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d005      	beq.n	80023bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023b0:	4b53      	ldr	r3, [pc, #332]	; (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	4a52      	ldr	r2, [pc, #328]	; (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80023b6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023bc:	4b50      	ldr	r3, [pc, #320]	; (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	494d      	ldr	r1, [pc, #308]	; (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d040      	beq.n	800245c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d107      	bne.n	80023f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e2:	4b47      	ldr	r3, [pc, #284]	; (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d115      	bne.n	800241a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e07f      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d107      	bne.n	800240a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023fa:	4b41      	ldr	r3, [pc, #260]	; (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d109      	bne.n	800241a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e073      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800240a:	4b3d      	ldr	r3, [pc, #244]	; (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e06b      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800241a:	4b39      	ldr	r3, [pc, #228]	; (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f023 0203 	bic.w	r2, r3, #3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	4936      	ldr	r1, [pc, #216]	; (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 8002428:	4313      	orrs	r3, r2
 800242a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800242c:	f7fe fc82 	bl	8000d34 <HAL_GetTick>
 8002430:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002432:	e00a      	b.n	800244a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002434:	f7fe fc7e 	bl	8000d34 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002442:	4293      	cmp	r3, r2
 8002444:	d901      	bls.n	800244a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e053      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244a:	4b2d      	ldr	r3, [pc, #180]	; (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 020c 	and.w	r2, r3, #12
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	429a      	cmp	r2, r3
 800245a:	d1eb      	bne.n	8002434 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800245c:	4b27      	ldr	r3, [pc, #156]	; (80024fc <HAL_RCC_ClockConfig+0x1c0>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0307 	and.w	r3, r3, #7
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	429a      	cmp	r2, r3
 8002468:	d210      	bcs.n	800248c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246a:	4b24      	ldr	r3, [pc, #144]	; (80024fc <HAL_RCC_ClockConfig+0x1c0>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f023 0207 	bic.w	r2, r3, #7
 8002472:	4922      	ldr	r1, [pc, #136]	; (80024fc <HAL_RCC_ClockConfig+0x1c0>)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	4313      	orrs	r3, r2
 8002478:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800247a:	4b20      	ldr	r3, [pc, #128]	; (80024fc <HAL_RCC_ClockConfig+0x1c0>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	429a      	cmp	r2, r3
 8002486:	d001      	beq.n	800248c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e032      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	2b00      	cmp	r3, #0
 8002496:	d008      	beq.n	80024aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002498:	4b19      	ldr	r3, [pc, #100]	; (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	4916      	ldr	r1, [pc, #88]	; (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0308 	and.w	r3, r3, #8
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d009      	beq.n	80024ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024b6:	4b12      	ldr	r3, [pc, #72]	; (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	490e      	ldr	r1, [pc, #56]	; (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024ca:	f000 f821 	bl	8002510 <HAL_RCC_GetSysClockFreq>
 80024ce:	4602      	mov	r2, r0
 80024d0:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	091b      	lsrs	r3, r3, #4
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	490a      	ldr	r1, [pc, #40]	; (8002504 <HAL_RCC_ClockConfig+0x1c8>)
 80024dc:	5ccb      	ldrb	r3, [r1, r3]
 80024de:	fa22 f303 	lsr.w	r3, r2, r3
 80024e2:	4a09      	ldr	r2, [pc, #36]	; (8002508 <HAL_RCC_ClockConfig+0x1cc>)
 80024e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024e6:	4b09      	ldr	r3, [pc, #36]	; (800250c <HAL_RCC_ClockConfig+0x1d0>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fe fbe0 	bl	8000cb0 <HAL_InitTick>

  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40022000 	.word	0x40022000
 8002500:	40021000 	.word	0x40021000
 8002504:	080038c4 	.word	0x080038c4
 8002508:	20000010 	.word	0x20000010
 800250c:	20000014 	.word	0x20000014

08002510 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002510:	b480      	push	{r7}
 8002512:	b087      	sub	sp, #28
 8002514:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002516:	2300      	movs	r3, #0
 8002518:	60fb      	str	r3, [r7, #12]
 800251a:	2300      	movs	r3, #0
 800251c:	60bb      	str	r3, [r7, #8]
 800251e:	2300      	movs	r3, #0
 8002520:	617b      	str	r3, [r7, #20]
 8002522:	2300      	movs	r3, #0
 8002524:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002526:	2300      	movs	r3, #0
 8002528:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800252a:	4b1e      	ldr	r3, [pc, #120]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x94>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f003 030c 	and.w	r3, r3, #12
 8002536:	2b04      	cmp	r3, #4
 8002538:	d002      	beq.n	8002540 <HAL_RCC_GetSysClockFreq+0x30>
 800253a:	2b08      	cmp	r3, #8
 800253c:	d003      	beq.n	8002546 <HAL_RCC_GetSysClockFreq+0x36>
 800253e:	e027      	b.n	8002590 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002540:	4b19      	ldr	r3, [pc, #100]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002542:	613b      	str	r3, [r7, #16]
      break;
 8002544:	e027      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	0c9b      	lsrs	r3, r3, #18
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	4a17      	ldr	r2, [pc, #92]	; (80025ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8002550:	5cd3      	ldrb	r3, [r2, r3]
 8002552:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d010      	beq.n	8002580 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800255e:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	0c5b      	lsrs	r3, r3, #17
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	4a11      	ldr	r2, [pc, #68]	; (80025b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800256a:	5cd3      	ldrb	r3, [r2, r3]
 800256c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a0d      	ldr	r2, [pc, #52]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002572:	fb03 f202 	mul.w	r2, r3, r2
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	fbb2 f3f3 	udiv	r3, r2, r3
 800257c:	617b      	str	r3, [r7, #20]
 800257e:	e004      	b.n	800258a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a0c      	ldr	r2, [pc, #48]	; (80025b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002584:	fb02 f303 	mul.w	r3, r2, r3
 8002588:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	613b      	str	r3, [r7, #16]
      break;
 800258e:	e002      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002590:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002592:	613b      	str	r3, [r7, #16]
      break;
 8002594:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002596:	693b      	ldr	r3, [r7, #16]
}
 8002598:	4618      	mov	r0, r3
 800259a:	371c      	adds	r7, #28
 800259c:	46bd      	mov	sp, r7
 800259e:	bc80      	pop	{r7}
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	40021000 	.word	0x40021000
 80025a8:	007a1200 	.word	0x007a1200
 80025ac:	080038dc 	.word	0x080038dc
 80025b0:	080038ec 	.word	0x080038ec
 80025b4:	003d0900 	.word	0x003d0900

080025b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025bc:	4b02      	ldr	r3, [pc, #8]	; (80025c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80025be:	681b      	ldr	r3, [r3, #0]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr
 80025c8:	20000010 	.word	0x20000010

080025cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025d0:	f7ff fff2 	bl	80025b8 <HAL_RCC_GetHCLKFreq>
 80025d4:	4602      	mov	r2, r0
 80025d6:	4b05      	ldr	r3, [pc, #20]	; (80025ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	0a1b      	lsrs	r3, r3, #8
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	4903      	ldr	r1, [pc, #12]	; (80025f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025e2:	5ccb      	ldrb	r3, [r1, r3]
 80025e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40021000 	.word	0x40021000
 80025f0:	080038d4 	.word	0x080038d4

080025f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025f8:	f7ff ffde 	bl	80025b8 <HAL_RCC_GetHCLKFreq>
 80025fc:	4602      	mov	r2, r0
 80025fe:	4b05      	ldr	r3, [pc, #20]	; (8002614 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	0adb      	lsrs	r3, r3, #11
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	4903      	ldr	r1, [pc, #12]	; (8002618 <HAL_RCC_GetPCLK2Freq+0x24>)
 800260a:	5ccb      	ldrb	r3, [r1, r3]
 800260c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002610:	4618      	mov	r0, r3
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40021000 	.word	0x40021000
 8002618:	080038d4 	.word	0x080038d4

0800261c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002624:	4b0a      	ldr	r3, [pc, #40]	; (8002650 <RCC_Delay+0x34>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a0a      	ldr	r2, [pc, #40]	; (8002654 <RCC_Delay+0x38>)
 800262a:	fba2 2303 	umull	r2, r3, r2, r3
 800262e:	0a5b      	lsrs	r3, r3, #9
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	fb02 f303 	mul.w	r3, r2, r3
 8002636:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002638:	bf00      	nop
  }
  while (Delay --);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	1e5a      	subs	r2, r3, #1
 800263e:	60fa      	str	r2, [r7, #12]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1f9      	bne.n	8002638 <RCC_Delay+0x1c>
}
 8002644:	bf00      	nop
 8002646:	bf00      	nop
 8002648:	3714      	adds	r7, #20
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr
 8002650:	20000010 	.word	0x20000010
 8002654:	10624dd3 	.word	0x10624dd3

08002658 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e042      	b.n	80026f0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d106      	bne.n	8002684 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7fe fa90 	bl	8000ba4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2224      	movs	r2, #36	; 0x24
 8002688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68da      	ldr	r2, [r3, #12]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800269a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 f9af 	bl	8002a00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	691a      	ldr	r2, [r3, #16]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	695a      	ldr	r2, [r3, #20]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68da      	ldr	r2, [r3, #12]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2220      	movs	r2, #32
 80026dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2220      	movs	r2, #32
 80026e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b08a      	sub	sp, #40	; 0x28
 80026fc:	af02      	add	r7, sp, #8
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	603b      	str	r3, [r7, #0]
 8002704:	4613      	mov	r3, r2
 8002706:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002708:	2300      	movs	r3, #0
 800270a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2b20      	cmp	r3, #32
 8002716:	d16d      	bne.n	80027f4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d002      	beq.n	8002724 <HAL_UART_Transmit+0x2c>
 800271e:	88fb      	ldrh	r3, [r7, #6]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d101      	bne.n	8002728 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e066      	b.n	80027f6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2200      	movs	r2, #0
 800272c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2221      	movs	r2, #33	; 0x21
 8002732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002736:	f7fe fafd 	bl	8000d34 <HAL_GetTick>
 800273a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	88fa      	ldrh	r2, [r7, #6]
 8002740:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	88fa      	ldrh	r2, [r7, #6]
 8002746:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002750:	d108      	bne.n	8002764 <HAL_UART_Transmit+0x6c>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d104      	bne.n	8002764 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800275a:	2300      	movs	r3, #0
 800275c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	61bb      	str	r3, [r7, #24]
 8002762:	e003      	b.n	800276c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002768:	2300      	movs	r3, #0
 800276a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800276c:	e02a      	b.n	80027c4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	2200      	movs	r2, #0
 8002776:	2180      	movs	r1, #128	; 0x80
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f000 f8d2 	bl	8002922 <UART_WaitOnFlagUntilTimeout>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e036      	b.n	80027f6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10b      	bne.n	80027a6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	461a      	mov	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800279c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	3302      	adds	r3, #2
 80027a2:	61bb      	str	r3, [r7, #24]
 80027a4:	e007      	b.n	80027b6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	781a      	ldrb	r2, [r3, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	3301      	adds	r3, #1
 80027b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	3b01      	subs	r3, #1
 80027be:	b29a      	uxth	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1cf      	bne.n	800276e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	2200      	movs	r2, #0
 80027d6:	2140      	movs	r1, #64	; 0x40
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f000 f8a2 	bl	8002922 <UART_WaitOnFlagUntilTimeout>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e006      	b.n	80027f6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2220      	movs	r2, #32
 80027ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80027f0:	2300      	movs	r3, #0
 80027f2:	e000      	b.n	80027f6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80027f4:	2302      	movs	r3, #2
  }
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3720      	adds	r7, #32
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b08a      	sub	sp, #40	; 0x28
 8002802:	af02      	add	r7, sp, #8
 8002804:	60f8      	str	r0, [r7, #12]
 8002806:	60b9      	str	r1, [r7, #8]
 8002808:	603b      	str	r3, [r7, #0]
 800280a:	4613      	mov	r3, r2
 800280c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800280e:	2300      	movs	r3, #0
 8002810:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b20      	cmp	r3, #32
 800281c:	d17c      	bne.n	8002918 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d002      	beq.n	800282a <HAL_UART_Receive+0x2c>
 8002824:	88fb      	ldrh	r3, [r7, #6]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e075      	b.n	800291a <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2222      	movs	r2, #34	; 0x22
 8002838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002842:	f7fe fa77 	bl	8000d34 <HAL_GetTick>
 8002846:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	88fa      	ldrh	r2, [r7, #6]
 800284c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	88fa      	ldrh	r2, [r7, #6]
 8002852:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800285c:	d108      	bne.n	8002870 <HAL_UART_Receive+0x72>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d104      	bne.n	8002870 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8002866:	2300      	movs	r3, #0
 8002868:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	61bb      	str	r3, [r7, #24]
 800286e:	e003      	b.n	8002878 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002874:	2300      	movs	r3, #0
 8002876:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002878:	e043      	b.n	8002902 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	2200      	movs	r2, #0
 8002882:	2120      	movs	r1, #32
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f000 f84c 	bl	8002922 <UART_WaitOnFlagUntilTimeout>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e042      	b.n	800291a <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d10c      	bne.n	80028b4 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	3302      	adds	r3, #2
 80028b0:	61bb      	str	r3, [r7, #24]
 80028b2:	e01f      	b.n	80028f4 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028bc:	d007      	beq.n	80028ce <HAL_UART_Receive+0xd0>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10a      	bne.n	80028dc <HAL_UART_Receive+0xde>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d106      	bne.n	80028dc <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	701a      	strb	r2, [r3, #0]
 80028da:	e008      	b.n	80028ee <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	3301      	adds	r3, #1
 80028f2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	3b01      	subs	r3, #1
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002906:	b29b      	uxth	r3, r3
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1b6      	bne.n	800287a <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2220      	movs	r2, #32
 8002910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8002914:	2300      	movs	r3, #0
 8002916:	e000      	b.n	800291a <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002918:	2302      	movs	r3, #2
  }
}
 800291a:	4618      	mov	r0, r3
 800291c:	3720      	adds	r7, #32
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b090      	sub	sp, #64	; 0x40
 8002926:	af00      	add	r7, sp, #0
 8002928:	60f8      	str	r0, [r7, #12]
 800292a:	60b9      	str	r1, [r7, #8]
 800292c:	603b      	str	r3, [r7, #0]
 800292e:	4613      	mov	r3, r2
 8002930:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002932:	e050      	b.n	80029d6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800293a:	d04c      	beq.n	80029d6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800293c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800293e:	2b00      	cmp	r3, #0
 8002940:	d007      	beq.n	8002952 <UART_WaitOnFlagUntilTimeout+0x30>
 8002942:	f7fe f9f7 	bl	8000d34 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800294e:	429a      	cmp	r2, r3
 8002950:	d241      	bcs.n	80029d6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	330c      	adds	r3, #12
 8002958:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800295a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295c:	e853 3f00 	ldrex	r3, [r3]
 8002960:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002968:	63fb      	str	r3, [r7, #60]	; 0x3c
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	330c      	adds	r3, #12
 8002970:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002972:	637a      	str	r2, [r7, #52]	; 0x34
 8002974:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002976:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002978:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800297a:	e841 2300 	strex	r3, r2, [r1]
 800297e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1e5      	bne.n	8002952 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	3314      	adds	r3, #20
 800298c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	e853 3f00 	ldrex	r3, [r3]
 8002994:	613b      	str	r3, [r7, #16]
   return(result);
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	f023 0301 	bic.w	r3, r3, #1
 800299c:	63bb      	str	r3, [r7, #56]	; 0x38
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	3314      	adds	r3, #20
 80029a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029a6:	623a      	str	r2, [r7, #32]
 80029a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029aa:	69f9      	ldr	r1, [r7, #28]
 80029ac:	6a3a      	ldr	r2, [r7, #32]
 80029ae:	e841 2300 	strex	r3, r2, [r1]
 80029b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1e5      	bne.n	8002986 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2220      	movs	r2, #32
 80029be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2220      	movs	r2, #32
 80029c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e00f      	b.n	80029f6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	4013      	ands	r3, r2
 80029e0:	68ba      	ldr	r2, [r7, #8]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	bf0c      	ite	eq
 80029e6:	2301      	moveq	r3, #1
 80029e8:	2300      	movne	r3, #0
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	461a      	mov	r2, r3
 80029ee:	79fb      	ldrb	r3, [r7, #7]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d09f      	beq.n	8002934 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3740      	adds	r7, #64	; 0x40
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
	...

08002a00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68da      	ldr	r2, [r3, #12]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	431a      	orrs	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002a3a:	f023 030c 	bic.w	r3, r3, #12
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6812      	ldr	r2, [r2, #0]
 8002a42:	68b9      	ldr	r1, [r7, #8]
 8002a44:	430b      	orrs	r3, r1
 8002a46:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	699a      	ldr	r2, [r3, #24]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a2c      	ldr	r2, [pc, #176]	; (8002b14 <UART_SetConfig+0x114>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d103      	bne.n	8002a70 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a68:	f7ff fdc4 	bl	80025f4 <HAL_RCC_GetPCLK2Freq>
 8002a6c:	60f8      	str	r0, [r7, #12]
 8002a6e:	e002      	b.n	8002a76 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a70:	f7ff fdac 	bl	80025cc <HAL_RCC_GetPCLK1Freq>
 8002a74:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4413      	add	r3, r2
 8002a7e:	009a      	lsls	r2, r3, #2
 8002a80:	441a      	add	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a8c:	4a22      	ldr	r2, [pc, #136]	; (8002b18 <UART_SetConfig+0x118>)
 8002a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a92:	095b      	lsrs	r3, r3, #5
 8002a94:	0119      	lsls	r1, r3, #4
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4413      	add	r3, r2
 8002a9e:	009a      	lsls	r2, r3, #2
 8002aa0:	441a      	add	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002aac:	4b1a      	ldr	r3, [pc, #104]	; (8002b18 <UART_SetConfig+0x118>)
 8002aae:	fba3 0302 	umull	r0, r3, r3, r2
 8002ab2:	095b      	lsrs	r3, r3, #5
 8002ab4:	2064      	movs	r0, #100	; 0x64
 8002ab6:	fb00 f303 	mul.w	r3, r0, r3
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	3332      	adds	r3, #50	; 0x32
 8002ac0:	4a15      	ldr	r2, [pc, #84]	; (8002b18 <UART_SetConfig+0x118>)
 8002ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac6:	095b      	lsrs	r3, r3, #5
 8002ac8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002acc:	4419      	add	r1, r3
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4413      	add	r3, r2
 8002ad6:	009a      	lsls	r2, r3, #2
 8002ad8:	441a      	add	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ae4:	4b0c      	ldr	r3, [pc, #48]	; (8002b18 <UART_SetConfig+0x118>)
 8002ae6:	fba3 0302 	umull	r0, r3, r3, r2
 8002aea:	095b      	lsrs	r3, r3, #5
 8002aec:	2064      	movs	r0, #100	; 0x64
 8002aee:	fb00 f303 	mul.w	r3, r0, r3
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	011b      	lsls	r3, r3, #4
 8002af6:	3332      	adds	r3, #50	; 0x32
 8002af8:	4a07      	ldr	r2, [pc, #28]	; (8002b18 <UART_SetConfig+0x118>)
 8002afa:	fba2 2303 	umull	r2, r3, r2, r3
 8002afe:	095b      	lsrs	r3, r3, #5
 8002b00:	f003 020f 	and.w	r2, r3, #15
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	440a      	add	r2, r1
 8002b0a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002b0c:	bf00      	nop
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40013800 	.word	0x40013800
 8002b18:	51eb851f 	.word	0x51eb851f

08002b1c <_vsiprintf_r>:
 8002b1c:	b500      	push	{lr}
 8002b1e:	b09b      	sub	sp, #108	; 0x6c
 8002b20:	9100      	str	r1, [sp, #0]
 8002b22:	9104      	str	r1, [sp, #16]
 8002b24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002b28:	9105      	str	r1, [sp, #20]
 8002b2a:	9102      	str	r1, [sp, #8]
 8002b2c:	4905      	ldr	r1, [pc, #20]	; (8002b44 <_vsiprintf_r+0x28>)
 8002b2e:	9103      	str	r1, [sp, #12]
 8002b30:	4669      	mov	r1, sp
 8002b32:	f000 f995 	bl	8002e60 <_svfiprintf_r>
 8002b36:	2200      	movs	r2, #0
 8002b38:	9b00      	ldr	r3, [sp, #0]
 8002b3a:	701a      	strb	r2, [r3, #0]
 8002b3c:	b01b      	add	sp, #108	; 0x6c
 8002b3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b42:	bf00      	nop
 8002b44:	ffff0208 	.word	0xffff0208

08002b48 <vsiprintf>:
 8002b48:	4613      	mov	r3, r2
 8002b4a:	460a      	mov	r2, r1
 8002b4c:	4601      	mov	r1, r0
 8002b4e:	4802      	ldr	r0, [pc, #8]	; (8002b58 <vsiprintf+0x10>)
 8002b50:	6800      	ldr	r0, [r0, #0]
 8002b52:	f7ff bfe3 	b.w	8002b1c <_vsiprintf_r>
 8002b56:	bf00      	nop
 8002b58:	20000068 	.word	0x20000068

08002b5c <memset>:
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	4402      	add	r2, r0
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d100      	bne.n	8002b66 <memset+0xa>
 8002b64:	4770      	bx	lr
 8002b66:	f803 1b01 	strb.w	r1, [r3], #1
 8002b6a:	e7f9      	b.n	8002b60 <memset+0x4>

08002b6c <__errno>:
 8002b6c:	4b01      	ldr	r3, [pc, #4]	; (8002b74 <__errno+0x8>)
 8002b6e:	6818      	ldr	r0, [r3, #0]
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	20000068 	.word	0x20000068

08002b78 <__libc_init_array>:
 8002b78:	b570      	push	{r4, r5, r6, lr}
 8002b7a:	2600      	movs	r6, #0
 8002b7c:	4d0c      	ldr	r5, [pc, #48]	; (8002bb0 <__libc_init_array+0x38>)
 8002b7e:	4c0d      	ldr	r4, [pc, #52]	; (8002bb4 <__libc_init_array+0x3c>)
 8002b80:	1b64      	subs	r4, r4, r5
 8002b82:	10a4      	asrs	r4, r4, #2
 8002b84:	42a6      	cmp	r6, r4
 8002b86:	d109      	bne.n	8002b9c <__libc_init_array+0x24>
 8002b88:	f000 fc7a 	bl	8003480 <_init>
 8002b8c:	2600      	movs	r6, #0
 8002b8e:	4d0a      	ldr	r5, [pc, #40]	; (8002bb8 <__libc_init_array+0x40>)
 8002b90:	4c0a      	ldr	r4, [pc, #40]	; (8002bbc <__libc_init_array+0x44>)
 8002b92:	1b64      	subs	r4, r4, r5
 8002b94:	10a4      	asrs	r4, r4, #2
 8002b96:	42a6      	cmp	r6, r4
 8002b98:	d105      	bne.n	8002ba6 <__libc_init_array+0x2e>
 8002b9a:	bd70      	pop	{r4, r5, r6, pc}
 8002b9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ba0:	4798      	blx	r3
 8002ba2:	3601      	adds	r6, #1
 8002ba4:	e7ee      	b.n	8002b84 <__libc_init_array+0xc>
 8002ba6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002baa:	4798      	blx	r3
 8002bac:	3601      	adds	r6, #1
 8002bae:	e7f2      	b.n	8002b96 <__libc_init_array+0x1e>
 8002bb0:	08003924 	.word	0x08003924
 8002bb4:	08003924 	.word	0x08003924
 8002bb8:	08003924 	.word	0x08003924
 8002bbc:	08003928 	.word	0x08003928

08002bc0 <__retarget_lock_acquire_recursive>:
 8002bc0:	4770      	bx	lr

08002bc2 <__retarget_lock_release_recursive>:
 8002bc2:	4770      	bx	lr

08002bc4 <_free_r>:
 8002bc4:	b538      	push	{r3, r4, r5, lr}
 8002bc6:	4605      	mov	r5, r0
 8002bc8:	2900      	cmp	r1, #0
 8002bca:	d040      	beq.n	8002c4e <_free_r+0x8a>
 8002bcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002bd0:	1f0c      	subs	r4, r1, #4
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	bfb8      	it	lt
 8002bd6:	18e4      	addlt	r4, r4, r3
 8002bd8:	f000 f8dc 	bl	8002d94 <__malloc_lock>
 8002bdc:	4a1c      	ldr	r2, [pc, #112]	; (8002c50 <_free_r+0x8c>)
 8002bde:	6813      	ldr	r3, [r2, #0]
 8002be0:	b933      	cbnz	r3, 8002bf0 <_free_r+0x2c>
 8002be2:	6063      	str	r3, [r4, #4]
 8002be4:	6014      	str	r4, [r2, #0]
 8002be6:	4628      	mov	r0, r5
 8002be8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002bec:	f000 b8d8 	b.w	8002da0 <__malloc_unlock>
 8002bf0:	42a3      	cmp	r3, r4
 8002bf2:	d908      	bls.n	8002c06 <_free_r+0x42>
 8002bf4:	6820      	ldr	r0, [r4, #0]
 8002bf6:	1821      	adds	r1, r4, r0
 8002bf8:	428b      	cmp	r3, r1
 8002bfa:	bf01      	itttt	eq
 8002bfc:	6819      	ldreq	r1, [r3, #0]
 8002bfe:	685b      	ldreq	r3, [r3, #4]
 8002c00:	1809      	addeq	r1, r1, r0
 8002c02:	6021      	streq	r1, [r4, #0]
 8002c04:	e7ed      	b.n	8002be2 <_free_r+0x1e>
 8002c06:	461a      	mov	r2, r3
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	b10b      	cbz	r3, 8002c10 <_free_r+0x4c>
 8002c0c:	42a3      	cmp	r3, r4
 8002c0e:	d9fa      	bls.n	8002c06 <_free_r+0x42>
 8002c10:	6811      	ldr	r1, [r2, #0]
 8002c12:	1850      	adds	r0, r2, r1
 8002c14:	42a0      	cmp	r0, r4
 8002c16:	d10b      	bne.n	8002c30 <_free_r+0x6c>
 8002c18:	6820      	ldr	r0, [r4, #0]
 8002c1a:	4401      	add	r1, r0
 8002c1c:	1850      	adds	r0, r2, r1
 8002c1e:	4283      	cmp	r3, r0
 8002c20:	6011      	str	r1, [r2, #0]
 8002c22:	d1e0      	bne.n	8002be6 <_free_r+0x22>
 8002c24:	6818      	ldr	r0, [r3, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	4408      	add	r0, r1
 8002c2a:	6010      	str	r0, [r2, #0]
 8002c2c:	6053      	str	r3, [r2, #4]
 8002c2e:	e7da      	b.n	8002be6 <_free_r+0x22>
 8002c30:	d902      	bls.n	8002c38 <_free_r+0x74>
 8002c32:	230c      	movs	r3, #12
 8002c34:	602b      	str	r3, [r5, #0]
 8002c36:	e7d6      	b.n	8002be6 <_free_r+0x22>
 8002c38:	6820      	ldr	r0, [r4, #0]
 8002c3a:	1821      	adds	r1, r4, r0
 8002c3c:	428b      	cmp	r3, r1
 8002c3e:	bf01      	itttt	eq
 8002c40:	6819      	ldreq	r1, [r3, #0]
 8002c42:	685b      	ldreq	r3, [r3, #4]
 8002c44:	1809      	addeq	r1, r1, r0
 8002c46:	6021      	streq	r1, [r4, #0]
 8002c48:	6063      	str	r3, [r4, #4]
 8002c4a:	6054      	str	r4, [r2, #4]
 8002c4c:	e7cb      	b.n	8002be6 <_free_r+0x22>
 8002c4e:	bd38      	pop	{r3, r4, r5, pc}
 8002c50:	20000310 	.word	0x20000310

08002c54 <sbrk_aligned>:
 8002c54:	b570      	push	{r4, r5, r6, lr}
 8002c56:	4e0e      	ldr	r6, [pc, #56]	; (8002c90 <sbrk_aligned+0x3c>)
 8002c58:	460c      	mov	r4, r1
 8002c5a:	6831      	ldr	r1, [r6, #0]
 8002c5c:	4605      	mov	r5, r0
 8002c5e:	b911      	cbnz	r1, 8002c66 <sbrk_aligned+0x12>
 8002c60:	f000 fbaa 	bl	80033b8 <_sbrk_r>
 8002c64:	6030      	str	r0, [r6, #0]
 8002c66:	4621      	mov	r1, r4
 8002c68:	4628      	mov	r0, r5
 8002c6a:	f000 fba5 	bl	80033b8 <_sbrk_r>
 8002c6e:	1c43      	adds	r3, r0, #1
 8002c70:	d00a      	beq.n	8002c88 <sbrk_aligned+0x34>
 8002c72:	1cc4      	adds	r4, r0, #3
 8002c74:	f024 0403 	bic.w	r4, r4, #3
 8002c78:	42a0      	cmp	r0, r4
 8002c7a:	d007      	beq.n	8002c8c <sbrk_aligned+0x38>
 8002c7c:	1a21      	subs	r1, r4, r0
 8002c7e:	4628      	mov	r0, r5
 8002c80:	f000 fb9a 	bl	80033b8 <_sbrk_r>
 8002c84:	3001      	adds	r0, #1
 8002c86:	d101      	bne.n	8002c8c <sbrk_aligned+0x38>
 8002c88:	f04f 34ff 	mov.w	r4, #4294967295
 8002c8c:	4620      	mov	r0, r4
 8002c8e:	bd70      	pop	{r4, r5, r6, pc}
 8002c90:	20000314 	.word	0x20000314

08002c94 <_malloc_r>:
 8002c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c98:	1ccd      	adds	r5, r1, #3
 8002c9a:	f025 0503 	bic.w	r5, r5, #3
 8002c9e:	3508      	adds	r5, #8
 8002ca0:	2d0c      	cmp	r5, #12
 8002ca2:	bf38      	it	cc
 8002ca4:	250c      	movcc	r5, #12
 8002ca6:	2d00      	cmp	r5, #0
 8002ca8:	4607      	mov	r7, r0
 8002caa:	db01      	blt.n	8002cb0 <_malloc_r+0x1c>
 8002cac:	42a9      	cmp	r1, r5
 8002cae:	d905      	bls.n	8002cbc <_malloc_r+0x28>
 8002cb0:	230c      	movs	r3, #12
 8002cb2:	2600      	movs	r6, #0
 8002cb4:	603b      	str	r3, [r7, #0]
 8002cb6:	4630      	mov	r0, r6
 8002cb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002cbc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002d90 <_malloc_r+0xfc>
 8002cc0:	f000 f868 	bl	8002d94 <__malloc_lock>
 8002cc4:	f8d8 3000 	ldr.w	r3, [r8]
 8002cc8:	461c      	mov	r4, r3
 8002cca:	bb5c      	cbnz	r4, 8002d24 <_malloc_r+0x90>
 8002ccc:	4629      	mov	r1, r5
 8002cce:	4638      	mov	r0, r7
 8002cd0:	f7ff ffc0 	bl	8002c54 <sbrk_aligned>
 8002cd4:	1c43      	adds	r3, r0, #1
 8002cd6:	4604      	mov	r4, r0
 8002cd8:	d155      	bne.n	8002d86 <_malloc_r+0xf2>
 8002cda:	f8d8 4000 	ldr.w	r4, [r8]
 8002cde:	4626      	mov	r6, r4
 8002ce0:	2e00      	cmp	r6, #0
 8002ce2:	d145      	bne.n	8002d70 <_malloc_r+0xdc>
 8002ce4:	2c00      	cmp	r4, #0
 8002ce6:	d048      	beq.n	8002d7a <_malloc_r+0xe6>
 8002ce8:	6823      	ldr	r3, [r4, #0]
 8002cea:	4631      	mov	r1, r6
 8002cec:	4638      	mov	r0, r7
 8002cee:	eb04 0903 	add.w	r9, r4, r3
 8002cf2:	f000 fb61 	bl	80033b8 <_sbrk_r>
 8002cf6:	4581      	cmp	r9, r0
 8002cf8:	d13f      	bne.n	8002d7a <_malloc_r+0xe6>
 8002cfa:	6821      	ldr	r1, [r4, #0]
 8002cfc:	4638      	mov	r0, r7
 8002cfe:	1a6d      	subs	r5, r5, r1
 8002d00:	4629      	mov	r1, r5
 8002d02:	f7ff ffa7 	bl	8002c54 <sbrk_aligned>
 8002d06:	3001      	adds	r0, #1
 8002d08:	d037      	beq.n	8002d7a <_malloc_r+0xe6>
 8002d0a:	6823      	ldr	r3, [r4, #0]
 8002d0c:	442b      	add	r3, r5
 8002d0e:	6023      	str	r3, [r4, #0]
 8002d10:	f8d8 3000 	ldr.w	r3, [r8]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d038      	beq.n	8002d8a <_malloc_r+0xf6>
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	42a2      	cmp	r2, r4
 8002d1c:	d12b      	bne.n	8002d76 <_malloc_r+0xe2>
 8002d1e:	2200      	movs	r2, #0
 8002d20:	605a      	str	r2, [r3, #4]
 8002d22:	e00f      	b.n	8002d44 <_malloc_r+0xb0>
 8002d24:	6822      	ldr	r2, [r4, #0]
 8002d26:	1b52      	subs	r2, r2, r5
 8002d28:	d41f      	bmi.n	8002d6a <_malloc_r+0xd6>
 8002d2a:	2a0b      	cmp	r2, #11
 8002d2c:	d917      	bls.n	8002d5e <_malloc_r+0xca>
 8002d2e:	1961      	adds	r1, r4, r5
 8002d30:	42a3      	cmp	r3, r4
 8002d32:	6025      	str	r5, [r4, #0]
 8002d34:	bf18      	it	ne
 8002d36:	6059      	strne	r1, [r3, #4]
 8002d38:	6863      	ldr	r3, [r4, #4]
 8002d3a:	bf08      	it	eq
 8002d3c:	f8c8 1000 	streq.w	r1, [r8]
 8002d40:	5162      	str	r2, [r4, r5]
 8002d42:	604b      	str	r3, [r1, #4]
 8002d44:	4638      	mov	r0, r7
 8002d46:	f104 060b 	add.w	r6, r4, #11
 8002d4a:	f000 f829 	bl	8002da0 <__malloc_unlock>
 8002d4e:	f026 0607 	bic.w	r6, r6, #7
 8002d52:	1d23      	adds	r3, r4, #4
 8002d54:	1af2      	subs	r2, r6, r3
 8002d56:	d0ae      	beq.n	8002cb6 <_malloc_r+0x22>
 8002d58:	1b9b      	subs	r3, r3, r6
 8002d5a:	50a3      	str	r3, [r4, r2]
 8002d5c:	e7ab      	b.n	8002cb6 <_malloc_r+0x22>
 8002d5e:	42a3      	cmp	r3, r4
 8002d60:	6862      	ldr	r2, [r4, #4]
 8002d62:	d1dd      	bne.n	8002d20 <_malloc_r+0x8c>
 8002d64:	f8c8 2000 	str.w	r2, [r8]
 8002d68:	e7ec      	b.n	8002d44 <_malloc_r+0xb0>
 8002d6a:	4623      	mov	r3, r4
 8002d6c:	6864      	ldr	r4, [r4, #4]
 8002d6e:	e7ac      	b.n	8002cca <_malloc_r+0x36>
 8002d70:	4634      	mov	r4, r6
 8002d72:	6876      	ldr	r6, [r6, #4]
 8002d74:	e7b4      	b.n	8002ce0 <_malloc_r+0x4c>
 8002d76:	4613      	mov	r3, r2
 8002d78:	e7cc      	b.n	8002d14 <_malloc_r+0x80>
 8002d7a:	230c      	movs	r3, #12
 8002d7c:	4638      	mov	r0, r7
 8002d7e:	603b      	str	r3, [r7, #0]
 8002d80:	f000 f80e 	bl	8002da0 <__malloc_unlock>
 8002d84:	e797      	b.n	8002cb6 <_malloc_r+0x22>
 8002d86:	6025      	str	r5, [r4, #0]
 8002d88:	e7dc      	b.n	8002d44 <_malloc_r+0xb0>
 8002d8a:	605b      	str	r3, [r3, #4]
 8002d8c:	deff      	udf	#255	; 0xff
 8002d8e:	bf00      	nop
 8002d90:	20000310 	.word	0x20000310

08002d94 <__malloc_lock>:
 8002d94:	4801      	ldr	r0, [pc, #4]	; (8002d9c <__malloc_lock+0x8>)
 8002d96:	f7ff bf13 	b.w	8002bc0 <__retarget_lock_acquire_recursive>
 8002d9a:	bf00      	nop
 8002d9c:	2000030c 	.word	0x2000030c

08002da0 <__malloc_unlock>:
 8002da0:	4801      	ldr	r0, [pc, #4]	; (8002da8 <__malloc_unlock+0x8>)
 8002da2:	f7ff bf0e 	b.w	8002bc2 <__retarget_lock_release_recursive>
 8002da6:	bf00      	nop
 8002da8:	2000030c 	.word	0x2000030c

08002dac <__ssputs_r>:
 8002dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002db0:	461f      	mov	r7, r3
 8002db2:	688e      	ldr	r6, [r1, #8]
 8002db4:	4682      	mov	sl, r0
 8002db6:	42be      	cmp	r6, r7
 8002db8:	460c      	mov	r4, r1
 8002dba:	4690      	mov	r8, r2
 8002dbc:	680b      	ldr	r3, [r1, #0]
 8002dbe:	d82c      	bhi.n	8002e1a <__ssputs_r+0x6e>
 8002dc0:	898a      	ldrh	r2, [r1, #12]
 8002dc2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002dc6:	d026      	beq.n	8002e16 <__ssputs_r+0x6a>
 8002dc8:	6965      	ldr	r5, [r4, #20]
 8002dca:	6909      	ldr	r1, [r1, #16]
 8002dcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002dd0:	eba3 0901 	sub.w	r9, r3, r1
 8002dd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002dd8:	1c7b      	adds	r3, r7, #1
 8002dda:	444b      	add	r3, r9
 8002ddc:	106d      	asrs	r5, r5, #1
 8002dde:	429d      	cmp	r5, r3
 8002de0:	bf38      	it	cc
 8002de2:	461d      	movcc	r5, r3
 8002de4:	0553      	lsls	r3, r2, #21
 8002de6:	d527      	bpl.n	8002e38 <__ssputs_r+0x8c>
 8002de8:	4629      	mov	r1, r5
 8002dea:	f7ff ff53 	bl	8002c94 <_malloc_r>
 8002dee:	4606      	mov	r6, r0
 8002df0:	b360      	cbz	r0, 8002e4c <__ssputs_r+0xa0>
 8002df2:	464a      	mov	r2, r9
 8002df4:	6921      	ldr	r1, [r4, #16]
 8002df6:	f000 fafd 	bl	80033f4 <memcpy>
 8002dfa:	89a3      	ldrh	r3, [r4, #12]
 8002dfc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e04:	81a3      	strh	r3, [r4, #12]
 8002e06:	6126      	str	r6, [r4, #16]
 8002e08:	444e      	add	r6, r9
 8002e0a:	6026      	str	r6, [r4, #0]
 8002e0c:	463e      	mov	r6, r7
 8002e0e:	6165      	str	r5, [r4, #20]
 8002e10:	eba5 0509 	sub.w	r5, r5, r9
 8002e14:	60a5      	str	r5, [r4, #8]
 8002e16:	42be      	cmp	r6, r7
 8002e18:	d900      	bls.n	8002e1c <__ssputs_r+0x70>
 8002e1a:	463e      	mov	r6, r7
 8002e1c:	4632      	mov	r2, r6
 8002e1e:	4641      	mov	r1, r8
 8002e20:	6820      	ldr	r0, [r4, #0]
 8002e22:	f000 faaf 	bl	8003384 <memmove>
 8002e26:	2000      	movs	r0, #0
 8002e28:	68a3      	ldr	r3, [r4, #8]
 8002e2a:	1b9b      	subs	r3, r3, r6
 8002e2c:	60a3      	str	r3, [r4, #8]
 8002e2e:	6823      	ldr	r3, [r4, #0]
 8002e30:	4433      	add	r3, r6
 8002e32:	6023      	str	r3, [r4, #0]
 8002e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e38:	462a      	mov	r2, r5
 8002e3a:	f000 fae9 	bl	8003410 <_realloc_r>
 8002e3e:	4606      	mov	r6, r0
 8002e40:	2800      	cmp	r0, #0
 8002e42:	d1e0      	bne.n	8002e06 <__ssputs_r+0x5a>
 8002e44:	4650      	mov	r0, sl
 8002e46:	6921      	ldr	r1, [r4, #16]
 8002e48:	f7ff febc 	bl	8002bc4 <_free_r>
 8002e4c:	230c      	movs	r3, #12
 8002e4e:	f8ca 3000 	str.w	r3, [sl]
 8002e52:	89a3      	ldrh	r3, [r4, #12]
 8002e54:	f04f 30ff 	mov.w	r0, #4294967295
 8002e58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e5c:	81a3      	strh	r3, [r4, #12]
 8002e5e:	e7e9      	b.n	8002e34 <__ssputs_r+0x88>

08002e60 <_svfiprintf_r>:
 8002e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e64:	4698      	mov	r8, r3
 8002e66:	898b      	ldrh	r3, [r1, #12]
 8002e68:	4607      	mov	r7, r0
 8002e6a:	061b      	lsls	r3, r3, #24
 8002e6c:	460d      	mov	r5, r1
 8002e6e:	4614      	mov	r4, r2
 8002e70:	b09d      	sub	sp, #116	; 0x74
 8002e72:	d50e      	bpl.n	8002e92 <_svfiprintf_r+0x32>
 8002e74:	690b      	ldr	r3, [r1, #16]
 8002e76:	b963      	cbnz	r3, 8002e92 <_svfiprintf_r+0x32>
 8002e78:	2140      	movs	r1, #64	; 0x40
 8002e7a:	f7ff ff0b 	bl	8002c94 <_malloc_r>
 8002e7e:	6028      	str	r0, [r5, #0]
 8002e80:	6128      	str	r0, [r5, #16]
 8002e82:	b920      	cbnz	r0, 8002e8e <_svfiprintf_r+0x2e>
 8002e84:	230c      	movs	r3, #12
 8002e86:	603b      	str	r3, [r7, #0]
 8002e88:	f04f 30ff 	mov.w	r0, #4294967295
 8002e8c:	e0d0      	b.n	8003030 <_svfiprintf_r+0x1d0>
 8002e8e:	2340      	movs	r3, #64	; 0x40
 8002e90:	616b      	str	r3, [r5, #20]
 8002e92:	2300      	movs	r3, #0
 8002e94:	9309      	str	r3, [sp, #36]	; 0x24
 8002e96:	2320      	movs	r3, #32
 8002e98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002e9c:	2330      	movs	r3, #48	; 0x30
 8002e9e:	f04f 0901 	mov.w	r9, #1
 8002ea2:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ea6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003048 <_svfiprintf_r+0x1e8>
 8002eaa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002eae:	4623      	mov	r3, r4
 8002eb0:	469a      	mov	sl, r3
 8002eb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002eb6:	b10a      	cbz	r2, 8002ebc <_svfiprintf_r+0x5c>
 8002eb8:	2a25      	cmp	r2, #37	; 0x25
 8002eba:	d1f9      	bne.n	8002eb0 <_svfiprintf_r+0x50>
 8002ebc:	ebba 0b04 	subs.w	fp, sl, r4
 8002ec0:	d00b      	beq.n	8002eda <_svfiprintf_r+0x7a>
 8002ec2:	465b      	mov	r3, fp
 8002ec4:	4622      	mov	r2, r4
 8002ec6:	4629      	mov	r1, r5
 8002ec8:	4638      	mov	r0, r7
 8002eca:	f7ff ff6f 	bl	8002dac <__ssputs_r>
 8002ece:	3001      	adds	r0, #1
 8002ed0:	f000 80a9 	beq.w	8003026 <_svfiprintf_r+0x1c6>
 8002ed4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ed6:	445a      	add	r2, fp
 8002ed8:	9209      	str	r2, [sp, #36]	; 0x24
 8002eda:	f89a 3000 	ldrb.w	r3, [sl]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f000 80a1 	beq.w	8003026 <_svfiprintf_r+0x1c6>
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8002eea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002eee:	f10a 0a01 	add.w	sl, sl, #1
 8002ef2:	9304      	str	r3, [sp, #16]
 8002ef4:	9307      	str	r3, [sp, #28]
 8002ef6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002efa:	931a      	str	r3, [sp, #104]	; 0x68
 8002efc:	4654      	mov	r4, sl
 8002efe:	2205      	movs	r2, #5
 8002f00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f04:	4850      	ldr	r0, [pc, #320]	; (8003048 <_svfiprintf_r+0x1e8>)
 8002f06:	f000 fa67 	bl	80033d8 <memchr>
 8002f0a:	9a04      	ldr	r2, [sp, #16]
 8002f0c:	b9d8      	cbnz	r0, 8002f46 <_svfiprintf_r+0xe6>
 8002f0e:	06d0      	lsls	r0, r2, #27
 8002f10:	bf44      	itt	mi
 8002f12:	2320      	movmi	r3, #32
 8002f14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f18:	0711      	lsls	r1, r2, #28
 8002f1a:	bf44      	itt	mi
 8002f1c:	232b      	movmi	r3, #43	; 0x2b
 8002f1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f22:	f89a 3000 	ldrb.w	r3, [sl]
 8002f26:	2b2a      	cmp	r3, #42	; 0x2a
 8002f28:	d015      	beq.n	8002f56 <_svfiprintf_r+0xf6>
 8002f2a:	4654      	mov	r4, sl
 8002f2c:	2000      	movs	r0, #0
 8002f2e:	f04f 0c0a 	mov.w	ip, #10
 8002f32:	9a07      	ldr	r2, [sp, #28]
 8002f34:	4621      	mov	r1, r4
 8002f36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f3a:	3b30      	subs	r3, #48	; 0x30
 8002f3c:	2b09      	cmp	r3, #9
 8002f3e:	d94d      	bls.n	8002fdc <_svfiprintf_r+0x17c>
 8002f40:	b1b0      	cbz	r0, 8002f70 <_svfiprintf_r+0x110>
 8002f42:	9207      	str	r2, [sp, #28]
 8002f44:	e014      	b.n	8002f70 <_svfiprintf_r+0x110>
 8002f46:	eba0 0308 	sub.w	r3, r0, r8
 8002f4a:	fa09 f303 	lsl.w	r3, r9, r3
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	46a2      	mov	sl, r4
 8002f52:	9304      	str	r3, [sp, #16]
 8002f54:	e7d2      	b.n	8002efc <_svfiprintf_r+0x9c>
 8002f56:	9b03      	ldr	r3, [sp, #12]
 8002f58:	1d19      	adds	r1, r3, #4
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	9103      	str	r1, [sp, #12]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	bfbb      	ittet	lt
 8002f62:	425b      	neglt	r3, r3
 8002f64:	f042 0202 	orrlt.w	r2, r2, #2
 8002f68:	9307      	strge	r3, [sp, #28]
 8002f6a:	9307      	strlt	r3, [sp, #28]
 8002f6c:	bfb8      	it	lt
 8002f6e:	9204      	strlt	r2, [sp, #16]
 8002f70:	7823      	ldrb	r3, [r4, #0]
 8002f72:	2b2e      	cmp	r3, #46	; 0x2e
 8002f74:	d10c      	bne.n	8002f90 <_svfiprintf_r+0x130>
 8002f76:	7863      	ldrb	r3, [r4, #1]
 8002f78:	2b2a      	cmp	r3, #42	; 0x2a
 8002f7a:	d134      	bne.n	8002fe6 <_svfiprintf_r+0x186>
 8002f7c:	9b03      	ldr	r3, [sp, #12]
 8002f7e:	3402      	adds	r4, #2
 8002f80:	1d1a      	adds	r2, r3, #4
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	9203      	str	r2, [sp, #12]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	bfb8      	it	lt
 8002f8a:	f04f 33ff 	movlt.w	r3, #4294967295
 8002f8e:	9305      	str	r3, [sp, #20]
 8002f90:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800304c <_svfiprintf_r+0x1ec>
 8002f94:	2203      	movs	r2, #3
 8002f96:	4650      	mov	r0, sl
 8002f98:	7821      	ldrb	r1, [r4, #0]
 8002f9a:	f000 fa1d 	bl	80033d8 <memchr>
 8002f9e:	b138      	cbz	r0, 8002fb0 <_svfiprintf_r+0x150>
 8002fa0:	2240      	movs	r2, #64	; 0x40
 8002fa2:	9b04      	ldr	r3, [sp, #16]
 8002fa4:	eba0 000a 	sub.w	r0, r0, sl
 8002fa8:	4082      	lsls	r2, r0
 8002faa:	4313      	orrs	r3, r2
 8002fac:	3401      	adds	r4, #1
 8002fae:	9304      	str	r3, [sp, #16]
 8002fb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fb4:	2206      	movs	r2, #6
 8002fb6:	4826      	ldr	r0, [pc, #152]	; (8003050 <_svfiprintf_r+0x1f0>)
 8002fb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002fbc:	f000 fa0c 	bl	80033d8 <memchr>
 8002fc0:	2800      	cmp	r0, #0
 8002fc2:	d038      	beq.n	8003036 <_svfiprintf_r+0x1d6>
 8002fc4:	4b23      	ldr	r3, [pc, #140]	; (8003054 <_svfiprintf_r+0x1f4>)
 8002fc6:	bb1b      	cbnz	r3, 8003010 <_svfiprintf_r+0x1b0>
 8002fc8:	9b03      	ldr	r3, [sp, #12]
 8002fca:	3307      	adds	r3, #7
 8002fcc:	f023 0307 	bic.w	r3, r3, #7
 8002fd0:	3308      	adds	r3, #8
 8002fd2:	9303      	str	r3, [sp, #12]
 8002fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002fd6:	4433      	add	r3, r6
 8002fd8:	9309      	str	r3, [sp, #36]	; 0x24
 8002fda:	e768      	b.n	8002eae <_svfiprintf_r+0x4e>
 8002fdc:	460c      	mov	r4, r1
 8002fde:	2001      	movs	r0, #1
 8002fe0:	fb0c 3202 	mla	r2, ip, r2, r3
 8002fe4:	e7a6      	b.n	8002f34 <_svfiprintf_r+0xd4>
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	f04f 0c0a 	mov.w	ip, #10
 8002fec:	4619      	mov	r1, r3
 8002fee:	3401      	adds	r4, #1
 8002ff0:	9305      	str	r3, [sp, #20]
 8002ff2:	4620      	mov	r0, r4
 8002ff4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ff8:	3a30      	subs	r2, #48	; 0x30
 8002ffa:	2a09      	cmp	r2, #9
 8002ffc:	d903      	bls.n	8003006 <_svfiprintf_r+0x1a6>
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0c6      	beq.n	8002f90 <_svfiprintf_r+0x130>
 8003002:	9105      	str	r1, [sp, #20]
 8003004:	e7c4      	b.n	8002f90 <_svfiprintf_r+0x130>
 8003006:	4604      	mov	r4, r0
 8003008:	2301      	movs	r3, #1
 800300a:	fb0c 2101 	mla	r1, ip, r1, r2
 800300e:	e7f0      	b.n	8002ff2 <_svfiprintf_r+0x192>
 8003010:	ab03      	add	r3, sp, #12
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	462a      	mov	r2, r5
 8003016:	4638      	mov	r0, r7
 8003018:	4b0f      	ldr	r3, [pc, #60]	; (8003058 <_svfiprintf_r+0x1f8>)
 800301a:	a904      	add	r1, sp, #16
 800301c:	f3af 8000 	nop.w
 8003020:	1c42      	adds	r2, r0, #1
 8003022:	4606      	mov	r6, r0
 8003024:	d1d6      	bne.n	8002fd4 <_svfiprintf_r+0x174>
 8003026:	89ab      	ldrh	r3, [r5, #12]
 8003028:	065b      	lsls	r3, r3, #25
 800302a:	f53f af2d 	bmi.w	8002e88 <_svfiprintf_r+0x28>
 800302e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003030:	b01d      	add	sp, #116	; 0x74
 8003032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003036:	ab03      	add	r3, sp, #12
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	462a      	mov	r2, r5
 800303c:	4638      	mov	r0, r7
 800303e:	4b06      	ldr	r3, [pc, #24]	; (8003058 <_svfiprintf_r+0x1f8>)
 8003040:	a904      	add	r1, sp, #16
 8003042:	f000 f87d 	bl	8003140 <_printf_i>
 8003046:	e7eb      	b.n	8003020 <_svfiprintf_r+0x1c0>
 8003048:	080038ee 	.word	0x080038ee
 800304c:	080038f4 	.word	0x080038f4
 8003050:	080038f8 	.word	0x080038f8
 8003054:	00000000 	.word	0x00000000
 8003058:	08002dad 	.word	0x08002dad

0800305c <_printf_common>:
 800305c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003060:	4616      	mov	r6, r2
 8003062:	4699      	mov	r9, r3
 8003064:	688a      	ldr	r2, [r1, #8]
 8003066:	690b      	ldr	r3, [r1, #16]
 8003068:	4607      	mov	r7, r0
 800306a:	4293      	cmp	r3, r2
 800306c:	bfb8      	it	lt
 800306e:	4613      	movlt	r3, r2
 8003070:	6033      	str	r3, [r6, #0]
 8003072:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003076:	460c      	mov	r4, r1
 8003078:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800307c:	b10a      	cbz	r2, 8003082 <_printf_common+0x26>
 800307e:	3301      	adds	r3, #1
 8003080:	6033      	str	r3, [r6, #0]
 8003082:	6823      	ldr	r3, [r4, #0]
 8003084:	0699      	lsls	r1, r3, #26
 8003086:	bf42      	ittt	mi
 8003088:	6833      	ldrmi	r3, [r6, #0]
 800308a:	3302      	addmi	r3, #2
 800308c:	6033      	strmi	r3, [r6, #0]
 800308e:	6825      	ldr	r5, [r4, #0]
 8003090:	f015 0506 	ands.w	r5, r5, #6
 8003094:	d106      	bne.n	80030a4 <_printf_common+0x48>
 8003096:	f104 0a19 	add.w	sl, r4, #25
 800309a:	68e3      	ldr	r3, [r4, #12]
 800309c:	6832      	ldr	r2, [r6, #0]
 800309e:	1a9b      	subs	r3, r3, r2
 80030a0:	42ab      	cmp	r3, r5
 80030a2:	dc2b      	bgt.n	80030fc <_printf_common+0xa0>
 80030a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80030a8:	1e13      	subs	r3, r2, #0
 80030aa:	6822      	ldr	r2, [r4, #0]
 80030ac:	bf18      	it	ne
 80030ae:	2301      	movne	r3, #1
 80030b0:	0692      	lsls	r2, r2, #26
 80030b2:	d430      	bmi.n	8003116 <_printf_common+0xba>
 80030b4:	4649      	mov	r1, r9
 80030b6:	4638      	mov	r0, r7
 80030b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80030bc:	47c0      	blx	r8
 80030be:	3001      	adds	r0, #1
 80030c0:	d023      	beq.n	800310a <_printf_common+0xae>
 80030c2:	6823      	ldr	r3, [r4, #0]
 80030c4:	6922      	ldr	r2, [r4, #16]
 80030c6:	f003 0306 	and.w	r3, r3, #6
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	bf14      	ite	ne
 80030ce:	2500      	movne	r5, #0
 80030d0:	6833      	ldreq	r3, [r6, #0]
 80030d2:	f04f 0600 	mov.w	r6, #0
 80030d6:	bf08      	it	eq
 80030d8:	68e5      	ldreq	r5, [r4, #12]
 80030da:	f104 041a 	add.w	r4, r4, #26
 80030de:	bf08      	it	eq
 80030e0:	1aed      	subeq	r5, r5, r3
 80030e2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80030e6:	bf08      	it	eq
 80030e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80030ec:	4293      	cmp	r3, r2
 80030ee:	bfc4      	itt	gt
 80030f0:	1a9b      	subgt	r3, r3, r2
 80030f2:	18ed      	addgt	r5, r5, r3
 80030f4:	42b5      	cmp	r5, r6
 80030f6:	d11a      	bne.n	800312e <_printf_common+0xd2>
 80030f8:	2000      	movs	r0, #0
 80030fa:	e008      	b.n	800310e <_printf_common+0xb2>
 80030fc:	2301      	movs	r3, #1
 80030fe:	4652      	mov	r2, sl
 8003100:	4649      	mov	r1, r9
 8003102:	4638      	mov	r0, r7
 8003104:	47c0      	blx	r8
 8003106:	3001      	adds	r0, #1
 8003108:	d103      	bne.n	8003112 <_printf_common+0xb6>
 800310a:	f04f 30ff 	mov.w	r0, #4294967295
 800310e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003112:	3501      	adds	r5, #1
 8003114:	e7c1      	b.n	800309a <_printf_common+0x3e>
 8003116:	2030      	movs	r0, #48	; 0x30
 8003118:	18e1      	adds	r1, r4, r3
 800311a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800311e:	1c5a      	adds	r2, r3, #1
 8003120:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003124:	4422      	add	r2, r4
 8003126:	3302      	adds	r3, #2
 8003128:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800312c:	e7c2      	b.n	80030b4 <_printf_common+0x58>
 800312e:	2301      	movs	r3, #1
 8003130:	4622      	mov	r2, r4
 8003132:	4649      	mov	r1, r9
 8003134:	4638      	mov	r0, r7
 8003136:	47c0      	blx	r8
 8003138:	3001      	adds	r0, #1
 800313a:	d0e6      	beq.n	800310a <_printf_common+0xae>
 800313c:	3601      	adds	r6, #1
 800313e:	e7d9      	b.n	80030f4 <_printf_common+0x98>

08003140 <_printf_i>:
 8003140:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003144:	7e0f      	ldrb	r7, [r1, #24]
 8003146:	4691      	mov	r9, r2
 8003148:	2f78      	cmp	r7, #120	; 0x78
 800314a:	4680      	mov	r8, r0
 800314c:	460c      	mov	r4, r1
 800314e:	469a      	mov	sl, r3
 8003150:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003152:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003156:	d807      	bhi.n	8003168 <_printf_i+0x28>
 8003158:	2f62      	cmp	r7, #98	; 0x62
 800315a:	d80a      	bhi.n	8003172 <_printf_i+0x32>
 800315c:	2f00      	cmp	r7, #0
 800315e:	f000 80d5 	beq.w	800330c <_printf_i+0x1cc>
 8003162:	2f58      	cmp	r7, #88	; 0x58
 8003164:	f000 80c1 	beq.w	80032ea <_printf_i+0x1aa>
 8003168:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800316c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003170:	e03a      	b.n	80031e8 <_printf_i+0xa8>
 8003172:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003176:	2b15      	cmp	r3, #21
 8003178:	d8f6      	bhi.n	8003168 <_printf_i+0x28>
 800317a:	a101      	add	r1, pc, #4	; (adr r1, 8003180 <_printf_i+0x40>)
 800317c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003180:	080031d9 	.word	0x080031d9
 8003184:	080031ed 	.word	0x080031ed
 8003188:	08003169 	.word	0x08003169
 800318c:	08003169 	.word	0x08003169
 8003190:	08003169 	.word	0x08003169
 8003194:	08003169 	.word	0x08003169
 8003198:	080031ed 	.word	0x080031ed
 800319c:	08003169 	.word	0x08003169
 80031a0:	08003169 	.word	0x08003169
 80031a4:	08003169 	.word	0x08003169
 80031a8:	08003169 	.word	0x08003169
 80031ac:	080032f3 	.word	0x080032f3
 80031b0:	08003219 	.word	0x08003219
 80031b4:	080032ad 	.word	0x080032ad
 80031b8:	08003169 	.word	0x08003169
 80031bc:	08003169 	.word	0x08003169
 80031c0:	08003315 	.word	0x08003315
 80031c4:	08003169 	.word	0x08003169
 80031c8:	08003219 	.word	0x08003219
 80031cc:	08003169 	.word	0x08003169
 80031d0:	08003169 	.word	0x08003169
 80031d4:	080032b5 	.word	0x080032b5
 80031d8:	682b      	ldr	r3, [r5, #0]
 80031da:	1d1a      	adds	r2, r3, #4
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	602a      	str	r2, [r5, #0]
 80031e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80031e8:	2301      	movs	r3, #1
 80031ea:	e0a0      	b.n	800332e <_printf_i+0x1ee>
 80031ec:	6820      	ldr	r0, [r4, #0]
 80031ee:	682b      	ldr	r3, [r5, #0]
 80031f0:	0607      	lsls	r7, r0, #24
 80031f2:	f103 0104 	add.w	r1, r3, #4
 80031f6:	6029      	str	r1, [r5, #0]
 80031f8:	d501      	bpl.n	80031fe <_printf_i+0xbe>
 80031fa:	681e      	ldr	r6, [r3, #0]
 80031fc:	e003      	b.n	8003206 <_printf_i+0xc6>
 80031fe:	0646      	lsls	r6, r0, #25
 8003200:	d5fb      	bpl.n	80031fa <_printf_i+0xba>
 8003202:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003206:	2e00      	cmp	r6, #0
 8003208:	da03      	bge.n	8003212 <_printf_i+0xd2>
 800320a:	232d      	movs	r3, #45	; 0x2d
 800320c:	4276      	negs	r6, r6
 800320e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003212:	230a      	movs	r3, #10
 8003214:	4859      	ldr	r0, [pc, #356]	; (800337c <_printf_i+0x23c>)
 8003216:	e012      	b.n	800323e <_printf_i+0xfe>
 8003218:	682b      	ldr	r3, [r5, #0]
 800321a:	6820      	ldr	r0, [r4, #0]
 800321c:	1d19      	adds	r1, r3, #4
 800321e:	6029      	str	r1, [r5, #0]
 8003220:	0605      	lsls	r5, r0, #24
 8003222:	d501      	bpl.n	8003228 <_printf_i+0xe8>
 8003224:	681e      	ldr	r6, [r3, #0]
 8003226:	e002      	b.n	800322e <_printf_i+0xee>
 8003228:	0641      	lsls	r1, r0, #25
 800322a:	d5fb      	bpl.n	8003224 <_printf_i+0xe4>
 800322c:	881e      	ldrh	r6, [r3, #0]
 800322e:	2f6f      	cmp	r7, #111	; 0x6f
 8003230:	bf0c      	ite	eq
 8003232:	2308      	moveq	r3, #8
 8003234:	230a      	movne	r3, #10
 8003236:	4851      	ldr	r0, [pc, #324]	; (800337c <_printf_i+0x23c>)
 8003238:	2100      	movs	r1, #0
 800323a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800323e:	6865      	ldr	r5, [r4, #4]
 8003240:	2d00      	cmp	r5, #0
 8003242:	bfa8      	it	ge
 8003244:	6821      	ldrge	r1, [r4, #0]
 8003246:	60a5      	str	r5, [r4, #8]
 8003248:	bfa4      	itt	ge
 800324a:	f021 0104 	bicge.w	r1, r1, #4
 800324e:	6021      	strge	r1, [r4, #0]
 8003250:	b90e      	cbnz	r6, 8003256 <_printf_i+0x116>
 8003252:	2d00      	cmp	r5, #0
 8003254:	d04b      	beq.n	80032ee <_printf_i+0x1ae>
 8003256:	4615      	mov	r5, r2
 8003258:	fbb6 f1f3 	udiv	r1, r6, r3
 800325c:	fb03 6711 	mls	r7, r3, r1, r6
 8003260:	5dc7      	ldrb	r7, [r0, r7]
 8003262:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003266:	4637      	mov	r7, r6
 8003268:	42bb      	cmp	r3, r7
 800326a:	460e      	mov	r6, r1
 800326c:	d9f4      	bls.n	8003258 <_printf_i+0x118>
 800326e:	2b08      	cmp	r3, #8
 8003270:	d10b      	bne.n	800328a <_printf_i+0x14a>
 8003272:	6823      	ldr	r3, [r4, #0]
 8003274:	07de      	lsls	r6, r3, #31
 8003276:	d508      	bpl.n	800328a <_printf_i+0x14a>
 8003278:	6923      	ldr	r3, [r4, #16]
 800327a:	6861      	ldr	r1, [r4, #4]
 800327c:	4299      	cmp	r1, r3
 800327e:	bfde      	ittt	le
 8003280:	2330      	movle	r3, #48	; 0x30
 8003282:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003286:	f105 35ff 	addle.w	r5, r5, #4294967295
 800328a:	1b52      	subs	r2, r2, r5
 800328c:	6122      	str	r2, [r4, #16]
 800328e:	464b      	mov	r3, r9
 8003290:	4621      	mov	r1, r4
 8003292:	4640      	mov	r0, r8
 8003294:	f8cd a000 	str.w	sl, [sp]
 8003298:	aa03      	add	r2, sp, #12
 800329a:	f7ff fedf 	bl	800305c <_printf_common>
 800329e:	3001      	adds	r0, #1
 80032a0:	d14a      	bne.n	8003338 <_printf_i+0x1f8>
 80032a2:	f04f 30ff 	mov.w	r0, #4294967295
 80032a6:	b004      	add	sp, #16
 80032a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032ac:	6823      	ldr	r3, [r4, #0]
 80032ae:	f043 0320 	orr.w	r3, r3, #32
 80032b2:	6023      	str	r3, [r4, #0]
 80032b4:	2778      	movs	r7, #120	; 0x78
 80032b6:	4832      	ldr	r0, [pc, #200]	; (8003380 <_printf_i+0x240>)
 80032b8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80032bc:	6823      	ldr	r3, [r4, #0]
 80032be:	6829      	ldr	r1, [r5, #0]
 80032c0:	061f      	lsls	r7, r3, #24
 80032c2:	f851 6b04 	ldr.w	r6, [r1], #4
 80032c6:	d402      	bmi.n	80032ce <_printf_i+0x18e>
 80032c8:	065f      	lsls	r7, r3, #25
 80032ca:	bf48      	it	mi
 80032cc:	b2b6      	uxthmi	r6, r6
 80032ce:	07df      	lsls	r7, r3, #31
 80032d0:	bf48      	it	mi
 80032d2:	f043 0320 	orrmi.w	r3, r3, #32
 80032d6:	6029      	str	r1, [r5, #0]
 80032d8:	bf48      	it	mi
 80032da:	6023      	strmi	r3, [r4, #0]
 80032dc:	b91e      	cbnz	r6, 80032e6 <_printf_i+0x1a6>
 80032de:	6823      	ldr	r3, [r4, #0]
 80032e0:	f023 0320 	bic.w	r3, r3, #32
 80032e4:	6023      	str	r3, [r4, #0]
 80032e6:	2310      	movs	r3, #16
 80032e8:	e7a6      	b.n	8003238 <_printf_i+0xf8>
 80032ea:	4824      	ldr	r0, [pc, #144]	; (800337c <_printf_i+0x23c>)
 80032ec:	e7e4      	b.n	80032b8 <_printf_i+0x178>
 80032ee:	4615      	mov	r5, r2
 80032f0:	e7bd      	b.n	800326e <_printf_i+0x12e>
 80032f2:	682b      	ldr	r3, [r5, #0]
 80032f4:	6826      	ldr	r6, [r4, #0]
 80032f6:	1d18      	adds	r0, r3, #4
 80032f8:	6961      	ldr	r1, [r4, #20]
 80032fa:	6028      	str	r0, [r5, #0]
 80032fc:	0635      	lsls	r5, r6, #24
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	d501      	bpl.n	8003306 <_printf_i+0x1c6>
 8003302:	6019      	str	r1, [r3, #0]
 8003304:	e002      	b.n	800330c <_printf_i+0x1cc>
 8003306:	0670      	lsls	r0, r6, #25
 8003308:	d5fb      	bpl.n	8003302 <_printf_i+0x1c2>
 800330a:	8019      	strh	r1, [r3, #0]
 800330c:	2300      	movs	r3, #0
 800330e:	4615      	mov	r5, r2
 8003310:	6123      	str	r3, [r4, #16]
 8003312:	e7bc      	b.n	800328e <_printf_i+0x14e>
 8003314:	682b      	ldr	r3, [r5, #0]
 8003316:	2100      	movs	r1, #0
 8003318:	1d1a      	adds	r2, r3, #4
 800331a:	602a      	str	r2, [r5, #0]
 800331c:	681d      	ldr	r5, [r3, #0]
 800331e:	6862      	ldr	r2, [r4, #4]
 8003320:	4628      	mov	r0, r5
 8003322:	f000 f859 	bl	80033d8 <memchr>
 8003326:	b108      	cbz	r0, 800332c <_printf_i+0x1ec>
 8003328:	1b40      	subs	r0, r0, r5
 800332a:	6060      	str	r0, [r4, #4]
 800332c:	6863      	ldr	r3, [r4, #4]
 800332e:	6123      	str	r3, [r4, #16]
 8003330:	2300      	movs	r3, #0
 8003332:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003336:	e7aa      	b.n	800328e <_printf_i+0x14e>
 8003338:	462a      	mov	r2, r5
 800333a:	4649      	mov	r1, r9
 800333c:	4640      	mov	r0, r8
 800333e:	6923      	ldr	r3, [r4, #16]
 8003340:	47d0      	blx	sl
 8003342:	3001      	adds	r0, #1
 8003344:	d0ad      	beq.n	80032a2 <_printf_i+0x162>
 8003346:	6823      	ldr	r3, [r4, #0]
 8003348:	079b      	lsls	r3, r3, #30
 800334a:	d413      	bmi.n	8003374 <_printf_i+0x234>
 800334c:	68e0      	ldr	r0, [r4, #12]
 800334e:	9b03      	ldr	r3, [sp, #12]
 8003350:	4298      	cmp	r0, r3
 8003352:	bfb8      	it	lt
 8003354:	4618      	movlt	r0, r3
 8003356:	e7a6      	b.n	80032a6 <_printf_i+0x166>
 8003358:	2301      	movs	r3, #1
 800335a:	4632      	mov	r2, r6
 800335c:	4649      	mov	r1, r9
 800335e:	4640      	mov	r0, r8
 8003360:	47d0      	blx	sl
 8003362:	3001      	adds	r0, #1
 8003364:	d09d      	beq.n	80032a2 <_printf_i+0x162>
 8003366:	3501      	adds	r5, #1
 8003368:	68e3      	ldr	r3, [r4, #12]
 800336a:	9903      	ldr	r1, [sp, #12]
 800336c:	1a5b      	subs	r3, r3, r1
 800336e:	42ab      	cmp	r3, r5
 8003370:	dcf2      	bgt.n	8003358 <_printf_i+0x218>
 8003372:	e7eb      	b.n	800334c <_printf_i+0x20c>
 8003374:	2500      	movs	r5, #0
 8003376:	f104 0619 	add.w	r6, r4, #25
 800337a:	e7f5      	b.n	8003368 <_printf_i+0x228>
 800337c:	080038ff 	.word	0x080038ff
 8003380:	08003910 	.word	0x08003910

08003384 <memmove>:
 8003384:	4288      	cmp	r0, r1
 8003386:	b510      	push	{r4, lr}
 8003388:	eb01 0402 	add.w	r4, r1, r2
 800338c:	d902      	bls.n	8003394 <memmove+0x10>
 800338e:	4284      	cmp	r4, r0
 8003390:	4623      	mov	r3, r4
 8003392:	d807      	bhi.n	80033a4 <memmove+0x20>
 8003394:	1e43      	subs	r3, r0, #1
 8003396:	42a1      	cmp	r1, r4
 8003398:	d008      	beq.n	80033ac <memmove+0x28>
 800339a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800339e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80033a2:	e7f8      	b.n	8003396 <memmove+0x12>
 80033a4:	4601      	mov	r1, r0
 80033a6:	4402      	add	r2, r0
 80033a8:	428a      	cmp	r2, r1
 80033aa:	d100      	bne.n	80033ae <memmove+0x2a>
 80033ac:	bd10      	pop	{r4, pc}
 80033ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80033b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80033b6:	e7f7      	b.n	80033a8 <memmove+0x24>

080033b8 <_sbrk_r>:
 80033b8:	b538      	push	{r3, r4, r5, lr}
 80033ba:	2300      	movs	r3, #0
 80033bc:	4d05      	ldr	r5, [pc, #20]	; (80033d4 <_sbrk_r+0x1c>)
 80033be:	4604      	mov	r4, r0
 80033c0:	4608      	mov	r0, r1
 80033c2:	602b      	str	r3, [r5, #0]
 80033c4:	f7fd fb88 	bl	8000ad8 <_sbrk>
 80033c8:	1c43      	adds	r3, r0, #1
 80033ca:	d102      	bne.n	80033d2 <_sbrk_r+0x1a>
 80033cc:	682b      	ldr	r3, [r5, #0]
 80033ce:	b103      	cbz	r3, 80033d2 <_sbrk_r+0x1a>
 80033d0:	6023      	str	r3, [r4, #0]
 80033d2:	bd38      	pop	{r3, r4, r5, pc}
 80033d4:	20000308 	.word	0x20000308

080033d8 <memchr>:
 80033d8:	4603      	mov	r3, r0
 80033da:	b510      	push	{r4, lr}
 80033dc:	b2c9      	uxtb	r1, r1
 80033de:	4402      	add	r2, r0
 80033e0:	4293      	cmp	r3, r2
 80033e2:	4618      	mov	r0, r3
 80033e4:	d101      	bne.n	80033ea <memchr+0x12>
 80033e6:	2000      	movs	r0, #0
 80033e8:	e003      	b.n	80033f2 <memchr+0x1a>
 80033ea:	7804      	ldrb	r4, [r0, #0]
 80033ec:	3301      	adds	r3, #1
 80033ee:	428c      	cmp	r4, r1
 80033f0:	d1f6      	bne.n	80033e0 <memchr+0x8>
 80033f2:	bd10      	pop	{r4, pc}

080033f4 <memcpy>:
 80033f4:	440a      	add	r2, r1
 80033f6:	4291      	cmp	r1, r2
 80033f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80033fc:	d100      	bne.n	8003400 <memcpy+0xc>
 80033fe:	4770      	bx	lr
 8003400:	b510      	push	{r4, lr}
 8003402:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003406:	4291      	cmp	r1, r2
 8003408:	f803 4f01 	strb.w	r4, [r3, #1]!
 800340c:	d1f9      	bne.n	8003402 <memcpy+0xe>
 800340e:	bd10      	pop	{r4, pc}

08003410 <_realloc_r>:
 8003410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003414:	4680      	mov	r8, r0
 8003416:	4614      	mov	r4, r2
 8003418:	460e      	mov	r6, r1
 800341a:	b921      	cbnz	r1, 8003426 <_realloc_r+0x16>
 800341c:	4611      	mov	r1, r2
 800341e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003422:	f7ff bc37 	b.w	8002c94 <_malloc_r>
 8003426:	b92a      	cbnz	r2, 8003434 <_realloc_r+0x24>
 8003428:	f7ff fbcc 	bl	8002bc4 <_free_r>
 800342c:	4625      	mov	r5, r4
 800342e:	4628      	mov	r0, r5
 8003430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003434:	f000 f81b 	bl	800346e <_malloc_usable_size_r>
 8003438:	4284      	cmp	r4, r0
 800343a:	4607      	mov	r7, r0
 800343c:	d802      	bhi.n	8003444 <_realloc_r+0x34>
 800343e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003442:	d812      	bhi.n	800346a <_realloc_r+0x5a>
 8003444:	4621      	mov	r1, r4
 8003446:	4640      	mov	r0, r8
 8003448:	f7ff fc24 	bl	8002c94 <_malloc_r>
 800344c:	4605      	mov	r5, r0
 800344e:	2800      	cmp	r0, #0
 8003450:	d0ed      	beq.n	800342e <_realloc_r+0x1e>
 8003452:	42bc      	cmp	r4, r7
 8003454:	4622      	mov	r2, r4
 8003456:	4631      	mov	r1, r6
 8003458:	bf28      	it	cs
 800345a:	463a      	movcs	r2, r7
 800345c:	f7ff ffca 	bl	80033f4 <memcpy>
 8003460:	4631      	mov	r1, r6
 8003462:	4640      	mov	r0, r8
 8003464:	f7ff fbae 	bl	8002bc4 <_free_r>
 8003468:	e7e1      	b.n	800342e <_realloc_r+0x1e>
 800346a:	4635      	mov	r5, r6
 800346c:	e7df      	b.n	800342e <_realloc_r+0x1e>

0800346e <_malloc_usable_size_r>:
 800346e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003472:	1f18      	subs	r0, r3, #4
 8003474:	2b00      	cmp	r3, #0
 8003476:	bfbc      	itt	lt
 8003478:	580b      	ldrlt	r3, [r1, r0]
 800347a:	18c0      	addlt	r0, r0, r3
 800347c:	4770      	bx	lr
	...

08003480 <_init>:
 8003480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003482:	bf00      	nop
 8003484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003486:	bc08      	pop	{r3}
 8003488:	469e      	mov	lr, r3
 800348a:	4770      	bx	lr

0800348c <_fini>:
 800348c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800348e:	bf00      	nop
 8003490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003492:	bc08      	pop	{r3}
 8003494:	469e      	mov	lr, r3
 8003496:	4770      	bx	lr
