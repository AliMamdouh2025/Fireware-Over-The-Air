
Bootloader_Shehab_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002900  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  08002a0c  08002a0c  00012a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cac  08002cac  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08002cac  08002cac  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cac  08002cac  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cac  08002cac  00012cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cb0  08002cb0  00012cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002cb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  20000068  08002d1c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  08002d1c  00020334  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000750c  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a44  00000000  00000000  000275e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000780  00000000  00000000  00029028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000059a  00000000  00000000  000297a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000179ba  00000000  00000000  00029d42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a46f  00000000  00000000  000416fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00082a3f  00000000  00000000  0004bb6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002128  00000000  00000000  000ce5ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000d06d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080029f4 	.word	0x080029f4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080029f4 	.word	0x080029f4

0800014c <BL_UART_Fetch_Host_Commend>:
	CBL_OTP_READ_CMD,
	CBL_DIS_R_W_PROTECT_CMD,
};

/*======================== Software Interface Definations  ====================*/
BL_Status BL_UART_Fetch_Host_Commend(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	/* To detect the status of function */
	BL_Status Status = BL_NACK;
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
	/* To dtect the status of uart in transmitting and receiving data */
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 8000156:	2301      	movs	r3, #1
 8000158:	71bb      	strb	r3, [r7, #6]
	/* The data length that the host should be transmit at first */
	uint8_t Data_Length = 0;
 800015a:	2300      	movs	r3, #0
 800015c:	717b      	strb	r3, [r7, #5]

	/* To clear buffer of RX and prevent carbadge messages of buffer */
	memset(BL_HostBuffer, 0, BL_HOST_BUFFER_RX_LENGTH);
 800015e:	22c8      	movs	r2, #200	; 0xc8
 8000160:	2100      	movs	r1, #0
 8000162:	4861      	ldr	r0, [pc, #388]	; (80002e8 <BL_UART_Fetch_Host_Commend+0x19c>)
 8000164:	f001 ffb4 	bl	80020d0 <memset>

#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
	BL_PrintMassage("Bootloader started..\r\n");
 8000168:	4860      	ldr	r0, [pc, #384]	; (80002ec <BL_UART_Fetch_Host_Commend+0x1a0>)
 800016a:	f000 fb13 	bl	8000794 <BL_PrintMassage>
#endif

	/* Host commend format :
	   => Commend Length  (1 byte = Data_Length )
	  */
	HAL_Status = HAL_UART_Receive(BL_HOST_COMMUNICATION_UART, BL_HostBuffer, 1,
 800016e:	f04f 33ff 	mov.w	r3, #4294967295
 8000172:	2201      	movs	r2, #1
 8000174:	495c      	ldr	r1, [pc, #368]	; (80002e8 <BL_UART_Fetch_Host_Commend+0x19c>)
 8000176:	485e      	ldr	r0, [pc, #376]	; (80002f0 <BL_UART_Fetch_Host_Commend+0x1a4>)
 8000178:	f001 fdfb 	bl	8001d72 <HAL_UART_Receive>
 800017c:	4603      	mov	r3, r0
 800017e:	71bb      	strb	r3, [r7, #6]
			HAL_MAX_DELAY);

	if (HAL_Status != HAL_OK){
 8000180:	79bb      	ldrb	r3, [r7, #6]
 8000182:	2b00      	cmp	r3, #0
 8000184:	d002      	beq.n	800018c <BL_UART_Fetch_Host_Commend+0x40>
		Status = BL_NACK ;
 8000186:	2300      	movs	r3, #0
 8000188:	71fb      	strb	r3, [r7, #7]
 800018a:	e0a8      	b.n	80002de <BL_UART_Fetch_Host_Commend+0x192>
		 Where :
		 => Commend Code is the order that Host want to do in code
		 => Delails explain what you transmit
		 => CRC is safety algorthim on code
		 */
		Data_Length = BL_HostBuffer[0];
 800018c:	4b56      	ldr	r3, [pc, #344]	; (80002e8 <BL_UART_Fetch_Host_Commend+0x19c>)
 800018e:	781b      	ldrb	r3, [r3, #0]
 8000190:	717b      	strb	r3, [r7, #5]

		/* we determine the number of recieving bytes next from the first number transmit in first
		   time (using buffer Data_Length and store them in BL_HostBuffer) */
		HAL_Status = HAL_UART_Receive(BL_HOST_COMMUNICATION_UART, &BL_HostBuffer[1],
 8000192:	797b      	ldrb	r3, [r7, #5]
 8000194:	b29a      	uxth	r2, r3
 8000196:	f04f 33ff 	mov.w	r3, #4294967295
 800019a:	4956      	ldr	r1, [pc, #344]	; (80002f4 <BL_UART_Fetch_Host_Commend+0x1a8>)
 800019c:	4854      	ldr	r0, [pc, #336]	; (80002f0 <BL_UART_Fetch_Host_Commend+0x1a4>)
 800019e:	f001 fde8 	bl	8001d72 <HAL_UART_Receive>
 80001a2:	4603      	mov	r3, r0
 80001a4:	71bb      	strb	r3, [r7, #6]
				Data_Length, HAL_MAX_DELAY);

		if (HAL_Status != HAL_OK){
 80001a6:	79bb      	ldrb	r3, [r7, #6]
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	d002      	beq.n	80001b2 <BL_UART_Fetch_Host_Commend+0x66>
			Status = BL_NACK ;
 80001ac:	2300      	movs	r3, #0
 80001ae:	71fb      	strb	r3, [r7, #7]
 80001b0:	e095      	b.n	80002de <BL_UART_Fetch_Host_Commend+0x192>
		}
		else {
			/* To jump on the target function from the previous commend */
			switch (BL_HostBuffer[1]) {
 80001b2:	4b4d      	ldr	r3, [pc, #308]	; (80002e8 <BL_UART_Fetch_Host_Commend+0x19c>)
 80001b4:	785b      	ldrb	r3, [r3, #1]
 80001b6:	3b10      	subs	r3, #16
 80001b8:	2b11      	cmp	r3, #17
 80001ba:	f200 8087 	bhi.w	80002cc <BL_UART_Fetch_Host_Commend+0x180>
 80001be:	a201      	add	r2, pc, #4	; (adr r2, 80001c4 <BL_UART_Fetch_Host_Commend+0x78>)
 80001c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001c4:	0800020d 	.word	0x0800020d
 80001c8:	08000219 	.word	0x08000219
 80001cc:	08000225 	.word	0x08000225
 80001d0:	08000231 	.word	0x08000231
 80001d4:	08000243 	.word	0x08000243
 80001d8:	0800024f 	.word	0x0800024f
 80001dc:	08000261 	.word	0x08000261
 80001e0:	08000273 	.word	0x08000273
 80001e4:	08000285 	.word	0x08000285
 80001e8:	08000297 	.word	0x08000297
 80001ec:	080002cd 	.word	0x080002cd
 80001f0:	080002cd 	.word	0x080002cd
 80001f4:	080002cd 	.word	0x080002cd
 80001f8:	080002cd 	.word	0x080002cd
 80001fc:	080002cd 	.word	0x080002cd
 8000200:	080002cd 	.word	0x080002cd
 8000204:	080002a9 	.word	0x080002a9
 8000208:	080002bb 	.word	0x080002bb
				case CBL_GET_VER_CMD :
					Bootloader_Get_Version(BL_HostBuffer);
 800020c:	4836      	ldr	r0, [pc, #216]	; (80002e8 <BL_UART_Fetch_Host_Commend+0x19c>)
 800020e:	f000 f8fb 	bl	8000408 <Bootloader_Get_Version>
					Status = BL_OK ;
 8000212:	2301      	movs	r3, #1
 8000214:	71fb      	strb	r3, [r7, #7]
					break;
 8000216:	e062      	b.n	80002de <BL_UART_Fetch_Host_Commend+0x192>
				case CBL_GET_HELP_CMD :
					Bootloader_Get_Help(BL_HostBuffer);
 8000218:	4833      	ldr	r0, [pc, #204]	; (80002e8 <BL_UART_Fetch_Host_Commend+0x19c>)
 800021a:	f000 f941 	bl	80004a0 <Bootloader_Get_Help>
					Status = BL_OK ;
 800021e:	2301      	movs	r3, #1
 8000220:	71fb      	strb	r3, [r7, #7]
					break;
 8000222:	e05c      	b.n	80002de <BL_UART_Fetch_Host_Commend+0x192>
				case CBL_GET_CID_CMD :
					Bootloader_Get_chip_Identification_Number(BL_HostBuffer);
 8000224:	4830      	ldr	r0, [pc, #192]	; (80002e8 <BL_UART_Fetch_Host_Commend+0x19c>)
 8000226:	f000 f97d 	bl	8000524 <Bootloader_Get_chip_Identification_Number>
					Status = BL_OK ;
 800022a:	2301      	movs	r3, #1
 800022c:	71fb      	strb	r3, [r7, #7]
					break;
 800022e:	e056      	b.n	80002de <BL_UART_Fetch_Host_Commend+0x192>
				case CBL_GET_RDP_STATUS_CMD :
					BL_PrintMassage ("CBL_GET_RDP_STATUS_CMD \r\n ");
 8000230:	4831      	ldr	r0, [pc, #196]	; (80002f8 <BL_UART_Fetch_Host_Commend+0x1ac>)
 8000232:	f000 faaf 	bl	8000794 <BL_PrintMassage>
					Bootloader_Read_Protection_Level(BL_HostBuffer);
 8000236:	482c      	ldr	r0, [pc, #176]	; (80002e8 <BL_UART_Fetch_Host_Commend+0x19c>)
 8000238:	f000 f9be 	bl	80005b8 <Bootloader_Read_Protection_Level>
					Status = BL_OK ;
 800023c:	2301      	movs	r3, #1
 800023e:	71fb      	strb	r3, [r7, #7]
					break;
 8000240:	e04d      	b.n	80002de <BL_UART_Fetch_Host_Commend+0x192>
				case CBL_GO_TO_ADDER_CMD :
					Bootloader_Jump_To_Address(BL_HostBuffer);
 8000242:	4829      	ldr	r0, [pc, #164]	; (80002e8 <BL_UART_Fetch_Host_Commend+0x19c>)
 8000244:	f000 f9ea 	bl	800061c <Bootloader_Jump_To_Address>
					Status = BL_OK ;
 8000248:	2301      	movs	r3, #1
 800024a:	71fb      	strb	r3, [r7, #7]
					break;
 800024c:	e047      	b.n	80002de <BL_UART_Fetch_Host_Commend+0x192>
				case CBL_FLASH_ERASE_CMD :
					BL_PrintMassage ("CBL_FLASH_ERASE_CMD \r\n ");
 800024e:	482b      	ldr	r0, [pc, #172]	; (80002fc <BL_UART_Fetch_Host_Commend+0x1b0>)
 8000250:	f000 faa0 	bl	8000794 <BL_PrintMassage>
					Bootloader_Erase_Flash(BL_HostBuffer);
 8000254:	4824      	ldr	r0, [pc, #144]	; (80002e8 <BL_UART_Fetch_Host_Commend+0x19c>)
 8000256:	f000 fa5d 	bl	8000714 <Bootloader_Erase_Flash>
					Status = BL_OK ;
 800025a:	2301      	movs	r3, #1
 800025c:	71fb      	strb	r3, [r7, #7]
					break;
 800025e:	e03e      	b.n	80002de <BL_UART_Fetch_Host_Commend+0x192>
				case CBL_MEM_WRITE_CMD :
					BL_PrintMassage ("CBL_MEM_WRITE_CMD \r\n ");
 8000260:	4827      	ldr	r0, [pc, #156]	; (8000300 <BL_UART_Fetch_Host_Commend+0x1b4>)
 8000262:	f000 fa97 	bl	8000794 <BL_PrintMassage>
					Bootloader_Memory_Write(BL_HostBuffer);
 8000266:	4820      	ldr	r0, [pc, #128]	; (80002e8 <BL_UART_Fetch_Host_Commend+0x19c>)
 8000268:	f000 fa5d 	bl	8000726 <Bootloader_Memory_Write>
					Status = BL_OK ;
 800026c:	2301      	movs	r3, #1
 800026e:	71fb      	strb	r3, [r7, #7]
					break;
 8000270:	e035      	b.n	80002de <BL_UART_Fetch_Host_Commend+0x192>
				case CBL_EN_R_W_PROTECT_CMD :
					BL_PrintMassage ("CBL_EN_R_W_PROTECT_CMD \r\n ");
 8000272:	4824      	ldr	r0, [pc, #144]	; (8000304 <BL_UART_Fetch_Host_Commend+0x1b8>)
 8000274:	f000 fa8e 	bl	8000794 <BL_PrintMassage>
					Bootloader_Enable_RW_Protection(BL_HostBuffer);
 8000278:	481b      	ldr	r0, [pc, #108]	; (80002e8 <BL_UART_Fetch_Host_Commend+0x19c>)
 800027a:	f000 fa5d 	bl	8000738 <Bootloader_Enable_RW_Protection>
					Status = BL_OK ;
 800027e:	2301      	movs	r3, #1
 8000280:	71fb      	strb	r3, [r7, #7]
					break;
 8000282:	e02c      	b.n	80002de <BL_UART_Fetch_Host_Commend+0x192>
				case CBL_MEM_READ_CMD :
					BL_PrintMassage ("CBL_MEM_READ_CMD \r\n ");
 8000284:	4820      	ldr	r0, [pc, #128]	; (8000308 <BL_UART_Fetch_Host_Commend+0x1bc>)
 8000286:	f000 fa85 	bl	8000794 <BL_PrintMassage>
					Bootloader_Memory_Read(BL_HostBuffer);
 800028a:	4817      	ldr	r0, [pc, #92]	; (80002e8 <BL_UART_Fetch_Host_Commend+0x19c>)
 800028c:	f000 fa5d 	bl	800074a <Bootloader_Memory_Read>
					Status = BL_OK ;
 8000290:	2301      	movs	r3, #1
 8000292:	71fb      	strb	r3, [r7, #7]
					break;
 8000294:	e023      	b.n	80002de <BL_UART_Fetch_Host_Commend+0x192>
				case CBL_READ_SECTOR_STATUS_CMD :
					BL_PrintMassage ("CBL_READ_SECTOR_STATUS_CMD \r\n ");
 8000296:	481d      	ldr	r0, [pc, #116]	; (800030c <BL_UART_Fetch_Host_Commend+0x1c0>)
 8000298:	f000 fa7c 	bl	8000794 <BL_PrintMassage>
					Bootloader_Get_Sector_Protection_Status(BL_HostBuffer);
 800029c:	4812      	ldr	r0, [pc, #72]	; (80002e8 <BL_UART_Fetch_Host_Commend+0x19c>)
 800029e:	f000 fa5d 	bl	800075c <Bootloader_Get_Sector_Protection_Status>
					Status = BL_OK ;
 80002a2:	2301      	movs	r3, #1
 80002a4:	71fb      	strb	r3, [r7, #7]
					break;
 80002a6:	e01a      	b.n	80002de <BL_UART_Fetch_Host_Commend+0x192>
				case CBL_OTP_READ_CMD :
					BL_PrintMassage ("CBL_OTP_READ_CMD \r\n ");
 80002a8:	4819      	ldr	r0, [pc, #100]	; (8000310 <BL_UART_Fetch_Host_Commend+0x1c4>)
 80002aa:	f000 fa73 	bl	8000794 <BL_PrintMassage>
					Bootloader_Read_OTP(BL_HostBuffer);
 80002ae:	480e      	ldr	r0, [pc, #56]	; (80002e8 <BL_UART_Fetch_Host_Commend+0x19c>)
 80002b0:	f000 fa5d 	bl	800076e <Bootloader_Read_OTP>
					Status = BL_OK ;
 80002b4:	2301      	movs	r3, #1
 80002b6:	71fb      	strb	r3, [r7, #7]
					break;
 80002b8:	e011      	b.n	80002de <BL_UART_Fetch_Host_Commend+0x192>
				case CBL_DIS_R_W_PROTECT_CMD :
					BL_PrintMassage ("CBL_DIS_R_W_PROTECT_CMD \r\n ");
 80002ba:	4816      	ldr	r0, [pc, #88]	; (8000314 <BL_UART_Fetch_Host_Commend+0x1c8>)
 80002bc:	f000 fa6a 	bl	8000794 <BL_PrintMassage>
					Bootloader_Disable_RW_Protection(BL_HostBuffer);
 80002c0:	4809      	ldr	r0, [pc, #36]	; (80002e8 <BL_UART_Fetch_Host_Commend+0x19c>)
 80002c2:	f000 fa5d 	bl	8000780 <Bootloader_Disable_RW_Protection>
					Status = BL_OK ;
 80002c6:	2301      	movs	r3, #1
 80002c8:	71fb      	strb	r3, [r7, #7]
					break;
 80002ca:	e008      	b.n	80002de <BL_UART_Fetch_Host_Commend+0x192>
				default :
					BL_PrintMassage ("Invalid commend code recieved from host !! \r\n ");
 80002cc:	4812      	ldr	r0, [pc, #72]	; (8000318 <BL_UART_Fetch_Host_Commend+0x1cc>)
 80002ce:	f000 fa61 	bl	8000794 <BL_PrintMassage>
					Bootloader_Get_Help(BL_HostBuffer);
 80002d2:	4805      	ldr	r0, [pc, #20]	; (80002e8 <BL_UART_Fetch_Host_Commend+0x19c>)
 80002d4:	f000 f8e4 	bl	80004a0 <Bootloader_Get_Help>
					Status = BL_NACK ;
 80002d8:	2300      	movs	r3, #0
 80002da:	71fb      	strb	r3, [r7, #7]
					break;
 80002dc:	bf00      	nop
			}
		}
	}
	return Status;
 80002de:	79fb      	ldrb	r3, [r7, #7]
}
 80002e0:	4618      	mov	r0, r3
 80002e2:	3708      	adds	r7, #8
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	20000084 	.word	0x20000084
 80002ec:	08002a0c 	.word	0x08002a0c
 80002f0:	20000158 	.word	0x20000158
 80002f4:	20000085 	.word	0x20000085
 80002f8:	08002a24 	.word	0x08002a24
 80002fc:	08002a40 	.word	0x08002a40
 8000300:	08002a58 	.word	0x08002a58
 8000304:	08002a70 	.word	0x08002a70
 8000308:	08002a8c 	.word	0x08002a8c
 800030c:	08002aa4 	.word	0x08002aa4
 8000310:	08002ac4 	.word	0x08002ac4
 8000314:	08002adc 	.word	0x08002adc
 8000318:	08002af8 	.word	0x08002af8

0800031c <Bootloader_CRC_Verify>:

static CRC_Status Bootloader_CRC_Verify(uint8_t *pData , uint8_t Data_Len, uint32_t Host_CRC){
 800031c:	b580      	push	{r7, lr}
 800031e:	b088      	sub	sp, #32
 8000320:	af00      	add	r7, sp, #0
 8000322:	60f8      	str	r0, [r7, #12]
 8000324:	460b      	mov	r3, r1
 8000326:	607a      	str	r2, [r7, #4]
 8000328:	72fb      	strb	r3, [r7, #11]
	/* Detect CRC status */
	CRC_Status Status = CRC_NACK ;
 800032a:	2300      	movs	r3, #0
 800032c:	77fb      	strb	r3, [r7, #31]
	/* Buffering the calculations on host bytes that it transmitted */
	uint32_t MCU_CRC_Calculated = 0 ;
 800032e:	2300      	movs	r3, #0
 8000330:	61bb      	str	r3, [r7, #24]
	/* Used as counter on the number of bytes that host transmit without CRC bytes */
	uint8_t Data_Counter = 0 ;
 8000332:	2300      	movs	r3, #0
 8000334:	75fb      	strb	r3, [r7, #23]
	/* To avoid warning in sending address of uint8_t variable in address of
	   uint32_t variable in HAL_CRC_Accumulate */
	uint32_t Data_Buffer = 0 ;
 8000336:	2300      	movs	r3, #0
 8000338:	613b      	str	r3, [r7, #16]

	/* Calculate CRC32 */
	for (Data_Counter = 0 ; Data_Counter < Data_Len ; Data_Counter++){
 800033a:	2300      	movs	r3, #0
 800033c:	75fb      	strb	r3, [r7, #23]
 800033e:	e00f      	b.n	8000360 <Bootloader_CRC_Verify+0x44>
		Data_Buffer = (uint32_t)pData[Data_Counter];
 8000340:	7dfb      	ldrb	r3, [r7, #23]
 8000342:	68fa      	ldr	r2, [r7, #12]
 8000344:	4413      	add	r3, r2
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	613b      	str	r3, [r7, #16]
		MCU_CRC_Calculated = HAL_CRC_Accumulate(CRC_ENGINE_OBJ, &Data_Buffer, 1);
 800034a:	f107 0310 	add.w	r3, r7, #16
 800034e:	2201      	movs	r2, #1
 8000350:	4619      	mov	r1, r3
 8000352:	4810      	ldr	r0, [pc, #64]	; (8000394 <Bootloader_CRC_Verify+0x78>)
 8000354:	f000 fde1 	bl	8000f1a <HAL_CRC_Accumulate>
 8000358:	61b8      	str	r0, [r7, #24]
	for (Data_Counter = 0 ; Data_Counter < Data_Len ; Data_Counter++){
 800035a:	7dfb      	ldrb	r3, [r7, #23]
 800035c:	3301      	adds	r3, #1
 800035e:	75fb      	strb	r3, [r7, #23]
 8000360:	7dfa      	ldrb	r2, [r7, #23]
 8000362:	7afb      	ldrb	r3, [r7, #11]
 8000364:	429a      	cmp	r2, r3
 8000366:	d3eb      	bcc.n	8000340 <Bootloader_CRC_Verify+0x24>
	}

	/* Reset the CRC Calculations unit */
	__HAL_CRC_DR_RESET(CRC_ENGINE_OBJ);
 8000368:	4b0a      	ldr	r3, [pc, #40]	; (8000394 <Bootloader_CRC_Verify+0x78>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	689a      	ldr	r2, [r3, #8]
 800036e:	4b09      	ldr	r3, [pc, #36]	; (8000394 <Bootloader_CRC_Verify+0x78>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	f042 0201 	orr.w	r2, r2, #1
 8000376:	609a      	str	r2, [r3, #8]

	if (MCU_CRC_Calculated == Host_CRC ){
 8000378:	69ba      	ldr	r2, [r7, #24]
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	429a      	cmp	r2, r3
 800037e:	d102      	bne.n	8000386 <Bootloader_CRC_Verify+0x6a>
		Status = CRC_OK ;
 8000380:	2301      	movs	r3, #1
 8000382:	77fb      	strb	r3, [r7, #31]
 8000384:	e001      	b.n	800038a <Bootloader_CRC_Verify+0x6e>
	}
	else {
		Status = CRC_NACK ;
 8000386:	2300      	movs	r3, #0
 8000388:	77fb      	strb	r3, [r7, #31]
	}
	return Status ;
 800038a:	7ffb      	ldrb	r3, [r7, #31]
}
 800038c:	4618      	mov	r0, r3
 800038e:	3720      	adds	r7, #32
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	2000014c 	.word	0x2000014c

08000398 <Bootloader_Send_ACK>:

/* Send Acknowledge message of bootloader then the number of the bytes that you will transmit
   next to host */
static void Bootloader_Send_ACK (uint8_t Reply_Length){
 8000398:	b580      	push	{r7, lr}
 800039a:	b084      	sub	sp, #16
 800039c:	af00      	add	r7, sp, #0
 800039e:	4603      	mov	r3, r0
 80003a0:	71fb      	strb	r3, [r7, #7]
	uint8_t ACK_Value[2] = {0};
 80003a2:	2300      	movs	r3, #0
 80003a4:	81bb      	strh	r3, [r7, #12]
	ACK_Value[0] = CBL_SEND_ACK;
 80003a6:	23ab      	movs	r3, #171	; 0xab
 80003a8:	733b      	strb	r3, [r7, #12]
	ACK_Value[1] = Reply_Length;
 80003aa:	79fb      	ldrb	r3, [r7, #7]
 80003ac:	737b      	strb	r3, [r7, #13]
	Bootloader_Send_Data_To_Host(ACK_Value, 2);
 80003ae:	f107 030c 	add.w	r3, r7, #12
 80003b2:	2102      	movs	r1, #2
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 f813 	bl	80003e0 <Bootloader_Send_Data_To_Host>
}
 80003ba:	bf00      	nop
 80003bc:	3710      	adds	r7, #16
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}

080003c2 <Bootloader_Send_NACK>:

/* Send Noacknowledge message */
static void Bootloader_Send_NACK(){
 80003c2:	b580      	push	{r7, lr}
 80003c4:	b082      	sub	sp, #8
 80003c6:	af00      	add	r7, sp, #0
	uint8_t ACK_Value = CBL_SEND_NACK;
 80003c8:	23cd      	movs	r3, #205	; 0xcd
 80003ca:	71fb      	strb	r3, [r7, #7]
	Bootloader_Send_Data_To_Host(&ACK_Value, 1);
 80003cc:	1dfb      	adds	r3, r7, #7
 80003ce:	2101      	movs	r1, #1
 80003d0:	4618      	mov	r0, r3
 80003d2:	f000 f805 	bl	80003e0 <Bootloader_Send_Data_To_Host>
}
 80003d6:	bf00      	nop
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
	...

080003e0 <Bootloader_Send_Data_To_Host>:

/* Function to communicate with host */
static void Bootloader_Send_Data_To_Host(uint8_t *Host_Buffer , uint32_t Data_Len){
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
 80003e8:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(BL_HOST_COMMUNICATION_UART, Host_Buffer, Data_Len, HAL_MAX_DELAY);
 80003ea:	683b      	ldr	r3, [r7, #0]
 80003ec:	b29a      	uxth	r2, r3
 80003ee:	f04f 33ff 	mov.w	r3, #4294967295
 80003f2:	6879      	ldr	r1, [r7, #4]
 80003f4:	4803      	ldr	r0, [pc, #12]	; (8000404 <Bootloader_Send_Data_To_Host+0x24>)
 80003f6:	f001 fc39 	bl	8001c6c <HAL_UART_Transmit>
}
 80003fa:	bf00      	nop
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	20000158 	.word	0x20000158

08000408 <Bootloader_Get_Version>:

/* To get version of bootloader to check on the leatest version */
static void Bootloader_Get_Version (uint8_t *Host_Buffer){
 8000408:	b580      	push	{r7, lr}
 800040a:	b086      	sub	sp, #24
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
	/* Buffering the version and vendor id's in BL_Version */
	uint8_t BL_Version[4] = { CBL_VENDOR_ID, CBL_SW_MAJOR_VERSION,
 8000410:	4b1e      	ldr	r3, [pc, #120]	; (800048c <Bootloader_Get_Version+0x84>)
 8000412:	60fb      	str	r3, [r7, #12]
			CBL_SW_MINOR_VERSION, CBL_SW_PATCH_VERSION };
	/* used to define the beginning of CRC address in buffer */
	uint16_t Host_CMD_Packet_Len = 0 ;
 8000414:	2300      	movs	r3, #0
 8000416:	82fb      	strh	r3, [r7, #22]
	/* Used to get CRC data */
	uint32_t Host_CRC32 = 0 ;
 8000418:	2300      	movs	r3, #0
 800041a:	613b      	str	r3, [r7, #16]

#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
	BL_PrintMassage ("Read bootloader version \r\n ");
 800041c:	481c      	ldr	r0, [pc, #112]	; (8000490 <Bootloader_Get_Version+0x88>)
 800041e:	f000 f9b9 	bl	8000794 <BL_PrintMassage>
#endif
	/* Extract the CRC32 and Packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0]+1 ;
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	b29b      	uxth	r3, r3
 8000428:	3301      	adds	r3, #1
 800042a:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *(uint32_t *)(Host_Buffer + Host_CMD_Packet_Len - CRC_TYPE_SIZE) ;
 800042c:	8afb      	ldrh	r3, [r7, #22]
 800042e:	3b04      	subs	r3, #4
 8000430:	687a      	ldr	r2, [r7, #4]
 8000432:	4413      	add	r3, r2
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	613b      	str	r3, [r7, #16]

	/* CRC Verfications */
	if ( CRC_OK == Bootloader_CRC_Verify(Host_Buffer, (Host_CMD_Packet_Len - CRC_TYPE_SIZE), Host_CRC32)){
 8000438:	8afb      	ldrh	r3, [r7, #22]
 800043a:	b2db      	uxtb	r3, r3
 800043c:	3b04      	subs	r3, #4
 800043e:	b2db      	uxtb	r3, r3
 8000440:	693a      	ldr	r2, [r7, #16]
 8000442:	4619      	mov	r1, r3
 8000444:	6878      	ldr	r0, [r7, #4]
 8000446:	f7ff ff69 	bl	800031c <Bootloader_CRC_Verify>
 800044a:	4603      	mov	r3, r0
 800044c:	2b01      	cmp	r3, #1
 800044e:	d114      	bne.n	800047a <Bootloader_Get_Version+0x72>
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
		BL_PrintMassage("CRC is passed\r\n");
 8000450:	4810      	ldr	r0, [pc, #64]	; (8000494 <Bootloader_Get_Version+0x8c>)
 8000452:	f000 f99f 	bl	8000794 <BL_PrintMassage>
#endif
		/* Sending Acknowledge message and number of bytes which will be sent */
		Bootloader_Send_ACK(4);
 8000456:	2004      	movs	r0, #4
 8000458:	f7ff ff9e 	bl	8000398 <Bootloader_Send_ACK>
		/* Sending the version and vendor id's to meet the target from commend */
		Bootloader_Send_Data_To_Host(BL_Version,4);
 800045c:	f107 030c 	add.w	r3, r7, #12
 8000460:	2104      	movs	r1, #4
 8000462:	4618      	mov	r0, r3
 8000464:	f7ff ffbc 	bl	80003e0 <Bootloader_Send_Data_To_Host>
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
		BL_PrintMassage("Bootloader Ver. %d.%d.%d\r\n",BL_Version[1],BL_Version[2],BL_Version[3]);
 8000468:	7b7b      	ldrb	r3, [r7, #13]
 800046a:	4619      	mov	r1, r3
 800046c:	7bbb      	ldrb	r3, [r7, #14]
 800046e:	461a      	mov	r2, r3
 8000470:	7bfb      	ldrb	r3, [r7, #15]
 8000472:	4809      	ldr	r0, [pc, #36]	; (8000498 <Bootloader_Get_Version+0x90>)
 8000474:	f000 f98e 	bl	8000794 <BL_PrintMassage>
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
		BL_PrintMassage("CRC is failed\r\n");
#endif
		Bootloader_Send_NACK();
	}
}
 8000478:	e004      	b.n	8000484 <Bootloader_Get_Version+0x7c>
		BL_PrintMassage("CRC is failed\r\n");
 800047a:	4808      	ldr	r0, [pc, #32]	; (800049c <Bootloader_Get_Version+0x94>)
 800047c:	f000 f98a 	bl	8000794 <BL_PrintMassage>
		Bootloader_Send_NACK();
 8000480:	f7ff ff9f 	bl	80003c2 <Bootloader_Send_NACK>
}
 8000484:	bf00      	nop
 8000486:	3718      	adds	r7, #24
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	00010164 	.word	0x00010164
 8000490:	08002b28 	.word	0x08002b28
 8000494:	08002b44 	.word	0x08002b44
 8000498:	08002b54 	.word	0x08002b54
 800049c:	08002b70 	.word	0x08002b70

080004a0 <Bootloader_Get_Help>:
static void Bootloader_Get_Help (uint8_t *Host_Buffer){
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b084      	sub	sp, #16
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0 ;  /* used to define the beginning of CRC address in buffer */
 80004a8:	2300      	movs	r3, #0
 80004aa:	81fb      	strh	r3, [r7, #14]
	uint32_t Host_CRC32 = 0 ;           /* Used to get CRC data */
 80004ac:	2300      	movs	r3, #0
 80004ae:	60bb      	str	r3, [r7, #8]

#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
	BL_PrintMassage ("What are the commends supported by the bootloader --> All supported commends code \r\n ");
 80004b0:	4818      	ldr	r0, [pc, #96]	; (8000514 <Bootloader_Get_Help+0x74>)
 80004b2:	f000 f96f 	bl	8000794 <BL_PrintMassage>
#endif

	/* Extract the CRC32 and Packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0]+1 ;
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	b29b      	uxth	r3, r3
 80004bc:	3301      	adds	r3, #1
 80004be:	81fb      	strh	r3, [r7, #14]
	Host_CRC32 = *(uint32_t *)(Host_Buffer + Host_CMD_Packet_Len - CRC_TYPE_SIZE) ;
 80004c0:	89fb      	ldrh	r3, [r7, #14]
 80004c2:	3b04      	subs	r3, #4
 80004c4:	687a      	ldr	r2, [r7, #4]
 80004c6:	4413      	add	r3, r2
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	60bb      	str	r3, [r7, #8]

	/* CRC Verfications */
	if ( CRC_OK == Bootloader_CRC_Verify(Host_Buffer, (Host_CMD_Packet_Len - CRC_TYPE_SIZE), Host_CRC32)){
 80004cc:	89fb      	ldrh	r3, [r7, #14]
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	3b04      	subs	r3, #4
 80004d2:	b2db      	uxtb	r3, r3
 80004d4:	68ba      	ldr	r2, [r7, #8]
 80004d6:	4619      	mov	r1, r3
 80004d8:	6878      	ldr	r0, [r7, #4]
 80004da:	f7ff ff1f 	bl	800031c <Bootloader_CRC_Verify>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b01      	cmp	r3, #1
 80004e2:	d10d      	bne.n	8000500 <Bootloader_Get_Help+0x60>
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
		BL_PrintMassage("CRC is passed\r\n");
 80004e4:	480c      	ldr	r0, [pc, #48]	; (8000518 <Bootloader_Get_Help+0x78>)
 80004e6:	f000 f955 	bl	8000794 <BL_PrintMassage>
#endif
		/* Sending Acknowledge message and number of bytes which will be sent */
		Bootloader_Send_ACK(12);
 80004ea:	200c      	movs	r0, #12
 80004ec:	f7ff ff54 	bl	8000398 <Bootloader_Send_ACK>
		/* Sending the list of commends to meet the target from commend */
		Bootloader_Send_Data_To_Host(Bootloader_Supported_CMDs,12);
 80004f0:	210c      	movs	r1, #12
 80004f2:	480a      	ldr	r0, [pc, #40]	; (800051c <Bootloader_Get_Help+0x7c>)
 80004f4:	f7ff ff74 	bl	80003e0 <Bootloader_Send_Data_To_Host>

		Bootloader_Jump_To_User_App(Host_Buffer);
 80004f8:	6878      	ldr	r0, [r7, #4]
 80004fa:	f000 f8ed 	bl	80006d8 <Bootloader_Jump_To_User_App>
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
		BL_PrintMassage("CRC is failed\r\n");
#endif
		Bootloader_Send_NACK();
	}
}
 80004fe:	e004      	b.n	800050a <Bootloader_Get_Help+0x6a>
		BL_PrintMassage("CRC is failed\r\n");
 8000500:	4807      	ldr	r0, [pc, #28]	; (8000520 <Bootloader_Get_Help+0x80>)
 8000502:	f000 f947 	bl	8000794 <BL_PrintMassage>
		Bootloader_Send_NACK();
 8000506:	f7ff ff5c 	bl	80003c2 <Bootloader_Send_NACK>
}
 800050a:	bf00      	nop
 800050c:	3710      	adds	r7, #16
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	08002b80 	.word	0x08002b80
 8000518:	08002b44 	.word	0x08002b44
 800051c:	20000000 	.word	0x20000000
 8000520:	08002b70 	.word	0x08002b70

08000524 <Bootloader_Get_chip_Identification_Number>:
static void Bootloader_Get_chip_Identification_Number (uint8_t *Host_Buffer){
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
	/* used to define the beginning of CRC address in buffer */
	uint16_t Host_CMD_Packet_Len = 0 ;
 800052c:	2300      	movs	r3, #0
 800052e:	82fb      	strh	r3, [r7, #22]
	/* Used to get CRC data */
	uint32_t Host_CRC32 = 0 ;
 8000530:	2300      	movs	r3, #0
 8000532:	613b      	str	r3, [r7, #16]
	/* Identify the id of used MCU */
	uint16_t MCU_IdentificationNumber = 0 ;
 8000534:	2300      	movs	r3, #0
 8000536:	81fb      	strh	r3, [r7, #14]

#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
	BL_PrintMassage ("Read MCU chip identification number \r\n ");
 8000538:	481b      	ldr	r0, [pc, #108]	; (80005a8 <Bootloader_Get_chip_Identification_Number+0x84>)
 800053a:	f000 f92b 	bl	8000794 <BL_PrintMassage>
#endif

	/* Extract the CRC32 and Packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0]+1 ;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	b29b      	uxth	r3, r3
 8000544:	3301      	adds	r3, #1
 8000546:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *(uint32_t *)(Host_Buffer + Host_CMD_Packet_Len - CRC_TYPE_SIZE) ;
 8000548:	8afb      	ldrh	r3, [r7, #22]
 800054a:	3b04      	subs	r3, #4
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	4413      	add	r3, r2
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	613b      	str	r3, [r7, #16]

	/* CRC Verfications */
	if ( CRC_OK == Bootloader_CRC_Verify(Host_Buffer, (Host_CMD_Packet_Len - CRC_TYPE_SIZE), Host_CRC32)){
 8000554:	8afb      	ldrh	r3, [r7, #22]
 8000556:	b2db      	uxtb	r3, r3
 8000558:	3b04      	subs	r3, #4
 800055a:	b2db      	uxtb	r3, r3
 800055c:	693a      	ldr	r2, [r7, #16]
 800055e:	4619      	mov	r1, r3
 8000560:	6878      	ldr	r0, [r7, #4]
 8000562:	f7ff fedb 	bl	800031c <Bootloader_CRC_Verify>
 8000566:	4603      	mov	r3, r0
 8000568:	2b01      	cmp	r3, #1
 800056a:	d113      	bne.n	8000594 <Bootloader_Get_chip_Identification_Number+0x70>
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
		BL_PrintMassage("CRC is passed\r\n");
 800056c:	480f      	ldr	r0, [pc, #60]	; (80005ac <Bootloader_Get_chip_Identification_Number+0x88>)
 800056e:	f000 f911 	bl	8000794 <BL_PrintMassage>
#endif
		/* Get MCU chip identification number */
		MCU_IdentificationNumber = (uint16_t)((DBGMCU->IDCODE)&0x00000FFF);
 8000572:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <Bootloader_Get_chip_Identification_Number+0x8c>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	b29b      	uxth	r3, r3
 8000578:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800057c:	b29b      	uxth	r3, r3
 800057e:	81fb      	strh	r3, [r7, #14]

		/* Report MCU chip identification number */
		Bootloader_Send_ACK(2);
 8000580:	2002      	movs	r0, #2
 8000582:	f7ff ff09 	bl	8000398 <Bootloader_Send_ACK>
		Bootloader_Send_Data_To_Host((uint8_t *)(&MCU_IdentificationNumber),2);
 8000586:	f107 030e 	add.w	r3, r7, #14
 800058a:	2102      	movs	r1, #2
 800058c:	4618      	mov	r0, r3
 800058e:	f7ff ff27 	bl	80003e0 <Bootloader_Send_Data_To_Host>
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
		BL_PrintMassage("CRC is failed\r\n");
#endif
		Bootloader_Send_NACK();
	}
}
 8000592:	e004      	b.n	800059e <Bootloader_Get_chip_Identification_Number+0x7a>
		BL_PrintMassage("CRC is failed\r\n");
 8000594:	4807      	ldr	r0, [pc, #28]	; (80005b4 <Bootloader_Get_chip_Identification_Number+0x90>)
 8000596:	f000 f8fd 	bl	8000794 <BL_PrintMassage>
		Bootloader_Send_NACK();
 800059a:	f7ff ff12 	bl	80003c2 <Bootloader_Send_NACK>
}
 800059e:	bf00      	nop
 80005a0:	3718      	adds	r7, #24
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	08002bd8 	.word	0x08002bd8
 80005ac:	08002b44 	.word	0x08002b44
 80005b0:	e0042000 	.word	0xe0042000
 80005b4:	08002b70 	.word	0x08002b70

080005b8 <Bootloader_Read_Protection_Level>:
static void Bootloader_Read_Protection_Level (uint8_t *Host_Buffer){
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]

}
 80005c0:	bf00      	nop
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bc80      	pop	{r7}
 80005c8:	4770      	bx	lr
	...

080005cc <Host_Jump_Address_Verfication>:

static uint8_t Host_Jump_Address_Verfication (uint32_t Jump_Address){
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	/* TO check on state of given address is in region or not */
	uint8_t Address_Verification_State = ADDRESS_IS_INVALID ;
 80005d4:	2300      	movs	r3, #0
 80005d6:	73fb      	strb	r3, [r7, #15]
	if (Jump_Address>= SRAM_BASE && Jump_Address <=STM32F103_SRAM_END){
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80005de:	d306      	bcc.n	80005ee <Host_Jump_Address_Verfication+0x22>
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	4a0c      	ldr	r2, [pc, #48]	; (8000614 <Host_Jump_Address_Verfication+0x48>)
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d802      	bhi.n	80005ee <Host_Jump_Address_Verfication+0x22>
		Address_Verification_State = ADDRESS_IS_VALID ;
 80005e8:	2301      	movs	r3, #1
 80005ea:	73fb      	strb	r3, [r7, #15]
 80005ec:	e00c      	b.n	8000608 <Host_Jump_Address_Verfication+0x3c>
	}
	else if(Jump_Address>= FLASH_BASE && Jump_Address <=STM32F103_FLASH_END){
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80005f4:	d306      	bcc.n	8000604 <Host_Jump_Address_Verfication+0x38>
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4a07      	ldr	r2, [pc, #28]	; (8000618 <Host_Jump_Address_Verfication+0x4c>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d802      	bhi.n	8000604 <Host_Jump_Address_Verfication+0x38>
		Address_Verification_State = ADDRESS_IS_VALID ;
 80005fe:	2301      	movs	r3, #1
 8000600:	73fb      	strb	r3, [r7, #15]
 8000602:	e001      	b.n	8000608 <Host_Jump_Address_Verfication+0x3c>
	}
	else {
		Address_Verification_State = ADDRESS_IS_INVALID ;
 8000604:	2300      	movs	r3, #0
 8000606:	73fb      	strb	r3, [r7, #15]
	}
	return Address_Verification_State ;
 8000608:	7bfb      	ldrb	r3, [r7, #15]
}
 800060a:	4618      	mov	r0, r3
 800060c:	3714      	adds	r7, #20
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr
 8000614:	20005000 	.word	0x20005000
 8000618:	08010000 	.word	0x08010000

0800061c <Bootloader_Jump_To_Address>:

static void Bootloader_Jump_To_Address (uint8_t *Host_Buffer){
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	/* used to define the beginning of CRC address in buffer */
	uint16_t Host_CMD_Packet_Len = 0 ;
 8000624:	2300      	movs	r3, #0
 8000626:	83fb      	strh	r3, [r7, #30]
	/* Used to get CRC data */
	uint32_t Host_CRC32 = 0 ;
 8000628:	2300      	movs	r3, #0
 800062a:	61bb      	str	r3, [r7, #24]
	/* Buffering address */
	uint32_t Host_Jump_Address = 0 ;
 800062c:	2300      	movs	r3, #0
 800062e:	617b      	str	r3, [r7, #20]
	/* TO check on state of given address is in region or not */
	uint8_t Address_Verification_State = ADDRESS_IS_INVALID ;
 8000630:	2300      	movs	r3, #0
 8000632:	73fb      	strb	r3, [r7, #15]

#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
	BL_PrintMassage ("CBL_GO_TO_ADDER_CMD \r\n ");
 8000634:	4823      	ldr	r0, [pc, #140]	; (80006c4 <Bootloader_Jump_To_Address+0xa8>)
 8000636:	f000 f8ad 	bl	8000794 <BL_PrintMassage>
#endif

	/* Extract the CRC32 and Packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0]+1 ;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	b29b      	uxth	r3, r3
 8000640:	3301      	adds	r3, #1
 8000642:	83fb      	strh	r3, [r7, #30]
	Host_CRC32 = *(uint32_t *)(Host_Buffer + Host_CMD_Packet_Len - CRC_TYPE_SIZE) ;
 8000644:	8bfb      	ldrh	r3, [r7, #30]
 8000646:	3b04      	subs	r3, #4
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	4413      	add	r3, r2
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	61bb      	str	r3, [r7, #24]

	/* CRC Verfications */
	if ( CRC_OK == Bootloader_CRC_Verify(Host_Buffer, (Host_CMD_Packet_Len - CRC_TYPE_SIZE), Host_CRC32)){
 8000650:	8bfb      	ldrh	r3, [r7, #30]
 8000652:	b2db      	uxtb	r3, r3
 8000654:	3b04      	subs	r3, #4
 8000656:	b2db      	uxtb	r3, r3
 8000658:	69ba      	ldr	r2, [r7, #24]
 800065a:	4619      	mov	r1, r3
 800065c:	6878      	ldr	r0, [r7, #4]
 800065e:	f7ff fe5d 	bl	800031c <Bootloader_CRC_Verify>
 8000662:	4603      	mov	r3, r0
 8000664:	2b01      	cmp	r3, #1
 8000666:	d124      	bne.n	80006b2 <Bootloader_Jump_To_Address+0x96>
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
		BL_PrintMassage("CRC is passed\r\n");
 8000668:	4817      	ldr	r0, [pc, #92]	; (80006c8 <Bootloader_Jump_To_Address+0xac>)
 800066a:	f000 f893 	bl	8000794 <BL_PrintMassage>
#endif
		/* Report MCU chip identification number */
		Bootloader_Send_ACK(1);
 800066e:	2001      	movs	r0, #1
 8000670:	f7ff fe92 	bl	8000398 <Bootloader_Send_ACK>

		/* To get the content of this address */
		Host_Jump_Address = *((uint32_t *) &(Host_Buffer[2])) ;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800067a:	617b      	str	r3, [r7, #20]

		/* To verify that the address in the region of memory */
		Address_Verification_State = Host_Jump_Address_Verfication(Host_Jump_Address);
 800067c:	6978      	ldr	r0, [r7, #20]
 800067e:	f7ff ffa5 	bl	80005cc <Host_Jump_Address_Verfication>
 8000682:	4603      	mov	r3, r0
 8000684:	73fb      	strb	r3, [r7, #15]

		if (Address_Verification_State == ADDRESS_IS_VALID ){
 8000686:	7bfb      	ldrb	r3, [r7, #15]
 8000688:	2b01      	cmp	r3, #1
 800068a:	d10b      	bne.n	80006a4 <Bootloader_Jump_To_Address+0x88>
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
		BL_PrintMassage("Address verification sucessed\r\n");
 800068c:	480f      	ldr	r0, [pc, #60]	; (80006cc <Bootloader_Jump_To_Address+0xb0>)
 800068e:	f000 f881 	bl	8000794 <BL_PrintMassage>
#endif
			/* - Prepare the address to jump
			   - Increment 1 to be in thumb instruction */
			Jump_Ptr Jump_Address = (Jump_Ptr) (Host_Jump_Address + 1) ;
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	3301      	adds	r3, #1
 8000696:	613b      	str	r3, [r7, #16]
			Jump_Address();
 8000698:	693b      	ldr	r3, [r7, #16]
 800069a:	4798      	blx	r3
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
		BL_PrintMassage("Jumped to : 0x%X \r\n",Jump_Address);
 800069c:	6939      	ldr	r1, [r7, #16]
 800069e:	480c      	ldr	r0, [pc, #48]	; (80006d0 <Bootloader_Jump_To_Address+0xb4>)
 80006a0:	f000 f878 	bl	8000794 <BL_PrintMassage>
#endif
		}
		/* Report the verification state */
		Bootloader_Send_Data_To_Host((uint8_t *)(&Address_Verification_State),1);
 80006a4:	f107 030f 	add.w	r3, r7, #15
 80006a8:	2101      	movs	r1, #1
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff fe98 	bl	80003e0 <Bootloader_Send_Data_To_Host>
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
		BL_PrintMassage("CRC is failed\r\n");
#endif
		Bootloader_Send_NACK();
	}
}
 80006b0:	e004      	b.n	80006bc <Bootloader_Jump_To_Address+0xa0>
		BL_PrintMassage("CRC is failed\r\n");
 80006b2:	4808      	ldr	r0, [pc, #32]	; (80006d4 <Bootloader_Jump_To_Address+0xb8>)
 80006b4:	f000 f86e 	bl	8000794 <BL_PrintMassage>
		Bootloader_Send_NACK();
 80006b8:	f7ff fe83 	bl	80003c2 <Bootloader_Send_NACK>
}
 80006bc:	bf00      	nop
 80006be:	3720      	adds	r7, #32
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	08002c00 	.word	0x08002c00
 80006c8:	08002b44 	.word	0x08002b44
 80006cc:	08002c18 	.word	0x08002c18
 80006d0:	08002c38 	.word	0x08002c38
 80006d4:	08002b70 	.word	0x08002b70

080006d8 <Bootloader_Jump_To_User_App>:

static void Bootloader_Jump_To_User_App (uint8_t *Host_Buffer){
 80006d8:	b580      	push	{r7, lr}
 80006da:	b086      	sub	sp, #24
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	/* Value of the main stack pointer of our main application */
	uint32_t MSP_Value = *((volatile uint32_t *)FLASH_SECTOR2_BASE_ADDRESS) ;
 80006e0:	4b0a      	ldr	r3, [pc, #40]	; (800070c <Bootloader_Jump_To_User_App+0x34>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	617b      	str	r3, [r7, #20]
	/* Reset Handler defination function of our main application */
	uint32_t MainAppAddr = *((volatile uint32_t *)FLASH_SECTOR2_BASE_ADDRESS+4) ;
 80006e6:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <Bootloader_Jump_To_User_App+0x38>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	613b      	str	r3, [r7, #16]

	/* Declare pointer to function contain the beginning address of application */
	pFunc ResetHandler_Address = (pFunc)MainAppAddr;
 80006ec:	693b      	ldr	r3, [r7, #16]
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	f383 8808 	msr	MSP, r3
}
 80006fa:	bf00      	nop
	/* Reset main stack pointer */
	__set_MSP(MSP_Value);

	/* Deinitionalization of modules that used in bootloader and work
	   the configurations of new application */
	HAL_RCC_DeInit(); /* Resets the RCC clock configuration to the default reset state. */
 80006fc:	f000 fdbc 	bl	8001278 <HAL_RCC_DeInit>

	/* Jump to Apllication Reset Handler */
	ResetHandler_Address();
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	4798      	blx	r3
}
 8000704:	bf00      	nop
 8000706:	3718      	adds	r7, #24
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	08008000 	.word	0x08008000
 8000710:	08008010 	.word	0x08008010

08000714 <Bootloader_Erase_Flash>:

static void Bootloader_Erase_Flash (uint8_t *Host_Buffer){
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]

}
 800071c:	bf00      	nop
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	bc80      	pop	{r7}
 8000724:	4770      	bx	lr

08000726 <Bootloader_Memory_Write>:
static void Bootloader_Memory_Write (uint8_t *Host_Buffer){
 8000726:	b480      	push	{r7}
 8000728:	b083      	sub	sp, #12
 800072a:	af00      	add	r7, sp, #0
 800072c:	6078      	str	r0, [r7, #4]

}
 800072e:	bf00      	nop
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr

08000738 <Bootloader_Enable_RW_Protection>:
static void Bootloader_Enable_RW_Protection (uint8_t *Host_Buffer){
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]

}
 8000740:	bf00      	nop
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	bc80      	pop	{r7}
 8000748:	4770      	bx	lr

0800074a <Bootloader_Memory_Read>:
static void Bootloader_Memory_Read (uint8_t *Host_Buffer){
 800074a:	b480      	push	{r7}
 800074c:	b083      	sub	sp, #12
 800074e:	af00      	add	r7, sp, #0
 8000750:	6078      	str	r0, [r7, #4]

}
 8000752:	bf00      	nop
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr

0800075c <Bootloader_Get_Sector_Protection_Status>:
static void Bootloader_Get_Sector_Protection_Status (uint8_t *Host_Buffer){
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]

}
 8000764:	bf00      	nop
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr

0800076e <Bootloader_Read_OTP>:
static void Bootloader_Read_OTP (uint8_t *Host_Buffer){
 800076e:	b480      	push	{r7}
 8000770:	b083      	sub	sp, #12
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]

}
 8000776:	bf00      	nop
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	bc80      	pop	{r7}
 800077e:	4770      	bx	lr

08000780 <Bootloader_Disable_RW_Protection>:
static void Bootloader_Disable_RW_Protection (uint8_t *Host_Buffer){
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]

}
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	bc80      	pop	{r7}
 8000790:	4770      	bx	lr
	...

08000794 <BL_PrintMassage>:

void BL_PrintMassage(char *format, ...) {
 8000794:	b40f      	push	{r0, r1, r2, r3}
 8000796:	b580      	push	{r7, lr}
 8000798:	b09a      	sub	sp, #104	; 0x68
 800079a:	af00      	add	r7, sp, #0
	char Message[100] = { 0 };
 800079c:	2300      	movs	r3, #0
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	f107 0308 	add.w	r3, r7, #8
 80007a4:	2260      	movs	r2, #96	; 0x60
 80007a6:	2100      	movs	r1, #0
 80007a8:	4618      	mov	r0, r3
 80007aa:	f001 fc91 	bl	80020d0 <memset>
	va_list args;
	/* Enable acess to the variable arguments */
	va_start(args, format);
 80007ae:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80007b2:	603b      	str	r3, [r7, #0]
	/* Write the formatted data from variable argument list to string */
	vsprintf(Message, format, args);
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	683a      	ldr	r2, [r7, #0]
 80007b8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80007ba:	4618      	mov	r0, r3
 80007bc:	f001 fc7e 	bl	80020bc <vsiprintf>
#if  BL_DEBUG_METHOD == BL_ENABLE_UART_DEBUG_MESSAGE
	/* Transmit the formatted data through the defined UART */
	HAL_UART_Transmit(BL_DEBUG_UART, (uint8_t*) Message, sizeof(Message),
 80007c0:	1d39      	adds	r1, r7, #4
 80007c2:	f04f 33ff 	mov.w	r3, #4294967295
 80007c6:	2264      	movs	r2, #100	; 0x64
 80007c8:	4804      	ldr	r0, [pc, #16]	; (80007dc <BL_PrintMassage+0x48>)
 80007ca:	f001 fa4f 	bl	8001c6c <HAL_UART_Transmit>
#elif  BL_DEBUG_METHOD == BL_ENABLE_ETHERNET_DEBUG_MESSAGE
	/* Transmit the formatted data through the defined ETHERNET */
#endif
	/* Perform cleanup for an ap object initialized by a call to va_start */
	va_end(args);
}
 80007ce:	bf00      	nop
 80007d0:	3768      	adds	r7, #104	; 0x68
 80007d2:	46bd      	mov	sp, r7
 80007d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007d8:	b004      	add	sp, #16
 80007da:	4770      	bx	lr
 80007dc:	20000158 	.word	0x20000158

080007e0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_CRC_Init+0x20>)
 80007e6:	4a07      	ldr	r2, [pc, #28]	; (8000804 <MX_CRC_Init+0x24>)
 80007e8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007ea:	4805      	ldr	r0, [pc, #20]	; (8000800 <MX_CRC_Init+0x20>)
 80007ec:	f000 fb79 	bl	8000ee2 <HAL_CRC_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80007f6:	f000 f8a4 	bl	8000942 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	2000014c 	.word	0x2000014c
 8000804:	40023000 	.word	0x40023000

08000808 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a09      	ldr	r2, [pc, #36]	; (800083c <HAL_CRC_MspInit+0x34>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d10b      	bne.n	8000832 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800081a:	4b09      	ldr	r3, [pc, #36]	; (8000840 <HAL_CRC_MspInit+0x38>)
 800081c:	695b      	ldr	r3, [r3, #20]
 800081e:	4a08      	ldr	r2, [pc, #32]	; (8000840 <HAL_CRC_MspInit+0x38>)
 8000820:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000824:	6153      	str	r3, [r2, #20]
 8000826:	4b06      	ldr	r3, [pc, #24]	; (8000840 <HAL_CRC_MspInit+0x38>)
 8000828:	695b      	ldr	r3, [r3, #20]
 800082a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000832:	bf00      	nop
 8000834:	3714      	adds	r7, #20
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr
 800083c:	40023000 	.word	0x40023000
 8000840:	40021000 	.word	0x40021000

08000844 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800084a:	4b14      	ldr	r3, [pc, #80]	; (800089c <MX_GPIO_Init+0x58>)
 800084c:	699b      	ldr	r3, [r3, #24]
 800084e:	4a13      	ldr	r2, [pc, #76]	; (800089c <MX_GPIO_Init+0x58>)
 8000850:	f043 0320 	orr.w	r3, r3, #32
 8000854:	6193      	str	r3, [r2, #24]
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_GPIO_Init+0x58>)
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	f003 0320 	and.w	r3, r3, #32
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <MX_GPIO_Init+0x58>)
 8000864:	699b      	ldr	r3, [r3, #24]
 8000866:	4a0d      	ldr	r2, [pc, #52]	; (800089c <MX_GPIO_Init+0x58>)
 8000868:	f043 0304 	orr.w	r3, r3, #4
 800086c:	6193      	str	r3, [r2, #24]
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <MX_GPIO_Init+0x58>)
 8000870:	699b      	ldr	r3, [r3, #24]
 8000872:	f003 0304 	and.w	r3, r3, #4
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <MX_GPIO_Init+0x58>)
 800087c:	699b      	ldr	r3, [r3, #24]
 800087e:	4a07      	ldr	r2, [pc, #28]	; (800089c <MX_GPIO_Init+0x58>)
 8000880:	f043 0308 	orr.w	r3, r3, #8
 8000884:	6193      	str	r3, [r2, #24]
 8000886:	4b05      	ldr	r3, [pc, #20]	; (800089c <MX_GPIO_Init+0x58>)
 8000888:	699b      	ldr	r3, [r3, #24]
 800088a:	f003 0308 	and.w	r3, r3, #8
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]

}
 8000892:	bf00      	nop
 8000894:	3714      	adds	r7, #20
 8000896:	46bd      	mov	sp, r7
 8000898:	bc80      	pop	{r7}
 800089a:	4770      	bx	lr
 800089c:	40021000 	.word	0x40021000

080008a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008a4:	f000 f9d8 	bl	8000c58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008a8:	f000 f80b 	bl	80008c2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ac:	f7ff ffca 	bl	8000844 <MX_GPIO_Init>
  MX_CRC_Init();
 80008b0:	f7ff ff96 	bl	80007e0 <MX_CRC_Init>
  MX_USART2_UART_Init();
 80008b4:	f000 f8d0 	bl	8000a58 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80008b8:	f000 f8f8 	bl	8000aac <MX_USART3_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	BL_UART_Fetch_Host_Commend();
 80008bc:	f7ff fc46 	bl	800014c <BL_UART_Fetch_Host_Commend>
 80008c0:	e7fc      	b.n	80008bc <main+0x1c>

080008c2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b090      	sub	sp, #64	; 0x40
 80008c6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c8:	f107 0318 	add.w	r3, r7, #24
 80008cc:	2228      	movs	r2, #40	; 0x28
 80008ce:	2100      	movs	r1, #0
 80008d0:	4618      	mov	r0, r3
 80008d2:	f001 fbfd 	bl	80020d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008e4:	2302      	movs	r3, #2
 80008e6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008e8:	2301      	movs	r3, #1
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ec:	2310      	movs	r3, #16
 80008ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f0:	2302      	movs	r3, #2
 80008f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80008f4:	2300      	movs	r3, #0
 80008f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80008f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80008fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008fe:	f107 0318 	add.w	r3, r7, #24
 8000902:	4618      	mov	r0, r3
 8000904:	f000 fd52 	bl	80013ac <HAL_RCC_OscConfig>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800090e:	f000 f818 	bl	8000942 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000912:	230f      	movs	r3, #15
 8000914:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000916:	2302      	movs	r3, #2
 8000918:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f000 ffc0 	bl	80018b0 <HAL_RCC_ClockConfig>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000936:	f000 f804 	bl	8000942 <Error_Handler>
  }
}
 800093a:	bf00      	nop
 800093c:	3740      	adds	r7, #64	; 0x40
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000946:	b672      	cpsid	i
}
 8000948:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800094a:	e7fe      	b.n	800094a <Error_Handler+0x8>

0800094c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <HAL_MspInit+0x40>)
 8000954:	699b      	ldr	r3, [r3, #24]
 8000956:	4a0d      	ldr	r2, [pc, #52]	; (800098c <HAL_MspInit+0x40>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6193      	str	r3, [r2, #24]
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <HAL_MspInit+0x40>)
 8000960:	699b      	ldr	r3, [r3, #24]
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096a:	4b08      	ldr	r3, [pc, #32]	; (800098c <HAL_MspInit+0x40>)
 800096c:	69db      	ldr	r3, [r3, #28]
 800096e:	4a07      	ldr	r2, [pc, #28]	; (800098c <HAL_MspInit+0x40>)
 8000970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000974:	61d3      	str	r3, [r2, #28]
 8000976:	4b05      	ldr	r3, [pc, #20]	; (800098c <HAL_MspInit+0x40>)
 8000978:	69db      	ldr	r3, [r3, #28]
 800097a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000982:	bf00      	nop
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr
 800098c:	40021000 	.word	0x40021000

08000990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <NMI_Handler+0x4>

08000996 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800099a:	e7fe      	b.n	800099a <HardFault_Handler+0x4>

0800099c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <MemManage_Handler+0x4>

080009a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a6:	e7fe      	b.n	80009a6 <BusFault_Handler+0x4>

080009a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <UsageFault_Handler+0x4>

080009ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bc80      	pop	{r7}
 80009b8:	4770      	bx	lr

080009ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr

080009c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc80      	pop	{r7}
 80009d0:	4770      	bx	lr

080009d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d6:	f000 f985 	bl	8000ce4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
	...

080009e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009e8:	4a14      	ldr	r2, [pc, #80]	; (8000a3c <_sbrk+0x5c>)
 80009ea:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <_sbrk+0x60>)
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009f4:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <_sbrk+0x64>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d102      	bne.n	8000a02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009fc:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <_sbrk+0x64>)
 80009fe:	4a12      	ldr	r2, [pc, #72]	; (8000a48 <_sbrk+0x68>)
 8000a00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a02:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <_sbrk+0x64>)
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4413      	add	r3, r2
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d207      	bcs.n	8000a20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a10:	f001 fb66 	bl	80020e0 <__errno>
 8000a14:	4603      	mov	r3, r0
 8000a16:	220c      	movs	r2, #12
 8000a18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1e:	e009      	b.n	8000a34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a20:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <_sbrk+0x64>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a26:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <_sbrk+0x64>)
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	4a05      	ldr	r2, [pc, #20]	; (8000a44 <_sbrk+0x64>)
 8000a30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a32:	68fb      	ldr	r3, [r7, #12]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3718      	adds	r7, #24
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20005000 	.word	0x20005000
 8000a40:	00000400 	.word	0x00000400
 8000a44:	20000154 	.word	0x20000154
 8000a48:	20000338 	.word	0x20000338

08000a4c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr

08000a58 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a5c:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <MX_USART2_UART_Init+0x4c>)
 8000a5e:	4a12      	ldr	r2, [pc, #72]	; (8000aa8 <MX_USART2_UART_Init+0x50>)
 8000a60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a62:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <MX_USART2_UART_Init+0x4c>)
 8000a64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <MX_USART2_UART_Init+0x4c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a70:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <MX_USART2_UART_Init+0x4c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a76:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <MX_USART2_UART_Init+0x4c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a7c:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <MX_USART2_UART_Init+0x4c>)
 8000a7e:	220c      	movs	r2, #12
 8000a80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a82:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <MX_USART2_UART_Init+0x4c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <MX_USART2_UART_Init+0x4c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a8e:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <MX_USART2_UART_Init+0x4c>)
 8000a90:	f001 f89c 	bl	8001bcc <HAL_UART_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a9a:	f7ff ff52 	bl	8000942 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000158 	.word	0x20000158
 8000aa8:	40004400 	.word	0x40004400

08000aac <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <MX_USART3_UART_Init+0x4c>)
 8000ab2:	4a12      	ldr	r2, [pc, #72]	; (8000afc <MX_USART3_UART_Init+0x50>)
 8000ab4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ab6:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <MX_USART3_UART_Init+0x4c>)
 8000ab8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000abc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <MX_USART3_UART_Init+0x4c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <MX_USART3_UART_Init+0x4c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000aca:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <MX_USART3_UART_Init+0x4c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ad0:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <MX_USART3_UART_Init+0x4c>)
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad6:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <MX_USART3_UART_Init+0x4c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <MX_USART3_UART_Init+0x4c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ae2:	4805      	ldr	r0, [pc, #20]	; (8000af8 <MX_USART3_UART_Init+0x4c>)
 8000ae4:	f001 f872 	bl	8001bcc <HAL_UART_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000aee:	f7ff ff28 	bl	8000942 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200001a0 	.word	0x200001a0
 8000afc:	40004800 	.word	0x40004800

08000b00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	; 0x28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 0318 	add.w	r3, r7, #24
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a37      	ldr	r2, [pc, #220]	; (8000bf8 <HAL_UART_MspInit+0xf8>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d130      	bne.n	8000b82 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b20:	4b36      	ldr	r3, [pc, #216]	; (8000bfc <HAL_UART_MspInit+0xfc>)
 8000b22:	69db      	ldr	r3, [r3, #28]
 8000b24:	4a35      	ldr	r2, [pc, #212]	; (8000bfc <HAL_UART_MspInit+0xfc>)
 8000b26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b2a:	61d3      	str	r3, [r2, #28]
 8000b2c:	4b33      	ldr	r3, [pc, #204]	; (8000bfc <HAL_UART_MspInit+0xfc>)
 8000b2e:	69db      	ldr	r3, [r3, #28]
 8000b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b34:	617b      	str	r3, [r7, #20]
 8000b36:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b38:	4b30      	ldr	r3, [pc, #192]	; (8000bfc <HAL_UART_MspInit+0xfc>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	4a2f      	ldr	r2, [pc, #188]	; (8000bfc <HAL_UART_MspInit+0xfc>)
 8000b3e:	f043 0304 	orr.w	r3, r3, #4
 8000b42:	6193      	str	r3, [r2, #24]
 8000b44:	4b2d      	ldr	r3, [pc, #180]	; (8000bfc <HAL_UART_MspInit+0xfc>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	f003 0304 	and.w	r3, r3, #4
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b50:	2304      	movs	r3, #4
 8000b52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b54:	2302      	movs	r3, #2
 8000b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5c:	f107 0318 	add.w	r3, r7, #24
 8000b60:	4619      	mov	r1, r3
 8000b62:	4827      	ldr	r0, [pc, #156]	; (8000c00 <HAL_UART_MspInit+0x100>)
 8000b64:	f000 fa04 	bl	8000f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b68:	2308      	movs	r3, #8
 8000b6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b74:	f107 0318 	add.w	r3, r7, #24
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4821      	ldr	r0, [pc, #132]	; (8000c00 <HAL_UART_MspInit+0x100>)
 8000b7c:	f000 f9f8 	bl	8000f70 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000b80:	e036      	b.n	8000bf0 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART3)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a1f      	ldr	r2, [pc, #124]	; (8000c04 <HAL_UART_MspInit+0x104>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d131      	bne.n	8000bf0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b8c:	4b1b      	ldr	r3, [pc, #108]	; (8000bfc <HAL_UART_MspInit+0xfc>)
 8000b8e:	69db      	ldr	r3, [r3, #28]
 8000b90:	4a1a      	ldr	r2, [pc, #104]	; (8000bfc <HAL_UART_MspInit+0xfc>)
 8000b92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b96:	61d3      	str	r3, [r2, #28]
 8000b98:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <HAL_UART_MspInit+0xfc>)
 8000b9a:	69db      	ldr	r3, [r3, #28]
 8000b9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba4:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <HAL_UART_MspInit+0xfc>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	4a14      	ldr	r2, [pc, #80]	; (8000bfc <HAL_UART_MspInit+0xfc>)
 8000baa:	f043 0308 	orr.w	r3, r3, #8
 8000bae:	6193      	str	r3, [r2, #24]
 8000bb0:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <HAL_UART_MspInit+0xfc>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	f003 0308 	and.w	r3, r3, #8
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bca:	f107 0318 	add.w	r3, r7, #24
 8000bce:	4619      	mov	r1, r3
 8000bd0:	480d      	ldr	r0, [pc, #52]	; (8000c08 <HAL_UART_MspInit+0x108>)
 8000bd2:	f000 f9cd 	bl	8000f70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000bd6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be4:	f107 0318 	add.w	r3, r7, #24
 8000be8:	4619      	mov	r1, r3
 8000bea:	4807      	ldr	r0, [pc, #28]	; (8000c08 <HAL_UART_MspInit+0x108>)
 8000bec:	f000 f9c0 	bl	8000f70 <HAL_GPIO_Init>
}
 8000bf0:	bf00      	nop
 8000bf2:	3728      	adds	r7, #40	; 0x28
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40004400 	.word	0x40004400
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	40010800 	.word	0x40010800
 8000c04:	40004800 	.word	0x40004800
 8000c08:	40010c00 	.word	0x40010c00

08000c0c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c0c:	f7ff ff1e 	bl	8000a4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c10:	480b      	ldr	r0, [pc, #44]	; (8000c40 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c12:	490c      	ldr	r1, [pc, #48]	; (8000c44 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c14:	4a0c      	ldr	r2, [pc, #48]	; (8000c48 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c18:	e002      	b.n	8000c20 <LoopCopyDataInit>

08000c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1e:	3304      	adds	r3, #4

08000c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c24:	d3f9      	bcc.n	8000c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c26:	4a09      	ldr	r2, [pc, #36]	; (8000c4c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c28:	4c09      	ldr	r4, [pc, #36]	; (8000c50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c2c:	e001      	b.n	8000c32 <LoopFillZerobss>

08000c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c30:	3204      	adds	r2, #4

08000c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c34:	d3fb      	bcc.n	8000c2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c36:	f001 fa59 	bl	80020ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c3a:	f7ff fe31 	bl	80008a0 <main>
  bx lr
 8000c3e:	4770      	bx	lr
  ldr r0, =_sdata
 8000c40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c44:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c48:	08002cb4 	.word	0x08002cb4
  ldr r2, =_sbss
 8000c4c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c50:	20000334 	.word	0x20000334

08000c54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c54:	e7fe      	b.n	8000c54 <ADC1_2_IRQHandler>
	...

08000c58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c5c:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <HAL_Init+0x28>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a07      	ldr	r2, [pc, #28]	; (8000c80 <HAL_Init+0x28>)
 8000c62:	f043 0310 	orr.w	r3, r3, #16
 8000c66:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c68:	2003      	movs	r0, #3
 8000c6a:	f000 f907 	bl	8000e7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c6e:	200f      	movs	r0, #15
 8000c70:	f000 f808 	bl	8000c84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c74:	f7ff fe6a 	bl	800094c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40022000 	.word	0x40022000

08000c84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c8c:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <HAL_InitTick+0x54>)
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <HAL_InitTick+0x58>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	4619      	mov	r1, r3
 8000c96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f000 f911 	bl	8000eca <HAL_SYSTICK_Config>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e00e      	b.n	8000cd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2b0f      	cmp	r3, #15
 8000cb6:	d80a      	bhi.n	8000cce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	6879      	ldr	r1, [r7, #4]
 8000cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc0:	f000 f8e7 	bl	8000e92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cc4:	4a06      	ldr	r2, [pc, #24]	; (8000ce0 <HAL_InitTick+0x5c>)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	e000      	b.n	8000cd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	2000000c 	.word	0x2000000c
 8000cdc:	20000014 	.word	0x20000014
 8000ce0:	20000010 	.word	0x20000010

08000ce4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <HAL_IncTick+0x1c>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	461a      	mov	r2, r3
 8000cee:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <HAL_IncTick+0x20>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	4a03      	ldr	r2, [pc, #12]	; (8000d04 <HAL_IncTick+0x20>)
 8000cf6:	6013      	str	r3, [r2, #0]
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bc80      	pop	{r7}
 8000cfe:	4770      	bx	lr
 8000d00:	20000014 	.word	0x20000014
 8000d04:	200001e8 	.word	0x200001e8

08000d08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d0c:	4b02      	ldr	r3, [pc, #8]	; (8000d18 <HAL_GetTick+0x10>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr
 8000d18:	200001e8 	.word	0x200001e8

08000d1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d32:	68ba      	ldr	r2, [r7, #8]
 8000d34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d38:	4013      	ands	r3, r2
 8000d3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4e:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	60d3      	str	r3, [r2, #12]
}
 8000d54:	bf00      	nop
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bc80      	pop	{r7}
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d68:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <__NVIC_GetPriorityGrouping+0x18>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	0a1b      	lsrs	r3, r3, #8
 8000d6e:	f003 0307 	and.w	r3, r3, #7
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	6039      	str	r1, [r7, #0]
 8000d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	db0a      	blt.n	8000daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	b2da      	uxtb	r2, r3
 8000d98:	490c      	ldr	r1, [pc, #48]	; (8000dcc <__NVIC_SetPriority+0x4c>)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	0112      	lsls	r2, r2, #4
 8000da0:	b2d2      	uxtb	r2, r2
 8000da2:	440b      	add	r3, r1
 8000da4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da8:	e00a      	b.n	8000dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	4908      	ldr	r1, [pc, #32]	; (8000dd0 <__NVIC_SetPriority+0x50>)
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	f003 030f 	and.w	r3, r3, #15
 8000db6:	3b04      	subs	r3, #4
 8000db8:	0112      	lsls	r2, r2, #4
 8000dba:	b2d2      	uxtb	r2, r2
 8000dbc:	440b      	add	r3, r1
 8000dbe:	761a      	strb	r2, [r3, #24]
}
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bc80      	pop	{r7}
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	e000e100 	.word	0xe000e100
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b089      	sub	sp, #36	; 0x24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	f1c3 0307 	rsb	r3, r3, #7
 8000dee:	2b04      	cmp	r3, #4
 8000df0:	bf28      	it	cs
 8000df2:	2304      	movcs	r3, #4
 8000df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	3304      	adds	r3, #4
 8000dfa:	2b06      	cmp	r3, #6
 8000dfc:	d902      	bls.n	8000e04 <NVIC_EncodePriority+0x30>
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3b03      	subs	r3, #3
 8000e02:	e000      	b.n	8000e06 <NVIC_EncodePriority+0x32>
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e08:	f04f 32ff 	mov.w	r2, #4294967295
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43da      	mvns	r2, r3
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	401a      	ands	r2, r3
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	fa01 f303 	lsl.w	r3, r1, r3
 8000e26:	43d9      	mvns	r1, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e2c:	4313      	orrs	r3, r2
         );
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3724      	adds	r7, #36	; 0x24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr

08000e38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3b01      	subs	r3, #1
 8000e44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e48:	d301      	bcc.n	8000e4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e00f      	b.n	8000e6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <SysTick_Config+0x40>)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e56:	210f      	movs	r1, #15
 8000e58:	f04f 30ff 	mov.w	r0, #4294967295
 8000e5c:	f7ff ff90 	bl	8000d80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e60:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <SysTick_Config+0x40>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e66:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <SysTick_Config+0x40>)
 8000e68:	2207      	movs	r2, #7
 8000e6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	e000e010 	.word	0xe000e010

08000e7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f7ff ff49 	bl	8000d1c <__NVIC_SetPriorityGrouping>
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b086      	sub	sp, #24
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	4603      	mov	r3, r0
 8000e9a:	60b9      	str	r1, [r7, #8]
 8000e9c:	607a      	str	r2, [r7, #4]
 8000e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea4:	f7ff ff5e 	bl	8000d64 <__NVIC_GetPriorityGrouping>
 8000ea8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	68b9      	ldr	r1, [r7, #8]
 8000eae:	6978      	ldr	r0, [r7, #20]
 8000eb0:	f7ff ff90 	bl	8000dd4 <NVIC_EncodePriority>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eba:	4611      	mov	r1, r2
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff5f 	bl	8000d80 <__NVIC_SetPriority>
}
 8000ec2:	bf00      	nop
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff ffb0 	bl	8000e38 <SysTick_Config>
 8000ed8:	4603      	mov	r3, r0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d101      	bne.n	8000ef4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	e00e      	b.n	8000f12 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	795b      	ldrb	r3, [r3, #5]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d105      	bne.n	8000f0a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff fc7f 	bl	8000808 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b087      	sub	sp, #28
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	60f8      	str	r0, [r7, #12]
 8000f22:	60b9      	str	r1, [r7, #8]
 8000f24:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	2202      	movs	r2, #2
 8000f2e:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
 8000f34:	e00a      	b.n	8000f4c <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	68ba      	ldr	r2, [r7, #8]
 8000f3c:	441a      	add	r2, r3
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	6812      	ldr	r2, [r2, #0]
 8000f44:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	697a      	ldr	r2, [r7, #20]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d3f0      	bcc.n	8000f36 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	2201      	movs	r2, #1
 8000f60:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8000f62:	693b      	ldr	r3, [r7, #16]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	371c      	adds	r7, #28
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bc80      	pop	{r7}
 8000f6c:	4770      	bx	lr
	...

08000f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b08b      	sub	sp, #44	; 0x2c
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f82:	e169      	b.n	8001258 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f84:	2201      	movs	r2, #1
 8000f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	69fa      	ldr	r2, [r7, #28]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	f040 8158 	bne.w	8001252 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	4a9a      	ldr	r2, [pc, #616]	; (8001210 <HAL_GPIO_Init+0x2a0>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d05e      	beq.n	800106a <HAL_GPIO_Init+0xfa>
 8000fac:	4a98      	ldr	r2, [pc, #608]	; (8001210 <HAL_GPIO_Init+0x2a0>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d875      	bhi.n	800109e <HAL_GPIO_Init+0x12e>
 8000fb2:	4a98      	ldr	r2, [pc, #608]	; (8001214 <HAL_GPIO_Init+0x2a4>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d058      	beq.n	800106a <HAL_GPIO_Init+0xfa>
 8000fb8:	4a96      	ldr	r2, [pc, #600]	; (8001214 <HAL_GPIO_Init+0x2a4>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d86f      	bhi.n	800109e <HAL_GPIO_Init+0x12e>
 8000fbe:	4a96      	ldr	r2, [pc, #600]	; (8001218 <HAL_GPIO_Init+0x2a8>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d052      	beq.n	800106a <HAL_GPIO_Init+0xfa>
 8000fc4:	4a94      	ldr	r2, [pc, #592]	; (8001218 <HAL_GPIO_Init+0x2a8>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d869      	bhi.n	800109e <HAL_GPIO_Init+0x12e>
 8000fca:	4a94      	ldr	r2, [pc, #592]	; (800121c <HAL_GPIO_Init+0x2ac>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d04c      	beq.n	800106a <HAL_GPIO_Init+0xfa>
 8000fd0:	4a92      	ldr	r2, [pc, #584]	; (800121c <HAL_GPIO_Init+0x2ac>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d863      	bhi.n	800109e <HAL_GPIO_Init+0x12e>
 8000fd6:	4a92      	ldr	r2, [pc, #584]	; (8001220 <HAL_GPIO_Init+0x2b0>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d046      	beq.n	800106a <HAL_GPIO_Init+0xfa>
 8000fdc:	4a90      	ldr	r2, [pc, #576]	; (8001220 <HAL_GPIO_Init+0x2b0>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d85d      	bhi.n	800109e <HAL_GPIO_Init+0x12e>
 8000fe2:	2b12      	cmp	r3, #18
 8000fe4:	d82a      	bhi.n	800103c <HAL_GPIO_Init+0xcc>
 8000fe6:	2b12      	cmp	r3, #18
 8000fe8:	d859      	bhi.n	800109e <HAL_GPIO_Init+0x12e>
 8000fea:	a201      	add	r2, pc, #4	; (adr r2, 8000ff0 <HAL_GPIO_Init+0x80>)
 8000fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff0:	0800106b 	.word	0x0800106b
 8000ff4:	08001045 	.word	0x08001045
 8000ff8:	08001057 	.word	0x08001057
 8000ffc:	08001099 	.word	0x08001099
 8001000:	0800109f 	.word	0x0800109f
 8001004:	0800109f 	.word	0x0800109f
 8001008:	0800109f 	.word	0x0800109f
 800100c:	0800109f 	.word	0x0800109f
 8001010:	0800109f 	.word	0x0800109f
 8001014:	0800109f 	.word	0x0800109f
 8001018:	0800109f 	.word	0x0800109f
 800101c:	0800109f 	.word	0x0800109f
 8001020:	0800109f 	.word	0x0800109f
 8001024:	0800109f 	.word	0x0800109f
 8001028:	0800109f 	.word	0x0800109f
 800102c:	0800109f 	.word	0x0800109f
 8001030:	0800109f 	.word	0x0800109f
 8001034:	0800104d 	.word	0x0800104d
 8001038:	08001061 	.word	0x08001061
 800103c:	4a79      	ldr	r2, [pc, #484]	; (8001224 <HAL_GPIO_Init+0x2b4>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d013      	beq.n	800106a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001042:	e02c      	b.n	800109e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	623b      	str	r3, [r7, #32]
          break;
 800104a:	e029      	b.n	80010a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	3304      	adds	r3, #4
 8001052:	623b      	str	r3, [r7, #32]
          break;
 8001054:	e024      	b.n	80010a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	3308      	adds	r3, #8
 800105c:	623b      	str	r3, [r7, #32]
          break;
 800105e:	e01f      	b.n	80010a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	330c      	adds	r3, #12
 8001066:	623b      	str	r3, [r7, #32]
          break;
 8001068:	e01a      	b.n	80010a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d102      	bne.n	8001078 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001072:	2304      	movs	r3, #4
 8001074:	623b      	str	r3, [r7, #32]
          break;
 8001076:	e013      	b.n	80010a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d105      	bne.n	800108c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001080:	2308      	movs	r3, #8
 8001082:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	69fa      	ldr	r2, [r7, #28]
 8001088:	611a      	str	r2, [r3, #16]
          break;
 800108a:	e009      	b.n	80010a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800108c:	2308      	movs	r3, #8
 800108e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	69fa      	ldr	r2, [r7, #28]
 8001094:	615a      	str	r2, [r3, #20]
          break;
 8001096:	e003      	b.n	80010a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001098:	2300      	movs	r3, #0
 800109a:	623b      	str	r3, [r7, #32]
          break;
 800109c:	e000      	b.n	80010a0 <HAL_GPIO_Init+0x130>
          break;
 800109e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	2bff      	cmp	r3, #255	; 0xff
 80010a4:	d801      	bhi.n	80010aa <HAL_GPIO_Init+0x13a>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	e001      	b.n	80010ae <HAL_GPIO_Init+0x13e>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	3304      	adds	r3, #4
 80010ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	2bff      	cmp	r3, #255	; 0xff
 80010b4:	d802      	bhi.n	80010bc <HAL_GPIO_Init+0x14c>
 80010b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	e002      	b.n	80010c2 <HAL_GPIO_Init+0x152>
 80010bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010be:	3b08      	subs	r3, #8
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	210f      	movs	r1, #15
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	fa01 f303 	lsl.w	r3, r1, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	401a      	ands	r2, r3
 80010d4:	6a39      	ldr	r1, [r7, #32]
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	fa01 f303 	lsl.w	r3, r1, r3
 80010dc:	431a      	orrs	r2, r3
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	f000 80b1 	beq.w	8001252 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010f0:	4b4d      	ldr	r3, [pc, #308]	; (8001228 <HAL_GPIO_Init+0x2b8>)
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	4a4c      	ldr	r2, [pc, #304]	; (8001228 <HAL_GPIO_Init+0x2b8>)
 80010f6:	f043 0301 	orr.w	r3, r3, #1
 80010fa:	6193      	str	r3, [r2, #24]
 80010fc:	4b4a      	ldr	r3, [pc, #296]	; (8001228 <HAL_GPIO_Init+0x2b8>)
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001108:	4a48      	ldr	r2, [pc, #288]	; (800122c <HAL_GPIO_Init+0x2bc>)
 800110a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110c:	089b      	lsrs	r3, r3, #2
 800110e:	3302      	adds	r3, #2
 8001110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001114:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001118:	f003 0303 	and.w	r3, r3, #3
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	220f      	movs	r2, #15
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	68fa      	ldr	r2, [r7, #12]
 8001128:	4013      	ands	r3, r2
 800112a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a40      	ldr	r2, [pc, #256]	; (8001230 <HAL_GPIO_Init+0x2c0>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d013      	beq.n	800115c <HAL_GPIO_Init+0x1ec>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a3f      	ldr	r2, [pc, #252]	; (8001234 <HAL_GPIO_Init+0x2c4>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d00d      	beq.n	8001158 <HAL_GPIO_Init+0x1e8>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4a3e      	ldr	r2, [pc, #248]	; (8001238 <HAL_GPIO_Init+0x2c8>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d007      	beq.n	8001154 <HAL_GPIO_Init+0x1e4>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a3d      	ldr	r2, [pc, #244]	; (800123c <HAL_GPIO_Init+0x2cc>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d101      	bne.n	8001150 <HAL_GPIO_Init+0x1e0>
 800114c:	2303      	movs	r3, #3
 800114e:	e006      	b.n	800115e <HAL_GPIO_Init+0x1ee>
 8001150:	2304      	movs	r3, #4
 8001152:	e004      	b.n	800115e <HAL_GPIO_Init+0x1ee>
 8001154:	2302      	movs	r3, #2
 8001156:	e002      	b.n	800115e <HAL_GPIO_Init+0x1ee>
 8001158:	2301      	movs	r3, #1
 800115a:	e000      	b.n	800115e <HAL_GPIO_Init+0x1ee>
 800115c:	2300      	movs	r3, #0
 800115e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001160:	f002 0203 	and.w	r2, r2, #3
 8001164:	0092      	lsls	r2, r2, #2
 8001166:	4093      	lsls	r3, r2
 8001168:	68fa      	ldr	r2, [r7, #12]
 800116a:	4313      	orrs	r3, r2
 800116c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800116e:	492f      	ldr	r1, [pc, #188]	; (800122c <HAL_GPIO_Init+0x2bc>)
 8001170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001172:	089b      	lsrs	r3, r3, #2
 8001174:	3302      	adds	r3, #2
 8001176:	68fa      	ldr	r2, [r7, #12]
 8001178:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d006      	beq.n	8001196 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001188:	4b2d      	ldr	r3, [pc, #180]	; (8001240 <HAL_GPIO_Init+0x2d0>)
 800118a:	689a      	ldr	r2, [r3, #8]
 800118c:	492c      	ldr	r1, [pc, #176]	; (8001240 <HAL_GPIO_Init+0x2d0>)
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	4313      	orrs	r3, r2
 8001192:	608b      	str	r3, [r1, #8]
 8001194:	e006      	b.n	80011a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001196:	4b2a      	ldr	r3, [pc, #168]	; (8001240 <HAL_GPIO_Init+0x2d0>)
 8001198:	689a      	ldr	r2, [r3, #8]
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	43db      	mvns	r3, r3
 800119e:	4928      	ldr	r1, [pc, #160]	; (8001240 <HAL_GPIO_Init+0x2d0>)
 80011a0:	4013      	ands	r3, r2
 80011a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d006      	beq.n	80011be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011b0:	4b23      	ldr	r3, [pc, #140]	; (8001240 <HAL_GPIO_Init+0x2d0>)
 80011b2:	68da      	ldr	r2, [r3, #12]
 80011b4:	4922      	ldr	r1, [pc, #136]	; (8001240 <HAL_GPIO_Init+0x2d0>)
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	60cb      	str	r3, [r1, #12]
 80011bc:	e006      	b.n	80011cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011be:	4b20      	ldr	r3, [pc, #128]	; (8001240 <HAL_GPIO_Init+0x2d0>)
 80011c0:	68da      	ldr	r2, [r3, #12]
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	43db      	mvns	r3, r3
 80011c6:	491e      	ldr	r1, [pc, #120]	; (8001240 <HAL_GPIO_Init+0x2d0>)
 80011c8:	4013      	ands	r3, r2
 80011ca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d006      	beq.n	80011e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011d8:	4b19      	ldr	r3, [pc, #100]	; (8001240 <HAL_GPIO_Init+0x2d0>)
 80011da:	685a      	ldr	r2, [r3, #4]
 80011dc:	4918      	ldr	r1, [pc, #96]	; (8001240 <HAL_GPIO_Init+0x2d0>)
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	604b      	str	r3, [r1, #4]
 80011e4:	e006      	b.n	80011f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011e6:	4b16      	ldr	r3, [pc, #88]	; (8001240 <HAL_GPIO_Init+0x2d0>)
 80011e8:	685a      	ldr	r2, [r3, #4]
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	43db      	mvns	r3, r3
 80011ee:	4914      	ldr	r1, [pc, #80]	; (8001240 <HAL_GPIO_Init+0x2d0>)
 80011f0:	4013      	ands	r3, r2
 80011f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d021      	beq.n	8001244 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001200:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <HAL_GPIO_Init+0x2d0>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	490e      	ldr	r1, [pc, #56]	; (8001240 <HAL_GPIO_Init+0x2d0>)
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	4313      	orrs	r3, r2
 800120a:	600b      	str	r3, [r1, #0]
 800120c:	e021      	b.n	8001252 <HAL_GPIO_Init+0x2e2>
 800120e:	bf00      	nop
 8001210:	10320000 	.word	0x10320000
 8001214:	10310000 	.word	0x10310000
 8001218:	10220000 	.word	0x10220000
 800121c:	10210000 	.word	0x10210000
 8001220:	10120000 	.word	0x10120000
 8001224:	10110000 	.word	0x10110000
 8001228:	40021000 	.word	0x40021000
 800122c:	40010000 	.word	0x40010000
 8001230:	40010800 	.word	0x40010800
 8001234:	40010c00 	.word	0x40010c00
 8001238:	40011000 	.word	0x40011000
 800123c:	40011400 	.word	0x40011400
 8001240:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001244:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <HAL_GPIO_Init+0x304>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	43db      	mvns	r3, r3
 800124c:	4909      	ldr	r1, [pc, #36]	; (8001274 <HAL_GPIO_Init+0x304>)
 800124e:	4013      	ands	r3, r2
 8001250:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001254:	3301      	adds	r3, #1
 8001256:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125e:	fa22 f303 	lsr.w	r3, r2, r3
 8001262:	2b00      	cmp	r3, #0
 8001264:	f47f ae8e 	bne.w	8000f84 <HAL_GPIO_Init+0x14>
  }
}
 8001268:	bf00      	nop
 800126a:	bf00      	nop
 800126c:	372c      	adds	r7, #44	; 0x2c
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr
 8001274:	40010400 	.word	0x40010400

08001278 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800127e:	f7ff fd43 	bl	8000d08 <HAL_GetTick>
 8001282:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001284:	4b45      	ldr	r3, [pc, #276]	; (800139c <HAL_RCC_DeInit+0x124>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a44      	ldr	r2, [pc, #272]	; (800139c <HAL_RCC_DeInit+0x124>)
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001290:	e008      	b.n	80012a4 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001292:	f7ff fd39 	bl	8000d08 <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	2b02      	cmp	r3, #2
 800129e:	d901      	bls.n	80012a4 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80012a0:	2303      	movs	r3, #3
 80012a2:	e077      	b.n	8001394 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80012a4:	4b3d      	ldr	r3, [pc, #244]	; (800139c <HAL_RCC_DeInit+0x124>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d0f0      	beq.n	8001292 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 80012b0:	4b3a      	ldr	r3, [pc, #232]	; (800139c <HAL_RCC_DeInit+0x124>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80012b8:	4a38      	ldr	r2, [pc, #224]	; (800139c <HAL_RCC_DeInit+0x124>)
 80012ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012be:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80012c0:	f7ff fd22 	bl	8000d08 <HAL_GetTick>
 80012c4:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80012c6:	4b35      	ldr	r3, [pc, #212]	; (800139c <HAL_RCC_DeInit+0x124>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	605a      	str	r2, [r3, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80012cc:	e00a      	b.n	80012e4 <HAL_RCC_DeInit+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012ce:	f7ff fd1b 	bl	8000d08 <HAL_GetTick>
 80012d2:	4602      	mov	r2, r0
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012dc:	4293      	cmp	r3, r2
 80012de:	d901      	bls.n	80012e4 <HAL_RCC_DeInit+0x6c>
    {
      return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e057      	b.n	8001394 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80012e4:	4b2d      	ldr	r3, [pc, #180]	; (800139c <HAL_RCC_DeInit+0x124>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f003 030c 	and.w	r3, r3, #12
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1ee      	bne.n	80012ce <HAL_RCC_DeInit+0x56>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80012f0:	4b2b      	ldr	r3, [pc, #172]	; (80013a0 <HAL_RCC_DeInit+0x128>)
 80012f2:	4a2c      	ldr	r2, [pc, #176]	; (80013a4 <HAL_RCC_DeInit+0x12c>)
 80012f4:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80012f6:	4b2c      	ldr	r3, [pc, #176]	; (80013a8 <HAL_RCC_DeInit+0x130>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff fcc2 	bl	8000c84 <HAL_InitTick>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <HAL_RCC_DeInit+0x92>
  {
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e044      	b.n	8001394 <HAL_RCC_DeInit+0x11c>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800130a:	f7ff fcfd 	bl	8000d08 <HAL_GetTick>
 800130e:	6078      	str	r0, [r7, #4]

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001310:	4b22      	ldr	r3, [pc, #136]	; (800139c <HAL_RCC_DeInit+0x124>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a21      	ldr	r2, [pc, #132]	; (800139c <HAL_RCC_DeInit+0x124>)
 8001316:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800131a:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800131c:	e008      	b.n	8001330 <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800131e:	f7ff fcf3 	bl	8000d08 <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e031      	b.n	8001394 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001330:	4b1a      	ldr	r3, [pc, #104]	; (800139c <HAL_RCC_DeInit+0x124>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1f0      	bne.n	800131e <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Ensure to reset PLLSRC and PLLMUL bits */
  CLEAR_REG(RCC->CFGR);
 800133c:	4b17      	ldr	r3, [pc, #92]	; (800139c <HAL_RCC_DeInit+0x124>)
 800133e:	2200      	movs	r2, #0
 8001340:	605a      	str	r2, [r3, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001342:	f7ff fce1 	bl	8000d08 <HAL_GetTick>
 8001346:	6078      	str	r0, [r7, #4]

  /* Reset HSEON & CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 8001348:	4b14      	ldr	r3, [pc, #80]	; (800139c <HAL_RCC_DeInit+0x124>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a13      	ldr	r2, [pc, #76]	; (800139c <HAL_RCC_DeInit+0x124>)
 800134e:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001352:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001354:	e008      	b.n	8001368 <HAL_RCC_DeInit+0xf0>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001356:	f7ff fcd7 	bl	8000d08 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b64      	cmp	r3, #100	; 0x64
 8001362:	d901      	bls.n	8001368 <HAL_RCC_DeInit+0xf0>
    {
      return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e015      	b.n	8001394 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001368:	4b0c      	ldr	r3, [pc, #48]	; (800139c <HAL_RCC_DeInit+0x124>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d1f0      	bne.n	8001356 <HAL_RCC_DeInit+0xde>
    }
  }

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001374:	4b09      	ldr	r3, [pc, #36]	; (800139c <HAL_RCC_DeInit+0x124>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a08      	ldr	r2, [pc, #32]	; (800139c <HAL_RCC_DeInit+0x124>)
 800137a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800137e:	6013      	str	r3, [r2, #0]
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
#endif /* RCC_CFGR2_PREDIV1 */

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_RCC_DeInit+0x124>)
 8001382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001384:	4a05      	ldr	r2, [pc, #20]	; (800139c <HAL_RCC_DeInit+0x124>)
 8001386:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800138a:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 800138c:	4b03      	ldr	r3, [pc, #12]	; (800139c <HAL_RCC_DeInit+0x124>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8001392:	2300      	movs	r3, #0
}
 8001394:	4618      	mov	r0, r3
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40021000 	.word	0x40021000
 80013a0:	2000000c 	.word	0x2000000c
 80013a4:	007a1200 	.word	0x007a1200
 80013a8:	20000010 	.word	0x20000010

080013ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e272      	b.n	80018a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f000 8087 	beq.w	80014da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013cc:	4b92      	ldr	r3, [pc, #584]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 030c 	and.w	r3, r3, #12
 80013d4:	2b04      	cmp	r3, #4
 80013d6:	d00c      	beq.n	80013f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013d8:	4b8f      	ldr	r3, [pc, #572]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f003 030c 	and.w	r3, r3, #12
 80013e0:	2b08      	cmp	r3, #8
 80013e2:	d112      	bne.n	800140a <HAL_RCC_OscConfig+0x5e>
 80013e4:	4b8c      	ldr	r3, [pc, #560]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013f0:	d10b      	bne.n	800140a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f2:	4b89      	ldr	r3, [pc, #548]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d06c      	beq.n	80014d8 <HAL_RCC_OscConfig+0x12c>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d168      	bne.n	80014d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e24c      	b.n	80018a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001412:	d106      	bne.n	8001422 <HAL_RCC_OscConfig+0x76>
 8001414:	4b80      	ldr	r3, [pc, #512]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a7f      	ldr	r2, [pc, #508]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 800141a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800141e:	6013      	str	r3, [r2, #0]
 8001420:	e02e      	b.n	8001480 <HAL_RCC_OscConfig+0xd4>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d10c      	bne.n	8001444 <HAL_RCC_OscConfig+0x98>
 800142a:	4b7b      	ldr	r3, [pc, #492]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a7a      	ldr	r2, [pc, #488]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 8001430:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	4b78      	ldr	r3, [pc, #480]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a77      	ldr	r2, [pc, #476]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 800143c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001440:	6013      	str	r3, [r2, #0]
 8001442:	e01d      	b.n	8001480 <HAL_RCC_OscConfig+0xd4>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800144c:	d10c      	bne.n	8001468 <HAL_RCC_OscConfig+0xbc>
 800144e:	4b72      	ldr	r3, [pc, #456]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a71      	ldr	r2, [pc, #452]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 8001454:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	4b6f      	ldr	r3, [pc, #444]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a6e      	ldr	r2, [pc, #440]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 8001460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001464:	6013      	str	r3, [r2, #0]
 8001466:	e00b      	b.n	8001480 <HAL_RCC_OscConfig+0xd4>
 8001468:	4b6b      	ldr	r3, [pc, #428]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a6a      	ldr	r2, [pc, #424]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 800146e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001472:	6013      	str	r3, [r2, #0]
 8001474:	4b68      	ldr	r3, [pc, #416]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a67      	ldr	r2, [pc, #412]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 800147a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800147e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d013      	beq.n	80014b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001488:	f7ff fc3e 	bl	8000d08 <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001490:	f7ff fc3a 	bl	8000d08 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b64      	cmp	r3, #100	; 0x64
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e200      	b.n	80018a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a2:	4b5d      	ldr	r3, [pc, #372]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0f0      	beq.n	8001490 <HAL_RCC_OscConfig+0xe4>
 80014ae:	e014      	b.n	80014da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b0:	f7ff fc2a 	bl	8000d08 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014b8:	f7ff fc26 	bl	8000d08 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b64      	cmp	r3, #100	; 0x64
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e1ec      	b.n	80018a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ca:	4b53      	ldr	r3, [pc, #332]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f0      	bne.n	80014b8 <HAL_RCC_OscConfig+0x10c>
 80014d6:	e000      	b.n	80014da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d063      	beq.n	80015ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014e6:	4b4c      	ldr	r3, [pc, #304]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f003 030c 	and.w	r3, r3, #12
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d00b      	beq.n	800150a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014f2:	4b49      	ldr	r3, [pc, #292]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f003 030c 	and.w	r3, r3, #12
 80014fa:	2b08      	cmp	r3, #8
 80014fc:	d11c      	bne.n	8001538 <HAL_RCC_OscConfig+0x18c>
 80014fe:	4b46      	ldr	r3, [pc, #280]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d116      	bne.n	8001538 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800150a:	4b43      	ldr	r3, [pc, #268]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d005      	beq.n	8001522 <HAL_RCC_OscConfig+0x176>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d001      	beq.n	8001522 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e1c0      	b.n	80018a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001522:	4b3d      	ldr	r3, [pc, #244]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	695b      	ldr	r3, [r3, #20]
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	4939      	ldr	r1, [pc, #228]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 8001532:	4313      	orrs	r3, r2
 8001534:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001536:	e03a      	b.n	80015ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d020      	beq.n	8001582 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001540:	4b36      	ldr	r3, [pc, #216]	; (800161c <HAL_RCC_OscConfig+0x270>)
 8001542:	2201      	movs	r2, #1
 8001544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001546:	f7ff fbdf 	bl	8000d08 <HAL_GetTick>
 800154a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800154c:	e008      	b.n	8001560 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800154e:	f7ff fbdb 	bl	8000d08 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e1a1      	b.n	80018a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001560:	4b2d      	ldr	r3, [pc, #180]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0f0      	beq.n	800154e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800156c:	4b2a      	ldr	r3, [pc, #168]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	695b      	ldr	r3, [r3, #20]
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	4927      	ldr	r1, [pc, #156]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 800157c:	4313      	orrs	r3, r2
 800157e:	600b      	str	r3, [r1, #0]
 8001580:	e015      	b.n	80015ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001582:	4b26      	ldr	r3, [pc, #152]	; (800161c <HAL_RCC_OscConfig+0x270>)
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001588:	f7ff fbbe 	bl	8000d08 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001590:	f7ff fbba 	bl	8000d08 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e180      	b.n	80018a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015a2:	4b1d      	ldr	r3, [pc, #116]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1f0      	bne.n	8001590 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0308 	and.w	r3, r3, #8
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d03a      	beq.n	8001630 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d019      	beq.n	80015f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015c2:	4b17      	ldr	r3, [pc, #92]	; (8001620 <HAL_RCC_OscConfig+0x274>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c8:	f7ff fb9e 	bl	8000d08 <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015d0:	f7ff fb9a 	bl	8000d08 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e160      	b.n	80018a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015e2:	4b0d      	ldr	r3, [pc, #52]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 80015e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d0f0      	beq.n	80015d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015ee:	2001      	movs	r0, #1
 80015f0:	f000 face 	bl	8001b90 <RCC_Delay>
 80015f4:	e01c      	b.n	8001630 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015f6:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <HAL_RCC_OscConfig+0x274>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015fc:	f7ff fb84 	bl	8000d08 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001602:	e00f      	b.n	8001624 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001604:	f7ff fb80 	bl	8000d08 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d908      	bls.n	8001624 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e146      	b.n	80018a4 <HAL_RCC_OscConfig+0x4f8>
 8001616:	bf00      	nop
 8001618:	40021000 	.word	0x40021000
 800161c:	42420000 	.word	0x42420000
 8001620:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001624:	4b92      	ldr	r3, [pc, #584]	; (8001870 <HAL_RCC_OscConfig+0x4c4>)
 8001626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1e9      	bne.n	8001604 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0304 	and.w	r3, r3, #4
 8001638:	2b00      	cmp	r3, #0
 800163a:	f000 80a6 	beq.w	800178a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800163e:	2300      	movs	r3, #0
 8001640:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001642:	4b8b      	ldr	r3, [pc, #556]	; (8001870 <HAL_RCC_OscConfig+0x4c4>)
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d10d      	bne.n	800166a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800164e:	4b88      	ldr	r3, [pc, #544]	; (8001870 <HAL_RCC_OscConfig+0x4c4>)
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	4a87      	ldr	r2, [pc, #540]	; (8001870 <HAL_RCC_OscConfig+0x4c4>)
 8001654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001658:	61d3      	str	r3, [r2, #28]
 800165a:	4b85      	ldr	r3, [pc, #532]	; (8001870 <HAL_RCC_OscConfig+0x4c4>)
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001662:	60bb      	str	r3, [r7, #8]
 8001664:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001666:	2301      	movs	r3, #1
 8001668:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800166a:	4b82      	ldr	r3, [pc, #520]	; (8001874 <HAL_RCC_OscConfig+0x4c8>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001672:	2b00      	cmp	r3, #0
 8001674:	d118      	bne.n	80016a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001676:	4b7f      	ldr	r3, [pc, #508]	; (8001874 <HAL_RCC_OscConfig+0x4c8>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a7e      	ldr	r2, [pc, #504]	; (8001874 <HAL_RCC_OscConfig+0x4c8>)
 800167c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001680:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001682:	f7ff fb41 	bl	8000d08 <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800168a:	f7ff fb3d 	bl	8000d08 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b64      	cmp	r3, #100	; 0x64
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e103      	b.n	80018a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800169c:	4b75      	ldr	r3, [pc, #468]	; (8001874 <HAL_RCC_OscConfig+0x4c8>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d0f0      	beq.n	800168a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d106      	bne.n	80016be <HAL_RCC_OscConfig+0x312>
 80016b0:	4b6f      	ldr	r3, [pc, #444]	; (8001870 <HAL_RCC_OscConfig+0x4c4>)
 80016b2:	6a1b      	ldr	r3, [r3, #32]
 80016b4:	4a6e      	ldr	r2, [pc, #440]	; (8001870 <HAL_RCC_OscConfig+0x4c4>)
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	6213      	str	r3, [r2, #32]
 80016bc:	e02d      	b.n	800171a <HAL_RCC_OscConfig+0x36e>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d10c      	bne.n	80016e0 <HAL_RCC_OscConfig+0x334>
 80016c6:	4b6a      	ldr	r3, [pc, #424]	; (8001870 <HAL_RCC_OscConfig+0x4c4>)
 80016c8:	6a1b      	ldr	r3, [r3, #32]
 80016ca:	4a69      	ldr	r2, [pc, #420]	; (8001870 <HAL_RCC_OscConfig+0x4c4>)
 80016cc:	f023 0301 	bic.w	r3, r3, #1
 80016d0:	6213      	str	r3, [r2, #32]
 80016d2:	4b67      	ldr	r3, [pc, #412]	; (8001870 <HAL_RCC_OscConfig+0x4c4>)
 80016d4:	6a1b      	ldr	r3, [r3, #32]
 80016d6:	4a66      	ldr	r2, [pc, #408]	; (8001870 <HAL_RCC_OscConfig+0x4c4>)
 80016d8:	f023 0304 	bic.w	r3, r3, #4
 80016dc:	6213      	str	r3, [r2, #32]
 80016de:	e01c      	b.n	800171a <HAL_RCC_OscConfig+0x36e>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	2b05      	cmp	r3, #5
 80016e6:	d10c      	bne.n	8001702 <HAL_RCC_OscConfig+0x356>
 80016e8:	4b61      	ldr	r3, [pc, #388]	; (8001870 <HAL_RCC_OscConfig+0x4c4>)
 80016ea:	6a1b      	ldr	r3, [r3, #32]
 80016ec:	4a60      	ldr	r2, [pc, #384]	; (8001870 <HAL_RCC_OscConfig+0x4c4>)
 80016ee:	f043 0304 	orr.w	r3, r3, #4
 80016f2:	6213      	str	r3, [r2, #32]
 80016f4:	4b5e      	ldr	r3, [pc, #376]	; (8001870 <HAL_RCC_OscConfig+0x4c4>)
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	4a5d      	ldr	r2, [pc, #372]	; (8001870 <HAL_RCC_OscConfig+0x4c4>)
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	6213      	str	r3, [r2, #32]
 8001700:	e00b      	b.n	800171a <HAL_RCC_OscConfig+0x36e>
 8001702:	4b5b      	ldr	r3, [pc, #364]	; (8001870 <HAL_RCC_OscConfig+0x4c4>)
 8001704:	6a1b      	ldr	r3, [r3, #32]
 8001706:	4a5a      	ldr	r2, [pc, #360]	; (8001870 <HAL_RCC_OscConfig+0x4c4>)
 8001708:	f023 0301 	bic.w	r3, r3, #1
 800170c:	6213      	str	r3, [r2, #32]
 800170e:	4b58      	ldr	r3, [pc, #352]	; (8001870 <HAL_RCC_OscConfig+0x4c4>)
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	4a57      	ldr	r2, [pc, #348]	; (8001870 <HAL_RCC_OscConfig+0x4c4>)
 8001714:	f023 0304 	bic.w	r3, r3, #4
 8001718:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d015      	beq.n	800174e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001722:	f7ff faf1 	bl	8000d08 <HAL_GetTick>
 8001726:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001728:	e00a      	b.n	8001740 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800172a:	f7ff faed 	bl	8000d08 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	f241 3288 	movw	r2, #5000	; 0x1388
 8001738:	4293      	cmp	r3, r2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e0b1      	b.n	80018a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001740:	4b4b      	ldr	r3, [pc, #300]	; (8001870 <HAL_RCC_OscConfig+0x4c4>)
 8001742:	6a1b      	ldr	r3, [r3, #32]
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d0ee      	beq.n	800172a <HAL_RCC_OscConfig+0x37e>
 800174c:	e014      	b.n	8001778 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800174e:	f7ff fadb 	bl	8000d08 <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001754:	e00a      	b.n	800176c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001756:	f7ff fad7 	bl	8000d08 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	f241 3288 	movw	r2, #5000	; 0x1388
 8001764:	4293      	cmp	r3, r2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e09b      	b.n	80018a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800176c:	4b40      	ldr	r3, [pc, #256]	; (8001870 <HAL_RCC_OscConfig+0x4c4>)
 800176e:	6a1b      	ldr	r3, [r3, #32]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1ee      	bne.n	8001756 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001778:	7dfb      	ldrb	r3, [r7, #23]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d105      	bne.n	800178a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800177e:	4b3c      	ldr	r3, [pc, #240]	; (8001870 <HAL_RCC_OscConfig+0x4c4>)
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	4a3b      	ldr	r2, [pc, #236]	; (8001870 <HAL_RCC_OscConfig+0x4c4>)
 8001784:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001788:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	2b00      	cmp	r3, #0
 8001790:	f000 8087 	beq.w	80018a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001794:	4b36      	ldr	r3, [pc, #216]	; (8001870 <HAL_RCC_OscConfig+0x4c4>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 030c 	and.w	r3, r3, #12
 800179c:	2b08      	cmp	r3, #8
 800179e:	d061      	beq.n	8001864 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	69db      	ldr	r3, [r3, #28]
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d146      	bne.n	8001836 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017a8:	4b33      	ldr	r3, [pc, #204]	; (8001878 <HAL_RCC_OscConfig+0x4cc>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ae:	f7ff faab 	bl	8000d08 <HAL_GetTick>
 80017b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017b4:	e008      	b.n	80017c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017b6:	f7ff faa7 	bl	8000d08 <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e06d      	b.n	80018a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017c8:	4b29      	ldr	r3, [pc, #164]	; (8001870 <HAL_RCC_OscConfig+0x4c4>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1f0      	bne.n	80017b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a1b      	ldr	r3, [r3, #32]
 80017d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017dc:	d108      	bne.n	80017f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017de:	4b24      	ldr	r3, [pc, #144]	; (8001870 <HAL_RCC_OscConfig+0x4c4>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	4921      	ldr	r1, [pc, #132]	; (8001870 <HAL_RCC_OscConfig+0x4c4>)
 80017ec:	4313      	orrs	r3, r2
 80017ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017f0:	4b1f      	ldr	r3, [pc, #124]	; (8001870 <HAL_RCC_OscConfig+0x4c4>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a19      	ldr	r1, [r3, #32]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001800:	430b      	orrs	r3, r1
 8001802:	491b      	ldr	r1, [pc, #108]	; (8001870 <HAL_RCC_OscConfig+0x4c4>)
 8001804:	4313      	orrs	r3, r2
 8001806:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001808:	4b1b      	ldr	r3, [pc, #108]	; (8001878 <HAL_RCC_OscConfig+0x4cc>)
 800180a:	2201      	movs	r2, #1
 800180c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180e:	f7ff fa7b 	bl	8000d08 <HAL_GetTick>
 8001812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001814:	e008      	b.n	8001828 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001816:	f7ff fa77 	bl	8000d08 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e03d      	b.n	80018a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001828:	4b11      	ldr	r3, [pc, #68]	; (8001870 <HAL_RCC_OscConfig+0x4c4>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d0f0      	beq.n	8001816 <HAL_RCC_OscConfig+0x46a>
 8001834:	e035      	b.n	80018a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001836:	4b10      	ldr	r3, [pc, #64]	; (8001878 <HAL_RCC_OscConfig+0x4cc>)
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183c:	f7ff fa64 	bl	8000d08 <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001844:	f7ff fa60 	bl	8000d08 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e026      	b.n	80018a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001856:	4b06      	ldr	r3, [pc, #24]	; (8001870 <HAL_RCC_OscConfig+0x4c4>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1f0      	bne.n	8001844 <HAL_RCC_OscConfig+0x498>
 8001862:	e01e      	b.n	80018a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	69db      	ldr	r3, [r3, #28]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d107      	bne.n	800187c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e019      	b.n	80018a4 <HAL_RCC_OscConfig+0x4f8>
 8001870:	40021000 	.word	0x40021000
 8001874:	40007000 	.word	0x40007000
 8001878:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <HAL_RCC_OscConfig+0x500>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a1b      	ldr	r3, [r3, #32]
 800188c:	429a      	cmp	r2, r3
 800188e:	d106      	bne.n	800189e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800189a:	429a      	cmp	r2, r3
 800189c:	d001      	beq.n	80018a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e000      	b.n	80018a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80018a2:	2300      	movs	r3, #0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40021000 	.word	0x40021000

080018b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d101      	bne.n	80018c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e0d0      	b.n	8001a66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018c4:	4b6a      	ldr	r3, [pc, #424]	; (8001a70 <HAL_RCC_ClockConfig+0x1c0>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0307 	and.w	r3, r3, #7
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d910      	bls.n	80018f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d2:	4b67      	ldr	r3, [pc, #412]	; (8001a70 <HAL_RCC_ClockConfig+0x1c0>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f023 0207 	bic.w	r2, r3, #7
 80018da:	4965      	ldr	r1, [pc, #404]	; (8001a70 <HAL_RCC_ClockConfig+0x1c0>)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	4313      	orrs	r3, r2
 80018e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e2:	4b63      	ldr	r3, [pc, #396]	; (8001a70 <HAL_RCC_ClockConfig+0x1c0>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d001      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e0b8      	b.n	8001a66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d020      	beq.n	8001942 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0304 	and.w	r3, r3, #4
 8001908:	2b00      	cmp	r3, #0
 800190a:	d005      	beq.n	8001918 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800190c:	4b59      	ldr	r3, [pc, #356]	; (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	4a58      	ldr	r2, [pc, #352]	; (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 8001912:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001916:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0308 	and.w	r3, r3, #8
 8001920:	2b00      	cmp	r3, #0
 8001922:	d005      	beq.n	8001930 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001924:	4b53      	ldr	r3, [pc, #332]	; (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	4a52      	ldr	r2, [pc, #328]	; (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 800192a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800192e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001930:	4b50      	ldr	r3, [pc, #320]	; (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	494d      	ldr	r1, [pc, #308]	; (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 800193e:	4313      	orrs	r3, r2
 8001940:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	2b00      	cmp	r3, #0
 800194c:	d040      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d107      	bne.n	8001966 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001956:	4b47      	ldr	r3, [pc, #284]	; (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d115      	bne.n	800198e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e07f      	b.n	8001a66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b02      	cmp	r3, #2
 800196c:	d107      	bne.n	800197e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800196e:	4b41      	ldr	r3, [pc, #260]	; (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d109      	bne.n	800198e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e073      	b.n	8001a66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800197e:	4b3d      	ldr	r3, [pc, #244]	; (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e06b      	b.n	8001a66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800198e:	4b39      	ldr	r3, [pc, #228]	; (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f023 0203 	bic.w	r2, r3, #3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	4936      	ldr	r1, [pc, #216]	; (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 800199c:	4313      	orrs	r3, r2
 800199e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019a0:	f7ff f9b2 	bl	8000d08 <HAL_GetTick>
 80019a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019a6:	e00a      	b.n	80019be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019a8:	f7ff f9ae 	bl	8000d08 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e053      	b.n	8001a66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019be:	4b2d      	ldr	r3, [pc, #180]	; (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f003 020c 	and.w	r2, r3, #12
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d1eb      	bne.n	80019a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019d0:	4b27      	ldr	r3, [pc, #156]	; (8001a70 <HAL_RCC_ClockConfig+0x1c0>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0307 	and.w	r3, r3, #7
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d210      	bcs.n	8001a00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019de:	4b24      	ldr	r3, [pc, #144]	; (8001a70 <HAL_RCC_ClockConfig+0x1c0>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f023 0207 	bic.w	r2, r3, #7
 80019e6:	4922      	ldr	r1, [pc, #136]	; (8001a70 <HAL_RCC_ClockConfig+0x1c0>)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ee:	4b20      	ldr	r3, [pc, #128]	; (8001a70 <HAL_RCC_ClockConfig+0x1c0>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0307 	and.w	r3, r3, #7
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d001      	beq.n	8001a00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e032      	b.n	8001a66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d008      	beq.n	8001a1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a0c:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	4916      	ldr	r1, [pc, #88]	; (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0308 	and.w	r3, r3, #8
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d009      	beq.n	8001a3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a2a:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	490e      	ldr	r1, [pc, #56]	; (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a3e:	f000 f821 	bl	8001a84 <HAL_RCC_GetSysClockFreq>
 8001a42:	4602      	mov	r2, r0
 8001a44:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	091b      	lsrs	r3, r3, #4
 8001a4a:	f003 030f 	and.w	r3, r3, #15
 8001a4e:	490a      	ldr	r1, [pc, #40]	; (8001a78 <HAL_RCC_ClockConfig+0x1c8>)
 8001a50:	5ccb      	ldrb	r3, [r1, r3]
 8001a52:	fa22 f303 	lsr.w	r3, r2, r3
 8001a56:	4a09      	ldr	r2, [pc, #36]	; (8001a7c <HAL_RCC_ClockConfig+0x1cc>)
 8001a58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a5a:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <HAL_RCC_ClockConfig+0x1d0>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff f910 	bl	8000c84 <HAL_InitTick>

  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40022000 	.word	0x40022000
 8001a74:	40021000 	.word	0x40021000
 8001a78:	08002c4c 	.word	0x08002c4c
 8001a7c:	2000000c 	.word	0x2000000c
 8001a80:	20000010 	.word	0x20000010

08001a84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b087      	sub	sp, #28
 8001a88:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60bb      	str	r3, [r7, #8]
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	2300      	movs	r3, #0
 8001a98:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a9e:	4b1e      	ldr	r3, [pc, #120]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x94>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
 8001aaa:	2b04      	cmp	r3, #4
 8001aac:	d002      	beq.n	8001ab4 <HAL_RCC_GetSysClockFreq+0x30>
 8001aae:	2b08      	cmp	r3, #8
 8001ab0:	d003      	beq.n	8001aba <HAL_RCC_GetSysClockFreq+0x36>
 8001ab2:	e027      	b.n	8001b04 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ab4:	4b19      	ldr	r3, [pc, #100]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x98>)
 8001ab6:	613b      	str	r3, [r7, #16]
      break;
 8001ab8:	e027      	b.n	8001b0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	0c9b      	lsrs	r3, r3, #18
 8001abe:	f003 030f 	and.w	r3, r3, #15
 8001ac2:	4a17      	ldr	r2, [pc, #92]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ac4:	5cd3      	ldrb	r3, [r2, r3]
 8001ac6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d010      	beq.n	8001af4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ad2:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	0c5b      	lsrs	r3, r3, #17
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	4a11      	ldr	r2, [pc, #68]	; (8001b24 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ade:	5cd3      	ldrb	r3, [r2, r3]
 8001ae0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a0d      	ldr	r2, [pc, #52]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x98>)
 8001ae6:	fb03 f202 	mul.w	r2, r3, r2
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af0:	617b      	str	r3, [r7, #20]
 8001af2:	e004      	b.n	8001afe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4a0c      	ldr	r2, [pc, #48]	; (8001b28 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001af8:	fb02 f303 	mul.w	r3, r2, r3
 8001afc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	613b      	str	r3, [r7, #16]
      break;
 8001b02:	e002      	b.n	8001b0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b04:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x98>)
 8001b06:	613b      	str	r3, [r7, #16]
      break;
 8001b08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b0a:	693b      	ldr	r3, [r7, #16]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	371c      	adds	r7, #28
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	007a1200 	.word	0x007a1200
 8001b20:	08002c64 	.word	0x08002c64
 8001b24:	08002c74 	.word	0x08002c74
 8001b28:	003d0900 	.word	0x003d0900

08001b2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b30:	4b02      	ldr	r3, [pc, #8]	; (8001b3c <HAL_RCC_GetHCLKFreq+0x10>)
 8001b32:	681b      	ldr	r3, [r3, #0]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr
 8001b3c:	2000000c 	.word	0x2000000c

08001b40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b44:	f7ff fff2 	bl	8001b2c <HAL_RCC_GetHCLKFreq>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	0a1b      	lsrs	r3, r3, #8
 8001b50:	f003 0307 	and.w	r3, r3, #7
 8001b54:	4903      	ldr	r1, [pc, #12]	; (8001b64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b56:	5ccb      	ldrb	r3, [r1, r3]
 8001b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40021000 	.word	0x40021000
 8001b64:	08002c5c 	.word	0x08002c5c

08001b68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b6c:	f7ff ffde 	bl	8001b2c <HAL_RCC_GetHCLKFreq>
 8001b70:	4602      	mov	r2, r0
 8001b72:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	0adb      	lsrs	r3, r3, #11
 8001b78:	f003 0307 	and.w	r3, r3, #7
 8001b7c:	4903      	ldr	r1, [pc, #12]	; (8001b8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b7e:	5ccb      	ldrb	r3, [r1, r3]
 8001b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	08002c5c 	.word	0x08002c5c

08001b90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b98:	4b0a      	ldr	r3, [pc, #40]	; (8001bc4 <RCC_Delay+0x34>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a0a      	ldr	r2, [pc, #40]	; (8001bc8 <RCC_Delay+0x38>)
 8001b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba2:	0a5b      	lsrs	r3, r3, #9
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	fb02 f303 	mul.w	r3, r2, r3
 8001baa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001bac:	bf00      	nop
  }
  while (Delay --);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	1e5a      	subs	r2, r3, #1
 8001bb2:	60fa      	str	r2, [r7, #12]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1f9      	bne.n	8001bac <RCC_Delay+0x1c>
}
 8001bb8:	bf00      	nop
 8001bba:	bf00      	nop
 8001bbc:	3714      	adds	r7, #20
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr
 8001bc4:	2000000c 	.word	0x2000000c
 8001bc8:	10624dd3 	.word	0x10624dd3

08001bcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e042      	b.n	8001c64 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d106      	bne.n	8001bf8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7fe ff84 	bl	8000b00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2224      	movs	r2, #36	; 0x24
 8001bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68da      	ldr	r2, [r3, #12]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 f9af 	bl	8001f74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	691a      	ldr	r2, [r3, #16]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	695a      	ldr	r2, [r3, #20]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	68da      	ldr	r2, [r3, #12]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2220      	movs	r2, #32
 8001c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2220      	movs	r2, #32
 8001c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08a      	sub	sp, #40	; 0x28
 8001c70:	af02      	add	r7, sp, #8
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	603b      	str	r3, [r7, #0]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b20      	cmp	r3, #32
 8001c8a:	d16d      	bne.n	8001d68 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d002      	beq.n	8001c98 <HAL_UART_Transmit+0x2c>
 8001c92:	88fb      	ldrh	r3, [r7, #6]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d101      	bne.n	8001c9c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e066      	b.n	8001d6a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2221      	movs	r2, #33	; 0x21
 8001ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001caa:	f7ff f82d 	bl	8000d08 <HAL_GetTick>
 8001cae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	88fa      	ldrh	r2, [r7, #6]
 8001cb4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	88fa      	ldrh	r2, [r7, #6]
 8001cba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cc4:	d108      	bne.n	8001cd8 <HAL_UART_Transmit+0x6c>
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d104      	bne.n	8001cd8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	61bb      	str	r3, [r7, #24]
 8001cd6:	e003      	b.n	8001ce0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001ce0:	e02a      	b.n	8001d38 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	9300      	str	r3, [sp, #0]
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	2180      	movs	r1, #128	; 0x80
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f000 f8d2 	bl	8001e96 <UART_WaitOnFlagUntilTimeout>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e036      	b.n	8001d6a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10b      	bne.n	8001d1a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	881b      	ldrh	r3, [r3, #0]
 8001d06:	461a      	mov	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	3302      	adds	r3, #2
 8001d16:	61bb      	str	r3, [r7, #24]
 8001d18:	e007      	b.n	8001d2a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	781a      	ldrb	r2, [r3, #0]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	3301      	adds	r3, #1
 8001d28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	3b01      	subs	r3, #1
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1cf      	bne.n	8001ce2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	2140      	movs	r1, #64	; 0x40
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	f000 f8a2 	bl	8001e96 <UART_WaitOnFlagUntilTimeout>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e006      	b.n	8001d6a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2220      	movs	r2, #32
 8001d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001d64:	2300      	movs	r3, #0
 8001d66:	e000      	b.n	8001d6a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001d68:	2302      	movs	r3, #2
  }
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3720      	adds	r7, #32
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b08a      	sub	sp, #40	; 0x28
 8001d76:	af02      	add	r7, sp, #8
 8001d78:	60f8      	str	r0, [r7, #12]
 8001d7a:	60b9      	str	r1, [r7, #8]
 8001d7c:	603b      	str	r3, [r7, #0]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d82:	2300      	movs	r3, #0
 8001d84:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b20      	cmp	r3, #32
 8001d90:	d17c      	bne.n	8001e8c <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d002      	beq.n	8001d9e <HAL_UART_Receive+0x2c>
 8001d98:	88fb      	ldrh	r3, [r7, #6]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e075      	b.n	8001e8e <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2222      	movs	r2, #34	; 0x22
 8001dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2200      	movs	r2, #0
 8001db4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001db6:	f7fe ffa7 	bl	8000d08 <HAL_GetTick>
 8001dba:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	88fa      	ldrh	r2, [r7, #6]
 8001dc0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	88fa      	ldrh	r2, [r7, #6]
 8001dc6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dd0:	d108      	bne.n	8001de4 <HAL_UART_Receive+0x72>
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d104      	bne.n	8001de4 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	61bb      	str	r3, [r7, #24]
 8001de2:	e003      	b.n	8001dec <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001dec:	e043      	b.n	8001e76 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	9300      	str	r3, [sp, #0]
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	2200      	movs	r2, #0
 8001df6:	2120      	movs	r1, #32
 8001df8:	68f8      	ldr	r0, [r7, #12]
 8001dfa:	f000 f84c 	bl	8001e96 <UART_WaitOnFlagUntilTimeout>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e042      	b.n	8001e8e <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d10c      	bne.n	8001e28 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	3302      	adds	r3, #2
 8001e24:	61bb      	str	r3, [r7, #24]
 8001e26:	e01f      	b.n	8001e68 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e30:	d007      	beq.n	8001e42 <HAL_UART_Receive+0xd0>
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10a      	bne.n	8001e50 <HAL_UART_Receive+0xde>
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d106      	bne.n	8001e50 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	701a      	strb	r2, [r3, #0]
 8001e4e:	e008      	b.n	8001e62 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	3301      	adds	r3, #1
 8001e66:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1b6      	bne.n	8001dee <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2220      	movs	r2, #32
 8001e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	e000      	b.n	8001e8e <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001e8c:	2302      	movs	r3, #2
  }
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3720      	adds	r7, #32
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b090      	sub	sp, #64	; 0x40
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	60f8      	str	r0, [r7, #12]
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	603b      	str	r3, [r7, #0]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ea6:	e050      	b.n	8001f4a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ea8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eae:	d04c      	beq.n	8001f4a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001eb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d007      	beq.n	8001ec6 <UART_WaitOnFlagUntilTimeout+0x30>
 8001eb6:	f7fe ff27 	bl	8000d08 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d241      	bcs.n	8001f4a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	330c      	adds	r3, #12
 8001ecc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed0:	e853 3f00 	ldrex	r3, [r3]
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001edc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	330c      	adds	r3, #12
 8001ee4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ee6:	637a      	str	r2, [r7, #52]	; 0x34
 8001ee8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001eea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001eec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001eee:	e841 2300 	strex	r3, r2, [r1]
 8001ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1e5      	bne.n	8001ec6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	3314      	adds	r3, #20
 8001f00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	e853 3f00 	ldrex	r3, [r3]
 8001f08:	613b      	str	r3, [r7, #16]
   return(result);
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	f023 0301 	bic.w	r3, r3, #1
 8001f10:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	3314      	adds	r3, #20
 8001f18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f1a:	623a      	str	r2, [r7, #32]
 8001f1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f1e:	69f9      	ldr	r1, [r7, #28]
 8001f20:	6a3a      	ldr	r2, [r7, #32]
 8001f22:	e841 2300 	strex	r3, r2, [r1]
 8001f26:	61bb      	str	r3, [r7, #24]
   return(result);
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1e5      	bne.n	8001efa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2220      	movs	r2, #32
 8001f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2220      	movs	r2, #32
 8001f3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e00f      	b.n	8001f6a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	4013      	ands	r3, r2
 8001f54:	68ba      	ldr	r2, [r7, #8]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	bf0c      	ite	eq
 8001f5a:	2301      	moveq	r3, #1
 8001f5c:	2300      	movne	r3, #0
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	461a      	mov	r2, r3
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d09f      	beq.n	8001ea8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3740      	adds	r7, #64	; 0x40
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
	...

08001f74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	689a      	ldr	r2, [r3, #8]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	695b      	ldr	r3, [r3, #20]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001fae:	f023 030c 	bic.w	r3, r3, #12
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6812      	ldr	r2, [r2, #0]
 8001fb6:	68b9      	ldr	r1, [r7, #8]
 8001fb8:	430b      	orrs	r3, r1
 8001fba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	699a      	ldr	r2, [r3, #24]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a2c      	ldr	r2, [pc, #176]	; (8002088 <UART_SetConfig+0x114>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d103      	bne.n	8001fe4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001fdc:	f7ff fdc4 	bl	8001b68 <HAL_RCC_GetPCLK2Freq>
 8001fe0:	60f8      	str	r0, [r7, #12]
 8001fe2:	e002      	b.n	8001fea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001fe4:	f7ff fdac 	bl	8001b40 <HAL_RCC_GetPCLK1Freq>
 8001fe8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	4613      	mov	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	009a      	lsls	r2, r3, #2
 8001ff4:	441a      	add	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002000:	4a22      	ldr	r2, [pc, #136]	; (800208c <UART_SetConfig+0x118>)
 8002002:	fba2 2303 	umull	r2, r3, r2, r3
 8002006:	095b      	lsrs	r3, r3, #5
 8002008:	0119      	lsls	r1, r3, #4
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	4613      	mov	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4413      	add	r3, r2
 8002012:	009a      	lsls	r2, r3, #2
 8002014:	441a      	add	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002020:	4b1a      	ldr	r3, [pc, #104]	; (800208c <UART_SetConfig+0x118>)
 8002022:	fba3 0302 	umull	r0, r3, r3, r2
 8002026:	095b      	lsrs	r3, r3, #5
 8002028:	2064      	movs	r0, #100	; 0x64
 800202a:	fb00 f303 	mul.w	r3, r0, r3
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	011b      	lsls	r3, r3, #4
 8002032:	3332      	adds	r3, #50	; 0x32
 8002034:	4a15      	ldr	r2, [pc, #84]	; (800208c <UART_SetConfig+0x118>)
 8002036:	fba2 2303 	umull	r2, r3, r2, r3
 800203a:	095b      	lsrs	r3, r3, #5
 800203c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002040:	4419      	add	r1, r3
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	4613      	mov	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4413      	add	r3, r2
 800204a:	009a      	lsls	r2, r3, #2
 800204c:	441a      	add	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	fbb2 f2f3 	udiv	r2, r2, r3
 8002058:	4b0c      	ldr	r3, [pc, #48]	; (800208c <UART_SetConfig+0x118>)
 800205a:	fba3 0302 	umull	r0, r3, r3, r2
 800205e:	095b      	lsrs	r3, r3, #5
 8002060:	2064      	movs	r0, #100	; 0x64
 8002062:	fb00 f303 	mul.w	r3, r0, r3
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	011b      	lsls	r3, r3, #4
 800206a:	3332      	adds	r3, #50	; 0x32
 800206c:	4a07      	ldr	r2, [pc, #28]	; (800208c <UART_SetConfig+0x118>)
 800206e:	fba2 2303 	umull	r2, r3, r2, r3
 8002072:	095b      	lsrs	r3, r3, #5
 8002074:	f003 020f 	and.w	r2, r3, #15
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	440a      	add	r2, r1
 800207e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002080:	bf00      	nop
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40013800 	.word	0x40013800
 800208c:	51eb851f 	.word	0x51eb851f

08002090 <_vsiprintf_r>:
 8002090:	b500      	push	{lr}
 8002092:	b09b      	sub	sp, #108	; 0x6c
 8002094:	9100      	str	r1, [sp, #0]
 8002096:	9104      	str	r1, [sp, #16]
 8002098:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800209c:	9105      	str	r1, [sp, #20]
 800209e:	9102      	str	r1, [sp, #8]
 80020a0:	4905      	ldr	r1, [pc, #20]	; (80020b8 <_vsiprintf_r+0x28>)
 80020a2:	9103      	str	r1, [sp, #12]
 80020a4:	4669      	mov	r1, sp
 80020a6:	f000 f995 	bl	80023d4 <_svfiprintf_r>
 80020aa:	2200      	movs	r2, #0
 80020ac:	9b00      	ldr	r3, [sp, #0]
 80020ae:	701a      	strb	r2, [r3, #0]
 80020b0:	b01b      	add	sp, #108	; 0x6c
 80020b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80020b6:	bf00      	nop
 80020b8:	ffff0208 	.word	0xffff0208

080020bc <vsiprintf>:
 80020bc:	4613      	mov	r3, r2
 80020be:	460a      	mov	r2, r1
 80020c0:	4601      	mov	r1, r0
 80020c2:	4802      	ldr	r0, [pc, #8]	; (80020cc <vsiprintf+0x10>)
 80020c4:	6800      	ldr	r0, [r0, #0]
 80020c6:	f7ff bfe3 	b.w	8002090 <_vsiprintf_r>
 80020ca:	bf00      	nop
 80020cc:	20000064 	.word	0x20000064

080020d0 <memset>:
 80020d0:	4603      	mov	r3, r0
 80020d2:	4402      	add	r2, r0
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d100      	bne.n	80020da <memset+0xa>
 80020d8:	4770      	bx	lr
 80020da:	f803 1b01 	strb.w	r1, [r3], #1
 80020de:	e7f9      	b.n	80020d4 <memset+0x4>

080020e0 <__errno>:
 80020e0:	4b01      	ldr	r3, [pc, #4]	; (80020e8 <__errno+0x8>)
 80020e2:	6818      	ldr	r0, [r3, #0]
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	20000064 	.word	0x20000064

080020ec <__libc_init_array>:
 80020ec:	b570      	push	{r4, r5, r6, lr}
 80020ee:	2600      	movs	r6, #0
 80020f0:	4d0c      	ldr	r5, [pc, #48]	; (8002124 <__libc_init_array+0x38>)
 80020f2:	4c0d      	ldr	r4, [pc, #52]	; (8002128 <__libc_init_array+0x3c>)
 80020f4:	1b64      	subs	r4, r4, r5
 80020f6:	10a4      	asrs	r4, r4, #2
 80020f8:	42a6      	cmp	r6, r4
 80020fa:	d109      	bne.n	8002110 <__libc_init_array+0x24>
 80020fc:	f000 fc7a 	bl	80029f4 <_init>
 8002100:	2600      	movs	r6, #0
 8002102:	4d0a      	ldr	r5, [pc, #40]	; (800212c <__libc_init_array+0x40>)
 8002104:	4c0a      	ldr	r4, [pc, #40]	; (8002130 <__libc_init_array+0x44>)
 8002106:	1b64      	subs	r4, r4, r5
 8002108:	10a4      	asrs	r4, r4, #2
 800210a:	42a6      	cmp	r6, r4
 800210c:	d105      	bne.n	800211a <__libc_init_array+0x2e>
 800210e:	bd70      	pop	{r4, r5, r6, pc}
 8002110:	f855 3b04 	ldr.w	r3, [r5], #4
 8002114:	4798      	blx	r3
 8002116:	3601      	adds	r6, #1
 8002118:	e7ee      	b.n	80020f8 <__libc_init_array+0xc>
 800211a:	f855 3b04 	ldr.w	r3, [r5], #4
 800211e:	4798      	blx	r3
 8002120:	3601      	adds	r6, #1
 8002122:	e7f2      	b.n	800210a <__libc_init_array+0x1e>
 8002124:	08002cac 	.word	0x08002cac
 8002128:	08002cac 	.word	0x08002cac
 800212c:	08002cac 	.word	0x08002cac
 8002130:	08002cb0 	.word	0x08002cb0

08002134 <__retarget_lock_acquire_recursive>:
 8002134:	4770      	bx	lr

08002136 <__retarget_lock_release_recursive>:
 8002136:	4770      	bx	lr

08002138 <_free_r>:
 8002138:	b538      	push	{r3, r4, r5, lr}
 800213a:	4605      	mov	r5, r0
 800213c:	2900      	cmp	r1, #0
 800213e:	d040      	beq.n	80021c2 <_free_r+0x8a>
 8002140:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002144:	1f0c      	subs	r4, r1, #4
 8002146:	2b00      	cmp	r3, #0
 8002148:	bfb8      	it	lt
 800214a:	18e4      	addlt	r4, r4, r3
 800214c:	f000 f8dc 	bl	8002308 <__malloc_lock>
 8002150:	4a1c      	ldr	r2, [pc, #112]	; (80021c4 <_free_r+0x8c>)
 8002152:	6813      	ldr	r3, [r2, #0]
 8002154:	b933      	cbnz	r3, 8002164 <_free_r+0x2c>
 8002156:	6063      	str	r3, [r4, #4]
 8002158:	6014      	str	r4, [r2, #0]
 800215a:	4628      	mov	r0, r5
 800215c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002160:	f000 b8d8 	b.w	8002314 <__malloc_unlock>
 8002164:	42a3      	cmp	r3, r4
 8002166:	d908      	bls.n	800217a <_free_r+0x42>
 8002168:	6820      	ldr	r0, [r4, #0]
 800216a:	1821      	adds	r1, r4, r0
 800216c:	428b      	cmp	r3, r1
 800216e:	bf01      	itttt	eq
 8002170:	6819      	ldreq	r1, [r3, #0]
 8002172:	685b      	ldreq	r3, [r3, #4]
 8002174:	1809      	addeq	r1, r1, r0
 8002176:	6021      	streq	r1, [r4, #0]
 8002178:	e7ed      	b.n	8002156 <_free_r+0x1e>
 800217a:	461a      	mov	r2, r3
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	b10b      	cbz	r3, 8002184 <_free_r+0x4c>
 8002180:	42a3      	cmp	r3, r4
 8002182:	d9fa      	bls.n	800217a <_free_r+0x42>
 8002184:	6811      	ldr	r1, [r2, #0]
 8002186:	1850      	adds	r0, r2, r1
 8002188:	42a0      	cmp	r0, r4
 800218a:	d10b      	bne.n	80021a4 <_free_r+0x6c>
 800218c:	6820      	ldr	r0, [r4, #0]
 800218e:	4401      	add	r1, r0
 8002190:	1850      	adds	r0, r2, r1
 8002192:	4283      	cmp	r3, r0
 8002194:	6011      	str	r1, [r2, #0]
 8002196:	d1e0      	bne.n	800215a <_free_r+0x22>
 8002198:	6818      	ldr	r0, [r3, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	4408      	add	r0, r1
 800219e:	6010      	str	r0, [r2, #0]
 80021a0:	6053      	str	r3, [r2, #4]
 80021a2:	e7da      	b.n	800215a <_free_r+0x22>
 80021a4:	d902      	bls.n	80021ac <_free_r+0x74>
 80021a6:	230c      	movs	r3, #12
 80021a8:	602b      	str	r3, [r5, #0]
 80021aa:	e7d6      	b.n	800215a <_free_r+0x22>
 80021ac:	6820      	ldr	r0, [r4, #0]
 80021ae:	1821      	adds	r1, r4, r0
 80021b0:	428b      	cmp	r3, r1
 80021b2:	bf01      	itttt	eq
 80021b4:	6819      	ldreq	r1, [r3, #0]
 80021b6:	685b      	ldreq	r3, [r3, #4]
 80021b8:	1809      	addeq	r1, r1, r0
 80021ba:	6021      	streq	r1, [r4, #0]
 80021bc:	6063      	str	r3, [r4, #4]
 80021be:	6054      	str	r4, [r2, #4]
 80021c0:	e7cb      	b.n	800215a <_free_r+0x22>
 80021c2:	bd38      	pop	{r3, r4, r5, pc}
 80021c4:	2000032c 	.word	0x2000032c

080021c8 <sbrk_aligned>:
 80021c8:	b570      	push	{r4, r5, r6, lr}
 80021ca:	4e0e      	ldr	r6, [pc, #56]	; (8002204 <sbrk_aligned+0x3c>)
 80021cc:	460c      	mov	r4, r1
 80021ce:	6831      	ldr	r1, [r6, #0]
 80021d0:	4605      	mov	r5, r0
 80021d2:	b911      	cbnz	r1, 80021da <sbrk_aligned+0x12>
 80021d4:	f000 fbaa 	bl	800292c <_sbrk_r>
 80021d8:	6030      	str	r0, [r6, #0]
 80021da:	4621      	mov	r1, r4
 80021dc:	4628      	mov	r0, r5
 80021de:	f000 fba5 	bl	800292c <_sbrk_r>
 80021e2:	1c43      	adds	r3, r0, #1
 80021e4:	d00a      	beq.n	80021fc <sbrk_aligned+0x34>
 80021e6:	1cc4      	adds	r4, r0, #3
 80021e8:	f024 0403 	bic.w	r4, r4, #3
 80021ec:	42a0      	cmp	r0, r4
 80021ee:	d007      	beq.n	8002200 <sbrk_aligned+0x38>
 80021f0:	1a21      	subs	r1, r4, r0
 80021f2:	4628      	mov	r0, r5
 80021f4:	f000 fb9a 	bl	800292c <_sbrk_r>
 80021f8:	3001      	adds	r0, #1
 80021fa:	d101      	bne.n	8002200 <sbrk_aligned+0x38>
 80021fc:	f04f 34ff 	mov.w	r4, #4294967295
 8002200:	4620      	mov	r0, r4
 8002202:	bd70      	pop	{r4, r5, r6, pc}
 8002204:	20000330 	.word	0x20000330

08002208 <_malloc_r>:
 8002208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800220c:	1ccd      	adds	r5, r1, #3
 800220e:	f025 0503 	bic.w	r5, r5, #3
 8002212:	3508      	adds	r5, #8
 8002214:	2d0c      	cmp	r5, #12
 8002216:	bf38      	it	cc
 8002218:	250c      	movcc	r5, #12
 800221a:	2d00      	cmp	r5, #0
 800221c:	4607      	mov	r7, r0
 800221e:	db01      	blt.n	8002224 <_malloc_r+0x1c>
 8002220:	42a9      	cmp	r1, r5
 8002222:	d905      	bls.n	8002230 <_malloc_r+0x28>
 8002224:	230c      	movs	r3, #12
 8002226:	2600      	movs	r6, #0
 8002228:	603b      	str	r3, [r7, #0]
 800222a:	4630      	mov	r0, r6
 800222c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002230:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002304 <_malloc_r+0xfc>
 8002234:	f000 f868 	bl	8002308 <__malloc_lock>
 8002238:	f8d8 3000 	ldr.w	r3, [r8]
 800223c:	461c      	mov	r4, r3
 800223e:	bb5c      	cbnz	r4, 8002298 <_malloc_r+0x90>
 8002240:	4629      	mov	r1, r5
 8002242:	4638      	mov	r0, r7
 8002244:	f7ff ffc0 	bl	80021c8 <sbrk_aligned>
 8002248:	1c43      	adds	r3, r0, #1
 800224a:	4604      	mov	r4, r0
 800224c:	d155      	bne.n	80022fa <_malloc_r+0xf2>
 800224e:	f8d8 4000 	ldr.w	r4, [r8]
 8002252:	4626      	mov	r6, r4
 8002254:	2e00      	cmp	r6, #0
 8002256:	d145      	bne.n	80022e4 <_malloc_r+0xdc>
 8002258:	2c00      	cmp	r4, #0
 800225a:	d048      	beq.n	80022ee <_malloc_r+0xe6>
 800225c:	6823      	ldr	r3, [r4, #0]
 800225e:	4631      	mov	r1, r6
 8002260:	4638      	mov	r0, r7
 8002262:	eb04 0903 	add.w	r9, r4, r3
 8002266:	f000 fb61 	bl	800292c <_sbrk_r>
 800226a:	4581      	cmp	r9, r0
 800226c:	d13f      	bne.n	80022ee <_malloc_r+0xe6>
 800226e:	6821      	ldr	r1, [r4, #0]
 8002270:	4638      	mov	r0, r7
 8002272:	1a6d      	subs	r5, r5, r1
 8002274:	4629      	mov	r1, r5
 8002276:	f7ff ffa7 	bl	80021c8 <sbrk_aligned>
 800227a:	3001      	adds	r0, #1
 800227c:	d037      	beq.n	80022ee <_malloc_r+0xe6>
 800227e:	6823      	ldr	r3, [r4, #0]
 8002280:	442b      	add	r3, r5
 8002282:	6023      	str	r3, [r4, #0]
 8002284:	f8d8 3000 	ldr.w	r3, [r8]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d038      	beq.n	80022fe <_malloc_r+0xf6>
 800228c:	685a      	ldr	r2, [r3, #4]
 800228e:	42a2      	cmp	r2, r4
 8002290:	d12b      	bne.n	80022ea <_malloc_r+0xe2>
 8002292:	2200      	movs	r2, #0
 8002294:	605a      	str	r2, [r3, #4]
 8002296:	e00f      	b.n	80022b8 <_malloc_r+0xb0>
 8002298:	6822      	ldr	r2, [r4, #0]
 800229a:	1b52      	subs	r2, r2, r5
 800229c:	d41f      	bmi.n	80022de <_malloc_r+0xd6>
 800229e:	2a0b      	cmp	r2, #11
 80022a0:	d917      	bls.n	80022d2 <_malloc_r+0xca>
 80022a2:	1961      	adds	r1, r4, r5
 80022a4:	42a3      	cmp	r3, r4
 80022a6:	6025      	str	r5, [r4, #0]
 80022a8:	bf18      	it	ne
 80022aa:	6059      	strne	r1, [r3, #4]
 80022ac:	6863      	ldr	r3, [r4, #4]
 80022ae:	bf08      	it	eq
 80022b0:	f8c8 1000 	streq.w	r1, [r8]
 80022b4:	5162      	str	r2, [r4, r5]
 80022b6:	604b      	str	r3, [r1, #4]
 80022b8:	4638      	mov	r0, r7
 80022ba:	f104 060b 	add.w	r6, r4, #11
 80022be:	f000 f829 	bl	8002314 <__malloc_unlock>
 80022c2:	f026 0607 	bic.w	r6, r6, #7
 80022c6:	1d23      	adds	r3, r4, #4
 80022c8:	1af2      	subs	r2, r6, r3
 80022ca:	d0ae      	beq.n	800222a <_malloc_r+0x22>
 80022cc:	1b9b      	subs	r3, r3, r6
 80022ce:	50a3      	str	r3, [r4, r2]
 80022d0:	e7ab      	b.n	800222a <_malloc_r+0x22>
 80022d2:	42a3      	cmp	r3, r4
 80022d4:	6862      	ldr	r2, [r4, #4]
 80022d6:	d1dd      	bne.n	8002294 <_malloc_r+0x8c>
 80022d8:	f8c8 2000 	str.w	r2, [r8]
 80022dc:	e7ec      	b.n	80022b8 <_malloc_r+0xb0>
 80022de:	4623      	mov	r3, r4
 80022e0:	6864      	ldr	r4, [r4, #4]
 80022e2:	e7ac      	b.n	800223e <_malloc_r+0x36>
 80022e4:	4634      	mov	r4, r6
 80022e6:	6876      	ldr	r6, [r6, #4]
 80022e8:	e7b4      	b.n	8002254 <_malloc_r+0x4c>
 80022ea:	4613      	mov	r3, r2
 80022ec:	e7cc      	b.n	8002288 <_malloc_r+0x80>
 80022ee:	230c      	movs	r3, #12
 80022f0:	4638      	mov	r0, r7
 80022f2:	603b      	str	r3, [r7, #0]
 80022f4:	f000 f80e 	bl	8002314 <__malloc_unlock>
 80022f8:	e797      	b.n	800222a <_malloc_r+0x22>
 80022fa:	6025      	str	r5, [r4, #0]
 80022fc:	e7dc      	b.n	80022b8 <_malloc_r+0xb0>
 80022fe:	605b      	str	r3, [r3, #4]
 8002300:	deff      	udf	#255	; 0xff
 8002302:	bf00      	nop
 8002304:	2000032c 	.word	0x2000032c

08002308 <__malloc_lock>:
 8002308:	4801      	ldr	r0, [pc, #4]	; (8002310 <__malloc_lock+0x8>)
 800230a:	f7ff bf13 	b.w	8002134 <__retarget_lock_acquire_recursive>
 800230e:	bf00      	nop
 8002310:	20000328 	.word	0x20000328

08002314 <__malloc_unlock>:
 8002314:	4801      	ldr	r0, [pc, #4]	; (800231c <__malloc_unlock+0x8>)
 8002316:	f7ff bf0e 	b.w	8002136 <__retarget_lock_release_recursive>
 800231a:	bf00      	nop
 800231c:	20000328 	.word	0x20000328

08002320 <__ssputs_r>:
 8002320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002324:	461f      	mov	r7, r3
 8002326:	688e      	ldr	r6, [r1, #8]
 8002328:	4682      	mov	sl, r0
 800232a:	42be      	cmp	r6, r7
 800232c:	460c      	mov	r4, r1
 800232e:	4690      	mov	r8, r2
 8002330:	680b      	ldr	r3, [r1, #0]
 8002332:	d82c      	bhi.n	800238e <__ssputs_r+0x6e>
 8002334:	898a      	ldrh	r2, [r1, #12]
 8002336:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800233a:	d026      	beq.n	800238a <__ssputs_r+0x6a>
 800233c:	6965      	ldr	r5, [r4, #20]
 800233e:	6909      	ldr	r1, [r1, #16]
 8002340:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002344:	eba3 0901 	sub.w	r9, r3, r1
 8002348:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800234c:	1c7b      	adds	r3, r7, #1
 800234e:	444b      	add	r3, r9
 8002350:	106d      	asrs	r5, r5, #1
 8002352:	429d      	cmp	r5, r3
 8002354:	bf38      	it	cc
 8002356:	461d      	movcc	r5, r3
 8002358:	0553      	lsls	r3, r2, #21
 800235a:	d527      	bpl.n	80023ac <__ssputs_r+0x8c>
 800235c:	4629      	mov	r1, r5
 800235e:	f7ff ff53 	bl	8002208 <_malloc_r>
 8002362:	4606      	mov	r6, r0
 8002364:	b360      	cbz	r0, 80023c0 <__ssputs_r+0xa0>
 8002366:	464a      	mov	r2, r9
 8002368:	6921      	ldr	r1, [r4, #16]
 800236a:	f000 fafd 	bl	8002968 <memcpy>
 800236e:	89a3      	ldrh	r3, [r4, #12]
 8002370:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002378:	81a3      	strh	r3, [r4, #12]
 800237a:	6126      	str	r6, [r4, #16]
 800237c:	444e      	add	r6, r9
 800237e:	6026      	str	r6, [r4, #0]
 8002380:	463e      	mov	r6, r7
 8002382:	6165      	str	r5, [r4, #20]
 8002384:	eba5 0509 	sub.w	r5, r5, r9
 8002388:	60a5      	str	r5, [r4, #8]
 800238a:	42be      	cmp	r6, r7
 800238c:	d900      	bls.n	8002390 <__ssputs_r+0x70>
 800238e:	463e      	mov	r6, r7
 8002390:	4632      	mov	r2, r6
 8002392:	4641      	mov	r1, r8
 8002394:	6820      	ldr	r0, [r4, #0]
 8002396:	f000 faaf 	bl	80028f8 <memmove>
 800239a:	2000      	movs	r0, #0
 800239c:	68a3      	ldr	r3, [r4, #8]
 800239e:	1b9b      	subs	r3, r3, r6
 80023a0:	60a3      	str	r3, [r4, #8]
 80023a2:	6823      	ldr	r3, [r4, #0]
 80023a4:	4433      	add	r3, r6
 80023a6:	6023      	str	r3, [r4, #0]
 80023a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023ac:	462a      	mov	r2, r5
 80023ae:	f000 fae9 	bl	8002984 <_realloc_r>
 80023b2:	4606      	mov	r6, r0
 80023b4:	2800      	cmp	r0, #0
 80023b6:	d1e0      	bne.n	800237a <__ssputs_r+0x5a>
 80023b8:	4650      	mov	r0, sl
 80023ba:	6921      	ldr	r1, [r4, #16]
 80023bc:	f7ff febc 	bl	8002138 <_free_r>
 80023c0:	230c      	movs	r3, #12
 80023c2:	f8ca 3000 	str.w	r3, [sl]
 80023c6:	89a3      	ldrh	r3, [r4, #12]
 80023c8:	f04f 30ff 	mov.w	r0, #4294967295
 80023cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023d0:	81a3      	strh	r3, [r4, #12]
 80023d2:	e7e9      	b.n	80023a8 <__ssputs_r+0x88>

080023d4 <_svfiprintf_r>:
 80023d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023d8:	4698      	mov	r8, r3
 80023da:	898b      	ldrh	r3, [r1, #12]
 80023dc:	4607      	mov	r7, r0
 80023de:	061b      	lsls	r3, r3, #24
 80023e0:	460d      	mov	r5, r1
 80023e2:	4614      	mov	r4, r2
 80023e4:	b09d      	sub	sp, #116	; 0x74
 80023e6:	d50e      	bpl.n	8002406 <_svfiprintf_r+0x32>
 80023e8:	690b      	ldr	r3, [r1, #16]
 80023ea:	b963      	cbnz	r3, 8002406 <_svfiprintf_r+0x32>
 80023ec:	2140      	movs	r1, #64	; 0x40
 80023ee:	f7ff ff0b 	bl	8002208 <_malloc_r>
 80023f2:	6028      	str	r0, [r5, #0]
 80023f4:	6128      	str	r0, [r5, #16]
 80023f6:	b920      	cbnz	r0, 8002402 <_svfiprintf_r+0x2e>
 80023f8:	230c      	movs	r3, #12
 80023fa:	603b      	str	r3, [r7, #0]
 80023fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002400:	e0d0      	b.n	80025a4 <_svfiprintf_r+0x1d0>
 8002402:	2340      	movs	r3, #64	; 0x40
 8002404:	616b      	str	r3, [r5, #20]
 8002406:	2300      	movs	r3, #0
 8002408:	9309      	str	r3, [sp, #36]	; 0x24
 800240a:	2320      	movs	r3, #32
 800240c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002410:	2330      	movs	r3, #48	; 0x30
 8002412:	f04f 0901 	mov.w	r9, #1
 8002416:	f8cd 800c 	str.w	r8, [sp, #12]
 800241a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80025bc <_svfiprintf_r+0x1e8>
 800241e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002422:	4623      	mov	r3, r4
 8002424:	469a      	mov	sl, r3
 8002426:	f813 2b01 	ldrb.w	r2, [r3], #1
 800242a:	b10a      	cbz	r2, 8002430 <_svfiprintf_r+0x5c>
 800242c:	2a25      	cmp	r2, #37	; 0x25
 800242e:	d1f9      	bne.n	8002424 <_svfiprintf_r+0x50>
 8002430:	ebba 0b04 	subs.w	fp, sl, r4
 8002434:	d00b      	beq.n	800244e <_svfiprintf_r+0x7a>
 8002436:	465b      	mov	r3, fp
 8002438:	4622      	mov	r2, r4
 800243a:	4629      	mov	r1, r5
 800243c:	4638      	mov	r0, r7
 800243e:	f7ff ff6f 	bl	8002320 <__ssputs_r>
 8002442:	3001      	adds	r0, #1
 8002444:	f000 80a9 	beq.w	800259a <_svfiprintf_r+0x1c6>
 8002448:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800244a:	445a      	add	r2, fp
 800244c:	9209      	str	r2, [sp, #36]	; 0x24
 800244e:	f89a 3000 	ldrb.w	r3, [sl]
 8002452:	2b00      	cmp	r3, #0
 8002454:	f000 80a1 	beq.w	800259a <_svfiprintf_r+0x1c6>
 8002458:	2300      	movs	r3, #0
 800245a:	f04f 32ff 	mov.w	r2, #4294967295
 800245e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002462:	f10a 0a01 	add.w	sl, sl, #1
 8002466:	9304      	str	r3, [sp, #16]
 8002468:	9307      	str	r3, [sp, #28]
 800246a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800246e:	931a      	str	r3, [sp, #104]	; 0x68
 8002470:	4654      	mov	r4, sl
 8002472:	2205      	movs	r2, #5
 8002474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002478:	4850      	ldr	r0, [pc, #320]	; (80025bc <_svfiprintf_r+0x1e8>)
 800247a:	f000 fa67 	bl	800294c <memchr>
 800247e:	9a04      	ldr	r2, [sp, #16]
 8002480:	b9d8      	cbnz	r0, 80024ba <_svfiprintf_r+0xe6>
 8002482:	06d0      	lsls	r0, r2, #27
 8002484:	bf44      	itt	mi
 8002486:	2320      	movmi	r3, #32
 8002488:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800248c:	0711      	lsls	r1, r2, #28
 800248e:	bf44      	itt	mi
 8002490:	232b      	movmi	r3, #43	; 0x2b
 8002492:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002496:	f89a 3000 	ldrb.w	r3, [sl]
 800249a:	2b2a      	cmp	r3, #42	; 0x2a
 800249c:	d015      	beq.n	80024ca <_svfiprintf_r+0xf6>
 800249e:	4654      	mov	r4, sl
 80024a0:	2000      	movs	r0, #0
 80024a2:	f04f 0c0a 	mov.w	ip, #10
 80024a6:	9a07      	ldr	r2, [sp, #28]
 80024a8:	4621      	mov	r1, r4
 80024aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80024ae:	3b30      	subs	r3, #48	; 0x30
 80024b0:	2b09      	cmp	r3, #9
 80024b2:	d94d      	bls.n	8002550 <_svfiprintf_r+0x17c>
 80024b4:	b1b0      	cbz	r0, 80024e4 <_svfiprintf_r+0x110>
 80024b6:	9207      	str	r2, [sp, #28]
 80024b8:	e014      	b.n	80024e4 <_svfiprintf_r+0x110>
 80024ba:	eba0 0308 	sub.w	r3, r0, r8
 80024be:	fa09 f303 	lsl.w	r3, r9, r3
 80024c2:	4313      	orrs	r3, r2
 80024c4:	46a2      	mov	sl, r4
 80024c6:	9304      	str	r3, [sp, #16]
 80024c8:	e7d2      	b.n	8002470 <_svfiprintf_r+0x9c>
 80024ca:	9b03      	ldr	r3, [sp, #12]
 80024cc:	1d19      	adds	r1, r3, #4
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	9103      	str	r1, [sp, #12]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	bfbb      	ittet	lt
 80024d6:	425b      	neglt	r3, r3
 80024d8:	f042 0202 	orrlt.w	r2, r2, #2
 80024dc:	9307      	strge	r3, [sp, #28]
 80024de:	9307      	strlt	r3, [sp, #28]
 80024e0:	bfb8      	it	lt
 80024e2:	9204      	strlt	r2, [sp, #16]
 80024e4:	7823      	ldrb	r3, [r4, #0]
 80024e6:	2b2e      	cmp	r3, #46	; 0x2e
 80024e8:	d10c      	bne.n	8002504 <_svfiprintf_r+0x130>
 80024ea:	7863      	ldrb	r3, [r4, #1]
 80024ec:	2b2a      	cmp	r3, #42	; 0x2a
 80024ee:	d134      	bne.n	800255a <_svfiprintf_r+0x186>
 80024f0:	9b03      	ldr	r3, [sp, #12]
 80024f2:	3402      	adds	r4, #2
 80024f4:	1d1a      	adds	r2, r3, #4
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	9203      	str	r2, [sp, #12]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	bfb8      	it	lt
 80024fe:	f04f 33ff 	movlt.w	r3, #4294967295
 8002502:	9305      	str	r3, [sp, #20]
 8002504:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80025c0 <_svfiprintf_r+0x1ec>
 8002508:	2203      	movs	r2, #3
 800250a:	4650      	mov	r0, sl
 800250c:	7821      	ldrb	r1, [r4, #0]
 800250e:	f000 fa1d 	bl	800294c <memchr>
 8002512:	b138      	cbz	r0, 8002524 <_svfiprintf_r+0x150>
 8002514:	2240      	movs	r2, #64	; 0x40
 8002516:	9b04      	ldr	r3, [sp, #16]
 8002518:	eba0 000a 	sub.w	r0, r0, sl
 800251c:	4082      	lsls	r2, r0
 800251e:	4313      	orrs	r3, r2
 8002520:	3401      	adds	r4, #1
 8002522:	9304      	str	r3, [sp, #16]
 8002524:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002528:	2206      	movs	r2, #6
 800252a:	4826      	ldr	r0, [pc, #152]	; (80025c4 <_svfiprintf_r+0x1f0>)
 800252c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002530:	f000 fa0c 	bl	800294c <memchr>
 8002534:	2800      	cmp	r0, #0
 8002536:	d038      	beq.n	80025aa <_svfiprintf_r+0x1d6>
 8002538:	4b23      	ldr	r3, [pc, #140]	; (80025c8 <_svfiprintf_r+0x1f4>)
 800253a:	bb1b      	cbnz	r3, 8002584 <_svfiprintf_r+0x1b0>
 800253c:	9b03      	ldr	r3, [sp, #12]
 800253e:	3307      	adds	r3, #7
 8002540:	f023 0307 	bic.w	r3, r3, #7
 8002544:	3308      	adds	r3, #8
 8002546:	9303      	str	r3, [sp, #12]
 8002548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800254a:	4433      	add	r3, r6
 800254c:	9309      	str	r3, [sp, #36]	; 0x24
 800254e:	e768      	b.n	8002422 <_svfiprintf_r+0x4e>
 8002550:	460c      	mov	r4, r1
 8002552:	2001      	movs	r0, #1
 8002554:	fb0c 3202 	mla	r2, ip, r2, r3
 8002558:	e7a6      	b.n	80024a8 <_svfiprintf_r+0xd4>
 800255a:	2300      	movs	r3, #0
 800255c:	f04f 0c0a 	mov.w	ip, #10
 8002560:	4619      	mov	r1, r3
 8002562:	3401      	adds	r4, #1
 8002564:	9305      	str	r3, [sp, #20]
 8002566:	4620      	mov	r0, r4
 8002568:	f810 2b01 	ldrb.w	r2, [r0], #1
 800256c:	3a30      	subs	r2, #48	; 0x30
 800256e:	2a09      	cmp	r2, #9
 8002570:	d903      	bls.n	800257a <_svfiprintf_r+0x1a6>
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0c6      	beq.n	8002504 <_svfiprintf_r+0x130>
 8002576:	9105      	str	r1, [sp, #20]
 8002578:	e7c4      	b.n	8002504 <_svfiprintf_r+0x130>
 800257a:	4604      	mov	r4, r0
 800257c:	2301      	movs	r3, #1
 800257e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002582:	e7f0      	b.n	8002566 <_svfiprintf_r+0x192>
 8002584:	ab03      	add	r3, sp, #12
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	462a      	mov	r2, r5
 800258a:	4638      	mov	r0, r7
 800258c:	4b0f      	ldr	r3, [pc, #60]	; (80025cc <_svfiprintf_r+0x1f8>)
 800258e:	a904      	add	r1, sp, #16
 8002590:	f3af 8000 	nop.w
 8002594:	1c42      	adds	r2, r0, #1
 8002596:	4606      	mov	r6, r0
 8002598:	d1d6      	bne.n	8002548 <_svfiprintf_r+0x174>
 800259a:	89ab      	ldrh	r3, [r5, #12]
 800259c:	065b      	lsls	r3, r3, #25
 800259e:	f53f af2d 	bmi.w	80023fc <_svfiprintf_r+0x28>
 80025a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80025a4:	b01d      	add	sp, #116	; 0x74
 80025a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025aa:	ab03      	add	r3, sp, #12
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	462a      	mov	r2, r5
 80025b0:	4638      	mov	r0, r7
 80025b2:	4b06      	ldr	r3, [pc, #24]	; (80025cc <_svfiprintf_r+0x1f8>)
 80025b4:	a904      	add	r1, sp, #16
 80025b6:	f000 f87d 	bl	80026b4 <_printf_i>
 80025ba:	e7eb      	b.n	8002594 <_svfiprintf_r+0x1c0>
 80025bc:	08002c76 	.word	0x08002c76
 80025c0:	08002c7c 	.word	0x08002c7c
 80025c4:	08002c80 	.word	0x08002c80
 80025c8:	00000000 	.word	0x00000000
 80025cc:	08002321 	.word	0x08002321

080025d0 <_printf_common>:
 80025d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025d4:	4616      	mov	r6, r2
 80025d6:	4699      	mov	r9, r3
 80025d8:	688a      	ldr	r2, [r1, #8]
 80025da:	690b      	ldr	r3, [r1, #16]
 80025dc:	4607      	mov	r7, r0
 80025de:	4293      	cmp	r3, r2
 80025e0:	bfb8      	it	lt
 80025e2:	4613      	movlt	r3, r2
 80025e4:	6033      	str	r3, [r6, #0]
 80025e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80025ea:	460c      	mov	r4, r1
 80025ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80025f0:	b10a      	cbz	r2, 80025f6 <_printf_common+0x26>
 80025f2:	3301      	adds	r3, #1
 80025f4:	6033      	str	r3, [r6, #0]
 80025f6:	6823      	ldr	r3, [r4, #0]
 80025f8:	0699      	lsls	r1, r3, #26
 80025fa:	bf42      	ittt	mi
 80025fc:	6833      	ldrmi	r3, [r6, #0]
 80025fe:	3302      	addmi	r3, #2
 8002600:	6033      	strmi	r3, [r6, #0]
 8002602:	6825      	ldr	r5, [r4, #0]
 8002604:	f015 0506 	ands.w	r5, r5, #6
 8002608:	d106      	bne.n	8002618 <_printf_common+0x48>
 800260a:	f104 0a19 	add.w	sl, r4, #25
 800260e:	68e3      	ldr	r3, [r4, #12]
 8002610:	6832      	ldr	r2, [r6, #0]
 8002612:	1a9b      	subs	r3, r3, r2
 8002614:	42ab      	cmp	r3, r5
 8002616:	dc2b      	bgt.n	8002670 <_printf_common+0xa0>
 8002618:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800261c:	1e13      	subs	r3, r2, #0
 800261e:	6822      	ldr	r2, [r4, #0]
 8002620:	bf18      	it	ne
 8002622:	2301      	movne	r3, #1
 8002624:	0692      	lsls	r2, r2, #26
 8002626:	d430      	bmi.n	800268a <_printf_common+0xba>
 8002628:	4649      	mov	r1, r9
 800262a:	4638      	mov	r0, r7
 800262c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002630:	47c0      	blx	r8
 8002632:	3001      	adds	r0, #1
 8002634:	d023      	beq.n	800267e <_printf_common+0xae>
 8002636:	6823      	ldr	r3, [r4, #0]
 8002638:	6922      	ldr	r2, [r4, #16]
 800263a:	f003 0306 	and.w	r3, r3, #6
 800263e:	2b04      	cmp	r3, #4
 8002640:	bf14      	ite	ne
 8002642:	2500      	movne	r5, #0
 8002644:	6833      	ldreq	r3, [r6, #0]
 8002646:	f04f 0600 	mov.w	r6, #0
 800264a:	bf08      	it	eq
 800264c:	68e5      	ldreq	r5, [r4, #12]
 800264e:	f104 041a 	add.w	r4, r4, #26
 8002652:	bf08      	it	eq
 8002654:	1aed      	subeq	r5, r5, r3
 8002656:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800265a:	bf08      	it	eq
 800265c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002660:	4293      	cmp	r3, r2
 8002662:	bfc4      	itt	gt
 8002664:	1a9b      	subgt	r3, r3, r2
 8002666:	18ed      	addgt	r5, r5, r3
 8002668:	42b5      	cmp	r5, r6
 800266a:	d11a      	bne.n	80026a2 <_printf_common+0xd2>
 800266c:	2000      	movs	r0, #0
 800266e:	e008      	b.n	8002682 <_printf_common+0xb2>
 8002670:	2301      	movs	r3, #1
 8002672:	4652      	mov	r2, sl
 8002674:	4649      	mov	r1, r9
 8002676:	4638      	mov	r0, r7
 8002678:	47c0      	blx	r8
 800267a:	3001      	adds	r0, #1
 800267c:	d103      	bne.n	8002686 <_printf_common+0xb6>
 800267e:	f04f 30ff 	mov.w	r0, #4294967295
 8002682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002686:	3501      	adds	r5, #1
 8002688:	e7c1      	b.n	800260e <_printf_common+0x3e>
 800268a:	2030      	movs	r0, #48	; 0x30
 800268c:	18e1      	adds	r1, r4, r3
 800268e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002692:	1c5a      	adds	r2, r3, #1
 8002694:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002698:	4422      	add	r2, r4
 800269a:	3302      	adds	r3, #2
 800269c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80026a0:	e7c2      	b.n	8002628 <_printf_common+0x58>
 80026a2:	2301      	movs	r3, #1
 80026a4:	4622      	mov	r2, r4
 80026a6:	4649      	mov	r1, r9
 80026a8:	4638      	mov	r0, r7
 80026aa:	47c0      	blx	r8
 80026ac:	3001      	adds	r0, #1
 80026ae:	d0e6      	beq.n	800267e <_printf_common+0xae>
 80026b0:	3601      	adds	r6, #1
 80026b2:	e7d9      	b.n	8002668 <_printf_common+0x98>

080026b4 <_printf_i>:
 80026b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80026b8:	7e0f      	ldrb	r7, [r1, #24]
 80026ba:	4691      	mov	r9, r2
 80026bc:	2f78      	cmp	r7, #120	; 0x78
 80026be:	4680      	mov	r8, r0
 80026c0:	460c      	mov	r4, r1
 80026c2:	469a      	mov	sl, r3
 80026c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80026c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80026ca:	d807      	bhi.n	80026dc <_printf_i+0x28>
 80026cc:	2f62      	cmp	r7, #98	; 0x62
 80026ce:	d80a      	bhi.n	80026e6 <_printf_i+0x32>
 80026d0:	2f00      	cmp	r7, #0
 80026d2:	f000 80d5 	beq.w	8002880 <_printf_i+0x1cc>
 80026d6:	2f58      	cmp	r7, #88	; 0x58
 80026d8:	f000 80c1 	beq.w	800285e <_printf_i+0x1aa>
 80026dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80026e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80026e4:	e03a      	b.n	800275c <_printf_i+0xa8>
 80026e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80026ea:	2b15      	cmp	r3, #21
 80026ec:	d8f6      	bhi.n	80026dc <_printf_i+0x28>
 80026ee:	a101      	add	r1, pc, #4	; (adr r1, 80026f4 <_printf_i+0x40>)
 80026f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80026f4:	0800274d 	.word	0x0800274d
 80026f8:	08002761 	.word	0x08002761
 80026fc:	080026dd 	.word	0x080026dd
 8002700:	080026dd 	.word	0x080026dd
 8002704:	080026dd 	.word	0x080026dd
 8002708:	080026dd 	.word	0x080026dd
 800270c:	08002761 	.word	0x08002761
 8002710:	080026dd 	.word	0x080026dd
 8002714:	080026dd 	.word	0x080026dd
 8002718:	080026dd 	.word	0x080026dd
 800271c:	080026dd 	.word	0x080026dd
 8002720:	08002867 	.word	0x08002867
 8002724:	0800278d 	.word	0x0800278d
 8002728:	08002821 	.word	0x08002821
 800272c:	080026dd 	.word	0x080026dd
 8002730:	080026dd 	.word	0x080026dd
 8002734:	08002889 	.word	0x08002889
 8002738:	080026dd 	.word	0x080026dd
 800273c:	0800278d 	.word	0x0800278d
 8002740:	080026dd 	.word	0x080026dd
 8002744:	080026dd 	.word	0x080026dd
 8002748:	08002829 	.word	0x08002829
 800274c:	682b      	ldr	r3, [r5, #0]
 800274e:	1d1a      	adds	r2, r3, #4
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	602a      	str	r2, [r5, #0]
 8002754:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002758:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800275c:	2301      	movs	r3, #1
 800275e:	e0a0      	b.n	80028a2 <_printf_i+0x1ee>
 8002760:	6820      	ldr	r0, [r4, #0]
 8002762:	682b      	ldr	r3, [r5, #0]
 8002764:	0607      	lsls	r7, r0, #24
 8002766:	f103 0104 	add.w	r1, r3, #4
 800276a:	6029      	str	r1, [r5, #0]
 800276c:	d501      	bpl.n	8002772 <_printf_i+0xbe>
 800276e:	681e      	ldr	r6, [r3, #0]
 8002770:	e003      	b.n	800277a <_printf_i+0xc6>
 8002772:	0646      	lsls	r6, r0, #25
 8002774:	d5fb      	bpl.n	800276e <_printf_i+0xba>
 8002776:	f9b3 6000 	ldrsh.w	r6, [r3]
 800277a:	2e00      	cmp	r6, #0
 800277c:	da03      	bge.n	8002786 <_printf_i+0xd2>
 800277e:	232d      	movs	r3, #45	; 0x2d
 8002780:	4276      	negs	r6, r6
 8002782:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002786:	230a      	movs	r3, #10
 8002788:	4859      	ldr	r0, [pc, #356]	; (80028f0 <_printf_i+0x23c>)
 800278a:	e012      	b.n	80027b2 <_printf_i+0xfe>
 800278c:	682b      	ldr	r3, [r5, #0]
 800278e:	6820      	ldr	r0, [r4, #0]
 8002790:	1d19      	adds	r1, r3, #4
 8002792:	6029      	str	r1, [r5, #0]
 8002794:	0605      	lsls	r5, r0, #24
 8002796:	d501      	bpl.n	800279c <_printf_i+0xe8>
 8002798:	681e      	ldr	r6, [r3, #0]
 800279a:	e002      	b.n	80027a2 <_printf_i+0xee>
 800279c:	0641      	lsls	r1, r0, #25
 800279e:	d5fb      	bpl.n	8002798 <_printf_i+0xe4>
 80027a0:	881e      	ldrh	r6, [r3, #0]
 80027a2:	2f6f      	cmp	r7, #111	; 0x6f
 80027a4:	bf0c      	ite	eq
 80027a6:	2308      	moveq	r3, #8
 80027a8:	230a      	movne	r3, #10
 80027aa:	4851      	ldr	r0, [pc, #324]	; (80028f0 <_printf_i+0x23c>)
 80027ac:	2100      	movs	r1, #0
 80027ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80027b2:	6865      	ldr	r5, [r4, #4]
 80027b4:	2d00      	cmp	r5, #0
 80027b6:	bfa8      	it	ge
 80027b8:	6821      	ldrge	r1, [r4, #0]
 80027ba:	60a5      	str	r5, [r4, #8]
 80027bc:	bfa4      	itt	ge
 80027be:	f021 0104 	bicge.w	r1, r1, #4
 80027c2:	6021      	strge	r1, [r4, #0]
 80027c4:	b90e      	cbnz	r6, 80027ca <_printf_i+0x116>
 80027c6:	2d00      	cmp	r5, #0
 80027c8:	d04b      	beq.n	8002862 <_printf_i+0x1ae>
 80027ca:	4615      	mov	r5, r2
 80027cc:	fbb6 f1f3 	udiv	r1, r6, r3
 80027d0:	fb03 6711 	mls	r7, r3, r1, r6
 80027d4:	5dc7      	ldrb	r7, [r0, r7]
 80027d6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80027da:	4637      	mov	r7, r6
 80027dc:	42bb      	cmp	r3, r7
 80027de:	460e      	mov	r6, r1
 80027e0:	d9f4      	bls.n	80027cc <_printf_i+0x118>
 80027e2:	2b08      	cmp	r3, #8
 80027e4:	d10b      	bne.n	80027fe <_printf_i+0x14a>
 80027e6:	6823      	ldr	r3, [r4, #0]
 80027e8:	07de      	lsls	r6, r3, #31
 80027ea:	d508      	bpl.n	80027fe <_printf_i+0x14a>
 80027ec:	6923      	ldr	r3, [r4, #16]
 80027ee:	6861      	ldr	r1, [r4, #4]
 80027f0:	4299      	cmp	r1, r3
 80027f2:	bfde      	ittt	le
 80027f4:	2330      	movle	r3, #48	; 0x30
 80027f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80027fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80027fe:	1b52      	subs	r2, r2, r5
 8002800:	6122      	str	r2, [r4, #16]
 8002802:	464b      	mov	r3, r9
 8002804:	4621      	mov	r1, r4
 8002806:	4640      	mov	r0, r8
 8002808:	f8cd a000 	str.w	sl, [sp]
 800280c:	aa03      	add	r2, sp, #12
 800280e:	f7ff fedf 	bl	80025d0 <_printf_common>
 8002812:	3001      	adds	r0, #1
 8002814:	d14a      	bne.n	80028ac <_printf_i+0x1f8>
 8002816:	f04f 30ff 	mov.w	r0, #4294967295
 800281a:	b004      	add	sp, #16
 800281c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002820:	6823      	ldr	r3, [r4, #0]
 8002822:	f043 0320 	orr.w	r3, r3, #32
 8002826:	6023      	str	r3, [r4, #0]
 8002828:	2778      	movs	r7, #120	; 0x78
 800282a:	4832      	ldr	r0, [pc, #200]	; (80028f4 <_printf_i+0x240>)
 800282c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002830:	6823      	ldr	r3, [r4, #0]
 8002832:	6829      	ldr	r1, [r5, #0]
 8002834:	061f      	lsls	r7, r3, #24
 8002836:	f851 6b04 	ldr.w	r6, [r1], #4
 800283a:	d402      	bmi.n	8002842 <_printf_i+0x18e>
 800283c:	065f      	lsls	r7, r3, #25
 800283e:	bf48      	it	mi
 8002840:	b2b6      	uxthmi	r6, r6
 8002842:	07df      	lsls	r7, r3, #31
 8002844:	bf48      	it	mi
 8002846:	f043 0320 	orrmi.w	r3, r3, #32
 800284a:	6029      	str	r1, [r5, #0]
 800284c:	bf48      	it	mi
 800284e:	6023      	strmi	r3, [r4, #0]
 8002850:	b91e      	cbnz	r6, 800285a <_printf_i+0x1a6>
 8002852:	6823      	ldr	r3, [r4, #0]
 8002854:	f023 0320 	bic.w	r3, r3, #32
 8002858:	6023      	str	r3, [r4, #0]
 800285a:	2310      	movs	r3, #16
 800285c:	e7a6      	b.n	80027ac <_printf_i+0xf8>
 800285e:	4824      	ldr	r0, [pc, #144]	; (80028f0 <_printf_i+0x23c>)
 8002860:	e7e4      	b.n	800282c <_printf_i+0x178>
 8002862:	4615      	mov	r5, r2
 8002864:	e7bd      	b.n	80027e2 <_printf_i+0x12e>
 8002866:	682b      	ldr	r3, [r5, #0]
 8002868:	6826      	ldr	r6, [r4, #0]
 800286a:	1d18      	adds	r0, r3, #4
 800286c:	6961      	ldr	r1, [r4, #20]
 800286e:	6028      	str	r0, [r5, #0]
 8002870:	0635      	lsls	r5, r6, #24
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	d501      	bpl.n	800287a <_printf_i+0x1c6>
 8002876:	6019      	str	r1, [r3, #0]
 8002878:	e002      	b.n	8002880 <_printf_i+0x1cc>
 800287a:	0670      	lsls	r0, r6, #25
 800287c:	d5fb      	bpl.n	8002876 <_printf_i+0x1c2>
 800287e:	8019      	strh	r1, [r3, #0]
 8002880:	2300      	movs	r3, #0
 8002882:	4615      	mov	r5, r2
 8002884:	6123      	str	r3, [r4, #16]
 8002886:	e7bc      	b.n	8002802 <_printf_i+0x14e>
 8002888:	682b      	ldr	r3, [r5, #0]
 800288a:	2100      	movs	r1, #0
 800288c:	1d1a      	adds	r2, r3, #4
 800288e:	602a      	str	r2, [r5, #0]
 8002890:	681d      	ldr	r5, [r3, #0]
 8002892:	6862      	ldr	r2, [r4, #4]
 8002894:	4628      	mov	r0, r5
 8002896:	f000 f859 	bl	800294c <memchr>
 800289a:	b108      	cbz	r0, 80028a0 <_printf_i+0x1ec>
 800289c:	1b40      	subs	r0, r0, r5
 800289e:	6060      	str	r0, [r4, #4]
 80028a0:	6863      	ldr	r3, [r4, #4]
 80028a2:	6123      	str	r3, [r4, #16]
 80028a4:	2300      	movs	r3, #0
 80028a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80028aa:	e7aa      	b.n	8002802 <_printf_i+0x14e>
 80028ac:	462a      	mov	r2, r5
 80028ae:	4649      	mov	r1, r9
 80028b0:	4640      	mov	r0, r8
 80028b2:	6923      	ldr	r3, [r4, #16]
 80028b4:	47d0      	blx	sl
 80028b6:	3001      	adds	r0, #1
 80028b8:	d0ad      	beq.n	8002816 <_printf_i+0x162>
 80028ba:	6823      	ldr	r3, [r4, #0]
 80028bc:	079b      	lsls	r3, r3, #30
 80028be:	d413      	bmi.n	80028e8 <_printf_i+0x234>
 80028c0:	68e0      	ldr	r0, [r4, #12]
 80028c2:	9b03      	ldr	r3, [sp, #12]
 80028c4:	4298      	cmp	r0, r3
 80028c6:	bfb8      	it	lt
 80028c8:	4618      	movlt	r0, r3
 80028ca:	e7a6      	b.n	800281a <_printf_i+0x166>
 80028cc:	2301      	movs	r3, #1
 80028ce:	4632      	mov	r2, r6
 80028d0:	4649      	mov	r1, r9
 80028d2:	4640      	mov	r0, r8
 80028d4:	47d0      	blx	sl
 80028d6:	3001      	adds	r0, #1
 80028d8:	d09d      	beq.n	8002816 <_printf_i+0x162>
 80028da:	3501      	adds	r5, #1
 80028dc:	68e3      	ldr	r3, [r4, #12]
 80028de:	9903      	ldr	r1, [sp, #12]
 80028e0:	1a5b      	subs	r3, r3, r1
 80028e2:	42ab      	cmp	r3, r5
 80028e4:	dcf2      	bgt.n	80028cc <_printf_i+0x218>
 80028e6:	e7eb      	b.n	80028c0 <_printf_i+0x20c>
 80028e8:	2500      	movs	r5, #0
 80028ea:	f104 0619 	add.w	r6, r4, #25
 80028ee:	e7f5      	b.n	80028dc <_printf_i+0x228>
 80028f0:	08002c87 	.word	0x08002c87
 80028f4:	08002c98 	.word	0x08002c98

080028f8 <memmove>:
 80028f8:	4288      	cmp	r0, r1
 80028fa:	b510      	push	{r4, lr}
 80028fc:	eb01 0402 	add.w	r4, r1, r2
 8002900:	d902      	bls.n	8002908 <memmove+0x10>
 8002902:	4284      	cmp	r4, r0
 8002904:	4623      	mov	r3, r4
 8002906:	d807      	bhi.n	8002918 <memmove+0x20>
 8002908:	1e43      	subs	r3, r0, #1
 800290a:	42a1      	cmp	r1, r4
 800290c:	d008      	beq.n	8002920 <memmove+0x28>
 800290e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002912:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002916:	e7f8      	b.n	800290a <memmove+0x12>
 8002918:	4601      	mov	r1, r0
 800291a:	4402      	add	r2, r0
 800291c:	428a      	cmp	r2, r1
 800291e:	d100      	bne.n	8002922 <memmove+0x2a>
 8002920:	bd10      	pop	{r4, pc}
 8002922:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002926:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800292a:	e7f7      	b.n	800291c <memmove+0x24>

0800292c <_sbrk_r>:
 800292c:	b538      	push	{r3, r4, r5, lr}
 800292e:	2300      	movs	r3, #0
 8002930:	4d05      	ldr	r5, [pc, #20]	; (8002948 <_sbrk_r+0x1c>)
 8002932:	4604      	mov	r4, r0
 8002934:	4608      	mov	r0, r1
 8002936:	602b      	str	r3, [r5, #0]
 8002938:	f7fe f852 	bl	80009e0 <_sbrk>
 800293c:	1c43      	adds	r3, r0, #1
 800293e:	d102      	bne.n	8002946 <_sbrk_r+0x1a>
 8002940:	682b      	ldr	r3, [r5, #0]
 8002942:	b103      	cbz	r3, 8002946 <_sbrk_r+0x1a>
 8002944:	6023      	str	r3, [r4, #0]
 8002946:	bd38      	pop	{r3, r4, r5, pc}
 8002948:	20000324 	.word	0x20000324

0800294c <memchr>:
 800294c:	4603      	mov	r3, r0
 800294e:	b510      	push	{r4, lr}
 8002950:	b2c9      	uxtb	r1, r1
 8002952:	4402      	add	r2, r0
 8002954:	4293      	cmp	r3, r2
 8002956:	4618      	mov	r0, r3
 8002958:	d101      	bne.n	800295e <memchr+0x12>
 800295a:	2000      	movs	r0, #0
 800295c:	e003      	b.n	8002966 <memchr+0x1a>
 800295e:	7804      	ldrb	r4, [r0, #0]
 8002960:	3301      	adds	r3, #1
 8002962:	428c      	cmp	r4, r1
 8002964:	d1f6      	bne.n	8002954 <memchr+0x8>
 8002966:	bd10      	pop	{r4, pc}

08002968 <memcpy>:
 8002968:	440a      	add	r2, r1
 800296a:	4291      	cmp	r1, r2
 800296c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002970:	d100      	bne.n	8002974 <memcpy+0xc>
 8002972:	4770      	bx	lr
 8002974:	b510      	push	{r4, lr}
 8002976:	f811 4b01 	ldrb.w	r4, [r1], #1
 800297a:	4291      	cmp	r1, r2
 800297c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002980:	d1f9      	bne.n	8002976 <memcpy+0xe>
 8002982:	bd10      	pop	{r4, pc}

08002984 <_realloc_r>:
 8002984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002988:	4680      	mov	r8, r0
 800298a:	4614      	mov	r4, r2
 800298c:	460e      	mov	r6, r1
 800298e:	b921      	cbnz	r1, 800299a <_realloc_r+0x16>
 8002990:	4611      	mov	r1, r2
 8002992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002996:	f7ff bc37 	b.w	8002208 <_malloc_r>
 800299a:	b92a      	cbnz	r2, 80029a8 <_realloc_r+0x24>
 800299c:	f7ff fbcc 	bl	8002138 <_free_r>
 80029a0:	4625      	mov	r5, r4
 80029a2:	4628      	mov	r0, r5
 80029a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029a8:	f000 f81b 	bl	80029e2 <_malloc_usable_size_r>
 80029ac:	4284      	cmp	r4, r0
 80029ae:	4607      	mov	r7, r0
 80029b0:	d802      	bhi.n	80029b8 <_realloc_r+0x34>
 80029b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80029b6:	d812      	bhi.n	80029de <_realloc_r+0x5a>
 80029b8:	4621      	mov	r1, r4
 80029ba:	4640      	mov	r0, r8
 80029bc:	f7ff fc24 	bl	8002208 <_malloc_r>
 80029c0:	4605      	mov	r5, r0
 80029c2:	2800      	cmp	r0, #0
 80029c4:	d0ed      	beq.n	80029a2 <_realloc_r+0x1e>
 80029c6:	42bc      	cmp	r4, r7
 80029c8:	4622      	mov	r2, r4
 80029ca:	4631      	mov	r1, r6
 80029cc:	bf28      	it	cs
 80029ce:	463a      	movcs	r2, r7
 80029d0:	f7ff ffca 	bl	8002968 <memcpy>
 80029d4:	4631      	mov	r1, r6
 80029d6:	4640      	mov	r0, r8
 80029d8:	f7ff fbae 	bl	8002138 <_free_r>
 80029dc:	e7e1      	b.n	80029a2 <_realloc_r+0x1e>
 80029de:	4635      	mov	r5, r6
 80029e0:	e7df      	b.n	80029a2 <_realloc_r+0x1e>

080029e2 <_malloc_usable_size_r>:
 80029e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80029e6:	1f18      	subs	r0, r3, #4
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	bfbc      	itt	lt
 80029ec:	580b      	ldrlt	r3, [r1, r0]
 80029ee:	18c0      	addlt	r0, r0, r3
 80029f0:	4770      	bx	lr
	...

080029f4 <_init>:
 80029f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029f6:	bf00      	nop
 80029f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029fa:	bc08      	pop	{r3}
 80029fc:	469e      	mov	lr, r3
 80029fe:	4770      	bx	lr

08002a00 <_fini>:
 8002a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a02:	bf00      	nop
 8002a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a06:	bc08      	pop	{r3}
 8002a08:	469e      	mov	lr, r3
 8002a0a:	4770      	bx	lr
