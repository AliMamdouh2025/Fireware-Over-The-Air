
ToggleLED_3000ms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08005000  08005000  00005000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001cfc  0800510c  0800510c  0000510c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08006e08  08006e08  00006e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e34  08006e34  00010014  2**0
                  CONTENTS
  4 .ARM          00000000  08006e34  08006e34  00010014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006e34  08006e34  00010014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e34  08006e34  00006e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e38  08006e38  00006e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006e3c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000018  08006e50  00010018  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  08006e50  000100a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0001003d  2**0
                  CONTENTS, READONLY
 13 .debug_info   000077c7  00000000  00000000  00010080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001987  00000000  00000000  00017847  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000760  00000000  00000000  000191d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000595  00000000  00000000  00019930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016ed6  00000000  00000000  00019ec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000098c7  00000000  00000000  00030d9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000823cf  00000000  00000000  0003a662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001bdc  00000000  00000000  000bca34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000be610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800510c <__do_global_dtors_aux>:
 800510c:	b510      	push	{r4, lr}
 800510e:	4c05      	ldr	r4, [pc, #20]	; (8005124 <__do_global_dtors_aux+0x18>)
 8005110:	7823      	ldrb	r3, [r4, #0]
 8005112:	b933      	cbnz	r3, 8005122 <__do_global_dtors_aux+0x16>
 8005114:	4b04      	ldr	r3, [pc, #16]	; (8005128 <__do_global_dtors_aux+0x1c>)
 8005116:	b113      	cbz	r3, 800511e <__do_global_dtors_aux+0x12>
 8005118:	4804      	ldr	r0, [pc, #16]	; (800512c <__do_global_dtors_aux+0x20>)
 800511a:	f3af 8000 	nop.w
 800511e:	2301      	movs	r3, #1
 8005120:	7023      	strb	r3, [r4, #0]
 8005122:	bd10      	pop	{r4, pc}
 8005124:	20000018 	.word	0x20000018
 8005128:	00000000 	.word	0x00000000
 800512c:	08006df0 	.word	0x08006df0

08005130 <frame_dummy>:
 8005130:	b508      	push	{r3, lr}
 8005132:	4b03      	ldr	r3, [pc, #12]	; (8005140 <frame_dummy+0x10>)
 8005134:	b11b      	cbz	r3, 800513e <frame_dummy+0xe>
 8005136:	4903      	ldr	r1, [pc, #12]	; (8005144 <frame_dummy+0x14>)
 8005138:	4803      	ldr	r0, [pc, #12]	; (8005148 <frame_dummy+0x18>)
 800513a:	f3af 8000 	nop.w
 800513e:	bd08      	pop	{r3, pc}
 8005140:	00000000 	.word	0x00000000
 8005144:	2000001c 	.word	0x2000001c
 8005148:	08006df0 	.word	0x08006df0

0800514c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b088      	sub	sp, #32
 8005150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005152:	f107 0310 	add.w	r3, r7, #16
 8005156:	2200      	movs	r2, #0
 8005158:	601a      	str	r2, [r3, #0]
 800515a:	605a      	str	r2, [r3, #4]
 800515c:	609a      	str	r2, [r3, #8]
 800515e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005160:	4b1e      	ldr	r3, [pc, #120]	; (80051dc <MX_GPIO_Init+0x90>)
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	4a1d      	ldr	r2, [pc, #116]	; (80051dc <MX_GPIO_Init+0x90>)
 8005166:	f043 0310 	orr.w	r3, r3, #16
 800516a:	6193      	str	r3, [r2, #24]
 800516c:	4b1b      	ldr	r3, [pc, #108]	; (80051dc <MX_GPIO_Init+0x90>)
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	f003 0310 	and.w	r3, r3, #16
 8005174:	60fb      	str	r3, [r7, #12]
 8005176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005178:	4b18      	ldr	r3, [pc, #96]	; (80051dc <MX_GPIO_Init+0x90>)
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	4a17      	ldr	r2, [pc, #92]	; (80051dc <MX_GPIO_Init+0x90>)
 800517e:	f043 0320 	orr.w	r3, r3, #32
 8005182:	6193      	str	r3, [r2, #24]
 8005184:	4b15      	ldr	r3, [pc, #84]	; (80051dc <MX_GPIO_Init+0x90>)
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	f003 0320 	and.w	r3, r3, #32
 800518c:	60bb      	str	r3, [r7, #8]
 800518e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005190:	4b12      	ldr	r3, [pc, #72]	; (80051dc <MX_GPIO_Init+0x90>)
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	4a11      	ldr	r2, [pc, #68]	; (80051dc <MX_GPIO_Init+0x90>)
 8005196:	f043 0304 	orr.w	r3, r3, #4
 800519a:	6193      	str	r3, [r2, #24]
 800519c:	4b0f      	ldr	r3, [pc, #60]	; (80051dc <MX_GPIO_Init+0x90>)
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	f003 0304 	and.w	r3, r3, #4
 80051a4:	607b      	str	r3, [r7, #4]
 80051a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80051a8:	2200      	movs	r2, #0
 80051aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80051ae:	480c      	ldr	r0, [pc, #48]	; (80051e0 <MX_GPIO_Init+0x94>)
 80051b0:	f000 ff68 	bl	8006084 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80051b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80051b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051ba:	2301      	movs	r3, #1
 80051bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051be:	2300      	movs	r3, #0
 80051c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051c2:	2302      	movs	r3, #2
 80051c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051c6:	f107 0310 	add.w	r3, r7, #16
 80051ca:	4619      	mov	r1, r3
 80051cc:	4804      	ldr	r0, [pc, #16]	; (80051e0 <MX_GPIO_Init+0x94>)
 80051ce:	f000 fdd5 	bl	8005d7c <HAL_GPIO_Init>

}
 80051d2:	bf00      	nop
 80051d4:	3720      	adds	r7, #32
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	40021000 	.word	0x40021000
 80051e0:	40011000 	.word	0x40011000

080051e4 <APP_Fetch_Commend>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void APP_Fetch_Commend(void){
 80051e4:	b580      	push	{r7, lr}
 80051e6:	af00      	add	r7, sp, #0
	/* To clear buffer of RX and prevent carbadge messages of buffer */
	memset(BL_HostBuffer, RESET , 3);
 80051e8:	2203      	movs	r2, #3
 80051ea:	2100      	movs	r1, #0
 80051ec:	480c      	ldr	r0, [pc, #48]	; (8005220 <APP_Fetch_Commend+0x3c>)
 80051ee:	f001 fdd3 	bl	8006d98 <memset>

	HAL_UART_Receive(&huart1, BL_HostBuffer, 1,
 80051f2:	2314      	movs	r3, #20
 80051f4:	2201      	movs	r2, #1
 80051f6:	490a      	ldr	r1, [pc, #40]	; (8005220 <APP_Fetch_Commend+0x3c>)
 80051f8:	480a      	ldr	r0, [pc, #40]	; (8005224 <APP_Fetch_Commend+0x40>)
 80051fa:	f001 fc3e 	bl	8006a7a <HAL_UART_Receive>
			20);

	if ( BL_HostBuffer[0] == 0xAA ){
 80051fe:	4b08      	ldr	r3, [pc, #32]	; (8005220 <APP_Fetch_Commend+0x3c>)
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	2baa      	cmp	r3, #170	; 0xaa
 8005204:	d10a      	bne.n	800521c <APP_Fetch_Commend+0x38>
		HAL_UART_Transmit(&huart1,(uint8_t *) &Booting,1, HAL_MAX_DELAY);
 8005206:	f04f 33ff 	mov.w	r3, #4294967295
 800520a:	2201      	movs	r2, #1
 800520c:	4906      	ldr	r1, [pc, #24]	; (8005228 <APP_Fetch_Commend+0x44>)
 800520e:	4805      	ldr	r0, [pc, #20]	; (8005224 <APP_Fetch_Commend+0x40>)
 8005210:	f001 fbb0 	bl	8006974 <HAL_UART_Transmit>
		ClearApplicationFlag();
 8005214:	f000 f80a 	bl	800522c <ClearApplicationFlag>
		HAL_NVIC_SystemReset();
 8005218:	f000 fb9f 	bl	800595a <HAL_NVIC_SystemReset>
	}
}
 800521c:	bf00      	nop
 800521e:	bd80      	pop	{r7, pc}
 8005220:	20000034 	.word	0x20000034
 8005224:	20000038 	.word	0x20000038
 8005228:	20000004 	.word	0x20000004

0800522c <ClearApplicationFlag>:

static void ClearApplicationFlag(void)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	af00      	add	r7, sp, #0
	Perform_Flash_Erase(0x800F000, 0x01);
 8005230:	2101      	movs	r1, #1
 8005232:	4805      	ldr	r0, [pc, #20]	; (8005248 <ClearApplicationFlag+0x1c>)
 8005234:	f000 f80c 	bl	8005250 <Perform_Flash_Erase>
	Flash_Memory_Write_Payload((uint8_t *) &FLAG_APP_OFF, 0x800F000, 4);
 8005238:	2204      	movs	r2, #4
 800523a:	4903      	ldr	r1, [pc, #12]	; (8005248 <ClearApplicationFlag+0x1c>)
 800523c:	4803      	ldr	r0, [pc, #12]	; (800524c <ClearApplicationFlag+0x20>)
 800523e:	f000 f857 	bl	80052f0 <Flash_Memory_Write_Payload>
}
 8005242:	bf00      	nop
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	0800f000 	.word	0x0800f000
 800524c:	20000000 	.word	0x20000000

08005250 <Perform_Flash_Erase>:


/* Get erasing flash actually */
static uint8_t Perform_Flash_Erase (uint32_t PageAddress, uint8_t Number_Of_Pages){
 8005250:	b580      	push	{r7, lr}
 8005252:	b088      	sub	sp, #32
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	460b      	mov	r3, r1
 800525a:	70fb      	strb	r3, [r7, #3]
	/* To check that the sectors in not overflow the size of flash */
	uint8_t Page_validity_Status  = PAGE_INVALID_NUMBER ;
 800525c:	2300      	movs	r3, #0
 800525e:	77fb      	strb	r3, [r7, #31]
	/* Status of erasing flash */
	HAL_StatusTypeDef HAL_Status = HAL_ERROR ;
 8005260:	2301      	movs	r3, #1
 8005262:	77bb      	strb	r3, [r7, #30]
	/* Error sector status */
	uint32_t PageError = RESET ;
 8005264:	2300      	movs	r3, #0
 8005266:	61bb      	str	r3, [r7, #24]
	/* Define struct to configure parameters[in] */
	FLASH_EraseInitTypeDef pEraseInit ;
	/* Define the used bank in flash memory */
	pEraseInit.Banks = FLASH_BANK_1 ;
 8005268:	2301      	movs	r3, #1
 800526a:	60fb      	str	r3, [r7, #12]

	/* another pages is agreed but check that is acess the number of pages in flash */
	if (Number_Of_Pages >= CBL_FLASH_MAX_PAGES_NUMBER && CBL_FLASH_MASS_ERASE != PageAddress){
 800526c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005270:	2b00      	cmp	r3, #0
 8005272:	da05      	bge.n	8005280 <Perform_Flash_Erase+0x30>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2bff      	cmp	r3, #255	; 0xff
 8005278:	d002      	beq.n	8005280 <Perform_Flash_Erase+0x30>
		Page_validity_Status = PAGE_INVALID_NUMBER ;
 800527a:	2300      	movs	r3, #0
 800527c:	77fb      	strb	r3, [r7, #31]
 800527e:	e030      	b.n	80052e2 <Perform_Flash_Erase+0x92>

	}
	/* erase all memory or specific page */
	else {

		Page_validity_Status = PAGE_VALID_NUMBER ;
 8005280:	2301      	movs	r3, #1
 8005282:	77fb      	strb	r3, [r7, #31]
		pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8005284:	2300      	movs	r3, #0
 8005286:	60bb      	str	r3, [r7, #8]

		/* Check if he want to erase all memory flash */
		if ( CBL_FLASH_MASS_ERASE == PageAddress  ){
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2bff      	cmp	r3, #255	; 0xff
 800528c:	d104      	bne.n	8005298 <Perform_Flash_Erase+0x48>
			pEraseInit.PageAddress = FLASH_PAGE_BASE_ADDRESS_APP1;
 800528e:	4b17      	ldr	r3, [pc, #92]	; (80052ec <Perform_Flash_Erase+0x9c>)
 8005290:	613b      	str	r3, [r7, #16]
			pEraseInit.NbPages = APPLICATION_SIZE;
 8005292:	2313      	movs	r3, #19
 8005294:	617b      	str	r3, [r7, #20]
 8005296:	e003      	b.n	80052a0 <Perform_Flash_Erase+0x50>
		}
		/* erase specific page */
		else {
			pEraseInit.PageAddress = PageAddress;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	613b      	str	r3, [r7, #16]
			pEraseInit.NbPages = Number_Of_Pages;
 800529c:	78fb      	ldrb	r3, [r7, #3]
 800529e:	617b      	str	r3, [r7, #20]
		}

		/* To unlock flash memory */
		HAL_Status = HAL_FLASH_Unlock();
 80052a0:	f000 fbdc 	bl	8005a5c <HAL_FLASH_Unlock>
 80052a4:	4603      	mov	r3, r0
 80052a6:	77bb      	strb	r3, [r7, #30]

		/* if it's opened correctly */
		if (HAL_Status == HAL_OK){
 80052a8:	7fbb      	ldrb	r3, [r7, #30]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d117      	bne.n	80052de <Perform_Flash_Erase+0x8e>
			/* Perform a mass erase or erase the specified FLASH memory sectors */
			HAL_Status = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 80052ae:	f107 0218 	add.w	r2, r7, #24
 80052b2:	f107 0308 	add.w	r3, r7, #8
 80052b6:	4611      	mov	r1, r2
 80052b8:	4618      	mov	r0, r3
 80052ba:	f000 fcb7 	bl	8005c2c <HAL_FLASHEx_Erase>
 80052be:	4603      	mov	r3, r0
 80052c0:	77bb      	strb	r3, [r7, #30]

			/* To check that the flash memory is erased sucessfully */
			if (HAL_SUCESSFUL_ERASE == PageError){
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c8:	d102      	bne.n	80052d0 <Perform_Flash_Erase+0x80>
				Page_validity_Status = SUCESSFUL_ERASE ;
 80052ca:	2303      	movs	r3, #3
 80052cc:	77fb      	strb	r3, [r7, #31]
 80052ce:	e001      	b.n	80052d4 <Perform_Flash_Erase+0x84>
			}
			/* Didn't erase*/
			else {
				Page_validity_Status = UNSUCESSFUL_ERASE ;
 80052d0:	2302      	movs	r3, #2
 80052d2:	77fb      	strb	r3, [r7, #31]
			}

			HAL_Status = HAL_FLASH_Lock();
 80052d4:	f000 fbe8 	bl	8005aa8 <HAL_FLASH_Lock>
 80052d8:	4603      	mov	r3, r0
 80052da:	77bb      	strb	r3, [r7, #30]
 80052dc:	e001      	b.n	80052e2 <Perform_Flash_Erase+0x92>
		}
		/* Not opened */
		else {
			Page_validity_Status = UNSUCESSFUL_ERASE ;
 80052de:	2302      	movs	r3, #2
 80052e0:	77fb      	strb	r3, [r7, #31]
		}
	}
	return Page_validity_Status ;
 80052e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3720      	adds	r7, #32
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	08005000 	.word	0x08005000

080052f0 <Flash_Memory_Write_Payload>:

/* Write actually in flash memory */
static uint8_t Flash_Memory_Write_Payload(uint8_t *Host_PayLoad,
	uint32_t Payload_Start_Address, uint8_t Payload_Len) {
 80052f0:	b5b0      	push	{r4, r5, r7, lr}
 80052f2:	b088      	sub	sp, #32
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	4613      	mov	r3, r2
 80052fc:	71fb      	strb	r3, [r7, #7]
	/* The status in dealing HAL functions */
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	77fb      	strb	r3, [r7, #31]
	/* Status writing in flash memory */
	uint8_t Status = FLASH_PAYLOAD_WRITING_FAILED;
 8005302:	2300      	movs	r3, #0
 8005304:	77bb      	strb	r3, [r7, #30]
	/* The number of words in data appliction sections */
	uint8_t PayLoad_Counter = RESET ;
 8005306:	2300      	movs	r3, #0
 8005308:	777b      	strb	r3, [r7, #29]
	/* buffering half word */
	uint16_t Payload_Buffer = RESET ;
 800530a:	2300      	movs	r3, #0
 800530c:	837b      	strh	r3, [r7, #26]
	/* address of current writing half word */
	uint32_t Address = RESET ;
 800530e:	2300      	movs	r3, #0
 8005310:	617b      	str	r3, [r7, #20]

	/* Writing steps */
	/* Open flash memory */
	HAL_Status = HAL_FLASH_Unlock();
 8005312:	f000 fba3 	bl	8005a5c <HAL_FLASH_Unlock>
 8005316:	4603      	mov	r3, r0
 8005318:	77fb      	strb	r3, [r7, #31]

	/* If it opened */
	if (HAL_Status == HAL_OK) {
 800531a:	7ffb      	ldrb	r3, [r7, #31]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d134      	bne.n	800538a <Flash_Memory_Write_Payload+0x9a>
		/* Transfer the data sections half word by half word */
		while (Payload_Len !=0 && Status == HAL_OK ){
 8005320:	e024      	b.n	800536c <Flash_Memory_Write_Payload+0x7c>
			Payload_Buffer = (uint16_t) Host_PayLoad[PayLoad_Counter]
 8005322:	7f7b      	ldrb	r3, [r7, #29]
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	4413      	add	r3, r2
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	b21a      	sxth	r2, r3
													 |( (uint16_t)Host_PayLoad[PayLoad_Counter+1] << ONE_BYTE );
 800532c:	7f7b      	ldrb	r3, [r7, #29]
 800532e:	3301      	adds	r3, #1
 8005330:	68f9      	ldr	r1, [r7, #12]
 8005332:	440b      	add	r3, r1
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	021b      	lsls	r3, r3, #8
 8005338:	b21b      	sxth	r3, r3
 800533a:	4313      	orrs	r3, r2
 800533c:	b21b      	sxth	r3, r3
			Payload_Buffer = (uint16_t) Host_PayLoad[PayLoad_Counter]
 800533e:	837b      	strh	r3, [r7, #26]

			/*update the flash address each itration */
			Address = Payload_Start_Address + PayLoad_Counter ;
 8005340:	7f7b      	ldrb	r3, [r7, #29]
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	4413      	add	r3, r2
 8005346:	617b      	str	r3, [r7, #20]

			/*Writing the Date in the flash Halfword by Halfword */
			HAL_Status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 8005348:	8b7b      	ldrh	r3, [r7, #26]
 800534a:	2200      	movs	r2, #0
 800534c:	461c      	mov	r4, r3
 800534e:	4615      	mov	r5, r2
 8005350:	4622      	mov	r2, r4
 8005352:	462b      	mov	r3, r5
 8005354:	6979      	ldr	r1, [r7, #20]
 8005356:	2001      	movs	r0, #1
 8005358:	f000 fb10 	bl	800597c <HAL_FLASH_Program>
 800535c:	4603      	mov	r3, r0
 800535e:	77fb      	strb	r3, [r7, #31]
					Address, (uint64_t)Payload_Buffer);

			/*To increment PayLoad_Counter and stopped on new half word in host packet frame
			  To decrement Payload_Len to be sure that all of host packet frame is written
			 */
			Payload_Len-=2;
 8005360:	79fb      	ldrb	r3, [r7, #7]
 8005362:	3b02      	subs	r3, #2
 8005364:	71fb      	strb	r3, [r7, #7]
			PayLoad_Counter+=2;
 8005366:	7f7b      	ldrb	r3, [r7, #29]
 8005368:	3302      	adds	r3, #2
 800536a:	777b      	strb	r3, [r7, #29]
		while (Payload_Len !=0 && Status == HAL_OK ){
 800536c:	79fb      	ldrb	r3, [r7, #7]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d002      	beq.n	8005378 <Flash_Memory_Write_Payload+0x88>
 8005372:	7fbb      	ldrb	r3, [r7, #30]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d0d4      	beq.n	8005322 <Flash_Memory_Write_Payload+0x32>
		}

		/* if function can't write on memory Status be failed */
		if (HAL_Status != HAL_OK) {
 8005378:	7ffb      	ldrb	r3, [r7, #31]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d002      	beq.n	8005384 <Flash_Memory_Write_Payload+0x94>
			Status = FLASH_PAYLOAD_WRITING_FAILED;
 800537e:	2300      	movs	r3, #0
 8005380:	77bb      	strb	r3, [r7, #30]
 8005382:	e004      	b.n	800538e <Flash_Memory_Write_Payload+0x9e>
		} else {
			/* All iterations, It can write on memory make status passed */
			Status = FLASH_PAYLOAD_WRITING_PASSED;
 8005384:	2301      	movs	r3, #1
 8005386:	77bb      	strb	r3, [r7, #30]
 8005388:	e001      	b.n	800538e <Flash_Memory_Write_Payload+0x9e>
		}
	}
	else {
		/* If it can't open memory make status failed */
		Status = FLASH_PAYLOAD_WRITING_FAILED;
 800538a:	2300      	movs	r3, #0
 800538c:	77bb      	strb	r3, [r7, #30]
	}

	/* If all status is OK so It will lock memory */
	if (Status == FLASH_PAYLOAD_WRITING_PASSED && HAL_Status == HAL_OK) {
 800538e:	7fbb      	ldrb	r3, [r7, #30]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d10f      	bne.n	80053b4 <Flash_Memory_Write_Payload+0xc4>
 8005394:	7ffb      	ldrb	r3, [r7, #31]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10c      	bne.n	80053b4 <Flash_Memory_Write_Payload+0xc4>
		HAL_Status = HAL_FLASH_Lock();
 800539a:	f000 fb85 	bl	8005aa8 <HAL_FLASH_Lock>
 800539e:	4603      	mov	r3, r0
 80053a0:	77fb      	strb	r3, [r7, #31]

		/* Check if it locked it true or not */
		if (HAL_Status != HAL_OK) {
 80053a2:	7ffb      	ldrb	r3, [r7, #31]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d002      	beq.n	80053ae <Flash_Memory_Write_Payload+0xbe>
			Status = FLASH_PAYLOAD_WRITING_FAILED;
 80053a8:	2300      	movs	r3, #0
 80053aa:	77bb      	strb	r3, [r7, #30]
		if (HAL_Status != HAL_OK) {
 80053ac:	e004      	b.n	80053b8 <Flash_Memory_Write_Payload+0xc8>
		} else {
			Status = FLASH_PAYLOAD_WRITING_PASSED;
 80053ae:	2301      	movs	r3, #1
 80053b0:	77bb      	strb	r3, [r7, #30]
		if (HAL_Status != HAL_OK) {
 80053b2:	e001      	b.n	80053b8 <Flash_Memory_Write_Payload+0xc8>
		}
	} else {
		/* If one of status is not OK so It will make returned status with failed */
		Status = FLASH_PAYLOAD_WRITING_FAILED;
 80053b4:	2300      	movs	r3, #0
 80053b6:	77bb      	strb	r3, [r7, #30]
	}
	return Status;
 80053b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3720      	adds	r7, #32
 80053be:	46bd      	mov	sp, r7
 80053c0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080053c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80053c8:	f000 f954 	bl	8005674 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80053cc:	f000 f81e 	bl	800540c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80053d0:	f7ff febc 	bl	800514c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80053d4:	f000 f8b2 	bl	800553c <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  APP_Fetch_Commend();
 80053d8:	f7ff ff04 	bl	80051e4 <APP_Fetch_Commend>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80053dc:	2201      	movs	r2, #1
 80053de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80053e2:	4809      	ldr	r0, [pc, #36]	; (8005408 <main+0x44>)
 80053e4:	f000 fe4e 	bl	8006084 <HAL_GPIO_WritePin>
	  HAL_Delay(3000);
 80053e8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80053ec:	f000 f9a4 	bl	8005738 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80053f0:	2200      	movs	r2, #0
 80053f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80053f6:	4804      	ldr	r0, [pc, #16]	; (8005408 <main+0x44>)
 80053f8:	f000 fe44 	bl	8006084 <HAL_GPIO_WritePin>
	  HAL_Delay(3000);
 80053fc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005400:	f000 f99a 	bl	8005738 <HAL_Delay>
	  APP_Fetch_Commend();
 8005404:	e7e8      	b.n	80053d8 <main+0x14>
 8005406:	bf00      	nop
 8005408:	40011000 	.word	0x40011000

0800540c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b090      	sub	sp, #64	; 0x40
 8005410:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005412:	f107 0318 	add.w	r3, r7, #24
 8005416:	2228      	movs	r2, #40	; 0x28
 8005418:	2100      	movs	r1, #0
 800541a:	4618      	mov	r0, r3
 800541c:	f001 fcbc 	bl	8006d98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005420:	1d3b      	adds	r3, r7, #4
 8005422:	2200      	movs	r2, #0
 8005424:	601a      	str	r2, [r3, #0]
 8005426:	605a      	str	r2, [r3, #4]
 8005428:	609a      	str	r2, [r3, #8]
 800542a:	60da      	str	r2, [r3, #12]
 800542c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800542e:	2301      	movs	r3, #1
 8005430:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005432:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005436:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8005438:	2300      	movs	r3, #0
 800543a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800543c:	f107 0318 	add.w	r3, r7, #24
 8005440:	4618      	mov	r0, r3
 8005442:	f000 fe37 	bl	80060b4 <HAL_RCC_OscConfig>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d001      	beq.n	8005450 <SystemClock_Config+0x44>
  {
    Error_Handler();
 800544c:	f000 f818 	bl	8005480 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005450:	230f      	movs	r3, #15
 8005452:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8005454:	2301      	movs	r3, #1
 8005456:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005458:	2300      	movs	r3, #0
 800545a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800545c:	2300      	movs	r3, #0
 800545e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005460:	2300      	movs	r3, #0
 8005462:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8005464:	1d3b      	adds	r3, r7, #4
 8005466:	2100      	movs	r1, #0
 8005468:	4618      	mov	r0, r3
 800546a:	f001 f8a5 	bl	80065b8 <HAL_RCC_ClockConfig>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d001      	beq.n	8005478 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8005474:	f000 f804 	bl	8005480 <Error_Handler>
  }
}
 8005478:	bf00      	nop
 800547a:	3740      	adds	r7, #64	; 0x40
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005480:	b480      	push	{r7}
 8005482:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005484:	b672      	cpsid	i
}
 8005486:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005488:	e7fe      	b.n	8005488 <Error_Handler+0x8>
	...

0800548c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005492:	4b0e      	ldr	r3, [pc, #56]	; (80054cc <HAL_MspInit+0x40>)
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	4a0d      	ldr	r2, [pc, #52]	; (80054cc <HAL_MspInit+0x40>)
 8005498:	f043 0301 	orr.w	r3, r3, #1
 800549c:	6193      	str	r3, [r2, #24]
 800549e:	4b0b      	ldr	r3, [pc, #44]	; (80054cc <HAL_MspInit+0x40>)
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	f003 0301 	and.w	r3, r3, #1
 80054a6:	607b      	str	r3, [r7, #4]
 80054a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80054aa:	4b08      	ldr	r3, [pc, #32]	; (80054cc <HAL_MspInit+0x40>)
 80054ac:	69db      	ldr	r3, [r3, #28]
 80054ae:	4a07      	ldr	r2, [pc, #28]	; (80054cc <HAL_MspInit+0x40>)
 80054b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054b4:	61d3      	str	r3, [r2, #28]
 80054b6:	4b05      	ldr	r3, [pc, #20]	; (80054cc <HAL_MspInit+0x40>)
 80054b8:	69db      	ldr	r3, [r3, #28]
 80054ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054be:	603b      	str	r3, [r7, #0]
 80054c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80054c2:	bf00      	nop
 80054c4:	370c      	adds	r7, #12
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bc80      	pop	{r7}
 80054ca:	4770      	bx	lr
 80054cc:	40021000 	.word	0x40021000

080054d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80054d0:	b480      	push	{r7}
 80054d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80054d4:	e7fe      	b.n	80054d4 <NMI_Handler+0x4>

080054d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80054d6:	b480      	push	{r7}
 80054d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80054da:	e7fe      	b.n	80054da <HardFault_Handler+0x4>

080054dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80054dc:	b480      	push	{r7}
 80054de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80054e0:	e7fe      	b.n	80054e0 <MemManage_Handler+0x4>

080054e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80054e2:	b480      	push	{r7}
 80054e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80054e6:	e7fe      	b.n	80054e6 <BusFault_Handler+0x4>

080054e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80054e8:	b480      	push	{r7}
 80054ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80054ec:	e7fe      	b.n	80054ec <UsageFault_Handler+0x4>

080054ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80054ee:	b480      	push	{r7}
 80054f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80054f2:	bf00      	nop
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bc80      	pop	{r7}
 80054f8:	4770      	bx	lr

080054fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80054fa:	b480      	push	{r7}
 80054fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80054fe:	bf00      	nop
 8005500:	46bd      	mov	sp, r7
 8005502:	bc80      	pop	{r7}
 8005504:	4770      	bx	lr

08005506 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005506:	b480      	push	{r7}
 8005508:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800550a:	bf00      	nop
 800550c:	46bd      	mov	sp, r7
 800550e:	bc80      	pop	{r7}
 8005510:	4770      	bx	lr

08005512 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005516:	f000 f8f3 	bl	8005700 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800551a:	bf00      	nop
 800551c:	bd80      	pop	{r7, pc}
	...

08005520 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005520:	b480      	push	{r7}
 8005522:	af00      	add	r7, sp, #0
    SystemInit_ExtMemCtl(); 
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS ; /* Vector Table Relocation in Internal SRAM. */
 8005524:	4b03      	ldr	r3, [pc, #12]	; (8005534 <SystemInit+0x14>)
 8005526:	4a04      	ldr	r2, [pc, #16]	; (8005538 <SystemInit+0x18>)
 8005528:	609a      	str	r2, [r3, #8]
}
 800552a:	bf00      	nop
 800552c:	46bd      	mov	sp, r7
 800552e:	bc80      	pop	{r7}
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	e000ed00 	.word	0xe000ed00
 8005538:	08005000 	.word	0x08005000

0800553c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005540:	4b11      	ldr	r3, [pc, #68]	; (8005588 <MX_USART1_UART_Init+0x4c>)
 8005542:	4a12      	ldr	r2, [pc, #72]	; (800558c <MX_USART1_UART_Init+0x50>)
 8005544:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005546:	4b10      	ldr	r3, [pc, #64]	; (8005588 <MX_USART1_UART_Init+0x4c>)
 8005548:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800554c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800554e:	4b0e      	ldr	r3, [pc, #56]	; (8005588 <MX_USART1_UART_Init+0x4c>)
 8005550:	2200      	movs	r2, #0
 8005552:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005554:	4b0c      	ldr	r3, [pc, #48]	; (8005588 <MX_USART1_UART_Init+0x4c>)
 8005556:	2200      	movs	r2, #0
 8005558:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800555a:	4b0b      	ldr	r3, [pc, #44]	; (8005588 <MX_USART1_UART_Init+0x4c>)
 800555c:	2200      	movs	r2, #0
 800555e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005560:	4b09      	ldr	r3, [pc, #36]	; (8005588 <MX_USART1_UART_Init+0x4c>)
 8005562:	220c      	movs	r2, #12
 8005564:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005566:	4b08      	ldr	r3, [pc, #32]	; (8005588 <MX_USART1_UART_Init+0x4c>)
 8005568:	2200      	movs	r2, #0
 800556a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800556c:	4b06      	ldr	r3, [pc, #24]	; (8005588 <MX_USART1_UART_Init+0x4c>)
 800556e:	2200      	movs	r2, #0
 8005570:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005572:	4805      	ldr	r0, [pc, #20]	; (8005588 <MX_USART1_UART_Init+0x4c>)
 8005574:	f001 f9ae 	bl	80068d4 <HAL_UART_Init>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d001      	beq.n	8005582 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800557e:	f7ff ff7f 	bl	8005480 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005582:	bf00      	nop
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	20000038 	.word	0x20000038
 800558c:	40013800 	.word	0x40013800

08005590 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b088      	sub	sp, #32
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005598:	f107 0310 	add.w	r3, r7, #16
 800559c:	2200      	movs	r2, #0
 800559e:	601a      	str	r2, [r3, #0]
 80055a0:	605a      	str	r2, [r3, #4]
 80055a2:	609a      	str	r2, [r3, #8]
 80055a4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a1c      	ldr	r2, [pc, #112]	; (800561c <HAL_UART_MspInit+0x8c>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d131      	bne.n	8005614 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80055b0:	4b1b      	ldr	r3, [pc, #108]	; (8005620 <HAL_UART_MspInit+0x90>)
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	4a1a      	ldr	r2, [pc, #104]	; (8005620 <HAL_UART_MspInit+0x90>)
 80055b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055ba:	6193      	str	r3, [r2, #24]
 80055bc:	4b18      	ldr	r3, [pc, #96]	; (8005620 <HAL_UART_MspInit+0x90>)
 80055be:	699b      	ldr	r3, [r3, #24]
 80055c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055c4:	60fb      	str	r3, [r7, #12]
 80055c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055c8:	4b15      	ldr	r3, [pc, #84]	; (8005620 <HAL_UART_MspInit+0x90>)
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	4a14      	ldr	r2, [pc, #80]	; (8005620 <HAL_UART_MspInit+0x90>)
 80055ce:	f043 0304 	orr.w	r3, r3, #4
 80055d2:	6193      	str	r3, [r2, #24]
 80055d4:	4b12      	ldr	r3, [pc, #72]	; (8005620 <HAL_UART_MspInit+0x90>)
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	f003 0304 	and.w	r3, r3, #4
 80055dc:	60bb      	str	r3, [r7, #8]
 80055de:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80055e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055e6:	2302      	movs	r3, #2
 80055e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80055ea:	2303      	movs	r3, #3
 80055ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055ee:	f107 0310 	add.w	r3, r7, #16
 80055f2:	4619      	mov	r1, r3
 80055f4:	480b      	ldr	r0, [pc, #44]	; (8005624 <HAL_UART_MspInit+0x94>)
 80055f6:	f000 fbc1 	bl	8005d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80055fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005600:	2300      	movs	r3, #0
 8005602:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005604:	2300      	movs	r3, #0
 8005606:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005608:	f107 0310 	add.w	r3, r7, #16
 800560c:	4619      	mov	r1, r3
 800560e:	4805      	ldr	r0, [pc, #20]	; (8005624 <HAL_UART_MspInit+0x94>)
 8005610:	f000 fbb4 	bl	8005d7c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005614:	bf00      	nop
 8005616:	3720      	adds	r7, #32
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	40013800 	.word	0x40013800
 8005620:	40021000 	.word	0x40021000
 8005624:	40010800 	.word	0x40010800

08005628 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005628:	f7ff ff7a 	bl	8005520 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800562c:	480b      	ldr	r0, [pc, #44]	; (800565c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800562e:	490c      	ldr	r1, [pc, #48]	; (8005660 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8005630:	4a0c      	ldr	r2, [pc, #48]	; (8005664 <LoopFillZerobss+0x16>)
  movs r3, #0
 8005632:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005634:	e002      	b.n	800563c <LoopCopyDataInit>

08005636 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005636:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005638:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800563a:	3304      	adds	r3, #4

0800563c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800563c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800563e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005640:	d3f9      	bcc.n	8005636 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005642:	4a09      	ldr	r2, [pc, #36]	; (8005668 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8005644:	4c09      	ldr	r4, [pc, #36]	; (800566c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005646:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005648:	e001      	b.n	800564e <LoopFillZerobss>

0800564a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800564a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800564c:	3204      	adds	r2, #4

0800564e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800564e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005650:	d3fb      	bcc.n	800564a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005652:	f001 fba9 	bl	8006da8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005656:	f7ff feb5 	bl	80053c4 <main>
  bx lr
 800565a:	4770      	bx	lr
  ldr r0, =_sdata
 800565c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005660:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8005664:	08006e3c 	.word	0x08006e3c
  ldr r2, =_sbss
 8005668:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800566c:	200000a8 	.word	0x200000a8

08005670 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005670:	e7fe      	b.n	8005670 <ADC1_2_IRQHandler>
	...

08005674 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005678:	4b08      	ldr	r3, [pc, #32]	; (800569c <HAL_Init+0x28>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a07      	ldr	r2, [pc, #28]	; (800569c <HAL_Init+0x28>)
 800567e:	f043 0310 	orr.w	r3, r3, #16
 8005682:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005684:	2003      	movs	r0, #3
 8005686:	f000 f941 	bl	800590c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800568a:	200f      	movs	r0, #15
 800568c:	f000 f808 	bl	80056a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005690:	f7ff fefc 	bl	800548c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	40022000 	.word	0x40022000

080056a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80056a8:	4b12      	ldr	r3, [pc, #72]	; (80056f4 <HAL_InitTick+0x54>)
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	4b12      	ldr	r3, [pc, #72]	; (80056f8 <HAL_InitTick+0x58>)
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	4619      	mov	r1, r3
 80056b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80056b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80056ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 f94f 	bl	8005962 <HAL_SYSTICK_Config>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d001      	beq.n	80056ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e00e      	b.n	80056ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2b0f      	cmp	r3, #15
 80056d2:	d80a      	bhi.n	80056ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80056d4:	2200      	movs	r2, #0
 80056d6:	6879      	ldr	r1, [r7, #4]
 80056d8:	f04f 30ff 	mov.w	r0, #4294967295
 80056dc:	f000 f921 	bl	8005922 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80056e0:	4a06      	ldr	r2, [pc, #24]	; (80056fc <HAL_InitTick+0x5c>)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
 80056e8:	e000      	b.n	80056ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3708      	adds	r7, #8
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	20000008 	.word	0x20000008
 80056f8:	20000010 	.word	0x20000010
 80056fc:	2000000c 	.word	0x2000000c

08005700 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005700:	b480      	push	{r7}
 8005702:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005704:	4b05      	ldr	r3, [pc, #20]	; (800571c <HAL_IncTick+0x1c>)
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	461a      	mov	r2, r3
 800570a:	4b05      	ldr	r3, [pc, #20]	; (8005720 <HAL_IncTick+0x20>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4413      	add	r3, r2
 8005710:	4a03      	ldr	r2, [pc, #12]	; (8005720 <HAL_IncTick+0x20>)
 8005712:	6013      	str	r3, [r2, #0]
}
 8005714:	bf00      	nop
 8005716:	46bd      	mov	sp, r7
 8005718:	bc80      	pop	{r7}
 800571a:	4770      	bx	lr
 800571c:	20000010 	.word	0x20000010
 8005720:	20000080 	.word	0x20000080

08005724 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005724:	b480      	push	{r7}
 8005726:	af00      	add	r7, sp, #0
  return uwTick;
 8005728:	4b02      	ldr	r3, [pc, #8]	; (8005734 <HAL_GetTick+0x10>)
 800572a:	681b      	ldr	r3, [r3, #0]
}
 800572c:	4618      	mov	r0, r3
 800572e:	46bd      	mov	sp, r7
 8005730:	bc80      	pop	{r7}
 8005732:	4770      	bx	lr
 8005734:	20000080 	.word	0x20000080

08005738 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005740:	f7ff fff0 	bl	8005724 <HAL_GetTick>
 8005744:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005750:	d005      	beq.n	800575e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005752:	4b0a      	ldr	r3, [pc, #40]	; (800577c <HAL_Delay+0x44>)
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	461a      	mov	r2, r3
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	4413      	add	r3, r2
 800575c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800575e:	bf00      	nop
 8005760:	f7ff ffe0 	bl	8005724 <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	429a      	cmp	r2, r3
 800576e:	d8f7      	bhi.n	8005760 <HAL_Delay+0x28>
  {
  }
}
 8005770:	bf00      	nop
 8005772:	bf00      	nop
 8005774:	3710      	adds	r7, #16
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	20000010 	.word	0x20000010

08005780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f003 0307 	and.w	r3, r3, #7
 800578e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005790:	4b0c      	ldr	r3, [pc, #48]	; (80057c4 <__NVIC_SetPriorityGrouping+0x44>)
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800579c:	4013      	ands	r3, r2
 800579e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80057a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80057ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80057b2:	4a04      	ldr	r2, [pc, #16]	; (80057c4 <__NVIC_SetPriorityGrouping+0x44>)
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	60d3      	str	r3, [r2, #12]
}
 80057b8:	bf00      	nop
 80057ba:	3714      	adds	r7, #20
 80057bc:	46bd      	mov	sp, r7
 80057be:	bc80      	pop	{r7}
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	e000ed00 	.word	0xe000ed00

080057c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80057c8:	b480      	push	{r7}
 80057ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80057cc:	4b04      	ldr	r3, [pc, #16]	; (80057e0 <__NVIC_GetPriorityGrouping+0x18>)
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	0a1b      	lsrs	r3, r3, #8
 80057d2:	f003 0307 	and.w	r3, r3, #7
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	46bd      	mov	sp, r7
 80057da:	bc80      	pop	{r7}
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	e000ed00 	.word	0xe000ed00

080057e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	4603      	mov	r3, r0
 80057ec:	6039      	str	r1, [r7, #0]
 80057ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	db0a      	blt.n	800580e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	b2da      	uxtb	r2, r3
 80057fc:	490c      	ldr	r1, [pc, #48]	; (8005830 <__NVIC_SetPriority+0x4c>)
 80057fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005802:	0112      	lsls	r2, r2, #4
 8005804:	b2d2      	uxtb	r2, r2
 8005806:	440b      	add	r3, r1
 8005808:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800580c:	e00a      	b.n	8005824 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	b2da      	uxtb	r2, r3
 8005812:	4908      	ldr	r1, [pc, #32]	; (8005834 <__NVIC_SetPriority+0x50>)
 8005814:	79fb      	ldrb	r3, [r7, #7]
 8005816:	f003 030f 	and.w	r3, r3, #15
 800581a:	3b04      	subs	r3, #4
 800581c:	0112      	lsls	r2, r2, #4
 800581e:	b2d2      	uxtb	r2, r2
 8005820:	440b      	add	r3, r1
 8005822:	761a      	strb	r2, [r3, #24]
}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	bc80      	pop	{r7}
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	e000e100 	.word	0xe000e100
 8005834:	e000ed00 	.word	0xe000ed00

08005838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005838:	b480      	push	{r7}
 800583a:	b089      	sub	sp, #36	; 0x24
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f003 0307 	and.w	r3, r3, #7
 800584a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	f1c3 0307 	rsb	r3, r3, #7
 8005852:	2b04      	cmp	r3, #4
 8005854:	bf28      	it	cs
 8005856:	2304      	movcs	r3, #4
 8005858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	3304      	adds	r3, #4
 800585e:	2b06      	cmp	r3, #6
 8005860:	d902      	bls.n	8005868 <NVIC_EncodePriority+0x30>
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	3b03      	subs	r3, #3
 8005866:	e000      	b.n	800586a <NVIC_EncodePriority+0x32>
 8005868:	2300      	movs	r3, #0
 800586a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800586c:	f04f 32ff 	mov.w	r2, #4294967295
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	fa02 f303 	lsl.w	r3, r2, r3
 8005876:	43da      	mvns	r2, r3
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	401a      	ands	r2, r3
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005880:	f04f 31ff 	mov.w	r1, #4294967295
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	fa01 f303 	lsl.w	r3, r1, r3
 800588a:	43d9      	mvns	r1, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005890:	4313      	orrs	r3, r2
         );
}
 8005892:	4618      	mov	r0, r3
 8005894:	3724      	adds	r7, #36	; 0x24
 8005896:	46bd      	mov	sp, r7
 8005898:	bc80      	pop	{r7}
 800589a:	4770      	bx	lr

0800589c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800589c:	b480      	push	{r7}
 800589e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80058a0:	f3bf 8f4f 	dsb	sy
}
 80058a4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80058a6:	4b06      	ldr	r3, [pc, #24]	; (80058c0 <__NVIC_SystemReset+0x24>)
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80058ae:	4904      	ldr	r1, [pc, #16]	; (80058c0 <__NVIC_SystemReset+0x24>)
 80058b0:	4b04      	ldr	r3, [pc, #16]	; (80058c4 <__NVIC_SystemReset+0x28>)
 80058b2:	4313      	orrs	r3, r2
 80058b4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80058b6:	f3bf 8f4f 	dsb	sy
}
 80058ba:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80058bc:	bf00      	nop
 80058be:	e7fd      	b.n	80058bc <__NVIC_SystemReset+0x20>
 80058c0:	e000ed00 	.word	0xe000ed00
 80058c4:	05fa0004 	.word	0x05fa0004

080058c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	3b01      	subs	r3, #1
 80058d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058d8:	d301      	bcc.n	80058de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80058da:	2301      	movs	r3, #1
 80058dc:	e00f      	b.n	80058fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80058de:	4a0a      	ldr	r2, [pc, #40]	; (8005908 <SysTick_Config+0x40>)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	3b01      	subs	r3, #1
 80058e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80058e6:	210f      	movs	r1, #15
 80058e8:	f04f 30ff 	mov.w	r0, #4294967295
 80058ec:	f7ff ff7a 	bl	80057e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80058f0:	4b05      	ldr	r3, [pc, #20]	; (8005908 <SysTick_Config+0x40>)
 80058f2:	2200      	movs	r2, #0
 80058f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80058f6:	4b04      	ldr	r3, [pc, #16]	; (8005908 <SysTick_Config+0x40>)
 80058f8:	2207      	movs	r2, #7
 80058fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3708      	adds	r7, #8
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	e000e010 	.word	0xe000e010

0800590c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f7ff ff33 	bl	8005780 <__NVIC_SetPriorityGrouping>
}
 800591a:	bf00      	nop
 800591c:	3708      	adds	r7, #8
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005922:	b580      	push	{r7, lr}
 8005924:	b086      	sub	sp, #24
 8005926:	af00      	add	r7, sp, #0
 8005928:	4603      	mov	r3, r0
 800592a:	60b9      	str	r1, [r7, #8]
 800592c:	607a      	str	r2, [r7, #4]
 800592e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005930:	2300      	movs	r3, #0
 8005932:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005934:	f7ff ff48 	bl	80057c8 <__NVIC_GetPriorityGrouping>
 8005938:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	68b9      	ldr	r1, [r7, #8]
 800593e:	6978      	ldr	r0, [r7, #20]
 8005940:	f7ff ff7a 	bl	8005838 <NVIC_EncodePriority>
 8005944:	4602      	mov	r2, r0
 8005946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800594a:	4611      	mov	r1, r2
 800594c:	4618      	mov	r0, r3
 800594e:	f7ff ff49 	bl	80057e4 <__NVIC_SetPriority>
}
 8005952:	bf00      	nop
 8005954:	3718      	adds	r7, #24
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}

0800595a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800595a:	b580      	push	{r7, lr}
 800595c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800595e:	f7ff ff9d 	bl	800589c <__NVIC_SystemReset>

08005962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005962:	b580      	push	{r7, lr}
 8005964:	b082      	sub	sp, #8
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f7ff ffac 	bl	80058c8 <SysTick_Config>
 8005970:	4603      	mov	r3, r0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3708      	adds	r7, #8
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
	...

0800597c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800597c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800597e:	b087      	sub	sp, #28
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800598e:	2300      	movs	r3, #0
 8005990:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8005992:	2300      	movs	r3, #0
 8005994:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005996:	4b2f      	ldr	r3, [pc, #188]	; (8005a54 <HAL_FLASH_Program+0xd8>)
 8005998:	7e1b      	ldrb	r3, [r3, #24]
 800599a:	2b01      	cmp	r3, #1
 800599c:	d101      	bne.n	80059a2 <HAL_FLASH_Program+0x26>
 800599e:	2302      	movs	r3, #2
 80059a0:	e054      	b.n	8005a4c <HAL_FLASH_Program+0xd0>
 80059a2:	4b2c      	ldr	r3, [pc, #176]	; (8005a54 <HAL_FLASH_Program+0xd8>)
 80059a4:	2201      	movs	r2, #1
 80059a6:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80059a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80059ac:	f000 f8a8 	bl	8005b00 <FLASH_WaitForLastOperation>
 80059b0:	4603      	mov	r3, r0
 80059b2:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80059b4:	7dfb      	ldrb	r3, [r7, #23]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d144      	bne.n	8005a44 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d102      	bne.n	80059c6 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80059c0:	2301      	movs	r3, #1
 80059c2:	757b      	strb	r3, [r7, #21]
 80059c4:	e007      	b.n	80059d6 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d102      	bne.n	80059d2 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80059cc:	2302      	movs	r3, #2
 80059ce:	757b      	strb	r3, [r7, #21]
 80059d0:	e001      	b.n	80059d6 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80059d2:	2304      	movs	r3, #4
 80059d4:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80059d6:	2300      	movs	r3, #0
 80059d8:	75bb      	strb	r3, [r7, #22]
 80059da:	e02d      	b.n	8005a38 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80059dc:	7dbb      	ldrb	r3, [r7, #22]
 80059de:	005a      	lsls	r2, r3, #1
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	eb02 0c03 	add.w	ip, r2, r3
 80059e6:	7dbb      	ldrb	r3, [r7, #22]
 80059e8:	0119      	lsls	r1, r3, #4
 80059ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059ee:	f1c1 0620 	rsb	r6, r1, #32
 80059f2:	f1a1 0020 	sub.w	r0, r1, #32
 80059f6:	fa22 f401 	lsr.w	r4, r2, r1
 80059fa:	fa03 f606 	lsl.w	r6, r3, r6
 80059fe:	4334      	orrs	r4, r6
 8005a00:	fa23 f000 	lsr.w	r0, r3, r0
 8005a04:	4304      	orrs	r4, r0
 8005a06:	fa23 f501 	lsr.w	r5, r3, r1
 8005a0a:	b2a3      	uxth	r3, r4
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	4660      	mov	r0, ip
 8005a10:	f000 f85a 	bl	8005ac8 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005a14:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005a18:	f000 f872 	bl	8005b00 <FLASH_WaitForLastOperation>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8005a20:	4b0d      	ldr	r3, [pc, #52]	; (8005a58 <HAL_FLASH_Program+0xdc>)
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	4a0c      	ldr	r2, [pc, #48]	; (8005a58 <HAL_FLASH_Program+0xdc>)
 8005a26:	f023 0301 	bic.w	r3, r3, #1
 8005a2a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8005a2c:	7dfb      	ldrb	r3, [r7, #23]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d107      	bne.n	8005a42 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8005a32:	7dbb      	ldrb	r3, [r7, #22]
 8005a34:	3301      	adds	r3, #1
 8005a36:	75bb      	strb	r3, [r7, #22]
 8005a38:	7dba      	ldrb	r2, [r7, #22]
 8005a3a:	7d7b      	ldrb	r3, [r7, #21]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d3cd      	bcc.n	80059dc <HAL_FLASH_Program+0x60>
 8005a40:	e000      	b.n	8005a44 <HAL_FLASH_Program+0xc8>
      {
        break;
 8005a42:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005a44:	4b03      	ldr	r3, [pc, #12]	; (8005a54 <HAL_FLASH_Program+0xd8>)
 8005a46:	2200      	movs	r2, #0
 8005a48:	761a      	strb	r2, [r3, #24]

  return status;
 8005a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	371c      	adds	r7, #28
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a54:	20000088 	.word	0x20000088
 8005a58:	40022000 	.word	0x40022000

08005a5c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005a62:	2300      	movs	r3, #0
 8005a64:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005a66:	4b0d      	ldr	r3, [pc, #52]	; (8005a9c <HAL_FLASH_Unlock+0x40>)
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00d      	beq.n	8005a8e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005a72:	4b0a      	ldr	r3, [pc, #40]	; (8005a9c <HAL_FLASH_Unlock+0x40>)
 8005a74:	4a0a      	ldr	r2, [pc, #40]	; (8005aa0 <HAL_FLASH_Unlock+0x44>)
 8005a76:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005a78:	4b08      	ldr	r3, [pc, #32]	; (8005a9c <HAL_FLASH_Unlock+0x40>)
 8005a7a:	4a0a      	ldr	r2, [pc, #40]	; (8005aa4 <HAL_FLASH_Unlock+0x48>)
 8005a7c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005a7e:	4b07      	ldr	r3, [pc, #28]	; (8005a9c <HAL_FLASH_Unlock+0x40>)
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d001      	beq.n	8005a8e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8005a8e:	79fb      	ldrb	r3, [r7, #7]
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bc80      	pop	{r7}
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	40022000 	.word	0x40022000
 8005aa0:	45670123 	.word	0x45670123
 8005aa4:	cdef89ab 	.word	0xcdef89ab

08005aa8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005aac:	4b05      	ldr	r3, [pc, #20]	; (8005ac4 <HAL_FLASH_Lock+0x1c>)
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	4a04      	ldr	r2, [pc, #16]	; (8005ac4 <HAL_FLASH_Lock+0x1c>)
 8005ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ab6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bc80      	pop	{r7}
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	40022000 	.word	0x40022000

08005ac8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005ad4:	4b08      	ldr	r3, [pc, #32]	; (8005af8 <FLASH_Program_HalfWord+0x30>)
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005ada:	4b08      	ldr	r3, [pc, #32]	; (8005afc <FLASH_Program_HalfWord+0x34>)
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	4a07      	ldr	r2, [pc, #28]	; (8005afc <FLASH_Program_HalfWord+0x34>)
 8005ae0:	f043 0301 	orr.w	r3, r3, #1
 8005ae4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	887a      	ldrh	r2, [r7, #2]
 8005aea:	801a      	strh	r2, [r3, #0]
}
 8005aec:	bf00      	nop
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bc80      	pop	{r7}
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	20000088 	.word	0x20000088
 8005afc:	40022000 	.word	0x40022000

08005b00 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8005b08:	f7ff fe0c 	bl	8005724 <HAL_GetTick>
 8005b0c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005b0e:	e010      	b.n	8005b32 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b16:	d00c      	beq.n	8005b32 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d007      	beq.n	8005b2e <FLASH_WaitForLastOperation+0x2e>
 8005b1e:	f7ff fe01 	bl	8005724 <HAL_GetTick>
 8005b22:	4602      	mov	r2, r0
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	1ad3      	subs	r3, r2, r3
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d201      	bcs.n	8005b32 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e025      	b.n	8005b7e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005b32:	4b15      	ldr	r3, [pc, #84]	; (8005b88 <FLASH_WaitForLastOperation+0x88>)
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d1e8      	bne.n	8005b10 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005b3e:	4b12      	ldr	r3, [pc, #72]	; (8005b88 <FLASH_WaitForLastOperation+0x88>)
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	f003 0320 	and.w	r3, r3, #32
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d002      	beq.n	8005b50 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005b4a:	4b0f      	ldr	r3, [pc, #60]	; (8005b88 <FLASH_WaitForLastOperation+0x88>)
 8005b4c:	2220      	movs	r2, #32
 8005b4e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005b50:	4b0d      	ldr	r3, [pc, #52]	; (8005b88 <FLASH_WaitForLastOperation+0x88>)
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	f003 0310 	and.w	r3, r3, #16
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d10b      	bne.n	8005b74 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8005b5c:	4b0a      	ldr	r3, [pc, #40]	; (8005b88 <FLASH_WaitForLastOperation+0x88>)
 8005b5e:	69db      	ldr	r3, [r3, #28]
 8005b60:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d105      	bne.n	8005b74 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005b68:	4b07      	ldr	r3, [pc, #28]	; (8005b88 <FLASH_WaitForLastOperation+0x88>)
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d003      	beq.n	8005b7c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005b74:	f000 f80a 	bl	8005b8c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e000      	b.n	8005b7e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3710      	adds	r7, #16
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	40022000 	.word	0x40022000

08005b8c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8005b92:	2300      	movs	r3, #0
 8005b94:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8005b96:	4b23      	ldr	r3, [pc, #140]	; (8005c24 <FLASH_SetErrorCode+0x98>)
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	f003 0310 	and.w	r3, r3, #16
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d009      	beq.n	8005bb6 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005ba2:	4b21      	ldr	r3, [pc, #132]	; (8005c28 <FLASH_SetErrorCode+0x9c>)
 8005ba4:	69db      	ldr	r3, [r3, #28]
 8005ba6:	f043 0302 	orr.w	r3, r3, #2
 8005baa:	4a1f      	ldr	r2, [pc, #124]	; (8005c28 <FLASH_SetErrorCode+0x9c>)
 8005bac:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f043 0310 	orr.w	r3, r3, #16
 8005bb4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005bb6:	4b1b      	ldr	r3, [pc, #108]	; (8005c24 <FLASH_SetErrorCode+0x98>)
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	f003 0304 	and.w	r3, r3, #4
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d009      	beq.n	8005bd6 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8005bc2:	4b19      	ldr	r3, [pc, #100]	; (8005c28 <FLASH_SetErrorCode+0x9c>)
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	f043 0301 	orr.w	r3, r3, #1
 8005bca:	4a17      	ldr	r2, [pc, #92]	; (8005c28 <FLASH_SetErrorCode+0x9c>)
 8005bcc:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f043 0304 	orr.w	r3, r3, #4
 8005bd4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8005bd6:	4b13      	ldr	r3, [pc, #76]	; (8005c24 <FLASH_SetErrorCode+0x98>)
 8005bd8:	69db      	ldr	r3, [r3, #28]
 8005bda:	f003 0301 	and.w	r3, r3, #1
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00b      	beq.n	8005bfa <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8005be2:	4b11      	ldr	r3, [pc, #68]	; (8005c28 <FLASH_SetErrorCode+0x9c>)
 8005be4:	69db      	ldr	r3, [r3, #28]
 8005be6:	f043 0304 	orr.w	r3, r3, #4
 8005bea:	4a0f      	ldr	r2, [pc, #60]	; (8005c28 <FLASH_SetErrorCode+0x9c>)
 8005bec:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8005bee:	4b0d      	ldr	r3, [pc, #52]	; (8005c24 <FLASH_SetErrorCode+0x98>)
 8005bf0:	69db      	ldr	r3, [r3, #28]
 8005bf2:	4a0c      	ldr	r2, [pc, #48]	; (8005c24 <FLASH_SetErrorCode+0x98>)
 8005bf4:	f023 0301 	bic.w	r3, r3, #1
 8005bf8:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f240 1201 	movw	r2, #257	; 0x101
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d106      	bne.n	8005c12 <FLASH_SetErrorCode+0x86>
 8005c04:	4b07      	ldr	r3, [pc, #28]	; (8005c24 <FLASH_SetErrorCode+0x98>)
 8005c06:	69db      	ldr	r3, [r3, #28]
 8005c08:	4a06      	ldr	r2, [pc, #24]	; (8005c24 <FLASH_SetErrorCode+0x98>)
 8005c0a:	f023 0301 	bic.w	r3, r3, #1
 8005c0e:	61d3      	str	r3, [r2, #28]
}  
 8005c10:	e002      	b.n	8005c18 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8005c12:	4a04      	ldr	r2, [pc, #16]	; (8005c24 <FLASH_SetErrorCode+0x98>)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	60d3      	str	r3, [r2, #12]
}  
 8005c18:	bf00      	nop
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bc80      	pop	{r7}
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	40022000 	.word	0x40022000
 8005c28:	20000088 	.word	0x20000088

08005c2c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005c3e:	4b2f      	ldr	r3, [pc, #188]	; (8005cfc <HAL_FLASHEx_Erase+0xd0>)
 8005c40:	7e1b      	ldrb	r3, [r3, #24]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d101      	bne.n	8005c4a <HAL_FLASHEx_Erase+0x1e>
 8005c46:	2302      	movs	r3, #2
 8005c48:	e053      	b.n	8005cf2 <HAL_FLASHEx_Erase+0xc6>
 8005c4a:	4b2c      	ldr	r3, [pc, #176]	; (8005cfc <HAL_FLASHEx_Erase+0xd0>)
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d116      	bne.n	8005c86 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005c58:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005c5c:	f7ff ff50 	bl	8005b00 <FLASH_WaitForLastOperation>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d141      	bne.n	8005cea <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8005c66:	2001      	movs	r0, #1
 8005c68:	f000 f84c 	bl	8005d04 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005c6c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005c70:	f7ff ff46 	bl	8005b00 <FLASH_WaitForLastOperation>
 8005c74:	4603      	mov	r3, r0
 8005c76:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8005c78:	4b21      	ldr	r3, [pc, #132]	; (8005d00 <HAL_FLASHEx_Erase+0xd4>)
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	4a20      	ldr	r2, [pc, #128]	; (8005d00 <HAL_FLASHEx_Erase+0xd4>)
 8005c7e:	f023 0304 	bic.w	r3, r3, #4
 8005c82:	6113      	str	r3, [r2, #16]
 8005c84:	e031      	b.n	8005cea <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005c86:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005c8a:	f7ff ff39 	bl	8005b00 <FLASH_WaitForLastOperation>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d12a      	bne.n	8005cea <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	f04f 32ff 	mov.w	r2, #4294967295
 8005c9a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	60bb      	str	r3, [r7, #8]
 8005ca2:	e019      	b.n	8005cd8 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8005ca4:	68b8      	ldr	r0, [r7, #8]
 8005ca6:	f000 f849 	bl	8005d3c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005caa:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005cae:	f7ff ff27 	bl	8005b00 <FLASH_WaitForLastOperation>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8005cb6:	4b12      	ldr	r3, [pc, #72]	; (8005d00 <HAL_FLASHEx_Erase+0xd4>)
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	4a11      	ldr	r2, [pc, #68]	; (8005d00 <HAL_FLASHEx_Erase+0xd4>)
 8005cbc:	f023 0302 	bic.w	r3, r3, #2
 8005cc0:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8005cc2:	7bfb      	ldrb	r3, [r7, #15]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d003      	beq.n	8005cd0 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	601a      	str	r2, [r3, #0]
            break;
 8005cce:	e00c      	b.n	8005cea <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cd6:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	029a      	lsls	r2, r3, #10
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	68ba      	ldr	r2, [r7, #8]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d3dc      	bcc.n	8005ca4 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005cea:	4b04      	ldr	r3, [pc, #16]	; (8005cfc <HAL_FLASHEx_Erase+0xd0>)
 8005cec:	2200      	movs	r2, #0
 8005cee:	761a      	strb	r2, [r3, #24]

  return status;
 8005cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3710      	adds	r7, #16
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	20000088 	.word	0x20000088
 8005d00:	40022000 	.word	0x40022000

08005d04 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005d0c:	4b09      	ldr	r3, [pc, #36]	; (8005d34 <FLASH_MassErase+0x30>)
 8005d0e:	2200      	movs	r2, #0
 8005d10:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8005d12:	4b09      	ldr	r3, [pc, #36]	; (8005d38 <FLASH_MassErase+0x34>)
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	4a08      	ldr	r2, [pc, #32]	; (8005d38 <FLASH_MassErase+0x34>)
 8005d18:	f043 0304 	orr.w	r3, r3, #4
 8005d1c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005d1e:	4b06      	ldr	r3, [pc, #24]	; (8005d38 <FLASH_MassErase+0x34>)
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	4a05      	ldr	r2, [pc, #20]	; (8005d38 <FLASH_MassErase+0x34>)
 8005d24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d28:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8005d2a:	bf00      	nop
 8005d2c:	370c      	adds	r7, #12
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bc80      	pop	{r7}
 8005d32:	4770      	bx	lr
 8005d34:	20000088 	.word	0x20000088
 8005d38:	40022000 	.word	0x40022000

08005d3c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005d44:	4b0b      	ldr	r3, [pc, #44]	; (8005d74 <FLASH_PageErase+0x38>)
 8005d46:	2200      	movs	r2, #0
 8005d48:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8005d4a:	4b0b      	ldr	r3, [pc, #44]	; (8005d78 <FLASH_PageErase+0x3c>)
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	4a0a      	ldr	r2, [pc, #40]	; (8005d78 <FLASH_PageErase+0x3c>)
 8005d50:	f043 0302 	orr.w	r3, r3, #2
 8005d54:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8005d56:	4a08      	ldr	r2, [pc, #32]	; (8005d78 <FLASH_PageErase+0x3c>)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005d5c:	4b06      	ldr	r3, [pc, #24]	; (8005d78 <FLASH_PageErase+0x3c>)
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	4a05      	ldr	r2, [pc, #20]	; (8005d78 <FLASH_PageErase+0x3c>)
 8005d62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d66:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bc80      	pop	{r7}
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	20000088 	.word	0x20000088
 8005d78:	40022000 	.word	0x40022000

08005d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b08b      	sub	sp, #44	; 0x2c
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005d86:	2300      	movs	r3, #0
 8005d88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005d8e:	e169      	b.n	8006064 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005d90:	2201      	movs	r2, #1
 8005d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d94:	fa02 f303 	lsl.w	r3, r2, r3
 8005d98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	69fa      	ldr	r2, [r7, #28]
 8005da0:	4013      	ands	r3, r2
 8005da2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005da4:	69ba      	ldr	r2, [r7, #24]
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	f040 8158 	bne.w	800605e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	4a9a      	ldr	r2, [pc, #616]	; (800601c <HAL_GPIO_Init+0x2a0>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d05e      	beq.n	8005e76 <HAL_GPIO_Init+0xfa>
 8005db8:	4a98      	ldr	r2, [pc, #608]	; (800601c <HAL_GPIO_Init+0x2a0>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d875      	bhi.n	8005eaa <HAL_GPIO_Init+0x12e>
 8005dbe:	4a98      	ldr	r2, [pc, #608]	; (8006020 <HAL_GPIO_Init+0x2a4>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d058      	beq.n	8005e76 <HAL_GPIO_Init+0xfa>
 8005dc4:	4a96      	ldr	r2, [pc, #600]	; (8006020 <HAL_GPIO_Init+0x2a4>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d86f      	bhi.n	8005eaa <HAL_GPIO_Init+0x12e>
 8005dca:	4a96      	ldr	r2, [pc, #600]	; (8006024 <HAL_GPIO_Init+0x2a8>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d052      	beq.n	8005e76 <HAL_GPIO_Init+0xfa>
 8005dd0:	4a94      	ldr	r2, [pc, #592]	; (8006024 <HAL_GPIO_Init+0x2a8>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d869      	bhi.n	8005eaa <HAL_GPIO_Init+0x12e>
 8005dd6:	4a94      	ldr	r2, [pc, #592]	; (8006028 <HAL_GPIO_Init+0x2ac>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d04c      	beq.n	8005e76 <HAL_GPIO_Init+0xfa>
 8005ddc:	4a92      	ldr	r2, [pc, #584]	; (8006028 <HAL_GPIO_Init+0x2ac>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d863      	bhi.n	8005eaa <HAL_GPIO_Init+0x12e>
 8005de2:	4a92      	ldr	r2, [pc, #584]	; (800602c <HAL_GPIO_Init+0x2b0>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d046      	beq.n	8005e76 <HAL_GPIO_Init+0xfa>
 8005de8:	4a90      	ldr	r2, [pc, #576]	; (800602c <HAL_GPIO_Init+0x2b0>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d85d      	bhi.n	8005eaa <HAL_GPIO_Init+0x12e>
 8005dee:	2b12      	cmp	r3, #18
 8005df0:	d82a      	bhi.n	8005e48 <HAL_GPIO_Init+0xcc>
 8005df2:	2b12      	cmp	r3, #18
 8005df4:	d859      	bhi.n	8005eaa <HAL_GPIO_Init+0x12e>
 8005df6:	a201      	add	r2, pc, #4	; (adr r2, 8005dfc <HAL_GPIO_Init+0x80>)
 8005df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dfc:	08005e77 	.word	0x08005e77
 8005e00:	08005e51 	.word	0x08005e51
 8005e04:	08005e63 	.word	0x08005e63
 8005e08:	08005ea5 	.word	0x08005ea5
 8005e0c:	08005eab 	.word	0x08005eab
 8005e10:	08005eab 	.word	0x08005eab
 8005e14:	08005eab 	.word	0x08005eab
 8005e18:	08005eab 	.word	0x08005eab
 8005e1c:	08005eab 	.word	0x08005eab
 8005e20:	08005eab 	.word	0x08005eab
 8005e24:	08005eab 	.word	0x08005eab
 8005e28:	08005eab 	.word	0x08005eab
 8005e2c:	08005eab 	.word	0x08005eab
 8005e30:	08005eab 	.word	0x08005eab
 8005e34:	08005eab 	.word	0x08005eab
 8005e38:	08005eab 	.word	0x08005eab
 8005e3c:	08005eab 	.word	0x08005eab
 8005e40:	08005e59 	.word	0x08005e59
 8005e44:	08005e6d 	.word	0x08005e6d
 8005e48:	4a79      	ldr	r2, [pc, #484]	; (8006030 <HAL_GPIO_Init+0x2b4>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d013      	beq.n	8005e76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005e4e:	e02c      	b.n	8005eaa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	623b      	str	r3, [r7, #32]
          break;
 8005e56:	e029      	b.n	8005eac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	3304      	adds	r3, #4
 8005e5e:	623b      	str	r3, [r7, #32]
          break;
 8005e60:	e024      	b.n	8005eac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	3308      	adds	r3, #8
 8005e68:	623b      	str	r3, [r7, #32]
          break;
 8005e6a:	e01f      	b.n	8005eac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	330c      	adds	r3, #12
 8005e72:	623b      	str	r3, [r7, #32]
          break;
 8005e74:	e01a      	b.n	8005eac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d102      	bne.n	8005e84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005e7e:	2304      	movs	r3, #4
 8005e80:	623b      	str	r3, [r7, #32]
          break;
 8005e82:	e013      	b.n	8005eac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d105      	bne.n	8005e98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005e8c:	2308      	movs	r3, #8
 8005e8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	69fa      	ldr	r2, [r7, #28]
 8005e94:	611a      	str	r2, [r3, #16]
          break;
 8005e96:	e009      	b.n	8005eac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005e98:	2308      	movs	r3, #8
 8005e9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	69fa      	ldr	r2, [r7, #28]
 8005ea0:	615a      	str	r2, [r3, #20]
          break;
 8005ea2:	e003      	b.n	8005eac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	623b      	str	r3, [r7, #32]
          break;
 8005ea8:	e000      	b.n	8005eac <HAL_GPIO_Init+0x130>
          break;
 8005eaa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	2bff      	cmp	r3, #255	; 0xff
 8005eb0:	d801      	bhi.n	8005eb6 <HAL_GPIO_Init+0x13a>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	e001      	b.n	8005eba <HAL_GPIO_Init+0x13e>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	3304      	adds	r3, #4
 8005eba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	2bff      	cmp	r3, #255	; 0xff
 8005ec0:	d802      	bhi.n	8005ec8 <HAL_GPIO_Init+0x14c>
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	e002      	b.n	8005ece <HAL_GPIO_Init+0x152>
 8005ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eca:	3b08      	subs	r3, #8
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	210f      	movs	r1, #15
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8005edc:	43db      	mvns	r3, r3
 8005ede:	401a      	ands	r2, r3
 8005ee0:	6a39      	ldr	r1, [r7, #32]
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ee8:	431a      	orrs	r2, r3
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	f000 80b1 	beq.w	800605e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005efc:	4b4d      	ldr	r3, [pc, #308]	; (8006034 <HAL_GPIO_Init+0x2b8>)
 8005efe:	699b      	ldr	r3, [r3, #24]
 8005f00:	4a4c      	ldr	r2, [pc, #304]	; (8006034 <HAL_GPIO_Init+0x2b8>)
 8005f02:	f043 0301 	orr.w	r3, r3, #1
 8005f06:	6193      	str	r3, [r2, #24]
 8005f08:	4b4a      	ldr	r3, [pc, #296]	; (8006034 <HAL_GPIO_Init+0x2b8>)
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	f003 0301 	and.w	r3, r3, #1
 8005f10:	60bb      	str	r3, [r7, #8]
 8005f12:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005f14:	4a48      	ldr	r2, [pc, #288]	; (8006038 <HAL_GPIO_Init+0x2bc>)
 8005f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f18:	089b      	lsrs	r3, r3, #2
 8005f1a:	3302      	adds	r3, #2
 8005f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f20:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f24:	f003 0303 	and.w	r3, r3, #3
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	220f      	movs	r2, #15
 8005f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f30:	43db      	mvns	r3, r3
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	4013      	ands	r3, r2
 8005f36:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a40      	ldr	r2, [pc, #256]	; (800603c <HAL_GPIO_Init+0x2c0>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d013      	beq.n	8005f68 <HAL_GPIO_Init+0x1ec>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a3f      	ldr	r2, [pc, #252]	; (8006040 <HAL_GPIO_Init+0x2c4>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d00d      	beq.n	8005f64 <HAL_GPIO_Init+0x1e8>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a3e      	ldr	r2, [pc, #248]	; (8006044 <HAL_GPIO_Init+0x2c8>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d007      	beq.n	8005f60 <HAL_GPIO_Init+0x1e4>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a3d      	ldr	r2, [pc, #244]	; (8006048 <HAL_GPIO_Init+0x2cc>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d101      	bne.n	8005f5c <HAL_GPIO_Init+0x1e0>
 8005f58:	2303      	movs	r3, #3
 8005f5a:	e006      	b.n	8005f6a <HAL_GPIO_Init+0x1ee>
 8005f5c:	2304      	movs	r3, #4
 8005f5e:	e004      	b.n	8005f6a <HAL_GPIO_Init+0x1ee>
 8005f60:	2302      	movs	r3, #2
 8005f62:	e002      	b.n	8005f6a <HAL_GPIO_Init+0x1ee>
 8005f64:	2301      	movs	r3, #1
 8005f66:	e000      	b.n	8005f6a <HAL_GPIO_Init+0x1ee>
 8005f68:	2300      	movs	r3, #0
 8005f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f6c:	f002 0203 	and.w	r2, r2, #3
 8005f70:	0092      	lsls	r2, r2, #2
 8005f72:	4093      	lsls	r3, r2
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005f7a:	492f      	ldr	r1, [pc, #188]	; (8006038 <HAL_GPIO_Init+0x2bc>)
 8005f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7e:	089b      	lsrs	r3, r3, #2
 8005f80:	3302      	adds	r3, #2
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d006      	beq.n	8005fa2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005f94:	4b2d      	ldr	r3, [pc, #180]	; (800604c <HAL_GPIO_Init+0x2d0>)
 8005f96:	689a      	ldr	r2, [r3, #8]
 8005f98:	492c      	ldr	r1, [pc, #176]	; (800604c <HAL_GPIO_Init+0x2d0>)
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	608b      	str	r3, [r1, #8]
 8005fa0:	e006      	b.n	8005fb0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005fa2:	4b2a      	ldr	r3, [pc, #168]	; (800604c <HAL_GPIO_Init+0x2d0>)
 8005fa4:	689a      	ldr	r2, [r3, #8]
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	43db      	mvns	r3, r3
 8005faa:	4928      	ldr	r1, [pc, #160]	; (800604c <HAL_GPIO_Init+0x2d0>)
 8005fac:	4013      	ands	r3, r2
 8005fae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d006      	beq.n	8005fca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005fbc:	4b23      	ldr	r3, [pc, #140]	; (800604c <HAL_GPIO_Init+0x2d0>)
 8005fbe:	68da      	ldr	r2, [r3, #12]
 8005fc0:	4922      	ldr	r1, [pc, #136]	; (800604c <HAL_GPIO_Init+0x2d0>)
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	60cb      	str	r3, [r1, #12]
 8005fc8:	e006      	b.n	8005fd8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005fca:	4b20      	ldr	r3, [pc, #128]	; (800604c <HAL_GPIO_Init+0x2d0>)
 8005fcc:	68da      	ldr	r2, [r3, #12]
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	43db      	mvns	r3, r3
 8005fd2:	491e      	ldr	r1, [pc, #120]	; (800604c <HAL_GPIO_Init+0x2d0>)
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d006      	beq.n	8005ff2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005fe4:	4b19      	ldr	r3, [pc, #100]	; (800604c <HAL_GPIO_Init+0x2d0>)
 8005fe6:	685a      	ldr	r2, [r3, #4]
 8005fe8:	4918      	ldr	r1, [pc, #96]	; (800604c <HAL_GPIO_Init+0x2d0>)
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	604b      	str	r3, [r1, #4]
 8005ff0:	e006      	b.n	8006000 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005ff2:	4b16      	ldr	r3, [pc, #88]	; (800604c <HAL_GPIO_Init+0x2d0>)
 8005ff4:	685a      	ldr	r2, [r3, #4]
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	43db      	mvns	r3, r3
 8005ffa:	4914      	ldr	r1, [pc, #80]	; (800604c <HAL_GPIO_Init+0x2d0>)
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006008:	2b00      	cmp	r3, #0
 800600a:	d021      	beq.n	8006050 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800600c:	4b0f      	ldr	r3, [pc, #60]	; (800604c <HAL_GPIO_Init+0x2d0>)
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	490e      	ldr	r1, [pc, #56]	; (800604c <HAL_GPIO_Init+0x2d0>)
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	4313      	orrs	r3, r2
 8006016:	600b      	str	r3, [r1, #0]
 8006018:	e021      	b.n	800605e <HAL_GPIO_Init+0x2e2>
 800601a:	bf00      	nop
 800601c:	10320000 	.word	0x10320000
 8006020:	10310000 	.word	0x10310000
 8006024:	10220000 	.word	0x10220000
 8006028:	10210000 	.word	0x10210000
 800602c:	10120000 	.word	0x10120000
 8006030:	10110000 	.word	0x10110000
 8006034:	40021000 	.word	0x40021000
 8006038:	40010000 	.word	0x40010000
 800603c:	40010800 	.word	0x40010800
 8006040:	40010c00 	.word	0x40010c00
 8006044:	40011000 	.word	0x40011000
 8006048:	40011400 	.word	0x40011400
 800604c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006050:	4b0b      	ldr	r3, [pc, #44]	; (8006080 <HAL_GPIO_Init+0x304>)
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	43db      	mvns	r3, r3
 8006058:	4909      	ldr	r1, [pc, #36]	; (8006080 <HAL_GPIO_Init+0x304>)
 800605a:	4013      	ands	r3, r2
 800605c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800605e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006060:	3301      	adds	r3, #1
 8006062:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606a:	fa22 f303 	lsr.w	r3, r2, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	f47f ae8e 	bne.w	8005d90 <HAL_GPIO_Init+0x14>
  }
}
 8006074:	bf00      	nop
 8006076:	bf00      	nop
 8006078:	372c      	adds	r7, #44	; 0x2c
 800607a:	46bd      	mov	sp, r7
 800607c:	bc80      	pop	{r7}
 800607e:	4770      	bx	lr
 8006080:	40010400 	.word	0x40010400

08006084 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	460b      	mov	r3, r1
 800608e:	807b      	strh	r3, [r7, #2]
 8006090:	4613      	mov	r3, r2
 8006092:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006094:	787b      	ldrb	r3, [r7, #1]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d003      	beq.n	80060a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800609a:	887a      	ldrh	r2, [r7, #2]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80060a0:	e003      	b.n	80060aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80060a2:	887b      	ldrh	r3, [r7, #2]
 80060a4:	041a      	lsls	r2, r3, #16
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	611a      	str	r2, [r3, #16]
}
 80060aa:	bf00      	nop
 80060ac:	370c      	adds	r7, #12
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bc80      	pop	{r7}
 80060b2:	4770      	bx	lr

080060b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d101      	bne.n	80060c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e272      	b.n	80065ac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 0301 	and.w	r3, r3, #1
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	f000 8087 	beq.w	80061e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80060d4:	4b92      	ldr	r3, [pc, #584]	; (8006320 <HAL_RCC_OscConfig+0x26c>)
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	f003 030c 	and.w	r3, r3, #12
 80060dc:	2b04      	cmp	r3, #4
 80060de:	d00c      	beq.n	80060fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80060e0:	4b8f      	ldr	r3, [pc, #572]	; (8006320 <HAL_RCC_OscConfig+0x26c>)
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	f003 030c 	and.w	r3, r3, #12
 80060e8:	2b08      	cmp	r3, #8
 80060ea:	d112      	bne.n	8006112 <HAL_RCC_OscConfig+0x5e>
 80060ec:	4b8c      	ldr	r3, [pc, #560]	; (8006320 <HAL_RCC_OscConfig+0x26c>)
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060f8:	d10b      	bne.n	8006112 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060fa:	4b89      	ldr	r3, [pc, #548]	; (8006320 <HAL_RCC_OscConfig+0x26c>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d06c      	beq.n	80061e0 <HAL_RCC_OscConfig+0x12c>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d168      	bne.n	80061e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e24c      	b.n	80065ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800611a:	d106      	bne.n	800612a <HAL_RCC_OscConfig+0x76>
 800611c:	4b80      	ldr	r3, [pc, #512]	; (8006320 <HAL_RCC_OscConfig+0x26c>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a7f      	ldr	r2, [pc, #508]	; (8006320 <HAL_RCC_OscConfig+0x26c>)
 8006122:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006126:	6013      	str	r3, [r2, #0]
 8006128:	e02e      	b.n	8006188 <HAL_RCC_OscConfig+0xd4>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d10c      	bne.n	800614c <HAL_RCC_OscConfig+0x98>
 8006132:	4b7b      	ldr	r3, [pc, #492]	; (8006320 <HAL_RCC_OscConfig+0x26c>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a7a      	ldr	r2, [pc, #488]	; (8006320 <HAL_RCC_OscConfig+0x26c>)
 8006138:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800613c:	6013      	str	r3, [r2, #0]
 800613e:	4b78      	ldr	r3, [pc, #480]	; (8006320 <HAL_RCC_OscConfig+0x26c>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a77      	ldr	r2, [pc, #476]	; (8006320 <HAL_RCC_OscConfig+0x26c>)
 8006144:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006148:	6013      	str	r3, [r2, #0]
 800614a:	e01d      	b.n	8006188 <HAL_RCC_OscConfig+0xd4>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006154:	d10c      	bne.n	8006170 <HAL_RCC_OscConfig+0xbc>
 8006156:	4b72      	ldr	r3, [pc, #456]	; (8006320 <HAL_RCC_OscConfig+0x26c>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a71      	ldr	r2, [pc, #452]	; (8006320 <HAL_RCC_OscConfig+0x26c>)
 800615c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006160:	6013      	str	r3, [r2, #0]
 8006162:	4b6f      	ldr	r3, [pc, #444]	; (8006320 <HAL_RCC_OscConfig+0x26c>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a6e      	ldr	r2, [pc, #440]	; (8006320 <HAL_RCC_OscConfig+0x26c>)
 8006168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800616c:	6013      	str	r3, [r2, #0]
 800616e:	e00b      	b.n	8006188 <HAL_RCC_OscConfig+0xd4>
 8006170:	4b6b      	ldr	r3, [pc, #428]	; (8006320 <HAL_RCC_OscConfig+0x26c>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a6a      	ldr	r2, [pc, #424]	; (8006320 <HAL_RCC_OscConfig+0x26c>)
 8006176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800617a:	6013      	str	r3, [r2, #0]
 800617c:	4b68      	ldr	r3, [pc, #416]	; (8006320 <HAL_RCC_OscConfig+0x26c>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a67      	ldr	r2, [pc, #412]	; (8006320 <HAL_RCC_OscConfig+0x26c>)
 8006182:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006186:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d013      	beq.n	80061b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006190:	f7ff fac8 	bl	8005724 <HAL_GetTick>
 8006194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006196:	e008      	b.n	80061aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006198:	f7ff fac4 	bl	8005724 <HAL_GetTick>
 800619c:	4602      	mov	r2, r0
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	2b64      	cmp	r3, #100	; 0x64
 80061a4:	d901      	bls.n	80061aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e200      	b.n	80065ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061aa:	4b5d      	ldr	r3, [pc, #372]	; (8006320 <HAL_RCC_OscConfig+0x26c>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d0f0      	beq.n	8006198 <HAL_RCC_OscConfig+0xe4>
 80061b6:	e014      	b.n	80061e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061b8:	f7ff fab4 	bl	8005724 <HAL_GetTick>
 80061bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061be:	e008      	b.n	80061d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061c0:	f7ff fab0 	bl	8005724 <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	2b64      	cmp	r3, #100	; 0x64
 80061cc:	d901      	bls.n	80061d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e1ec      	b.n	80065ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061d2:	4b53      	ldr	r3, [pc, #332]	; (8006320 <HAL_RCC_OscConfig+0x26c>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1f0      	bne.n	80061c0 <HAL_RCC_OscConfig+0x10c>
 80061de:	e000      	b.n	80061e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 0302 	and.w	r3, r3, #2
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d063      	beq.n	80062b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80061ee:	4b4c      	ldr	r3, [pc, #304]	; (8006320 <HAL_RCC_OscConfig+0x26c>)
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	f003 030c 	and.w	r3, r3, #12
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00b      	beq.n	8006212 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80061fa:	4b49      	ldr	r3, [pc, #292]	; (8006320 <HAL_RCC_OscConfig+0x26c>)
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	f003 030c 	and.w	r3, r3, #12
 8006202:	2b08      	cmp	r3, #8
 8006204:	d11c      	bne.n	8006240 <HAL_RCC_OscConfig+0x18c>
 8006206:	4b46      	ldr	r3, [pc, #280]	; (8006320 <HAL_RCC_OscConfig+0x26c>)
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800620e:	2b00      	cmp	r3, #0
 8006210:	d116      	bne.n	8006240 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006212:	4b43      	ldr	r3, [pc, #268]	; (8006320 <HAL_RCC_OscConfig+0x26c>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 0302 	and.w	r3, r3, #2
 800621a:	2b00      	cmp	r3, #0
 800621c:	d005      	beq.n	800622a <HAL_RCC_OscConfig+0x176>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	2b01      	cmp	r3, #1
 8006224:	d001      	beq.n	800622a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e1c0      	b.n	80065ac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800622a:	4b3d      	ldr	r3, [pc, #244]	; (8006320 <HAL_RCC_OscConfig+0x26c>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	695b      	ldr	r3, [r3, #20]
 8006236:	00db      	lsls	r3, r3, #3
 8006238:	4939      	ldr	r1, [pc, #228]	; (8006320 <HAL_RCC_OscConfig+0x26c>)
 800623a:	4313      	orrs	r3, r2
 800623c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800623e:	e03a      	b.n	80062b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d020      	beq.n	800628a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006248:	4b36      	ldr	r3, [pc, #216]	; (8006324 <HAL_RCC_OscConfig+0x270>)
 800624a:	2201      	movs	r2, #1
 800624c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800624e:	f7ff fa69 	bl	8005724 <HAL_GetTick>
 8006252:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006254:	e008      	b.n	8006268 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006256:	f7ff fa65 	bl	8005724 <HAL_GetTick>
 800625a:	4602      	mov	r2, r0
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	2b02      	cmp	r3, #2
 8006262:	d901      	bls.n	8006268 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	e1a1      	b.n	80065ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006268:	4b2d      	ldr	r3, [pc, #180]	; (8006320 <HAL_RCC_OscConfig+0x26c>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 0302 	and.w	r3, r3, #2
 8006270:	2b00      	cmp	r3, #0
 8006272:	d0f0      	beq.n	8006256 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006274:	4b2a      	ldr	r3, [pc, #168]	; (8006320 <HAL_RCC_OscConfig+0x26c>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	695b      	ldr	r3, [r3, #20]
 8006280:	00db      	lsls	r3, r3, #3
 8006282:	4927      	ldr	r1, [pc, #156]	; (8006320 <HAL_RCC_OscConfig+0x26c>)
 8006284:	4313      	orrs	r3, r2
 8006286:	600b      	str	r3, [r1, #0]
 8006288:	e015      	b.n	80062b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800628a:	4b26      	ldr	r3, [pc, #152]	; (8006324 <HAL_RCC_OscConfig+0x270>)
 800628c:	2200      	movs	r2, #0
 800628e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006290:	f7ff fa48 	bl	8005724 <HAL_GetTick>
 8006294:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006296:	e008      	b.n	80062aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006298:	f7ff fa44 	bl	8005724 <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d901      	bls.n	80062aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e180      	b.n	80065ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062aa:	4b1d      	ldr	r3, [pc, #116]	; (8006320 <HAL_RCC_OscConfig+0x26c>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 0302 	and.w	r3, r3, #2
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d1f0      	bne.n	8006298 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0308 	and.w	r3, r3, #8
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d03a      	beq.n	8006338 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d019      	beq.n	80062fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062ca:	4b17      	ldr	r3, [pc, #92]	; (8006328 <HAL_RCC_OscConfig+0x274>)
 80062cc:	2201      	movs	r2, #1
 80062ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062d0:	f7ff fa28 	bl	8005724 <HAL_GetTick>
 80062d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062d6:	e008      	b.n	80062ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062d8:	f7ff fa24 	bl	8005724 <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	2b02      	cmp	r3, #2
 80062e4:	d901      	bls.n	80062ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e160      	b.n	80065ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062ea:	4b0d      	ldr	r3, [pc, #52]	; (8006320 <HAL_RCC_OscConfig+0x26c>)
 80062ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ee:	f003 0302 	and.w	r3, r3, #2
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d0f0      	beq.n	80062d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80062f6:	2001      	movs	r0, #1
 80062f8:	f000 face 	bl	8006898 <RCC_Delay>
 80062fc:	e01c      	b.n	8006338 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062fe:	4b0a      	ldr	r3, [pc, #40]	; (8006328 <HAL_RCC_OscConfig+0x274>)
 8006300:	2200      	movs	r2, #0
 8006302:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006304:	f7ff fa0e 	bl	8005724 <HAL_GetTick>
 8006308:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800630a:	e00f      	b.n	800632c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800630c:	f7ff fa0a 	bl	8005724 <HAL_GetTick>
 8006310:	4602      	mov	r2, r0
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	2b02      	cmp	r3, #2
 8006318:	d908      	bls.n	800632c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e146      	b.n	80065ac <HAL_RCC_OscConfig+0x4f8>
 800631e:	bf00      	nop
 8006320:	40021000 	.word	0x40021000
 8006324:	42420000 	.word	0x42420000
 8006328:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800632c:	4b92      	ldr	r3, [pc, #584]	; (8006578 <HAL_RCC_OscConfig+0x4c4>)
 800632e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006330:	f003 0302 	and.w	r3, r3, #2
 8006334:	2b00      	cmp	r3, #0
 8006336:	d1e9      	bne.n	800630c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0304 	and.w	r3, r3, #4
 8006340:	2b00      	cmp	r3, #0
 8006342:	f000 80a6 	beq.w	8006492 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006346:	2300      	movs	r3, #0
 8006348:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800634a:	4b8b      	ldr	r3, [pc, #556]	; (8006578 <HAL_RCC_OscConfig+0x4c4>)
 800634c:	69db      	ldr	r3, [r3, #28]
 800634e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006352:	2b00      	cmp	r3, #0
 8006354:	d10d      	bne.n	8006372 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006356:	4b88      	ldr	r3, [pc, #544]	; (8006578 <HAL_RCC_OscConfig+0x4c4>)
 8006358:	69db      	ldr	r3, [r3, #28]
 800635a:	4a87      	ldr	r2, [pc, #540]	; (8006578 <HAL_RCC_OscConfig+0x4c4>)
 800635c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006360:	61d3      	str	r3, [r2, #28]
 8006362:	4b85      	ldr	r3, [pc, #532]	; (8006578 <HAL_RCC_OscConfig+0x4c4>)
 8006364:	69db      	ldr	r3, [r3, #28]
 8006366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800636a:	60bb      	str	r3, [r7, #8]
 800636c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800636e:	2301      	movs	r3, #1
 8006370:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006372:	4b82      	ldr	r3, [pc, #520]	; (800657c <HAL_RCC_OscConfig+0x4c8>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800637a:	2b00      	cmp	r3, #0
 800637c:	d118      	bne.n	80063b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800637e:	4b7f      	ldr	r3, [pc, #508]	; (800657c <HAL_RCC_OscConfig+0x4c8>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a7e      	ldr	r2, [pc, #504]	; (800657c <HAL_RCC_OscConfig+0x4c8>)
 8006384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006388:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800638a:	f7ff f9cb 	bl	8005724 <HAL_GetTick>
 800638e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006390:	e008      	b.n	80063a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006392:	f7ff f9c7 	bl	8005724 <HAL_GetTick>
 8006396:	4602      	mov	r2, r0
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	2b64      	cmp	r3, #100	; 0x64
 800639e:	d901      	bls.n	80063a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80063a0:	2303      	movs	r3, #3
 80063a2:	e103      	b.n	80065ac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063a4:	4b75      	ldr	r3, [pc, #468]	; (800657c <HAL_RCC_OscConfig+0x4c8>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d0f0      	beq.n	8006392 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d106      	bne.n	80063c6 <HAL_RCC_OscConfig+0x312>
 80063b8:	4b6f      	ldr	r3, [pc, #444]	; (8006578 <HAL_RCC_OscConfig+0x4c4>)
 80063ba:	6a1b      	ldr	r3, [r3, #32]
 80063bc:	4a6e      	ldr	r2, [pc, #440]	; (8006578 <HAL_RCC_OscConfig+0x4c4>)
 80063be:	f043 0301 	orr.w	r3, r3, #1
 80063c2:	6213      	str	r3, [r2, #32]
 80063c4:	e02d      	b.n	8006422 <HAL_RCC_OscConfig+0x36e>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10c      	bne.n	80063e8 <HAL_RCC_OscConfig+0x334>
 80063ce:	4b6a      	ldr	r3, [pc, #424]	; (8006578 <HAL_RCC_OscConfig+0x4c4>)
 80063d0:	6a1b      	ldr	r3, [r3, #32]
 80063d2:	4a69      	ldr	r2, [pc, #420]	; (8006578 <HAL_RCC_OscConfig+0x4c4>)
 80063d4:	f023 0301 	bic.w	r3, r3, #1
 80063d8:	6213      	str	r3, [r2, #32]
 80063da:	4b67      	ldr	r3, [pc, #412]	; (8006578 <HAL_RCC_OscConfig+0x4c4>)
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	4a66      	ldr	r2, [pc, #408]	; (8006578 <HAL_RCC_OscConfig+0x4c4>)
 80063e0:	f023 0304 	bic.w	r3, r3, #4
 80063e4:	6213      	str	r3, [r2, #32]
 80063e6:	e01c      	b.n	8006422 <HAL_RCC_OscConfig+0x36e>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	2b05      	cmp	r3, #5
 80063ee:	d10c      	bne.n	800640a <HAL_RCC_OscConfig+0x356>
 80063f0:	4b61      	ldr	r3, [pc, #388]	; (8006578 <HAL_RCC_OscConfig+0x4c4>)
 80063f2:	6a1b      	ldr	r3, [r3, #32]
 80063f4:	4a60      	ldr	r2, [pc, #384]	; (8006578 <HAL_RCC_OscConfig+0x4c4>)
 80063f6:	f043 0304 	orr.w	r3, r3, #4
 80063fa:	6213      	str	r3, [r2, #32]
 80063fc:	4b5e      	ldr	r3, [pc, #376]	; (8006578 <HAL_RCC_OscConfig+0x4c4>)
 80063fe:	6a1b      	ldr	r3, [r3, #32]
 8006400:	4a5d      	ldr	r2, [pc, #372]	; (8006578 <HAL_RCC_OscConfig+0x4c4>)
 8006402:	f043 0301 	orr.w	r3, r3, #1
 8006406:	6213      	str	r3, [r2, #32]
 8006408:	e00b      	b.n	8006422 <HAL_RCC_OscConfig+0x36e>
 800640a:	4b5b      	ldr	r3, [pc, #364]	; (8006578 <HAL_RCC_OscConfig+0x4c4>)
 800640c:	6a1b      	ldr	r3, [r3, #32]
 800640e:	4a5a      	ldr	r2, [pc, #360]	; (8006578 <HAL_RCC_OscConfig+0x4c4>)
 8006410:	f023 0301 	bic.w	r3, r3, #1
 8006414:	6213      	str	r3, [r2, #32]
 8006416:	4b58      	ldr	r3, [pc, #352]	; (8006578 <HAL_RCC_OscConfig+0x4c4>)
 8006418:	6a1b      	ldr	r3, [r3, #32]
 800641a:	4a57      	ldr	r2, [pc, #348]	; (8006578 <HAL_RCC_OscConfig+0x4c4>)
 800641c:	f023 0304 	bic.w	r3, r3, #4
 8006420:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d015      	beq.n	8006456 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800642a:	f7ff f97b 	bl	8005724 <HAL_GetTick>
 800642e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006430:	e00a      	b.n	8006448 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006432:	f7ff f977 	bl	8005724 <HAL_GetTick>
 8006436:	4602      	mov	r2, r0
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006440:	4293      	cmp	r3, r2
 8006442:	d901      	bls.n	8006448 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	e0b1      	b.n	80065ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006448:	4b4b      	ldr	r3, [pc, #300]	; (8006578 <HAL_RCC_OscConfig+0x4c4>)
 800644a:	6a1b      	ldr	r3, [r3, #32]
 800644c:	f003 0302 	and.w	r3, r3, #2
 8006450:	2b00      	cmp	r3, #0
 8006452:	d0ee      	beq.n	8006432 <HAL_RCC_OscConfig+0x37e>
 8006454:	e014      	b.n	8006480 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006456:	f7ff f965 	bl	8005724 <HAL_GetTick>
 800645a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800645c:	e00a      	b.n	8006474 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800645e:	f7ff f961 	bl	8005724 <HAL_GetTick>
 8006462:	4602      	mov	r2, r0
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	f241 3288 	movw	r2, #5000	; 0x1388
 800646c:	4293      	cmp	r3, r2
 800646e:	d901      	bls.n	8006474 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	e09b      	b.n	80065ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006474:	4b40      	ldr	r3, [pc, #256]	; (8006578 <HAL_RCC_OscConfig+0x4c4>)
 8006476:	6a1b      	ldr	r3, [r3, #32]
 8006478:	f003 0302 	and.w	r3, r3, #2
 800647c:	2b00      	cmp	r3, #0
 800647e:	d1ee      	bne.n	800645e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006480:	7dfb      	ldrb	r3, [r7, #23]
 8006482:	2b01      	cmp	r3, #1
 8006484:	d105      	bne.n	8006492 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006486:	4b3c      	ldr	r3, [pc, #240]	; (8006578 <HAL_RCC_OscConfig+0x4c4>)
 8006488:	69db      	ldr	r3, [r3, #28]
 800648a:	4a3b      	ldr	r2, [pc, #236]	; (8006578 <HAL_RCC_OscConfig+0x4c4>)
 800648c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006490:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	69db      	ldr	r3, [r3, #28]
 8006496:	2b00      	cmp	r3, #0
 8006498:	f000 8087 	beq.w	80065aa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800649c:	4b36      	ldr	r3, [pc, #216]	; (8006578 <HAL_RCC_OscConfig+0x4c4>)
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	f003 030c 	and.w	r3, r3, #12
 80064a4:	2b08      	cmp	r3, #8
 80064a6:	d061      	beq.n	800656c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	69db      	ldr	r3, [r3, #28]
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d146      	bne.n	800653e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064b0:	4b33      	ldr	r3, [pc, #204]	; (8006580 <HAL_RCC_OscConfig+0x4cc>)
 80064b2:	2200      	movs	r2, #0
 80064b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064b6:	f7ff f935 	bl	8005724 <HAL_GetTick>
 80064ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80064bc:	e008      	b.n	80064d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064be:	f7ff f931 	bl	8005724 <HAL_GetTick>
 80064c2:	4602      	mov	r2, r0
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d901      	bls.n	80064d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80064cc:	2303      	movs	r3, #3
 80064ce:	e06d      	b.n	80065ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80064d0:	4b29      	ldr	r3, [pc, #164]	; (8006578 <HAL_RCC_OscConfig+0x4c4>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d1f0      	bne.n	80064be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a1b      	ldr	r3, [r3, #32]
 80064e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064e4:	d108      	bne.n	80064f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80064e6:	4b24      	ldr	r3, [pc, #144]	; (8006578 <HAL_RCC_OscConfig+0x4c4>)
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	4921      	ldr	r1, [pc, #132]	; (8006578 <HAL_RCC_OscConfig+0x4c4>)
 80064f4:	4313      	orrs	r3, r2
 80064f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80064f8:	4b1f      	ldr	r3, [pc, #124]	; (8006578 <HAL_RCC_OscConfig+0x4c4>)
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6a19      	ldr	r1, [r3, #32]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006508:	430b      	orrs	r3, r1
 800650a:	491b      	ldr	r1, [pc, #108]	; (8006578 <HAL_RCC_OscConfig+0x4c4>)
 800650c:	4313      	orrs	r3, r2
 800650e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006510:	4b1b      	ldr	r3, [pc, #108]	; (8006580 <HAL_RCC_OscConfig+0x4cc>)
 8006512:	2201      	movs	r2, #1
 8006514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006516:	f7ff f905 	bl	8005724 <HAL_GetTick>
 800651a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800651c:	e008      	b.n	8006530 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800651e:	f7ff f901 	bl	8005724 <HAL_GetTick>
 8006522:	4602      	mov	r2, r0
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	1ad3      	subs	r3, r2, r3
 8006528:	2b02      	cmp	r3, #2
 800652a:	d901      	bls.n	8006530 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e03d      	b.n	80065ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006530:	4b11      	ldr	r3, [pc, #68]	; (8006578 <HAL_RCC_OscConfig+0x4c4>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d0f0      	beq.n	800651e <HAL_RCC_OscConfig+0x46a>
 800653c:	e035      	b.n	80065aa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800653e:	4b10      	ldr	r3, [pc, #64]	; (8006580 <HAL_RCC_OscConfig+0x4cc>)
 8006540:	2200      	movs	r2, #0
 8006542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006544:	f7ff f8ee 	bl	8005724 <HAL_GetTick>
 8006548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800654a:	e008      	b.n	800655e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800654c:	f7ff f8ea 	bl	8005724 <HAL_GetTick>
 8006550:	4602      	mov	r2, r0
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	2b02      	cmp	r3, #2
 8006558:	d901      	bls.n	800655e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	e026      	b.n	80065ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800655e:	4b06      	ldr	r3, [pc, #24]	; (8006578 <HAL_RCC_OscConfig+0x4c4>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006566:	2b00      	cmp	r3, #0
 8006568:	d1f0      	bne.n	800654c <HAL_RCC_OscConfig+0x498>
 800656a:	e01e      	b.n	80065aa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	69db      	ldr	r3, [r3, #28]
 8006570:	2b01      	cmp	r3, #1
 8006572:	d107      	bne.n	8006584 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e019      	b.n	80065ac <HAL_RCC_OscConfig+0x4f8>
 8006578:	40021000 	.word	0x40021000
 800657c:	40007000 	.word	0x40007000
 8006580:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006584:	4b0b      	ldr	r3, [pc, #44]	; (80065b4 <HAL_RCC_OscConfig+0x500>)
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a1b      	ldr	r3, [r3, #32]
 8006594:	429a      	cmp	r2, r3
 8006596:	d106      	bne.n	80065a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d001      	beq.n	80065aa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e000      	b.n	80065ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3718      	adds	r7, #24
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	40021000 	.word	0x40021000

080065b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d101      	bne.n	80065cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e0d0      	b.n	800676e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80065cc:	4b6a      	ldr	r3, [pc, #424]	; (8006778 <HAL_RCC_ClockConfig+0x1c0>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 0307 	and.w	r3, r3, #7
 80065d4:	683a      	ldr	r2, [r7, #0]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d910      	bls.n	80065fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065da:	4b67      	ldr	r3, [pc, #412]	; (8006778 <HAL_RCC_ClockConfig+0x1c0>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f023 0207 	bic.w	r2, r3, #7
 80065e2:	4965      	ldr	r1, [pc, #404]	; (8006778 <HAL_RCC_ClockConfig+0x1c0>)
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065ea:	4b63      	ldr	r3, [pc, #396]	; (8006778 <HAL_RCC_ClockConfig+0x1c0>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 0307 	and.w	r3, r3, #7
 80065f2:	683a      	ldr	r2, [r7, #0]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d001      	beq.n	80065fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e0b8      	b.n	800676e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0302 	and.w	r3, r3, #2
 8006604:	2b00      	cmp	r3, #0
 8006606:	d020      	beq.n	800664a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 0304 	and.w	r3, r3, #4
 8006610:	2b00      	cmp	r3, #0
 8006612:	d005      	beq.n	8006620 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006614:	4b59      	ldr	r3, [pc, #356]	; (800677c <HAL_RCC_ClockConfig+0x1c4>)
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	4a58      	ldr	r2, [pc, #352]	; (800677c <HAL_RCC_ClockConfig+0x1c4>)
 800661a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800661e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0308 	and.w	r3, r3, #8
 8006628:	2b00      	cmp	r3, #0
 800662a:	d005      	beq.n	8006638 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800662c:	4b53      	ldr	r3, [pc, #332]	; (800677c <HAL_RCC_ClockConfig+0x1c4>)
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	4a52      	ldr	r2, [pc, #328]	; (800677c <HAL_RCC_ClockConfig+0x1c4>)
 8006632:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006636:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006638:	4b50      	ldr	r3, [pc, #320]	; (800677c <HAL_RCC_ClockConfig+0x1c4>)
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	494d      	ldr	r1, [pc, #308]	; (800677c <HAL_RCC_ClockConfig+0x1c4>)
 8006646:	4313      	orrs	r3, r2
 8006648:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 0301 	and.w	r3, r3, #1
 8006652:	2b00      	cmp	r3, #0
 8006654:	d040      	beq.n	80066d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	2b01      	cmp	r3, #1
 800665c:	d107      	bne.n	800666e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800665e:	4b47      	ldr	r3, [pc, #284]	; (800677c <HAL_RCC_ClockConfig+0x1c4>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006666:	2b00      	cmp	r3, #0
 8006668:	d115      	bne.n	8006696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e07f      	b.n	800676e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	2b02      	cmp	r3, #2
 8006674:	d107      	bne.n	8006686 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006676:	4b41      	ldr	r3, [pc, #260]	; (800677c <HAL_RCC_ClockConfig+0x1c4>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d109      	bne.n	8006696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e073      	b.n	800676e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006686:	4b3d      	ldr	r3, [pc, #244]	; (800677c <HAL_RCC_ClockConfig+0x1c4>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 0302 	and.w	r3, r3, #2
 800668e:	2b00      	cmp	r3, #0
 8006690:	d101      	bne.n	8006696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e06b      	b.n	800676e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006696:	4b39      	ldr	r3, [pc, #228]	; (800677c <HAL_RCC_ClockConfig+0x1c4>)
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	f023 0203 	bic.w	r2, r3, #3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	4936      	ldr	r1, [pc, #216]	; (800677c <HAL_RCC_ClockConfig+0x1c4>)
 80066a4:	4313      	orrs	r3, r2
 80066a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80066a8:	f7ff f83c 	bl	8005724 <HAL_GetTick>
 80066ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066ae:	e00a      	b.n	80066c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066b0:	f7ff f838 	bl	8005724 <HAL_GetTick>
 80066b4:	4602      	mov	r2, r0
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80066be:	4293      	cmp	r3, r2
 80066c0:	d901      	bls.n	80066c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	e053      	b.n	800676e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066c6:	4b2d      	ldr	r3, [pc, #180]	; (800677c <HAL_RCC_ClockConfig+0x1c4>)
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	f003 020c 	and.w	r2, r3, #12
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d1eb      	bne.n	80066b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80066d8:	4b27      	ldr	r3, [pc, #156]	; (8006778 <HAL_RCC_ClockConfig+0x1c0>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0307 	and.w	r3, r3, #7
 80066e0:	683a      	ldr	r2, [r7, #0]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d210      	bcs.n	8006708 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066e6:	4b24      	ldr	r3, [pc, #144]	; (8006778 <HAL_RCC_ClockConfig+0x1c0>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f023 0207 	bic.w	r2, r3, #7
 80066ee:	4922      	ldr	r1, [pc, #136]	; (8006778 <HAL_RCC_ClockConfig+0x1c0>)
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066f6:	4b20      	ldr	r3, [pc, #128]	; (8006778 <HAL_RCC_ClockConfig+0x1c0>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 0307 	and.w	r3, r3, #7
 80066fe:	683a      	ldr	r2, [r7, #0]
 8006700:	429a      	cmp	r2, r3
 8006702:	d001      	beq.n	8006708 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e032      	b.n	800676e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 0304 	and.w	r3, r3, #4
 8006710:	2b00      	cmp	r3, #0
 8006712:	d008      	beq.n	8006726 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006714:	4b19      	ldr	r3, [pc, #100]	; (800677c <HAL_RCC_ClockConfig+0x1c4>)
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	4916      	ldr	r1, [pc, #88]	; (800677c <HAL_RCC_ClockConfig+0x1c4>)
 8006722:	4313      	orrs	r3, r2
 8006724:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 0308 	and.w	r3, r3, #8
 800672e:	2b00      	cmp	r3, #0
 8006730:	d009      	beq.n	8006746 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006732:	4b12      	ldr	r3, [pc, #72]	; (800677c <HAL_RCC_ClockConfig+0x1c4>)
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	00db      	lsls	r3, r3, #3
 8006740:	490e      	ldr	r1, [pc, #56]	; (800677c <HAL_RCC_ClockConfig+0x1c4>)
 8006742:	4313      	orrs	r3, r2
 8006744:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006746:	f000 f821 	bl	800678c <HAL_RCC_GetSysClockFreq>
 800674a:	4602      	mov	r2, r0
 800674c:	4b0b      	ldr	r3, [pc, #44]	; (800677c <HAL_RCC_ClockConfig+0x1c4>)
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	091b      	lsrs	r3, r3, #4
 8006752:	f003 030f 	and.w	r3, r3, #15
 8006756:	490a      	ldr	r1, [pc, #40]	; (8006780 <HAL_RCC_ClockConfig+0x1c8>)
 8006758:	5ccb      	ldrb	r3, [r1, r3]
 800675a:	fa22 f303 	lsr.w	r3, r2, r3
 800675e:	4a09      	ldr	r2, [pc, #36]	; (8006784 <HAL_RCC_ClockConfig+0x1cc>)
 8006760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006762:	4b09      	ldr	r3, [pc, #36]	; (8006788 <HAL_RCC_ClockConfig+0x1d0>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4618      	mov	r0, r3
 8006768:	f7fe ff9a 	bl	80056a0 <HAL_InitTick>

  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3710      	adds	r7, #16
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	40022000 	.word	0x40022000
 800677c:	40021000 	.word	0x40021000
 8006780:	08006e08 	.word	0x08006e08
 8006784:	20000008 	.word	0x20000008
 8006788:	2000000c 	.word	0x2000000c

0800678c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800678c:	b480      	push	{r7}
 800678e:	b087      	sub	sp, #28
 8006790:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006792:	2300      	movs	r3, #0
 8006794:	60fb      	str	r3, [r7, #12]
 8006796:	2300      	movs	r3, #0
 8006798:	60bb      	str	r3, [r7, #8]
 800679a:	2300      	movs	r3, #0
 800679c:	617b      	str	r3, [r7, #20]
 800679e:	2300      	movs	r3, #0
 80067a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80067a2:	2300      	movs	r3, #0
 80067a4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80067a6:	4b1e      	ldr	r3, [pc, #120]	; (8006820 <HAL_RCC_GetSysClockFreq+0x94>)
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f003 030c 	and.w	r3, r3, #12
 80067b2:	2b04      	cmp	r3, #4
 80067b4:	d002      	beq.n	80067bc <HAL_RCC_GetSysClockFreq+0x30>
 80067b6:	2b08      	cmp	r3, #8
 80067b8:	d003      	beq.n	80067c2 <HAL_RCC_GetSysClockFreq+0x36>
 80067ba:	e027      	b.n	800680c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80067bc:	4b19      	ldr	r3, [pc, #100]	; (8006824 <HAL_RCC_GetSysClockFreq+0x98>)
 80067be:	613b      	str	r3, [r7, #16]
      break;
 80067c0:	e027      	b.n	8006812 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	0c9b      	lsrs	r3, r3, #18
 80067c6:	f003 030f 	and.w	r3, r3, #15
 80067ca:	4a17      	ldr	r2, [pc, #92]	; (8006828 <HAL_RCC_GetSysClockFreq+0x9c>)
 80067cc:	5cd3      	ldrb	r3, [r2, r3]
 80067ce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d010      	beq.n	80067fc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80067da:	4b11      	ldr	r3, [pc, #68]	; (8006820 <HAL_RCC_GetSysClockFreq+0x94>)
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	0c5b      	lsrs	r3, r3, #17
 80067e0:	f003 0301 	and.w	r3, r3, #1
 80067e4:	4a11      	ldr	r2, [pc, #68]	; (800682c <HAL_RCC_GetSysClockFreq+0xa0>)
 80067e6:	5cd3      	ldrb	r3, [r2, r3]
 80067e8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a0d      	ldr	r2, [pc, #52]	; (8006824 <HAL_RCC_GetSysClockFreq+0x98>)
 80067ee:	fb03 f202 	mul.w	r2, r3, r2
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067f8:	617b      	str	r3, [r7, #20]
 80067fa:	e004      	b.n	8006806 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a0c      	ldr	r2, [pc, #48]	; (8006830 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006800:	fb02 f303 	mul.w	r3, r2, r3
 8006804:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	613b      	str	r3, [r7, #16]
      break;
 800680a:	e002      	b.n	8006812 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800680c:	4b05      	ldr	r3, [pc, #20]	; (8006824 <HAL_RCC_GetSysClockFreq+0x98>)
 800680e:	613b      	str	r3, [r7, #16]
      break;
 8006810:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006812:	693b      	ldr	r3, [r7, #16]
}
 8006814:	4618      	mov	r0, r3
 8006816:	371c      	adds	r7, #28
 8006818:	46bd      	mov	sp, r7
 800681a:	bc80      	pop	{r7}
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	40021000 	.word	0x40021000
 8006824:	007a1200 	.word	0x007a1200
 8006828:	08006e20 	.word	0x08006e20
 800682c:	08006e30 	.word	0x08006e30
 8006830:	003d0900 	.word	0x003d0900

08006834 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006834:	b480      	push	{r7}
 8006836:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006838:	4b02      	ldr	r3, [pc, #8]	; (8006844 <HAL_RCC_GetHCLKFreq+0x10>)
 800683a:	681b      	ldr	r3, [r3, #0]
}
 800683c:	4618      	mov	r0, r3
 800683e:	46bd      	mov	sp, r7
 8006840:	bc80      	pop	{r7}
 8006842:	4770      	bx	lr
 8006844:	20000008 	.word	0x20000008

08006848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800684c:	f7ff fff2 	bl	8006834 <HAL_RCC_GetHCLKFreq>
 8006850:	4602      	mov	r2, r0
 8006852:	4b05      	ldr	r3, [pc, #20]	; (8006868 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	0a1b      	lsrs	r3, r3, #8
 8006858:	f003 0307 	and.w	r3, r3, #7
 800685c:	4903      	ldr	r1, [pc, #12]	; (800686c <HAL_RCC_GetPCLK1Freq+0x24>)
 800685e:	5ccb      	ldrb	r3, [r1, r3]
 8006860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006864:	4618      	mov	r0, r3
 8006866:	bd80      	pop	{r7, pc}
 8006868:	40021000 	.word	0x40021000
 800686c:	08006e18 	.word	0x08006e18

08006870 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006874:	f7ff ffde 	bl	8006834 <HAL_RCC_GetHCLKFreq>
 8006878:	4602      	mov	r2, r0
 800687a:	4b05      	ldr	r3, [pc, #20]	; (8006890 <HAL_RCC_GetPCLK2Freq+0x20>)
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	0adb      	lsrs	r3, r3, #11
 8006880:	f003 0307 	and.w	r3, r3, #7
 8006884:	4903      	ldr	r1, [pc, #12]	; (8006894 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006886:	5ccb      	ldrb	r3, [r1, r3]
 8006888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800688c:	4618      	mov	r0, r3
 800688e:	bd80      	pop	{r7, pc}
 8006890:	40021000 	.word	0x40021000
 8006894:	08006e18 	.word	0x08006e18

08006898 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006898:	b480      	push	{r7}
 800689a:	b085      	sub	sp, #20
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80068a0:	4b0a      	ldr	r3, [pc, #40]	; (80068cc <RCC_Delay+0x34>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a0a      	ldr	r2, [pc, #40]	; (80068d0 <RCC_Delay+0x38>)
 80068a6:	fba2 2303 	umull	r2, r3, r2, r3
 80068aa:	0a5b      	lsrs	r3, r3, #9
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	fb02 f303 	mul.w	r3, r2, r3
 80068b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80068b4:	bf00      	nop
  }
  while (Delay --);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	1e5a      	subs	r2, r3, #1
 80068ba:	60fa      	str	r2, [r7, #12]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d1f9      	bne.n	80068b4 <RCC_Delay+0x1c>
}
 80068c0:	bf00      	nop
 80068c2:	bf00      	nop
 80068c4:	3714      	adds	r7, #20
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bc80      	pop	{r7}
 80068ca:	4770      	bx	lr
 80068cc:	20000008 	.word	0x20000008
 80068d0:	10624dd3 	.word	0x10624dd3

080068d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d101      	bne.n	80068e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e042      	b.n	800696c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d106      	bne.n	8006900 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f7fe fe48 	bl	8005590 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2224      	movs	r2, #36	; 0x24
 8006904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68da      	ldr	r2, [r3, #12]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006916:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 f9af 	bl	8006c7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	691a      	ldr	r2, [r3, #16]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800692c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	695a      	ldr	r2, [r3, #20]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800693c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	68da      	ldr	r2, [r3, #12]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800694c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2220      	movs	r2, #32
 8006958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2220      	movs	r2, #32
 8006960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3708      	adds	r7, #8
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b08a      	sub	sp, #40	; 0x28
 8006978:	af02      	add	r7, sp, #8
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	603b      	str	r3, [r7, #0]
 8006980:	4613      	mov	r3, r2
 8006982:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006984:	2300      	movs	r3, #0
 8006986:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800698e:	b2db      	uxtb	r3, r3
 8006990:	2b20      	cmp	r3, #32
 8006992:	d16d      	bne.n	8006a70 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d002      	beq.n	80069a0 <HAL_UART_Transmit+0x2c>
 800699a:	88fb      	ldrh	r3, [r7, #6]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d101      	bne.n	80069a4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	e066      	b.n	8006a72 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2200      	movs	r2, #0
 80069a8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2221      	movs	r2, #33	; 0x21
 80069ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069b2:	f7fe feb7 	bl	8005724 <HAL_GetTick>
 80069b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	88fa      	ldrh	r2, [r7, #6]
 80069bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	88fa      	ldrh	r2, [r7, #6]
 80069c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069cc:	d108      	bne.n	80069e0 <HAL_UART_Transmit+0x6c>
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d104      	bne.n	80069e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80069d6:	2300      	movs	r3, #0
 80069d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	61bb      	str	r3, [r7, #24]
 80069de:	e003      	b.n	80069e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069e4:	2300      	movs	r3, #0
 80069e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80069e8:	e02a      	b.n	8006a40 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	9300      	str	r3, [sp, #0]
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	2200      	movs	r2, #0
 80069f2:	2180      	movs	r1, #128	; 0x80
 80069f4:	68f8      	ldr	r0, [r7, #12]
 80069f6:	f000 f8d2 	bl	8006b9e <UART_WaitOnFlagUntilTimeout>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d001      	beq.n	8006a04 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006a00:	2303      	movs	r3, #3
 8006a02:	e036      	b.n	8006a72 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d10b      	bne.n	8006a22 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	881b      	ldrh	r3, [r3, #0]
 8006a0e:	461a      	mov	r2, r3
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a18:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	3302      	adds	r3, #2
 8006a1e:	61bb      	str	r3, [r7, #24]
 8006a20:	e007      	b.n	8006a32 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	781a      	ldrb	r2, [r3, #0]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	3b01      	subs	r3, #1
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d1cf      	bne.n	80069ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	9300      	str	r3, [sp, #0]
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	2200      	movs	r2, #0
 8006a52:	2140      	movs	r1, #64	; 0x40
 8006a54:	68f8      	ldr	r0, [r7, #12]
 8006a56:	f000 f8a2 	bl	8006b9e <UART_WaitOnFlagUntilTimeout>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d001      	beq.n	8006a64 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006a60:	2303      	movs	r3, #3
 8006a62:	e006      	b.n	8006a72 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2220      	movs	r2, #32
 8006a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	e000      	b.n	8006a72 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006a70:	2302      	movs	r3, #2
  }
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3720      	adds	r7, #32
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b08a      	sub	sp, #40	; 0x28
 8006a7e:	af02      	add	r7, sp, #8
 8006a80:	60f8      	str	r0, [r7, #12]
 8006a82:	60b9      	str	r1, [r7, #8]
 8006a84:	603b      	str	r3, [r7, #0]
 8006a86:	4613      	mov	r3, r2
 8006a88:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	2b20      	cmp	r3, #32
 8006a98:	d17c      	bne.n	8006b94 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d002      	beq.n	8006aa6 <HAL_UART_Receive+0x2c>
 8006aa0:	88fb      	ldrh	r3, [r7, #6]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d101      	bne.n	8006aaa <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e075      	b.n	8006b96 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2200      	movs	r2, #0
 8006aae:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2222      	movs	r2, #34	; 0x22
 8006ab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2200      	movs	r2, #0
 8006abc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006abe:	f7fe fe31 	bl	8005724 <HAL_GetTick>
 8006ac2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	88fa      	ldrh	r2, [r7, #6]
 8006ac8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	88fa      	ldrh	r2, [r7, #6]
 8006ace:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ad8:	d108      	bne.n	8006aec <HAL_UART_Receive+0x72>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d104      	bne.n	8006aec <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	61bb      	str	r3, [r7, #24]
 8006aea:	e003      	b.n	8006af4 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006af0:	2300      	movs	r3, #0
 8006af2:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006af4:	e043      	b.n	8006b7e <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	9300      	str	r3, [sp, #0]
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	2200      	movs	r2, #0
 8006afe:	2120      	movs	r1, #32
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f000 f84c 	bl	8006b9e <UART_WaitOnFlagUntilTimeout>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d001      	beq.n	8006b10 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8006b0c:	2303      	movs	r3, #3
 8006b0e:	e042      	b.n	8006b96 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d10c      	bne.n	8006b30 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006b28:	69bb      	ldr	r3, [r7, #24]
 8006b2a:	3302      	adds	r3, #2
 8006b2c:	61bb      	str	r3, [r7, #24]
 8006b2e:	e01f      	b.n	8006b70 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b38:	d007      	beq.n	8006b4a <HAL_UART_Receive+0xd0>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d10a      	bne.n	8006b58 <HAL_UART_Receive+0xde>
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d106      	bne.n	8006b58 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	b2da      	uxtb	r2, r3
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	701a      	strb	r2, [r3, #0]
 8006b56:	e008      	b.n	8006b6a <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b64:	b2da      	uxtb	r2, r3
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	3b01      	subs	r3, #1
 8006b78:	b29a      	uxth	r2, r3
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d1b6      	bne.n	8006af6 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2220      	movs	r2, #32
 8006b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8006b90:	2300      	movs	r3, #0
 8006b92:	e000      	b.n	8006b96 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006b94:	2302      	movs	r3, #2
  }
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3720      	adds	r7, #32
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b090      	sub	sp, #64	; 0x40
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	60f8      	str	r0, [r7, #12]
 8006ba6:	60b9      	str	r1, [r7, #8]
 8006ba8:	603b      	str	r3, [r7, #0]
 8006baa:	4613      	mov	r3, r2
 8006bac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bae:	e050      	b.n	8006c52 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bb6:	d04c      	beq.n	8006c52 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006bb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d007      	beq.n	8006bce <UART_WaitOnFlagUntilTimeout+0x30>
 8006bbe:	f7fe fdb1 	bl	8005724 <HAL_GetTick>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	1ad3      	subs	r3, r2, r3
 8006bc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d241      	bcs.n	8006c52 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	330c      	adds	r3, #12
 8006bd4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd8:	e853 3f00 	ldrex	r3, [r3]
 8006bdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006be4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	330c      	adds	r3, #12
 8006bec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006bee:	637a      	str	r2, [r7, #52]	; 0x34
 8006bf0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006bf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bf6:	e841 2300 	strex	r3, r2, [r1]
 8006bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1e5      	bne.n	8006bce <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	3314      	adds	r3, #20
 8006c08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	e853 3f00 	ldrex	r3, [r3]
 8006c10:	613b      	str	r3, [r7, #16]
   return(result);
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	f023 0301 	bic.w	r3, r3, #1
 8006c18:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	3314      	adds	r3, #20
 8006c20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c22:	623a      	str	r2, [r7, #32]
 8006c24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c26:	69f9      	ldr	r1, [r7, #28]
 8006c28:	6a3a      	ldr	r2, [r7, #32]
 8006c2a:	e841 2300 	strex	r3, r2, [r1]
 8006c2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1e5      	bne.n	8006c02 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2220      	movs	r2, #32
 8006c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2220      	movs	r2, #32
 8006c42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006c4e:	2303      	movs	r3, #3
 8006c50:	e00f      	b.n	8006c72 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	68ba      	ldr	r2, [r7, #8]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	bf0c      	ite	eq
 8006c62:	2301      	moveq	r3, #1
 8006c64:	2300      	movne	r3, #0
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	461a      	mov	r2, r3
 8006c6a:	79fb      	ldrb	r3, [r7, #7]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d09f      	beq.n	8006bb0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3740      	adds	r7, #64	; 0x40
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
	...

08006c7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	68da      	ldr	r2, [r3, #12]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	430a      	orrs	r2, r1
 8006c98:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	689a      	ldr	r2, [r3, #8]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	431a      	orrs	r2, r3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	695b      	ldr	r3, [r3, #20]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006cb6:	f023 030c 	bic.w	r3, r3, #12
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	6812      	ldr	r2, [r2, #0]
 8006cbe:	68b9      	ldr	r1, [r7, #8]
 8006cc0:	430b      	orrs	r3, r1
 8006cc2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	695b      	ldr	r3, [r3, #20]
 8006cca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	699a      	ldr	r2, [r3, #24]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	430a      	orrs	r2, r1
 8006cd8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a2c      	ldr	r2, [pc, #176]	; (8006d90 <UART_SetConfig+0x114>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d103      	bne.n	8006cec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006ce4:	f7ff fdc4 	bl	8006870 <HAL_RCC_GetPCLK2Freq>
 8006ce8:	60f8      	str	r0, [r7, #12]
 8006cea:	e002      	b.n	8006cf2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006cec:	f7ff fdac 	bl	8006848 <HAL_RCC_GetPCLK1Freq>
 8006cf0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006cf2:	68fa      	ldr	r2, [r7, #12]
 8006cf4:	4613      	mov	r3, r2
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	4413      	add	r3, r2
 8006cfa:	009a      	lsls	r2, r3, #2
 8006cfc:	441a      	add	r2, r3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d08:	4a22      	ldr	r2, [pc, #136]	; (8006d94 <UART_SetConfig+0x118>)
 8006d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d0e:	095b      	lsrs	r3, r3, #5
 8006d10:	0119      	lsls	r1, r3, #4
 8006d12:	68fa      	ldr	r2, [r7, #12]
 8006d14:	4613      	mov	r3, r2
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	4413      	add	r3, r2
 8006d1a:	009a      	lsls	r2, r3, #2
 8006d1c:	441a      	add	r2, r3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d28:	4b1a      	ldr	r3, [pc, #104]	; (8006d94 <UART_SetConfig+0x118>)
 8006d2a:	fba3 0302 	umull	r0, r3, r3, r2
 8006d2e:	095b      	lsrs	r3, r3, #5
 8006d30:	2064      	movs	r0, #100	; 0x64
 8006d32:	fb00 f303 	mul.w	r3, r0, r3
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	011b      	lsls	r3, r3, #4
 8006d3a:	3332      	adds	r3, #50	; 0x32
 8006d3c:	4a15      	ldr	r2, [pc, #84]	; (8006d94 <UART_SetConfig+0x118>)
 8006d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d42:	095b      	lsrs	r3, r3, #5
 8006d44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d48:	4419      	add	r1, r3
 8006d4a:	68fa      	ldr	r2, [r7, #12]
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	4413      	add	r3, r2
 8006d52:	009a      	lsls	r2, r3, #2
 8006d54:	441a      	add	r2, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d60:	4b0c      	ldr	r3, [pc, #48]	; (8006d94 <UART_SetConfig+0x118>)
 8006d62:	fba3 0302 	umull	r0, r3, r3, r2
 8006d66:	095b      	lsrs	r3, r3, #5
 8006d68:	2064      	movs	r0, #100	; 0x64
 8006d6a:	fb00 f303 	mul.w	r3, r0, r3
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	011b      	lsls	r3, r3, #4
 8006d72:	3332      	adds	r3, #50	; 0x32
 8006d74:	4a07      	ldr	r2, [pc, #28]	; (8006d94 <UART_SetConfig+0x118>)
 8006d76:	fba2 2303 	umull	r2, r3, r2, r3
 8006d7a:	095b      	lsrs	r3, r3, #5
 8006d7c:	f003 020f 	and.w	r2, r3, #15
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	440a      	add	r2, r1
 8006d86:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006d88:	bf00      	nop
 8006d8a:	3710      	adds	r7, #16
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	40013800 	.word	0x40013800
 8006d94:	51eb851f 	.word	0x51eb851f

08006d98 <memset>:
 8006d98:	4603      	mov	r3, r0
 8006d9a:	4402      	add	r2, r0
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d100      	bne.n	8006da2 <memset+0xa>
 8006da0:	4770      	bx	lr
 8006da2:	f803 1b01 	strb.w	r1, [r3], #1
 8006da6:	e7f9      	b.n	8006d9c <memset+0x4>

08006da8 <__libc_init_array>:
 8006da8:	b570      	push	{r4, r5, r6, lr}
 8006daa:	2600      	movs	r6, #0
 8006dac:	4d0c      	ldr	r5, [pc, #48]	; (8006de0 <__libc_init_array+0x38>)
 8006dae:	4c0d      	ldr	r4, [pc, #52]	; (8006de4 <__libc_init_array+0x3c>)
 8006db0:	1b64      	subs	r4, r4, r5
 8006db2:	10a4      	asrs	r4, r4, #2
 8006db4:	42a6      	cmp	r6, r4
 8006db6:	d109      	bne.n	8006dcc <__libc_init_array+0x24>
 8006db8:	f000 f81a 	bl	8006df0 <_init>
 8006dbc:	2600      	movs	r6, #0
 8006dbe:	4d0a      	ldr	r5, [pc, #40]	; (8006de8 <__libc_init_array+0x40>)
 8006dc0:	4c0a      	ldr	r4, [pc, #40]	; (8006dec <__libc_init_array+0x44>)
 8006dc2:	1b64      	subs	r4, r4, r5
 8006dc4:	10a4      	asrs	r4, r4, #2
 8006dc6:	42a6      	cmp	r6, r4
 8006dc8:	d105      	bne.n	8006dd6 <__libc_init_array+0x2e>
 8006dca:	bd70      	pop	{r4, r5, r6, pc}
 8006dcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dd0:	4798      	blx	r3
 8006dd2:	3601      	adds	r6, #1
 8006dd4:	e7ee      	b.n	8006db4 <__libc_init_array+0xc>
 8006dd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dda:	4798      	blx	r3
 8006ddc:	3601      	adds	r6, #1
 8006dde:	e7f2      	b.n	8006dc6 <__libc_init_array+0x1e>
 8006de0:	08006e34 	.word	0x08006e34
 8006de4:	08006e34 	.word	0x08006e34
 8006de8:	08006e34 	.word	0x08006e34
 8006dec:	08006e38 	.word	0x08006e38

08006df0 <_init>:
 8006df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006df2:	bf00      	nop
 8006df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006df6:	bc08      	pop	{r3}
 8006df8:	469e      	mov	lr, r3
 8006dfa:	4770      	bx	lr

08006dfc <_fini>:
 8006dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dfe:	bf00      	nop
 8006e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e02:	bc08      	pop	{r3}
 8006e04:	469e      	mov	lr, r3
 8006e06:	4770      	bx	lr
