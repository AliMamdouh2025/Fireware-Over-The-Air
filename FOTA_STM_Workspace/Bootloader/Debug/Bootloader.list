
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bfc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08002d08  08002d08  00012d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d44  08002d44  00030008  2**0
                  CONTENTS
  4 .ARM          00000000  08002d44  08002d44  00030008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d44  08002d44  00030008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d44  08002d44  00012d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d48  08002d48  00012d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08002d4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .APPLICATION1_SECTION 00000004  08010000  08010000  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .APPLICATION2_SECTION 00000004  08010004  08010004  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000001b8  20000030  20000030  00030030  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  200001e8  200001e8  00030030  2**0
                  ALLOC
 13 .ARM.attributes 00000029  00000000  00000000  00030008  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00030031  2**0
                  CONTENTS, READONLY
 15 .debug_info   00007bb4  00000000  00000000  00030074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00001b70  00000000  00000000  00037c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000818  00000000  00000000  00039798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000621  00000000  00000000  00039fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000176ba  00000000  00000000  0003a5d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0000a647  00000000  00000000  00051c8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00082ca6  00000000  00000000  0005c2d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00001ee0  00000000  00000000  000def78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000074  00000000  00000000  000e0e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	08002cf0 	.word	0x08002cf0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
 8000148:	08002cf0 	.word	0x08002cf0

0800014c <BL_Fetch_Commend>:


/*============================================================================
 ***********************  Software Interface Definations  ********************
 ============================================================================*/
BL_Status BL_Fetch_Commend(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	/* To detect the status of function */
	BL_Status Status = BL_NACK;
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]

	/* To detect the status of uart in transmitting and receiving data */
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 8000156:	2301      	movs	r3, #1
 8000158:	71bb      	strb	r3, [r7, #6]

	/* The data length that the host should be transmit at first */
	uint8_t Data_Length = RESET;
 800015a:	2300      	movs	r3, #0
 800015c:	717b      	strb	r3, [r7, #5]

	/*Check whether to jump to app or continue in bootloader*/
    BL_Manager();
 800015e:	f000 fc87 	bl	8000a70 <BL_Manager>

	/* To clear buffer of RX and prevent carbadge messages of buffer */
	memset(BL_HostBuffer, RESET , BL_HOST_BUFFER_RX_LENGTH);
 8000162:	22c8      	movs	r2, #200	; 0xc8
 8000164:	2100      	movs	r1, #0
 8000166:	481e      	ldr	r0, [pc, #120]	; (80001e0 <BL_Fetch_Commend+0x94>)
 8000168:	f002 fd96 	bl	8002c98 <memset>
	BL_PrintMassage("Bootloader started..\r\n");
#endif
	/* Host commend format :
	   => Commend Length  (1 byte = Data_Length )
	 */
	HAL_Status = HAL_UART_Receive(BL_HOST_COMMUNICATION_UART, BL_HostBuffer, 1,
 800016c:	f04f 33ff 	mov.w	r3, #4294967295
 8000170:	2201      	movs	r2, #1
 8000172:	491b      	ldr	r1, [pc, #108]	; (80001e0 <BL_Fetch_Commend+0x94>)
 8000174:	481b      	ldr	r0, [pc, #108]	; (80001e4 <BL_Fetch_Commend+0x98>)
 8000176:	f002 fc00 	bl	800297a <HAL_UART_Receive>
 800017a:	4603      	mov	r3, r0
 800017c:	71bb      	strb	r3, [r7, #6]
			HAL_MAX_DELAY);

	if (HAL_Status != HAL_OK){
 800017e:	79bb      	ldrb	r3, [r7, #6]
 8000180:	2b00      	cmp	r3, #0
 8000182:	d002      	beq.n	800018a <BL_Fetch_Commend+0x3e>
		Status = BL_NACK ;
 8000184:	2300      	movs	r3, #0
 8000186:	71fb      	strb	r3, [r7, #7]
 8000188:	e025      	b.n	80001d6 <BL_Fetch_Commend+0x8a>
		 Commend Code (1 byte) + Delails (Data_Length)
		 Where :
		 => Commend Code is the order that Host want to do in code
		 => Delails explain what you transmit
		 */
		Data_Length = BL_HostBuffer[0];
 800018a:	4b15      	ldr	r3, [pc, #84]	; (80001e0 <BL_Fetch_Commend+0x94>)
 800018c:	781b      	ldrb	r3, [r3, #0]
 800018e:	717b      	strb	r3, [r7, #5]

		/* we determine the number of recieving bytes next from the first number transmit in first
		   time (using buffer Data_Length and store them in BL_HostBuffer) */
		HAL_Status = HAL_UART_Receive(BL_HOST_COMMUNICATION_UART, &BL_HostBuffer[1],
 8000190:	797b      	ldrb	r3, [r7, #5]
 8000192:	b29a      	uxth	r2, r3
 8000194:	f04f 33ff 	mov.w	r3, #4294967295
 8000198:	4913      	ldr	r1, [pc, #76]	; (80001e8 <BL_Fetch_Commend+0x9c>)
 800019a:	4812      	ldr	r0, [pc, #72]	; (80001e4 <BL_Fetch_Commend+0x98>)
 800019c:	f002 fbed 	bl	800297a <HAL_UART_Receive>
 80001a0:	4603      	mov	r3, r0
 80001a2:	71bb      	strb	r3, [r7, #6]
				Data_Length, HAL_MAX_DELAY);

		/* if it don't recieve correctly */
		if (HAL_Status != HAL_OK){
 80001a4:	79bb      	ldrb	r3, [r7, #6]
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d002      	beq.n	80001b0 <BL_Fetch_Commend+0x64>
			Status = BL_NACK ;
 80001aa:	2300      	movs	r3, #0
 80001ac:	71fb      	strb	r3, [r7, #7]
 80001ae:	e012      	b.n	80001d6 <BL_Fetch_Commend+0x8a>
		}
		else {
			/* To jump on the target function from the previous commend */
			if (BL_HostBuffer[1]>=FIRST_COMMEND &&BL_HostBuffer[1]<=LAST_COMMEND ){
 80001b0:	4b0b      	ldr	r3, [pc, #44]	; (80001e0 <BL_Fetch_Commend+0x94>)
 80001b2:	785b      	ldrb	r3, [r3, #1]
 80001b4:	2b0f      	cmp	r3, #15
 80001b6:	d90c      	bls.n	80001d2 <BL_Fetch_Commend+0x86>
 80001b8:	4b09      	ldr	r3, [pc, #36]	; (80001e0 <BL_Fetch_Commend+0x94>)
 80001ba:	785b      	ldrb	r3, [r3, #1]
 80001bc:	2b18      	cmp	r3, #24
 80001be:	d808      	bhi.n	80001d2 <BL_Fetch_Commend+0x86>
				Bootloader_Functions[BL_HostBuffer[1]-FIRST_COMMEND](BL_HostBuffer);
 80001c0:	4b07      	ldr	r3, [pc, #28]	; (80001e0 <BL_Fetch_Commend+0x94>)
 80001c2:	785b      	ldrb	r3, [r3, #1]
 80001c4:	3b10      	subs	r3, #16
 80001c6:	4a09      	ldr	r2, [pc, #36]	; (80001ec <BL_Fetch_Commend+0xa0>)
 80001c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <BL_Fetch_Commend+0x94>)
 80001ce:	4798      	blx	r3
 80001d0:	e001      	b.n	80001d6 <BL_Fetch_Commend+0x8a>
			else {
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
				BL_PrintMassage ("%d\n",BL_HostBuffer[1]);
				BL_PrintMassage ("Invalid commend code recieved from host !! \r\n");
#endif
				Status = BL_NACK ;
 80001d2:	2300      	movs	r3, #0
 80001d4:	71fb      	strb	r3, [r7, #7]
			}
		}
	}
	return Status;
 80001d6:	79fb      	ldrb	r3, [r7, #7]
}
 80001d8:	4618      	mov	r0, r3
 80001da:	3708      	adds	r7, #8
 80001dc:	46bd      	mov	sp, r7
 80001de:	bd80      	pop	{r7, pc}
 80001e0:	2000004c 	.word	0x2000004c
 80001e4:	20000130 	.word	0x20000130
 80001e8:	2000004d 	.word	0x2000004d
 80001ec:	20000000 	.word	0x20000000

080001f0 <Write_Program_Flag>:


void Write_Program_Flag(uint32_t Address, uint32_t Value)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b082      	sub	sp, #8
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
 80001f8:	6039      	str	r1, [r7, #0]
	/* uint32_t status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, (uint64_t)Value);*/
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, (uint64_t)Value);
 80001fa:	6839      	ldr	r1, [r7, #0]
 80001fc:	2000      	movs	r0, #0
 80001fe:	460a      	mov	r2, r1
 8000200:	4603      	mov	r3, r0
 8000202:	6879      	ldr	r1, [r7, #4]
 8000204:	2002      	movs	r0, #2
 8000206:	f000 ff77 	bl	80010f8 <HAL_FLASH_Program>
}
 800020a:	bf00      	nop
 800020c:	3708      	adds	r7, #8
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}

08000212 <Get_Program_Flag_Status>:

uint32_t Get_Program_Flag_Status(uint32_t Address)
{
 8000212:	b480      	push	{r7}
 8000214:	b085      	sub	sp, #20
 8000216:	af00      	add	r7, sp, #0
 8000218:	6078      	str	r0, [r7, #4]
	uint32_t Status = (*(uint32_t*)Address);
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	60fb      	str	r3, [r7, #12]
	return Status;
 8000220:	68fb      	ldr	r3, [r7, #12]
}
 8000222:	4618      	mov	r0, r3
 8000224:	3714      	adds	r7, #20
 8000226:	46bd      	mov	sp, r7
 8000228:	bc80      	pop	{r7}
 800022a:	4770      	bx	lr

0800022c <Bootloader_Send_Data_To_Host>:


/* Function to communicate with host */
static void Bootloader_Send_Data_To_Host(uint8_t* Host_Buffer , uint32_t Data_Len){
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
 8000234:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(BL_HOST_COMMUNICATION_UART,(uint8_t*) Host_Buffer,(uint16_t) Data_Len, HAL_MAX_DELAY);
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	b29a      	uxth	r2, r3
 800023a:	f04f 33ff 	mov.w	r3, #4294967295
 800023e:	6879      	ldr	r1, [r7, #4]
 8000240:	4803      	ldr	r0, [pc, #12]	; (8000250 <Bootloader_Send_Data_To_Host+0x24>)
 8000242:	f002 fb17 	bl	8002874 <HAL_UART_Transmit>
}
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	20000130 	.word	0x20000130

08000254 <Bootloader_Send_Data_To_Tree>:

/* Function to communicate with tree */
static void Bootloader_Send_Data_To_Tree(uint8_t* Host_Buffer , uint32_t Data_Len , uint32_t Time_To_Transmit){
 8000254:	b580      	push	{r7, lr}
 8000256:	b084      	sub	sp, #16
 8000258:	af00      	add	r7, sp, #0
 800025a:	60f8      	str	r0, [r7, #12]
 800025c:	60b9      	str	r1, [r7, #8]
 800025e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(BL_TREE_COMMUNICATION_UART,Host_Buffer,(uint16_t) Data_Len, Time_To_Transmit);
 8000260:	68bb      	ldr	r3, [r7, #8]
 8000262:	b29a      	uxth	r2, r3
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	68f9      	ldr	r1, [r7, #12]
 8000268:	4803      	ldr	r0, [pc, #12]	; (8000278 <Bootloader_Send_Data_To_Tree+0x24>)
 800026a:	f002 fb03 	bl	8002874 <HAL_UART_Transmit>
}
 800026e:	bf00      	nop
 8000270:	3710      	adds	r7, #16
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	20000178 	.word	0x20000178

0800027c <Bootloader_Get_Version>:
 your packet is
   1- 1 byte for data length = 0x02
   2- 1 byte for commend number = 0x10
   3- 1 byte to define that is for master ECU or slave ECU "Maser = 0x00 , slave = 0x01:0x05"
 */
static void Bootloader_Get_Version (uint8_t *Host_Buffer){
 800027c:	b580      	push	{r7, lr}
 800027e:	b084      	sub	sp, #16
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
	/* Sending the version and vendor id's to meet the target from command */
	uint8_t BL_Version[4] = { CBL_VENDOR_ID, CBL_SW_MAJOR_VERSION,
 8000284:	4b18      	ldr	r3, [pc, #96]	; (80002e8 <Bootloader_Get_Version+0x6c>)
 8000286:	60fb      	str	r3, [r7, #12]
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
	BL_PrintMassage ("Read Bootloader Version \r\n");
#endif

	/* To check that the coming id for master_id or slave_id */
	if (MASTERID == Host_Buffer[2]) {
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	3302      	adds	r3, #2
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	2b00      	cmp	r3, #0
 8000290:	d106      	bne.n	80002a0 <Bootloader_Get_Version+0x24>

		/* If you are master and id is master */
#if(ECU_CONFIG == MASTERID)

		Bootloader_Send_Data_To_Host(BL_Version,4);
 8000292:	f107 030c 	add.w	r3, r7, #12
 8000296:	2104      	movs	r1, #4
 8000298:	4618      	mov	r0, r3
 800029a:	f7ff ffc7 	bl	800022c <Bootloader_Send_Data_To_Host>
		/* Report Error frame */
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
		BL_PrintMassage("You sent wrong id that is not exist in ECU tree\r\n");
#endif
		}
}
 800029e:	e01f      	b.n	80002e0 <Bootloader_Get_Version+0x64>
	else if(SLAVE1 == Host_Buffer[2]){
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	3302      	adds	r3, #2
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	2b01      	cmp	r3, #1
 80002a8:	d11a      	bne.n	80002e0 <Bootloader_Get_Version+0x64>
			Bootloader_Send_Data_To_Tree(&Host_Buffer[0], 1, 5); //sending length first, The time must be 5 to avoid errors
 80002aa:	2205      	movs	r2, #5
 80002ac:	2101      	movs	r1, #1
 80002ae:	6878      	ldr	r0, [r7, #4]
 80002b0:	f7ff ffd0 	bl	8000254 <Bootloader_Send_Data_To_Tree>
			Bootloader_Send_Data_To_Tree(&Host_Buffer[1], Host_Buffer[0], 10); //sending remaining frame, The time must be 10 to avoid errors
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	1c58      	adds	r0, r3, #1
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	220a      	movs	r2, #10
 80002be:	4619      	mov	r1, r3
 80002c0:	f7ff ffc8 	bl	8000254 <Bootloader_Send_Data_To_Tree>
			HAL_UART_Receive(BL_TREE_COMMUNICATION_UART, Slave_Version, 4, HAL_MAX_DELAY); //Receive version
 80002c4:	f107 0108 	add.w	r1, r7, #8
 80002c8:	f04f 33ff 	mov.w	r3, #4294967295
 80002cc:	2204      	movs	r2, #4
 80002ce:	4807      	ldr	r0, [pc, #28]	; (80002ec <Bootloader_Get_Version+0x70>)
 80002d0:	f002 fb53 	bl	800297a <HAL_UART_Receive>
			Bootloader_Send_Data_To_Host(Slave_Version,4);
 80002d4:	f107 0308 	add.w	r3, r7, #8
 80002d8:	2104      	movs	r1, #4
 80002da:	4618      	mov	r0, r3
 80002dc:	f7ff ffa6 	bl	800022c <Bootloader_Send_Data_To_Host>
}
 80002e0:	bf00      	nop
 80002e2:	3710      	adds	r7, #16
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	01010464 	.word	0x01010464
 80002ec:	20000178 	.word	0x20000178

080002f0 <Bootloader_Get_chip_Identification_Number>:
 Your packet is :
   1- 1 byte for data length = 0x02
   2- 1 byte for commend number = 0x11
   3- 1 byte for ECU id
 */
static void Bootloader_Get_chip_Identification_Number (uint8_t *Host_Buffer){
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b084      	sub	sp, #16
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
	/* Identify the id of used MCU */
	uint16_t MCU_IdentificationNumber = RESET ;
 80002f8:	2300      	movs	r3, #0
 80002fa:	81fb      	strh	r3, [r7, #14]
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_PrintMassage ("Read MCU chip identification number \r\n");
#endif

	/* To check that the coming id for master_id or slave_id */
	if (MASTERID == Host_Buffer[2]) {
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	3302      	adds	r3, #2
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d10d      	bne.n	8000322 <Bootloader_Get_chip_Identification_Number+0x32>

		/* If you are master and id is master */
#if(ECU_CONFIG == MASTERID)
		/* Get MCU chip identification number */
		MCU_IdentificationNumber = (uint16_t)((DBGMCU->IDCODE)&0x00000FFF);
 8000306:	4b1a      	ldr	r3, [pc, #104]	; (8000370 <Bootloader_Get_chip_Identification_Number+0x80>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	b29b      	uxth	r3, r3
 800030c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000310:	b29b      	uxth	r3, r3
 8000312:	81fb      	strh	r3, [r7, #14]

		Bootloader_Send_Data_To_Host(&MCU_IdentificationNumber,1);
 8000314:	f107 030e 	add.w	r3, r7, #14
 8000318:	2101      	movs	r1, #1
 800031a:	4618      	mov	r0, r3
 800031c:	f7ff ff86 	bl	800022c <Bootloader_Send_Data_To_Host>
		/* Send error frame */
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
		BL_PrintMassage("You sent wrong id that is not exist in ECU tree\r\n");
#endif
	}
}
 8000320:	e021      	b.n	8000366 <Bootloader_Get_chip_Identification_Number+0x76>
	else if (SLAVE1 == Host_Buffer[2]){
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	3302      	adds	r3, #2
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	2b01      	cmp	r3, #1
 800032a:	d11c      	bne.n	8000366 <Bootloader_Get_chip_Identification_Number+0x76>
		uint8_t Slave_ID[2] = {0} ;
 800032c:	2300      	movs	r3, #0
 800032e:	81bb      	strh	r3, [r7, #12]
		Bootloader_Send_Data_To_Tree(&Host_Buffer[0], 1, 5); //sending length first, The time must be 5 to avoid errors
 8000330:	2205      	movs	r2, #5
 8000332:	2101      	movs	r1, #1
 8000334:	6878      	ldr	r0, [r7, #4]
 8000336:	f7ff ff8d 	bl	8000254 <Bootloader_Send_Data_To_Tree>
		Bootloader_Send_Data_To_Tree(&Host_Buffer[1], Host_Buffer[0], 10); //sending remaining frame, The time must be 10 to avoid errors
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	1c58      	adds	r0, r3, #1
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	220a      	movs	r2, #10
 8000344:	4619      	mov	r1, r3
 8000346:	f7ff ff85 	bl	8000254 <Bootloader_Send_Data_To_Tree>
		HAL_UART_Receive(BL_TREE_COMMUNICATION_UART, Slave_ID, 2 , HAL_MAX_DELAY); //Receive version
 800034a:	f107 010c 	add.w	r1, r7, #12
 800034e:	f04f 33ff 	mov.w	r3, #4294967295
 8000352:	2202      	movs	r2, #2
 8000354:	4807      	ldr	r0, [pc, #28]	; (8000374 <Bootloader_Get_chip_Identification_Number+0x84>)
 8000356:	f002 fb10 	bl	800297a <HAL_UART_Receive>
		Bootloader_Send_Data_To_Host(Slave_ID,2);
 800035a:	f107 030c 	add.w	r3, r7, #12
 800035e:	2102      	movs	r1, #2
 8000360:	4618      	mov	r0, r3
 8000362:	f7ff ff63 	bl	800022c <Bootloader_Send_Data_To_Host>
}
 8000366:	bf00      	nop
 8000368:	3710      	adds	r7, #16
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	e0042000 	.word	0xe0042000
 8000374:	20000178 	.word	0x20000178

08000378 <CBL_STM32F103_GET_RDP_Level>:



/* Get level of protection to flash memory */
static uint8_t CBL_STM32F103_GET_RDP_Level (){
 8000378:	b580      	push	{r7, lr}
 800037a:	b088      	sub	sp, #32
 800037c:	af00      	add	r7, sp, #0
	/* paramter input for function that get level of memory */
	FLASH_OBProgramInitTypeDef FLASH_OBProgram ;
	/* Get level of memory */
	HAL_FLASHEx_OBGetConfig(&FLASH_OBProgram);
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	4618      	mov	r0, r3
 8000382:	f001 f96d 	bl	8001660 <HAL_FLASHEx_OBGetConfig>
	/* Assign protection level in parameter [in\out] */
	return (uint8_t)FLASH_OBProgram.RDPLevel ;
 8000386:	7d3b      	ldrb	r3, [r7, #20]
}
 8000388:	4618      	mov	r0, r3
 800038a:	3720      	adds	r7, #32
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}

08000390 <CBL_STM32F103_GET_WDP_Level>:


/* Get level of protection to flash memory */
static uint8_t CBL_STM32F103_GET_WDP_Level (){
 8000390:	b580      	push	{r7, lr}
 8000392:	b088      	sub	sp, #32
 8000394:	af00      	add	r7, sp, #0
	/* paramter input for function that get level of memory */
	FLASH_OBProgramInitTypeDef FLASH_OBProgram ;
	/* Get level of memory */
	HAL_FLASHEx_OBGetConfig(&FLASH_OBProgram);
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	4618      	mov	r0, r3
 800039a:	f001 f961 	bl	8001660 <HAL_FLASHEx_OBGetConfig>
	/* Assign protection level in parameter [in\out] */
	return (uint8_t)FLASH_OBProgram.WRPPage ; //Casting to uint8_t as I care only with first 32 pages as STM is low density(casting would change for higher densities)
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	b2db      	uxtb	r3, r3
}
 80003a2:	4618      	mov	r0, r3
 80003a4:	3720      	adds	r7, #32
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
	...

080003ac <Bootloader_Read_Protection_Level>:
   1- 1 byte data length = 0x03
   2- 1 byte commend number = 0x12
   3- 1 byte for ECU id
   4- 1 byte for determine write or read protection level
 */
static void Bootloader_Read_Protection_Level (uint8_t *Host_Buffer){
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b084      	sub	sp, #16
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
	BL_PrintMassage ("Read the flash protection out level \r\n");
#endif

	/* If It's master and id is slave */
	if (SLAVE1 == Host_Buffer[2]){
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	3302      	adds	r3, #2
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	2b01      	cmp	r3, #1
 80003bc:	d11b      	bne.n	80003f6 <Bootloader_Read_Protection_Level+0x4a>

#if (ECU_CONFIG == MASTERID)

		uint8_t Protection_Level = 0;
 80003be:	2300      	movs	r3, #0
 80003c0:	73fb      	strb	r3, [r7, #15]

		Bootloader_Send_Data_To_Tree(&Host_Buffer[0], 1, 5); //sending length first, The time must be 5 to avoid errors
 80003c2:	2205      	movs	r2, #5
 80003c4:	2101      	movs	r1, #1
 80003c6:	6878      	ldr	r0, [r7, #4]
 80003c8:	f7ff ff44 	bl	8000254 <Bootloader_Send_Data_To_Tree>
		Bootloader_Send_Data_To_Tree(&Host_Buffer[1], Host_Buffer[0], 10); //sending remaining frame, The time must be 10 to avoid errors
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	1c58      	adds	r0, r3, #1
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	220a      	movs	r2, #10
 80003d6:	4619      	mov	r1, r3
 80003d8:	f7ff ff3c 	bl	8000254 <Bootloader_Send_Data_To_Tree>

		HAL_UART_Receive(BL_TREE_COMMUNICATION_UART, &Protection_Level, 1 , HAL_MAX_DELAY); //Receive version
 80003dc:	f107 010f 	add.w	r1, r7, #15
 80003e0:	f04f 33ff 	mov.w	r3, #4294967295
 80003e4:	2201      	movs	r2, #1
 80003e6:	4815      	ldr	r0, [pc, #84]	; (800043c <Bootloader_Read_Protection_Level+0x90>)
 80003e8:	f002 fac7 	bl	800297a <HAL_UART_Receive>

		if (READ_RP == Host_Buffer[3]){
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	3303      	adds	r3, #3
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	e01e      	b.n	8000434 <Bootloader_Read_Protection_Level+0x88>
	}

	/* If it's slave and id is slave
	 * If it's master and id is master
	 *  */
	if (READ_RP == Host_Buffer[3]) {
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	3303      	adds	r3, #3
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d10a      	bne.n	8000416 <Bootloader_Read_Protection_Level+0x6a>
		uint8_t RDP_Level = CBL_STM32F103_GET_RDP_Level();
 8000400:	f7ff ffba 	bl	8000378 <CBL_STM32F103_GET_RDP_Level>
 8000404:	4603      	mov	r3, r0
 8000406:	73bb      	strb	r3, [r7, #14]

		/* Report level */
		Bootloader_Send_Data_To_Host((uint8_t*) (&RDP_Level), 1);
 8000408:	f107 030e 	add.w	r3, r7, #14
 800040c:	2101      	movs	r1, #1
 800040e:	4618      	mov	r0, r3
 8000410:	f7ff ff0c 	bl	800022c <Bootloader_Send_Data_To_Host>
 8000414:	e00e      	b.n	8000434 <Bootloader_Read_Protection_Level+0x88>
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
		BL_PrintMassage("Read Protection level = %x\r\n", RDP_Level);
#endif
	}

	else if (READ_WP == Host_Buffer[3]) {
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	3303      	adds	r3, #3
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	2b01      	cmp	r3, #1
 800041e:	d109      	bne.n	8000434 <Bootloader_Read_Protection_Level+0x88>
		uint8_t WDP_Level = CBL_STM32F103_GET_WDP_Level();
 8000420:	f7ff ffb6 	bl	8000390 <CBL_STM32F103_GET_WDP_Level>
 8000424:	4603      	mov	r3, r0
 8000426:	737b      	strb	r3, [r7, #13]

		/* Report level */
		Bootloader_Send_Data_To_Host((uint8_t*) (&WDP_Level), 1);
 8000428:	f107 030d 	add.w	r3, r7, #13
 800042c:	2101      	movs	r1, #1
 800042e:	4618      	mov	r0, r3
 8000430:	f7ff fefc 	bl	800022c <Bootloader_Send_Data_To_Host>
	}

	else {
		/*Send Frame Error*/
	}
}
 8000434:	3710      	adds	r7, #16
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	20000178 	.word	0x20000178

08000440 <Host_Jump_Address_Verfication>:


/* Verify that the address given from host is valid */
static uint8_t Host_Jump_Address_Verfication (uint32_t Jump_Address){
 8000440:	b480      	push	{r7}
 8000442:	b085      	sub	sp, #20
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
	/* TO check on state of given address is in region or not */
	uint8_t Address_Verification_State = ADDRESS_IS_INVALID ;
 8000448:	2300      	movs	r3, #0
 800044a:	73fb      	strb	r3, [r7, #15]
	/* Check that it is at RAM memory */
	if (Jump_Address>= SRAM_BASE && Jump_Address <=STM32F103_SRAM_END){
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000452:	d306      	bcc.n	8000462 <Host_Jump_Address_Verfication+0x22>
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	4a0c      	ldr	r2, [pc, #48]	; (8000488 <Host_Jump_Address_Verfication+0x48>)
 8000458:	4293      	cmp	r3, r2
 800045a:	d802      	bhi.n	8000462 <Host_Jump_Address_Verfication+0x22>
		Address_Verification_State = ADDRESS_IS_VALID ;
 800045c:	2301      	movs	r3, #1
 800045e:	73fb      	strb	r3, [r7, #15]
 8000460:	e00c      	b.n	800047c <Host_Jump_Address_Verfication+0x3c>
	}
	/* Check that it is at Flash memory */
	else if(Jump_Address>= FLASH_BASE && Jump_Address <=STM32F103_FLASH_END){
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000468:	d306      	bcc.n	8000478 <Host_Jump_Address_Verfication+0x38>
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	4a07      	ldr	r2, [pc, #28]	; (800048c <Host_Jump_Address_Verfication+0x4c>)
 800046e:	4293      	cmp	r3, r2
 8000470:	d802      	bhi.n	8000478 <Host_Jump_Address_Verfication+0x38>
		Address_Verification_State = ADDRESS_IS_VALID ;
 8000472:	2301      	movs	r3, #1
 8000474:	73fb      	strb	r3, [r7, #15]
 8000476:	e001      	b.n	800047c <Host_Jump_Address_Verfication+0x3c>
	}
	/* Invalid region */
	else {
		Address_Verification_State = ADDRESS_IS_INVALID ;
 8000478:	2300      	movs	r3, #0
 800047a:	73fb      	strb	r3, [r7, #15]
	}
	return Address_Verification_State ;
 800047c:	7bfb      	ldrb	r3, [r7, #15]
}
 800047e:	4618      	mov	r0, r3
 8000480:	3714      	adds	r7, #20
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr
 8000488:	20005000 	.word	0x20005000
 800048c:	08010000 	.word	0x08010000

08000490 <Bootloader_Jump_To_Address>:
 Your packet is :
   1- 1 byte data length = 0x09
   2- 1 byte commend number = 0x14
   3- 4 bytes for address
 */
static void Bootloader_Jump_To_Address (uint8_t *Host_Buffer){
 8000490:	b580      	push	{r7, lr}
 8000492:	b086      	sub	sp, #24
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
	/* Buffering address */
	uint32_t Host_Jump_Address = RESET ;
 8000498:	2300      	movs	r3, #0
 800049a:	617b      	str	r3, [r7, #20]
	/* TO check on state of given address is in region or not */
	uint8_t Address_Verification_State = ADDRESS_IS_INVALID ;
 800049c:	2300      	movs	r3, #0
 800049e:	73fb      	strb	r3, [r7, #15]
		/* To get the content of Host_Buffer and variable"Host_Jump_Address" realizes that it is address
		 - &Host_Buffer[2] --> express the address of array of host
		 - (uint32_t *)    --> casting it to pointer of uint32
		 - *               --> De-reference it and get the content of buffer at this element
		 */
		Host_Jump_Address = *((uint32_t *) &(Host_Buffer[2])) ;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80004a6:	617b      	str	r3, [r7, #20]

		/* To verify that the address in the region of memory */
		Address_Verification_State = Host_Jump_Address_Verfication(Host_Jump_Address);
 80004a8:	6978      	ldr	r0, [r7, #20]
 80004aa:	f7ff ffc9 	bl	8000440 <Host_Jump_Address_Verfication>
 80004ae:	4603      	mov	r3, r0
 80004b0:	73fb      	strb	r3, [r7, #15]

		if (Address_Verification_State == ADDRESS_IS_VALID ){
 80004b2:	7bfb      	ldrb	r3, [r7, #15]
 80004b4:	2b01      	cmp	r3, #1
 80004b6:	d119      	bne.n	80004ec <Bootloader_Jump_To_Address+0x5c>
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
			BL_PrintMassage("Address verification sucessed\r\n");
#endif
			Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification_State, 1);
 80004b8:	f107 030f 	add.w	r3, r7, #15
 80004bc:	2101      	movs	r1, #1
 80004be:	4618      	mov	r0, r3
 80004c0:	f7ff feb4 	bl	800022c <Bootloader_Send_Data_To_Host>

			if (Host_Jump_Address == FLASH_PAGE_BASE_ADDRESS_APP1){
 80004c4:	697b      	ldr	r3, [r7, #20]
 80004c6:	4a0e      	ldr	r2, [pc, #56]	; (8000500 <Bootloader_Jump_To_Address+0x70>)
 80004c8:	4293      	cmp	r3, r2
 80004ca:	d102      	bne.n	80004d2 <Bootloader_Jump_To_Address+0x42>
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
				BL_PrintMassage("Jump To Application\r\n");
#endif
				Bootloader_Jump_To_User_App1();
 80004cc:	f000 f81c 	bl	8000508 <Bootloader_Jump_To_User_App1>
			Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification_State, 1);
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
			BL_PrintMassage("Address verification unsucessed\r\n");
#endif
		}
}
 80004d0:	e012      	b.n	80004f8 <Bootloader_Jump_To_Address+0x68>
			else if (Host_Jump_Address == FLASH_PAGE_BASE_ADDRESS_APP2){
 80004d2:	697b      	ldr	r3, [r7, #20]
 80004d4:	4a0b      	ldr	r2, [pc, #44]	; (8000504 <Bootloader_Jump_To_Address+0x74>)
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d102      	bne.n	80004e0 <Bootloader_Jump_To_Address+0x50>
				Bootloader_Jump_To_User_App2();
 80004da:	f000 f833 	bl	8000544 <Bootloader_Jump_To_User_App2>
}
 80004de:	e00b      	b.n	80004f8 <Bootloader_Jump_To_Address+0x68>
				Jump_Ptr Jump_Address = (Jump_Ptr) (Host_Jump_Address + 1) ;
 80004e0:	697b      	ldr	r3, [r7, #20]
 80004e2:	3301      	adds	r3, #1
 80004e4:	613b      	str	r3, [r7, #16]
				Jump_Address();
 80004e6:	693b      	ldr	r3, [r7, #16]
 80004e8:	4798      	blx	r3
}
 80004ea:	e005      	b.n	80004f8 <Bootloader_Jump_To_Address+0x68>
			Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification_State, 1);
 80004ec:	f107 030f 	add.w	r3, r7, #15
 80004f0:	2101      	movs	r1, #1
 80004f2:	4618      	mov	r0, r3
 80004f4:	f7ff fe9a 	bl	800022c <Bootloader_Send_Data_To_Host>
}
 80004f8:	bf00      	nop
 80004fa:	3718      	adds	r7, #24
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	08005000 	.word	0x08005000
 8000504:	0800a000 	.word	0x0800a000

08000508 <Bootloader_Jump_To_User_App1>:
 Be sure that
   1- base address in application is updated in (Bootloader_Jump_To_User_App)
   2- update size of bootloader code with suitable size as 17k or 15k
   3- update origin address of application code in flash memory in linker script and size also
 */
static void Bootloader_Jump_To_User_App1 (){
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
	/* Value of the main stack pointer of our main application find at address 0 in IVT */
	uint32_t MSP_Value = *((volatile uint32_t*)FLASH_PAGE_BASE_ADDRESS_APP1);
 800050e:	4b0b      	ldr	r3, [pc, #44]	; (800053c <Bootloader_Jump_To_User_App1+0x34>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	60fb      	str	r3, [r7, #12]
	/* Reset Handler defination function of our main application */
	uint32_t MainAppAddr = *((volatile uint32_t*)(FLASH_PAGE_BASE_ADDRESS_APP1+4));
 8000514:	4b0a      	ldr	r3, [pc, #40]	; (8000540 <Bootloader_Jump_To_User_App1+0x38>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	60bb      	str	r3, [r7, #8]
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
	BL_PrintMassage("Jump to application\r\n");
#endif

	/* Declare pointer to function contain the beginning address of reset function in user application */
	pFunc ResetHandler_Address = (pFunc)MainAppAddr;
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	607b      	str	r3, [r7, #4]

	/* Deinitionalization of modules that used in bootloader and work
	   the configurations of new application */
	HAL_RCC_DeInit(); /* Resets the RCC clock configuration to the default reset state. */
 800051e:	f001 fcaf 	bl	8001e80 <HAL_RCC_DeInit>
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	f383 8808 	msr	MSP, r3
}
 800052c:	bf00      	nop

	/* Reset main stack pointer */
	__set_MSP(MSP_Value);

	/* Jump to Apllication Reset Handler */
	ResetHandler_Address();
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4798      	blx	r3
}
 8000532:	bf00      	nop
 8000534:	3710      	adds	r7, #16
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	08005000 	.word	0x08005000
 8000540:	08005004 	.word	0x08005004

08000544 <Bootloader_Jump_To_User_App2>:
 Be sure that
   1- base address in application is updated in (Bootloader_Jump_To_User_App)
   2- update size of bootloader code with suitable size as 17k or 15k
   3- update origin address of application code in flash memory in linker script and size also
 */
static void Bootloader_Jump_To_User_App2 (){
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
	/* Value of the main stack pointer of our main application find at address 0 in IVT */
	uint32_t MSP_Value = *((volatile uint32_t*)FLASH_PAGE_BASE_ADDRESS_APP2);
 800054a:	4b0b      	ldr	r3, [pc, #44]	; (8000578 <Bootloader_Jump_To_User_App2+0x34>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	60fb      	str	r3, [r7, #12]
	/* Reset Handler defination function of our main application */
	uint32_t MainAppAddr = *((volatile uint32_t*)(FLASH_PAGE_BASE_ADDRESS_APP2+4));
 8000550:	4b0a      	ldr	r3, [pc, #40]	; (800057c <Bootloader_Jump_To_User_App2+0x38>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	60bb      	str	r3, [r7, #8]
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
	BL_PrintMassage("Jump to application\r\n");
#endif

	/* Declare pointer to function contain the beginning address of reset function in user application */
	pFunc ResetHandler_Address = (pFunc)MainAppAddr;
 8000556:	68bb      	ldr	r3, [r7, #8]
 8000558:	607b      	str	r3, [r7, #4]

	/* Deinitionalization of modules that used in bootloader and work
	   the configurations of new application */
	HAL_RCC_DeInit(); /* Resets the RCC clock configuration to the default reset state. */
 800055a:	f001 fc91 	bl	8001e80 <HAL_RCC_DeInit>
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	f383 8808 	msr	MSP, r3
}
 8000568:	bf00      	nop

	/* Reset main stack pointer */
	__set_MSP(MSP_Value);

	/* Jump to Apllication Reset Handler */
	ResetHandler_Address();
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4798      	blx	r3
}
 800056e:	bf00      	nop
 8000570:	3710      	adds	r7, #16
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	0800a000 	.word	0x0800a000
 800057c:	0800a004 	.word	0x0800a004

08000580 <Perform_Flash_Erase>:




/* Get erasing flash actually */
static uint8_t Perform_Flash_Erase (uint32_t PageAddress, uint8_t Number_Of_Pages){
 8000580:	b580      	push	{r7, lr}
 8000582:	b088      	sub	sp, #32
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	460b      	mov	r3, r1
 800058a:	70fb      	strb	r3, [r7, #3]
	/* To check that the sectors in not overflow the size of flash */
	uint8_t Page_validity_Status  = PAGE_INVALID_NUMBER ;
 800058c:	2300      	movs	r3, #0
 800058e:	77fb      	strb	r3, [r7, #31]
	/* Status of erasing flash */
	HAL_StatusTypeDef HAL_Status = HAL_ERROR ;
 8000590:	2301      	movs	r3, #1
 8000592:	77bb      	strb	r3, [r7, #30]
	/* Error sector status */
	uint32_t PageError = RESET ;
 8000594:	2300      	movs	r3, #0
 8000596:	61bb      	str	r3, [r7, #24]
	/* Define struct to configure parameters[in] */
	FLASH_EraseInitTypeDef pEraseInit ;
	/* Define the used bank in flash memory */
	pEraseInit.Banks = FLASH_BANK_1 ;
 8000598:	2301      	movs	r3, #1
 800059a:	60fb      	str	r3, [r7, #12]

	/* another pages is agreed but check that is acess the number of pages in flash */
	if (Number_Of_Pages >= CBL_FLASH_MAX_PAGES_NUMBER && CBL_FLASH_MASS_ERASE != PageAddress){
 800059c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	da05      	bge.n	80005b0 <Perform_Flash_Erase+0x30>
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2bff      	cmp	r3, #255	; 0xff
 80005a8:	d002      	beq.n	80005b0 <Perform_Flash_Erase+0x30>
		Page_validity_Status = PAGE_INVALID_NUMBER ;
 80005aa:	2300      	movs	r3, #0
 80005ac:	77fb      	strb	r3, [r7, #31]
 80005ae:	e030      	b.n	8000612 <Perform_Flash_Erase+0x92>
	/* erase all memory or specific page */
	else {
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
		BL_PrintMassage ("It is in range of flash memory \r\n");
#endif
		Page_validity_Status = PAGE_VALID_NUMBER ;
 80005b0:	2301      	movs	r3, #1
 80005b2:	77fb      	strb	r3, [r7, #31]
		pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 80005b4:	2300      	movs	r3, #0
 80005b6:	60bb      	str	r3, [r7, #8]

		/* Check if he want to erase all memory flash */
		if ( CBL_FLASH_MASS_ERASE == PageAddress  ){
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2bff      	cmp	r3, #255	; 0xff
 80005bc:	d104      	bne.n	80005c8 <Perform_Flash_Erase+0x48>
			pEraseInit.PageAddress = FLASH_PAGE_BASE_ADDRESS_APP1;
 80005be:	4b17      	ldr	r3, [pc, #92]	; (800061c <Perform_Flash_Erase+0x9c>)
 80005c0:	613b      	str	r3, [r7, #16]
			pEraseInit.NbPages = APPLICATION_SIZE;
 80005c2:	2313      	movs	r3, #19
 80005c4:	617b      	str	r3, [r7, #20]
 80005c6:	e003      	b.n	80005d0 <Perform_Flash_Erase+0x50>
		/* erase specific page */
		else {
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
			BL_PrintMassage ("Page erase \r\n");
#endif
			pEraseInit.PageAddress = PageAddress;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	613b      	str	r3, [r7, #16]
			pEraseInit.NbPages = Number_Of_Pages;
 80005cc:	78fb      	ldrb	r3, [r7, #3]
 80005ce:	617b      	str	r3, [r7, #20]
		}

		/* To unlock flash memory */
		HAL_Status = HAL_FLASH_Unlock();
 80005d0:	f000 fe02 	bl	80011d8 <HAL_FLASH_Unlock>
 80005d4:	4603      	mov	r3, r0
 80005d6:	77bb      	strb	r3, [r7, #30]

		/* if it's opened correctly */
		if (HAL_Status == HAL_OK){
 80005d8:	7fbb      	ldrb	r3, [r7, #30]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d117      	bne.n	800060e <Perform_Flash_Erase+0x8e>
			/* Perform a mass erase or erase the specified FLASH memory sectors */
			HAL_Status = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 80005de:	f107 0218 	add.w	r2, r7, #24
 80005e2:	f107 0308 	add.w	r3, r7, #8
 80005e6:	4611      	mov	r1, r2
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 ff0f 	bl	800140c <HAL_FLASHEx_Erase>
 80005ee:	4603      	mov	r3, r0
 80005f0:	77bb      	strb	r3, [r7, #30]

			/* To check that the flash memory is erased sucessfully */
			if (HAL_SUCESSFUL_ERASE == PageError){
 80005f2:	69bb      	ldr	r3, [r7, #24]
 80005f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005f8:	d102      	bne.n	8000600 <Perform_Flash_Erase+0x80>
				Page_validity_Status = SUCESSFUL_ERASE ;
 80005fa:	2303      	movs	r3, #3
 80005fc:	77fb      	strb	r3, [r7, #31]
 80005fe:	e001      	b.n	8000604 <Perform_Flash_Erase+0x84>
			}
			/* Didn't erase*/
			else {
				Page_validity_Status = UNSUCESSFUL_ERASE ;
 8000600:	2302      	movs	r3, #2
 8000602:	77fb      	strb	r3, [r7, #31]
			}

			HAL_Status = HAL_FLASH_Lock();
 8000604:	f000 fe0e 	bl	8001224 <HAL_FLASH_Lock>
 8000608:	4603      	mov	r3, r0
 800060a:	77bb      	strb	r3, [r7, #30]
 800060c:	e001      	b.n	8000612 <Perform_Flash_Erase+0x92>
		}
		/* Not opened */
		else {
			Page_validity_Status = UNSUCESSFUL_ERASE ;
 800060e:	2302      	movs	r3, #2
 8000610:	77fb      	strb	r3, [r7, #31]
		}
	}
	return Page_validity_Status ;
 8000612:	7ffb      	ldrb	r3, [r7, #31]
}
 8000614:	4618      	mov	r0, r3
 8000616:	3720      	adds	r7, #32
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	08005000 	.word	0x08005000

08000620 <Bootloader_Erase_Flash>:
   1- 1 byte data length = 0x0A
   2- 1 byte commend number = 0x15
   3- 4 bytes for page address
   4- 1 byte for number of pages
 */
static void Bootloader_Erase_Flash (uint8_t *Host_Buffer){
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	/* To check on Erase state */
	uint8_t Erase_Status = UNSUCESSFUL_ERASE ;
 8000628:	2302      	movs	r3, #2
 800062a:	73fb      	strb	r3, [r7, #15]
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
	BL_PrintMassage ("Mase erase or page erase of the user flash \r\n");
#endif

		/* Perform Mass erase or sector erase of the user flash */
		if (Host_Buffer[6] == MASTERID )
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	3306      	adds	r3, #6
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d112      	bne.n	800065c <Bootloader_Erase_Flash+0x3c>
		{
#if(ECU_CONFIG == MASTERID)
			Erase_Status = Perform_Flash_Erase ( *( (uint32_t*)&Host_Buffer[2] ),Host_Buffer[7]);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	3302      	adds	r3, #2
 800063a:	681a      	ldr	r2, [r3, #0]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	3307      	adds	r3, #7
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	4619      	mov	r1, r3
 8000644:	4610      	mov	r0, r2
 8000646:	f7ff ff9b 	bl	8000580 <Perform_Flash_Erase>
 800064a:	4603      	mov	r3, r0
 800064c:	73fb      	strb	r3, [r7, #15]
			/* Report the erase state */
			Bootloader_Send_Data_To_Host((uint8_t *)(&Erase_Status),1);
 800064e:	f107 030f 	add.w	r3, r7, #15
 8000652:	2101      	movs	r1, #1
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff fde9 	bl	800022c <Bootloader_Send_Data_To_Host>
 800065a:	e02f      	b.n	80006bc <Bootloader_Erase_Flash+0x9c>
#elif(ECU_CONFIG == SLAVE1)
			Erase_Status = UNSUCESSFUL_ERASE ;
			Bootloader_Send_Data_To_Host((uint8_t *)(&Erase_Status),1);
#endif
		}
		else if(Host_Buffer[6] == SLAVE1 )
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	3306      	adds	r3, #6
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b01      	cmp	r3, #1
 8000664:	d122      	bne.n	80006ac <Bootloader_Erase_Flash+0x8c>
		{
			/* Send it to Slave node */
#if(ECU_CONFIG == MASTERID)
			/*Sending frame to ECU2*/
			HAL_UART_Transmit(&huart2, &Host_Buffer[0], 1, 5); //sending length first, The time must be 5 to avoid errors
 8000666:	2305      	movs	r3, #5
 8000668:	2201      	movs	r2, #1
 800066a:	6879      	ldr	r1, [r7, #4]
 800066c:	4815      	ldr	r0, [pc, #84]	; (80006c4 <Bootloader_Erase_Flash+0xa4>)
 800066e:	f002 f901 	bl	8002874 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, &Host_Buffer[1], Host_Buffer[0], 5*Host_Buffer[0]); //sending remaining frame, The time must be of about 5 times the length to avoid errors
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	1c59      	adds	r1, r3, #1
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	b29a      	uxth	r2, r3
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	4618      	mov	r0, r3
 8000682:	4603      	mov	r3, r0
 8000684:	009b      	lsls	r3, r3, #2
 8000686:	4403      	add	r3, r0
 8000688:	480e      	ldr	r0, [pc, #56]	; (80006c4 <Bootloader_Erase_Flash+0xa4>)
 800068a:	f002 f8f3 	bl	8002874 <HAL_UART_Transmit>


			/*Receiving Ack from ECU2*/
			HAL_UART_Receive(&huart2, (uint8_t *)&Erase_Status, 1, HAL_MAX_DELAY); //Receive Error status
 800068e:	f107 010f 	add.w	r1, r7, #15
 8000692:	f04f 33ff 	mov.w	r3, #4294967295
 8000696:	2201      	movs	r2, #1
 8000698:	480a      	ldr	r0, [pc, #40]	; (80006c4 <Bootloader_Erase_Flash+0xa4>)
 800069a:	f002 f96e 	bl	800297a <HAL_UART_Receive>

			/*Sending Ack to ESP*/
			Bootloader_Send_Data_To_Host((uint8_t *)&Erase_Status, 1);
 800069e:	f107 030f 	add.w	r3, r7, #15
 80006a2:	2101      	movs	r1, #1
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff fdc1 	bl	800022c <Bootloader_Send_Data_To_Host>
 80006aa:	e007      	b.n	80006bc <Bootloader_Erase_Flash+0x9c>
#endif

		}
		else
		{
			Erase_Status = UNSUCESSFUL_ERASE ;
 80006ac:	2302      	movs	r3, #2
 80006ae:	73fb      	strb	r3, [r7, #15]
			Bootloader_Send_Data_To_Host((uint8_t *)(&Erase_Status),1);
 80006b0:	f107 030f 	add.w	r3, r7, #15
 80006b4:	2101      	movs	r1, #1
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff fdb8 	bl	800022c <Bootloader_Send_Data_To_Host>
		else {
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
			BL_PrintMassage("Unsucessful erased\r\n");
#endif
		}
}
 80006bc:	bf00      	nop
 80006be:	3710      	adds	r7, #16
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000178 	.word	0x20000178

080006c8 <Flash_Memory_Write_Payload>:



/* Write actually in flash memory */
static uint8_t Flash_Memory_Write_Payload(uint8_t *Host_PayLoad,
		uint32_t Payload_Start_Address, uint8_t Payload_Len) {
 80006c8:	b5b0      	push	{r4, r5, r7, lr}
 80006ca:	b088      	sub	sp, #32
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	60f8      	str	r0, [r7, #12]
 80006d0:	60b9      	str	r1, [r7, #8]
 80006d2:	4613      	mov	r3, r2
 80006d4:	71fb      	strb	r3, [r7, #7]
	/* The status in dealing HAL functions */
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 80006d6:	2301      	movs	r3, #1
 80006d8:	77fb      	strb	r3, [r7, #31]
	/* Status writing in flash memory */
	uint8_t Status = FLASH_PAYLOAD_WRITING_FAILED;
 80006da:	2300      	movs	r3, #0
 80006dc:	77bb      	strb	r3, [r7, #30]
	/* The number of words in data appliction sections */
	uint8_t PayLoad_Counter = RESET ;
 80006de:	2300      	movs	r3, #0
 80006e0:	777b      	strb	r3, [r7, #29]
	/* buffering half word */
	uint16_t Payload_Buffer = RESET ;
 80006e2:	2300      	movs	r3, #0
 80006e4:	837b      	strh	r3, [r7, #26]
	/* address of current writing half word */
	uint32_t Address = RESET ;
 80006e6:	2300      	movs	r3, #0
 80006e8:	617b      	str	r3, [r7, #20]

	/* Writing steps */
	/* Open flash memory */
	HAL_Status = HAL_FLASH_Unlock();
 80006ea:	f000 fd75 	bl	80011d8 <HAL_FLASH_Unlock>
 80006ee:	4603      	mov	r3, r0
 80006f0:	77fb      	strb	r3, [r7, #31]

	/* If it opened */
	if (HAL_Status == HAL_OK) {
 80006f2:	7ffb      	ldrb	r3, [r7, #31]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d134      	bne.n	8000762 <Flash_Memory_Write_Payload+0x9a>
		/* Transfer the data sections half word by half word */
		while (Payload_Len !=0 && Status == HAL_OK ){
 80006f8:	e024      	b.n	8000744 <Flash_Memory_Write_Payload+0x7c>
			Payload_Buffer = (uint16_t) Host_PayLoad[PayLoad_Counter]
 80006fa:	7f7b      	ldrb	r3, [r7, #29]
 80006fc:	68fa      	ldr	r2, [r7, #12]
 80006fe:	4413      	add	r3, r2
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	b21a      	sxth	r2, r3
													 |( (uint16_t)Host_PayLoad[PayLoad_Counter+1] << TWO_BYTES );
 8000704:	7f7b      	ldrb	r3, [r7, #29]
 8000706:	3301      	adds	r3, #1
 8000708:	68f9      	ldr	r1, [r7, #12]
 800070a:	440b      	add	r3, r1
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	021b      	lsls	r3, r3, #8
 8000710:	b21b      	sxth	r3, r3
 8000712:	4313      	orrs	r3, r2
 8000714:	b21b      	sxth	r3, r3
			Payload_Buffer = (uint16_t) Host_PayLoad[PayLoad_Counter]
 8000716:	837b      	strh	r3, [r7, #26]

			/*update the flash address each itration */
			Address = Payload_Start_Address + PayLoad_Counter ;
 8000718:	7f7b      	ldrb	r3, [r7, #29]
 800071a:	68ba      	ldr	r2, [r7, #8]
 800071c:	4413      	add	r3, r2
 800071e:	617b      	str	r3, [r7, #20]

			/*Writing the Date in the flash Halfword by Halfword */
			HAL_Status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 8000720:	8b7b      	ldrh	r3, [r7, #26]
 8000722:	2200      	movs	r2, #0
 8000724:	461c      	mov	r4, r3
 8000726:	4615      	mov	r5, r2
 8000728:	4622      	mov	r2, r4
 800072a:	462b      	mov	r3, r5
 800072c:	6979      	ldr	r1, [r7, #20]
 800072e:	2001      	movs	r0, #1
 8000730:	f000 fce2 	bl	80010f8 <HAL_FLASH_Program>
 8000734:	4603      	mov	r3, r0
 8000736:	77fb      	strb	r3, [r7, #31]
					Address, (uint64_t)Payload_Buffer);

			/*To increment PayLoad_Counter and stopped on new half word in host packet frame
			  To decrement Payload_Len to be sure that all of host packet frame is written
			 */
			Payload_Len-=2;
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	3b02      	subs	r3, #2
 800073c:	71fb      	strb	r3, [r7, #7]
			PayLoad_Counter+=2;
 800073e:	7f7b      	ldrb	r3, [r7, #29]
 8000740:	3302      	adds	r3, #2
 8000742:	777b      	strb	r3, [r7, #29]
		while (Payload_Len !=0 && Status == HAL_OK ){
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d002      	beq.n	8000750 <Flash_Memory_Write_Payload+0x88>
 800074a:	7fbb      	ldrb	r3, [r7, #30]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d0d4      	beq.n	80006fa <Flash_Memory_Write_Payload+0x32>
		}

		/* if function can't write on memory Status be failed */
		if (HAL_Status != HAL_OK) {
 8000750:	7ffb      	ldrb	r3, [r7, #31]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d002      	beq.n	800075c <Flash_Memory_Write_Payload+0x94>
			Status = FLASH_PAYLOAD_WRITING_FAILED;
 8000756:	2300      	movs	r3, #0
 8000758:	77bb      	strb	r3, [r7, #30]
 800075a:	e004      	b.n	8000766 <Flash_Memory_Write_Payload+0x9e>
		} else {
			/* All iterations, It can write on memory make status passed */
			Status = FLASH_PAYLOAD_WRITING_PASSED;
 800075c:	2301      	movs	r3, #1
 800075e:	77bb      	strb	r3, [r7, #30]
 8000760:	e001      	b.n	8000766 <Flash_Memory_Write_Payload+0x9e>
		}
	}
	else {
		/* If it can't open memory make status failed */
		Status = FLASH_PAYLOAD_WRITING_FAILED;
 8000762:	2300      	movs	r3, #0
 8000764:	77bb      	strb	r3, [r7, #30]
	}

	/* If all status is OK so It will lock memory */
	if (Status == FLASH_PAYLOAD_WRITING_PASSED && HAL_Status == HAL_OK) {
 8000766:	7fbb      	ldrb	r3, [r7, #30]
 8000768:	2b01      	cmp	r3, #1
 800076a:	d10f      	bne.n	800078c <Flash_Memory_Write_Payload+0xc4>
 800076c:	7ffb      	ldrb	r3, [r7, #31]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d10c      	bne.n	800078c <Flash_Memory_Write_Payload+0xc4>
		HAL_Status = HAL_FLASH_Lock();
 8000772:	f000 fd57 	bl	8001224 <HAL_FLASH_Lock>
 8000776:	4603      	mov	r3, r0
 8000778:	77fb      	strb	r3, [r7, #31]

		/* Check if it locked it true or not */
		if (HAL_Status != HAL_OK) {
 800077a:	7ffb      	ldrb	r3, [r7, #31]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d002      	beq.n	8000786 <Flash_Memory_Write_Payload+0xbe>
			Status = FLASH_PAYLOAD_WRITING_FAILED;
 8000780:	2300      	movs	r3, #0
 8000782:	77bb      	strb	r3, [r7, #30]
		if (HAL_Status != HAL_OK) {
 8000784:	e004      	b.n	8000790 <Flash_Memory_Write_Payload+0xc8>
		} else {
			Status = FLASH_PAYLOAD_WRITING_PASSED;
 8000786:	2301      	movs	r3, #1
 8000788:	77bb      	strb	r3, [r7, #30]
		if (HAL_Status != HAL_OK) {
 800078a:	e001      	b.n	8000790 <Flash_Memory_Write_Payload+0xc8>
		}
	} else {
		/* If one of status is not OK so It will make returned status with failed */
		Status = FLASH_PAYLOAD_WRITING_FAILED;
 800078c:	2300      	movs	r3, #0
 800078e:	77bb      	strb	r3, [r7, #30]
	}
	return Status;
 8000790:	7fbb      	ldrb	r3, [r7, #30]
}
 8000792:	4618      	mov	r0, r3
 8000794:	3720      	adds	r7, #32
 8000796:	46bd      	mov	sp, r7
 8000798:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800079c <Bootloader_Memory_Write>:
   2- 1 byte commend number = 0x16
   3- 4 bytes for address
   4- 1 byte for size of writing data
   5- N bytes of data info
 */
static void Bootloader_Memory_Write (uint8_t *Host_Buffer){
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
	/* Base address that you will write on */
	uint32_t HOST_Address = 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	60fb      	str	r3, [r7, #12]
	/* Number of bytes that will be sent */
	uint8_t Payload_Len = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	72fb      	strb	r3, [r7, #11]
	/* The status of input address from the host */
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 80007ac:	2300      	movs	r3, #0
 80007ae:	72bb      	strb	r3, [r7, #10]
	/* Status writing in flash memory */
	uint8_t Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITING_FAILED;
 80007b0:	2300      	movs	r3, #0
 80007b2:	727b      	strb	r3, [r7, #9]
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
	BL_PrintMassage ("Write data into memory \r\n");
#endif

		/* Extract the start address from the Host packet */
		HOST_Address = *((uint32_t *)(&Host_Buffer[2]));
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80007ba:	60fb      	str	r3, [r7, #12]
		/* Extract the payload length from the Host packet */
		Payload_Len = Host_Buffer[8];
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	7a1b      	ldrb	r3, [r3, #8]
 80007c0:	72fb      	strb	r3, [r7, #11]

		/* Verify the Extracted address to be valid address */
		Address_Verification = Host_Jump_Address_Verfication(HOST_Address);
 80007c2:	68f8      	ldr	r0, [r7, #12]
 80007c4:	f7ff fe3c 	bl	8000440 <Host_Jump_Address_Verfication>
 80007c8:	4603      	mov	r3, r0
 80007ca:	72bb      	strb	r3, [r7, #10]

		if(ADDRESS_IS_VALID == Address_Verification)
 80007cc:	7abb      	ldrb	r3, [r7, #10]
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d145      	bne.n	800085e <Bootloader_Memory_Write+0xc2>
		{
			if (Host_Buffer[6] == MASTERID){
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	3306      	adds	r3, #6
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d10f      	bne.n	80007fc <Bootloader_Memory_Write+0x60>

#if(ECU_CONFIG == MASTERID)
				/* Write the payload to the Flash memory */
				Flash_Payload_Write_Status = Flash_Memory_Write_Payload((uint8_t *)&Host_Buffer[9], HOST_Address, Payload_Len);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	3309      	adds	r3, #9
 80007e0:	7afa      	ldrb	r2, [r7, #11]
 80007e2:	68f9      	ldr	r1, [r7, #12]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff ff6f 	bl	80006c8 <Flash_Memory_Write_Payload>
 80007ea:	4603      	mov	r3, r0
 80007ec:	727b      	strb	r3, [r7, #9]

				/* Report payload writing state */
				Bootloader_Send_Data_To_Host((uint8_t *)&Flash_Payload_Write_Status, 1);
 80007ee:	f107 0309 	add.w	r3, r7, #9
 80007f2:	2101      	movs	r1, #1
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff fd19 	bl	800022c <Bootloader_Send_Data_To_Host>
		{
			/* Report address verification failed */
			Address_Verification = ADDRESS_IS_INVALID;
			Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification, 1);
		}
}
 80007fa:	e038      	b.n	800086e <Bootloader_Memory_Write+0xd2>
			else if(Host_Buffer[6] == SLAVE1) {
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	3306      	adds	r3, #6
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	2b01      	cmp	r3, #1
 8000804:	d122      	bne.n	800084c <Bootloader_Memory_Write+0xb0>
				HAL_UART_Transmit(&huart2, &Host_Buffer[0], 1, 5); //sending length first, The time must be 5 to avoid errors
 8000806:	2305      	movs	r3, #5
 8000808:	2201      	movs	r2, #1
 800080a:	6879      	ldr	r1, [r7, #4]
 800080c:	481a      	ldr	r0, [pc, #104]	; (8000878 <Bootloader_Memory_Write+0xdc>)
 800080e:	f002 f831 	bl	8002874 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, &Host_Buffer[1], Host_Buffer[0], 5*Host_Buffer[0]); //sending remaining frame, The time must be of about 5 times the length to avoid errors
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	1c59      	adds	r1, r3, #1
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	b29a      	uxth	r2, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	4618      	mov	r0, r3
 8000822:	4603      	mov	r3, r0
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	4403      	add	r3, r0
 8000828:	4813      	ldr	r0, [pc, #76]	; (8000878 <Bootloader_Memory_Write+0xdc>)
 800082a:	f002 f823 	bl	8002874 <HAL_UART_Transmit>
				HAL_UART_Receive(&huart2, (uint8_t *)&Flash_Payload_Write_Status, 1, HAL_MAX_DELAY); //Receive Error status
 800082e:	f107 0109 	add.w	r1, r7, #9
 8000832:	f04f 33ff 	mov.w	r3, #4294967295
 8000836:	2201      	movs	r2, #1
 8000838:	480f      	ldr	r0, [pc, #60]	; (8000878 <Bootloader_Memory_Write+0xdc>)
 800083a:	f002 f89e 	bl	800297a <HAL_UART_Receive>
				Bootloader_Send_Data_To_Host((uint8_t *)&Flash_Payload_Write_Status, 1);
 800083e:	f107 0309 	add.w	r3, r7, #9
 8000842:	2101      	movs	r1, #1
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff fcf1 	bl	800022c <Bootloader_Send_Data_To_Host>
}
 800084a:	e010      	b.n	800086e <Bootloader_Memory_Write+0xd2>
				Address_Verification = ADDRESS_IS_INVALID;
 800084c:	2300      	movs	r3, #0
 800084e:	72bb      	strb	r3, [r7, #10]
				Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification, 1);
 8000850:	f107 030a 	add.w	r3, r7, #10
 8000854:	2101      	movs	r1, #1
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff fce8 	bl	800022c <Bootloader_Send_Data_To_Host>
}
 800085c:	e007      	b.n	800086e <Bootloader_Memory_Write+0xd2>
			Address_Verification = ADDRESS_IS_INVALID;
 800085e:	2300      	movs	r3, #0
 8000860:	72bb      	strb	r3, [r7, #10]
			Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification, 1);
 8000862:	f107 030a 	add.w	r3, r7, #10
 8000866:	2101      	movs	r1, #1
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff fcdf 	bl	800022c <Bootloader_Send_Data_To_Host>
}
 800086e:	bf00      	nop
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000178 	.word	0x20000178

0800087c <Bootloader_Enable_R_Protection>:


static void Bootloader_Enable_R_Protection(uint8_t *Host_Buffer){
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	 * 5. Lock option byte. 		HAL_FLASH_OB_Lock
	 * 6. Reset.					HAL_FLASH_OB_Launch
	 *
	 *
	 * */
	uint8_t Host_ROP_Level = Host_Buffer[2] ;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	789b      	ldrb	r3, [r3, #2]
 8000888:	73fb      	strb	r3, [r7, #15]
	uint8_t ROP_Level_Status = ROP_LEVEL_CHANGE_INVALID;
 800088a:	2300      	movs	r3, #0
 800088c:	73bb      	strb	r3, [r7, #14]

	if (CBL_ROP_LEVEL_0 == Host_ROP_Level){
 800088e:	7bfb      	ldrb	r3, [r7, #15]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d11f      	bne.n	80008d4 <Bootloader_Enable_R_Protection+0x58>

		Bootloader_Send_Data_To_Host("Level 0", 8);
 8000894:	2108      	movs	r1, #8
 8000896:	481e      	ldr	r0, [pc, #120]	; (8000910 <Bootloader_Enable_R_Protection+0x94>)
 8000898:	f7ff fcc8 	bl	800022c <Bootloader_Send_Data_To_Host>

		pOBInit.OptionType = OPTIONBYTE_RDP;
 800089c:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <Bootloader_Enable_R_Protection+0x98>)
 800089e:	2202      	movs	r2, #2
 80008a0:	601a      	str	r2, [r3, #0]
		pOBInit.RDPLevel = OB_RDP_LEVEL_0;
 80008a2:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <Bootloader_Enable_R_Protection+0x98>)
 80008a4:	22a5      	movs	r2, #165	; 0xa5
 80008a6:	741a      	strb	r2, [r3, #16]

		HAL_FLASH_Unlock();
 80008a8:	f000 fc96 	bl	80011d8 <HAL_FLASH_Unlock>
		HAL_FLASH_OB_Unlock();
 80008ac:	f000 fcca 	bl	8001244 <HAL_FLASH_OB_Unlock>
		HAL_FLASHEx_OBProgram(&pOBInit);
 80008b0:	4818      	ldr	r0, [pc, #96]	; (8000914 <Bootloader_Enable_R_Protection+0x98>)
 80008b2:	f000 fe59 	bl	8001568 <HAL_FLASHEx_OBProgram>
		HAL_FLASH_Lock();
 80008b6:	f000 fcb5 	bl	8001224 <HAL_FLASH_Lock>
		HAL_FLASH_OB_Lock();
 80008ba:	f000 fcdf 	bl	800127c <HAL_FLASH_OB_Lock>
		HAL_FLASH_OB_Launch();
 80008be:	f000 fced 	bl	800129c <HAL_FLASH_OB_Launch>

		ROP_Level_Status = ROP_LEVEL_CHANGE_VALID;
 80008c2:	2301      	movs	r3, #1
 80008c4:	73bb      	strb	r3, [r7, #14]
		Bootloader_Send_Data_To_Host((uint8_t *)&ROP_Level_Status, 1);
 80008c6:	f107 030e 	add.w	r3, r7, #14
 80008ca:	2101      	movs	r1, #1
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff fcad 	bl	800022c <Bootloader_Send_Data_To_Host>
		HAL_FLASHEx_OBProgram(&pOBInit);
		HAL_FLASH_Lock();
		HAL_FLASH_OB_Lock();
		HAL_FLASH_OB_Launch();
	}
}
 80008d2:	e019      	b.n	8000908 <Bootloader_Enable_R_Protection+0x8c>
	else if (CBL_ROP_LEVEL_1 == Host_ROP_Level) {
 80008d4:	7bfb      	ldrb	r3, [r7, #15]
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d116      	bne.n	8000908 <Bootloader_Enable_R_Protection+0x8c>
		Bootloader_Send_Data_To_Host("Level 1", 8);
 80008da:	2108      	movs	r1, #8
 80008dc:	480e      	ldr	r0, [pc, #56]	; (8000918 <Bootloader_Enable_R_Protection+0x9c>)
 80008de:	f7ff fca5 	bl	800022c <Bootloader_Send_Data_To_Host>
		pOBInit.OptionType = OPTIONBYTE_RDP;
 80008e2:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <Bootloader_Enable_R_Protection+0x98>)
 80008e4:	2202      	movs	r2, #2
 80008e6:	601a      	str	r2, [r3, #0]
		pOBInit.RDPLevel = OB_RDP_LEVEL_1;
 80008e8:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <Bootloader_Enable_R_Protection+0x98>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	741a      	strb	r2, [r3, #16]
		HAL_FLASH_Unlock();
 80008ee:	f000 fc73 	bl	80011d8 <HAL_FLASH_Unlock>
		HAL_FLASH_OB_Unlock();
 80008f2:	f000 fca7 	bl	8001244 <HAL_FLASH_OB_Unlock>
		HAL_FLASHEx_OBProgram(&pOBInit);
 80008f6:	4807      	ldr	r0, [pc, #28]	; (8000914 <Bootloader_Enable_R_Protection+0x98>)
 80008f8:	f000 fe36 	bl	8001568 <HAL_FLASHEx_OBProgram>
		HAL_FLASH_Lock();
 80008fc:	f000 fc92 	bl	8001224 <HAL_FLASH_Lock>
		HAL_FLASH_OB_Lock();
 8000900:	f000 fcbc 	bl	800127c <HAL_FLASH_OB_Lock>
		HAL_FLASH_OB_Launch();
 8000904:	f000 fcca 	bl	800129c <HAL_FLASH_OB_Launch>
}
 8000908:	bf00      	nop
 800090a:	3710      	adds	r7, #16
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	08002d08 	.word	0x08002d08
 8000914:	20000114 	.word	0x20000114
 8000918:	08002d10 	.word	0x08002d10

0800091c <Bootloader_Enable_W_Protection>:



static void Bootloader_Enable_W_Protection(uint8_t *Host_Buffer){
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
	 *
	 * */

	/*uint8_t WP_Level_Status = ROP_LEVEL_CHANGE_INVALID;*/

	uint8_t Host_WP_Level = Host_Buffer[2];
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	789b      	ldrb	r3, [r3, #2]
 8000928:	73fb      	strb	r3, [r7, #15]


	if (OB_WRPSTATE_ENABLE == Host_WP_Level) {
 800092a:	7bfb      	ldrb	r3, [r7, #15]
 800092c:	2b01      	cmp	r3, #1
 800092e:	d11a      	bne.n	8000966 <Bootloader_Enable_W_Protection+0x4a>

		Bootloader_Send_Data_To_Host("Level 1", 8);
 8000930:	2108      	movs	r1, #8
 8000932:	481d      	ldr	r0, [pc, #116]	; (80009a8 <Bootloader_Enable_W_Protection+0x8c>)
 8000934:	f7ff fc7a 	bl	800022c <Bootloader_Send_Data_To_Host>

		pOBInit.OptionType = OPTIONBYTE_WRP;
 8000938:	4b1c      	ldr	r3, [pc, #112]	; (80009ac <Bootloader_Enable_W_Protection+0x90>)
 800093a:	2201      	movs	r2, #1
 800093c:	601a      	str	r2, [r3, #0]
		pOBInit.WRPState = OB_WRPSTATE_ENABLE;
 800093e:	4b1b      	ldr	r3, [pc, #108]	; (80009ac <Bootloader_Enable_W_Protection+0x90>)
 8000940:	2201      	movs	r2, #1
 8000942:	605a      	str	r2, [r3, #4]
		pOBInit.WRPPage = OB_WRP_PAGES0TO3 | OB_WRP_PAGES4TO7 | OB_WRP_PAGES8TO11 | OB_WRP_PAGES12TO15 | OB_WRP_PAGES16TO19 | OB_WRP_PAGES20TO23 | OB_WRP_PAGES24TO27 | OB_WRP_PAGES28TO31;//We make ORing operations to enable write protect to all pages
 8000944:	4b19      	ldr	r3, [pc, #100]	; (80009ac <Bootloader_Enable_W_Protection+0x90>)
 8000946:	22ff      	movs	r2, #255	; 0xff
 8000948:	609a      	str	r2, [r3, #8]

		HAL_FLASH_Unlock();
 800094a:	f000 fc45 	bl	80011d8 <HAL_FLASH_Unlock>
		HAL_FLASH_OB_Unlock();
 800094e:	f000 fc79 	bl	8001244 <HAL_FLASH_OB_Unlock>
		HAL_FLASHEx_OBProgram(&pOBInit);
 8000952:	4816      	ldr	r0, [pc, #88]	; (80009ac <Bootloader_Enable_W_Protection+0x90>)
 8000954:	f000 fe08 	bl	8001568 <HAL_FLASHEx_OBProgram>
		HAL_FLASH_Lock();
 8000958:	f000 fc64 	bl	8001224 <HAL_FLASH_Lock>
		HAL_FLASH_OB_Lock();
 800095c:	f000 fc8e 	bl	800127c <HAL_FLASH_OB_Lock>
		HAL_FLASH_OB_Launch();
 8000960:	f000 fc9c 	bl	800129c <HAL_FLASH_OB_Launch>
		HAL_FLASH_OB_Launch();

	} else {
		//DO NOTHING
	}
}
 8000964:	e01c      	b.n	80009a0 <Bootloader_Enable_W_Protection+0x84>
	} else if (OB_WRPSTATE_DISABLE == Host_WP_Level) {
 8000966:	7bfb      	ldrb	r3, [r7, #15]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d119      	bne.n	80009a0 <Bootloader_Enable_W_Protection+0x84>
		Bootloader_Send_Data_To_Host("Level 0", 8);
 800096c:	2108      	movs	r1, #8
 800096e:	4810      	ldr	r0, [pc, #64]	; (80009b0 <Bootloader_Enable_W_Protection+0x94>)
 8000970:	f7ff fc5c 	bl	800022c <Bootloader_Send_Data_To_Host>
		pOBInit.OptionType = OPTIONBYTE_WRP;
 8000974:	4b0d      	ldr	r3, [pc, #52]	; (80009ac <Bootloader_Enable_W_Protection+0x90>)
 8000976:	2201      	movs	r2, #1
 8000978:	601a      	str	r2, [r3, #0]
		pOBInit.WRPState = OB_WRPSTATE_DISABLE;
 800097a:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <Bootloader_Enable_W_Protection+0x90>)
 800097c:	2200      	movs	r2, #0
 800097e:	605a      	str	r2, [r3, #4]
		pOBInit.WRPPage = OB_WRP_PAGES0TO3 | OB_WRP_PAGES4TO7 | OB_WRP_PAGES8TO11 | OB_WRP_PAGES12TO15 | OB_WRP_PAGES16TO19 | OB_WRP_PAGES20TO23 | OB_WRP_PAGES24TO27 | OB_WRP_PAGES28TO31;//We make ORing operation to disable write protect to all pages(you should increase OR operation for higher densities STM)
 8000980:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <Bootloader_Enable_W_Protection+0x90>)
 8000982:	22ff      	movs	r2, #255	; 0xff
 8000984:	609a      	str	r2, [r3, #8]
		HAL_FLASH_Unlock();
 8000986:	f000 fc27 	bl	80011d8 <HAL_FLASH_Unlock>
		HAL_FLASH_OB_Unlock();
 800098a:	f000 fc5b 	bl	8001244 <HAL_FLASH_OB_Unlock>
		HAL_FLASHEx_OBProgram(&pOBInit);
 800098e:	4807      	ldr	r0, [pc, #28]	; (80009ac <Bootloader_Enable_W_Protection+0x90>)
 8000990:	f000 fdea 	bl	8001568 <HAL_FLASHEx_OBProgram>
		HAL_FLASH_Lock();
 8000994:	f000 fc46 	bl	8001224 <HAL_FLASH_Lock>
		HAL_FLASH_OB_Lock();
 8000998:	f000 fc70 	bl	800127c <HAL_FLASH_OB_Lock>
		HAL_FLASH_OB_Launch();
 800099c:	f000 fc7e 	bl	800129c <HAL_FLASH_OB_Launch>
}
 80009a0:	bf00      	nop
 80009a2:	3710      	adds	r7, #16
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	08002d10 	.word	0x08002d10
 80009ac:	20000114 	.word	0x20000114
 80009b0:	08002d08 	.word	0x08002d08

080009b4 <Bootloader_SetApplication_Flag>:
 Host_Buffer[1]=0x18
 Host_Buffer[2]=Node Number
 Host_Buffer[3]=Application Number
 */
static void Bootloader_SetApplication_Flag(uint8_t *Host_Buffer)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]

	/* To set application number */
	uint8_t ECU = Host_Buffer[2];
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	789b      	ldrb	r3, [r3, #2]
 80009c0:	73fb      	strb	r3, [r7, #15]
	uint8_t APP = Host_Buffer[3] ;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	78db      	ldrb	r3, [r3, #3]
 80009c6:	73bb      	strb	r3, [r7, #14]
	HAL_FLASH_Unlock(); //To enable writing to flash
 80009c8:	f000 fc06 	bl	80011d8 <HAL_FLASH_Unlock>

	if (ECU == MASTERID)
 80009cc:	7bfb      	ldrb	r3, [r7, #15]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d129      	bne.n	8000a26 <Bootloader_SetApplication_Flag+0x72>
	{
#if(ECU_CONFIG == MASTERID)
		/* To edit the application flag */
		if (APP == APPLICATION1)
 80009d2:	7bbb      	ldrb	r3, [r7, #14]
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d111      	bne.n	80009fc <Bootloader_SetApplication_Flag+0x48>
		{
			Write_Program_Flag(FLAG_APP1_ADDRESS, FLAG_APP_ON);
 80009d8:	f04f 31aa 	mov.w	r1, #2863311530	; 0xaaaaaaaa
 80009dc:	4820      	ldr	r0, [pc, #128]	; (8000a60 <Bootloader_SetApplication_Flag+0xac>)
 80009de:	f7ff fc07 	bl	80001f0 <Write_Program_Flag>
			Write_Program_Flag(FLAG_APP2_ADDRESS, FLAG_APP_OFF);
 80009e2:	f04f 31ee 	mov.w	r1, #4008636142	; 0xeeeeeeee
 80009e6:	481f      	ldr	r0, [pc, #124]	; (8000a64 <Bootloader_SetApplication_Flag+0xb0>)
 80009e8:	f7ff fc02 	bl	80001f0 <Write_Program_Flag>
			Write_Program_Flag(FLAG_BL_ADDRESS, FLAG_APP_OFF);
 80009ec:	f04f 31ee 	mov.w	r1, #4008636142	; 0xeeeeeeee
 80009f0:	481d      	ldr	r0, [pc, #116]	; (8000a68 <Bootloader_SetApplication_Flag+0xb4>)
 80009f2:	f7ff fbfd 	bl	80001f0 <Write_Program_Flag>
			HAL_NVIC_SystemReset();
 80009f6:	f000 fb6e 	bl	80010d6 <HAL_NVIC_SystemReset>
 80009fa:	e02b      	b.n	8000a54 <Bootloader_SetApplication_Flag+0xa0>
		}
		else if (APP == APPLICATION2)
 80009fc:	7bbb      	ldrb	r3, [r7, #14]
 80009fe:	2b02      	cmp	r3, #2
 8000a00:	d128      	bne.n	8000a54 <Bootloader_SetApplication_Flag+0xa0>
		{
			Write_Program_Flag(FLAG_APP1_ADDRESS, FLAG_APP_OFF);
 8000a02:	f04f 31ee 	mov.w	r1, #4008636142	; 0xeeeeeeee
 8000a06:	4816      	ldr	r0, [pc, #88]	; (8000a60 <Bootloader_SetApplication_Flag+0xac>)
 8000a08:	f7ff fbf2 	bl	80001f0 <Write_Program_Flag>
			Write_Program_Flag(FLAG_APP2_ADDRESS, FLAG_APP_ON);
 8000a0c:	f04f 31aa 	mov.w	r1, #2863311530	; 0xaaaaaaaa
 8000a10:	4814      	ldr	r0, [pc, #80]	; (8000a64 <Bootloader_SetApplication_Flag+0xb0>)
 8000a12:	f7ff fbed 	bl	80001f0 <Write_Program_Flag>
			Write_Program_Flag(FLAG_BL_ADDRESS, FLAG_APP_OFF);
 8000a16:	f04f 31ee 	mov.w	r1, #4008636142	; 0xeeeeeeee
 8000a1a:	4813      	ldr	r0, [pc, #76]	; (8000a68 <Bootloader_SetApplication_Flag+0xb4>)
 8000a1c:	f7ff fbe8 	bl	80001f0 <Write_Program_Flag>
			HAL_NVIC_SystemReset();
 8000a20:	f000 fb59 	bl	80010d6 <HAL_NVIC_SystemReset>
 8000a24:	e016      	b.n	8000a54 <Bootloader_SetApplication_Flag+0xa0>
			/* Warning to ESP */
		}
#endif

	}
	else if(ECU == SLAVE1)
 8000a26:	7bfb      	ldrb	r3, [r7, #15]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d113      	bne.n	8000a54 <Bootloader_SetApplication_Flag+0xa0>
	{
#if(ECU_CONFIG == MASTERID)
		HAL_UART_Transmit(&huart2, &Host_Buffer[0], 1, 5); //sending length first, The time must be 5 to avoid errors
 8000a2c:	2305      	movs	r3, #5
 8000a2e:	2201      	movs	r2, #1
 8000a30:	6879      	ldr	r1, [r7, #4]
 8000a32:	480e      	ldr	r0, [pc, #56]	; (8000a6c <Bootloader_SetApplication_Flag+0xb8>)
 8000a34:	f001 ff1e 	bl	8002874 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, &Host_Buffer[1], Host_Buffer[0], 5*Host_Buffer[0]); //sending remaining frame, The time must be of about 5 times the length to avoid errors
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	1c59      	adds	r1, r3, #1
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	b29a      	uxth	r2, r3
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	4618      	mov	r0, r3
 8000a48:	4603      	mov	r3, r0
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	4403      	add	r3, r0
 8000a4e:	4807      	ldr	r0, [pc, #28]	; (8000a6c <Bootloader_SetApplication_Flag+0xb8>)
 8000a50:	f001 ff10 	bl	8002874 <HAL_UART_Transmit>
#endif

	}


	HAL_FLASH_Lock();//To disable writing to flash after finishing the function
 8000a54:	f000 fbe6 	bl	8001224 <HAL_FLASH_Lock>
}
 8000a58:	bf00      	nop
 8000a5a:	3710      	adds	r7, #16
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	08010004 	.word	0x08010004
 8000a64:	08010008 	.word	0x08010008
 8000a68:	08010000 	.word	0x08010000
 8000a6c:	20000178 	.word	0x20000178

08000a70 <BL_Manager>:

static void BL_Manager(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
	if(Get_Program_Flag_Status(FLAG_BL_ADDRESS) == FLAG_APP_ON)
 8000a74:	480d      	ldr	r0, [pc, #52]	; (8000aac <BL_Manager+0x3c>)
 8000a76:	f7ff fbcc 	bl	8000212 <Get_Program_Flag_Status>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 8000a80:	d012      	beq.n	8000aa8 <BL_Manager+0x38>
	{
		/*Do nothing*/
	}
	else if(Get_Program_Flag_Status(FLAG_APP1_ADDRESS) == FLAG_APP_ON)
 8000a82:	480b      	ldr	r0, [pc, #44]	; (8000ab0 <BL_Manager+0x40>)
 8000a84:	f7ff fbc5 	bl	8000212 <Get_Program_Flag_Status>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 8000a8e:	d102      	bne.n	8000a96 <BL_Manager+0x26>
	{
		/*Jump to App1*/
		Bootloader_Jump_To_User_App1();
 8000a90:	f7ff fd3a 	bl	8000508 <Bootloader_Jump_To_User_App1>
	}
	else
	{
		/*Do nothing*/
	}
}
 8000a94:	e008      	b.n	8000aa8 <BL_Manager+0x38>
	else if(Get_Program_Flag_Status(FLAG_APP2_ADDRESS) == FLAG_APP_ON)
 8000a96:	4807      	ldr	r0, [pc, #28]	; (8000ab4 <BL_Manager+0x44>)
 8000a98:	f7ff fbbb 	bl	8000212 <Get_Program_Flag_Status>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 8000aa2:	d101      	bne.n	8000aa8 <BL_Manager+0x38>
		Bootloader_Jump_To_User_App2();
 8000aa4:	f7ff fd4e 	bl	8000544 <Bootloader_Jump_To_User_App2>
}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	08010000 	.word	0x08010000
 8000ab0:	08010004 	.word	0x08010004
 8000ab4:	08010008 	.word	0x08010008

08000ab8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <MX_GPIO_Init+0x40>)
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	4a0d      	ldr	r2, [pc, #52]	; (8000af8 <MX_GPIO_Init+0x40>)
 8000ac4:	f043 0320 	orr.w	r3, r3, #32
 8000ac8:	6193      	str	r3, [r2, #24]
 8000aca:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <MX_GPIO_Init+0x40>)
 8000acc:	699b      	ldr	r3, [r3, #24]
 8000ace:	f003 0320 	and.w	r3, r3, #32
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad6:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <MX_GPIO_Init+0x40>)
 8000ad8:	699b      	ldr	r3, [r3, #24]
 8000ada:	4a07      	ldr	r2, [pc, #28]	; (8000af8 <MX_GPIO_Init+0x40>)
 8000adc:	f043 0304 	orr.w	r3, r3, #4
 8000ae0:	6193      	str	r3, [r2, #24]
 8000ae2:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <MX_GPIO_Init+0x40>)
 8000ae4:	699b      	ldr	r3, [r3, #24]
 8000ae6:	f003 0304 	and.w	r3, r3, #4
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]

}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr
 8000af8:	40021000 	.word	0x40021000

08000afc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b00:	f000 f99a 	bl	8000e38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b04:	f000 f809 	bl	8000b1a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b08:	f7ff ffd6 	bl	8000ab8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000b0c:	f000 f896 	bl	8000c3c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000b10:	f000 f8be 	bl	8000c90 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		BL_Fetch_Commend();
 8000b14:	f7ff fb1a 	bl	800014c <BL_Fetch_Commend>
 8000b18:	e7fc      	b.n	8000b14 <main+0x18>

08000b1a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b090      	sub	sp, #64	; 0x40
 8000b1e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b20:	f107 0318 	add.w	r3, r7, #24
 8000b24:	2228      	movs	r2, #40	; 0x28
 8000b26:	2100      	movs	r1, #0
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f002 f8b5 	bl	8002c98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b44:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b46:	2300      	movs	r3, #0
 8000b48:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b4a:	f107 0318 	add.w	r3, r7, #24
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f001 fa30 	bl	8001fb4 <HAL_RCC_OscConfig>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <SystemClock_Config+0x44>
  {
    Error_Handler();
 8000b5a:	f000 f819 	bl	8000b90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b5e:	230f      	movs	r3, #15
 8000b60:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000b62:	2301      	movs	r3, #1
 8000b64:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	2100      	movs	r1, #0
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f001 fc9d 	bl	80024b8 <HAL_RCC_ClockConfig>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000b84:	f000 f804 	bl	8000b90 <Error_Handler>
  }
}
 8000b88:	bf00      	nop
 8000b8a:	3740      	adds	r7, #64	; 0x40
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b94:	b672      	cpsid	i
}
 8000b96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <Error_Handler+0x8>
	...

08000b9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <HAL_MspInit+0x40>)
 8000ba4:	699b      	ldr	r3, [r3, #24]
 8000ba6:	4a0d      	ldr	r2, [pc, #52]	; (8000bdc <HAL_MspInit+0x40>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	6193      	str	r3, [r2, #24]
 8000bae:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <HAL_MspInit+0x40>)
 8000bb0:	699b      	ldr	r3, [r3, #24]
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bba:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <HAL_MspInit+0x40>)
 8000bbc:	69db      	ldr	r3, [r3, #28]
 8000bbe:	4a07      	ldr	r2, [pc, #28]	; (8000bdc <HAL_MspInit+0x40>)
 8000bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc4:	61d3      	str	r3, [r2, #28]
 8000bc6:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <HAL_MspInit+0x40>)
 8000bc8:	69db      	ldr	r3, [r3, #28]
 8000bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bc80      	pop	{r7}
 8000bda:	4770      	bx	lr
 8000bdc:	40021000 	.word	0x40021000

08000be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <NMI_Handler+0x4>

08000be6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bea:	e7fe      	b.n	8000bea <HardFault_Handler+0x4>

08000bec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <MemManage_Handler+0x4>

08000bf2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf6:	e7fe      	b.n	8000bf6 <BusFault_Handler+0x4>

08000bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <UsageFault_Handler+0x4>

08000bfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bc80      	pop	{r7}
 8000c08:	4770      	bx	lr

08000c0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bc80      	pop	{r7}
 8000c14:	4770      	bx	lr

08000c16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bc80      	pop	{r7}
 8000c20:	4770      	bx	lr

08000c22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c26:	f000 f94d 	bl	8000ec4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bc80      	pop	{r7}
 8000c38:	4770      	bx	lr
	...

08000c3c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c40:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <MX_USART1_UART_Init+0x4c>)
 8000c42:	4a12      	ldr	r2, [pc, #72]	; (8000c8c <MX_USART1_UART_Init+0x50>)
 8000c44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c46:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <MX_USART1_UART_Init+0x4c>)
 8000c48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <MX_USART1_UART_Init+0x4c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <MX_USART1_UART_Init+0x4c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <MX_USART1_UART_Init+0x4c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c60:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <MX_USART1_UART_Init+0x4c>)
 8000c62:	220c      	movs	r2, #12
 8000c64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c66:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <MX_USART1_UART_Init+0x4c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <MX_USART1_UART_Init+0x4c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c72:	4805      	ldr	r0, [pc, #20]	; (8000c88 <MX_USART1_UART_Init+0x4c>)
 8000c74:	f001 fdae 	bl	80027d4 <HAL_UART_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c7e:	f7ff ff87 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000130 	.word	0x20000130
 8000c8c:	40013800 	.word	0x40013800

08000c90 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <MX_USART2_UART_Init+0x4c>)
 8000c96:	4a12      	ldr	r2, [pc, #72]	; (8000ce0 <MX_USART2_UART_Init+0x50>)
 8000c98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c9a:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <MX_USART2_UART_Init+0x4c>)
 8000c9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ca0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <MX_USART2_UART_Init+0x4c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <MX_USART2_UART_Init+0x4c>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cae:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <MX_USART2_UART_Init+0x4c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cb4:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <MX_USART2_UART_Init+0x4c>)
 8000cb6:	220c      	movs	r2, #12
 8000cb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cba:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <MX_USART2_UART_Init+0x4c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <MX_USART2_UART_Init+0x4c>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cc6:	4805      	ldr	r0, [pc, #20]	; (8000cdc <MX_USART2_UART_Init+0x4c>)
 8000cc8:	f001 fd84 	bl	80027d4 <HAL_UART_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cd2:	f7ff ff5d 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000178 	.word	0x20000178
 8000ce0:	40004400 	.word	0x40004400

08000ce4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08a      	sub	sp, #40	; 0x28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 0318 	add.w	r3, r7, #24
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a37      	ldr	r2, [pc, #220]	; (8000ddc <HAL_UART_MspInit+0xf8>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d132      	bne.n	8000d6a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d04:	4b36      	ldr	r3, [pc, #216]	; (8000de0 <HAL_UART_MspInit+0xfc>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	4a35      	ldr	r2, [pc, #212]	; (8000de0 <HAL_UART_MspInit+0xfc>)
 8000d0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d0e:	6193      	str	r3, [r2, #24]
 8000d10:	4b33      	ldr	r3, [pc, #204]	; (8000de0 <HAL_UART_MspInit+0xfc>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d18:	617b      	str	r3, [r7, #20]
 8000d1a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1c:	4b30      	ldr	r3, [pc, #192]	; (8000de0 <HAL_UART_MspInit+0xfc>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	4a2f      	ldr	r2, [pc, #188]	; (8000de0 <HAL_UART_MspInit+0xfc>)
 8000d22:	f043 0304 	orr.w	r3, r3, #4
 8000d26:	6193      	str	r3, [r2, #24]
 8000d28:	4b2d      	ldr	r3, [pc, #180]	; (8000de0 <HAL_UART_MspInit+0xfc>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	f003 0304 	and.w	r3, r3, #4
 8000d30:	613b      	str	r3, [r7, #16]
 8000d32:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d42:	f107 0318 	add.w	r3, r7, #24
 8000d46:	4619      	mov	r1, r3
 8000d48:	4826      	ldr	r0, [pc, #152]	; (8000de4 <HAL_UART_MspInit+0x100>)
 8000d4a:	f000 ff15 	bl	8001b78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d54:	2300      	movs	r3, #0
 8000d56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5c:	f107 0318 	add.w	r3, r7, #24
 8000d60:	4619      	mov	r1, r3
 8000d62:	4820      	ldr	r0, [pc, #128]	; (8000de4 <HAL_UART_MspInit+0x100>)
 8000d64:	f000 ff08 	bl	8001b78 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d68:	e034      	b.n	8000dd4 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a1e      	ldr	r2, [pc, #120]	; (8000de8 <HAL_UART_MspInit+0x104>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d12f      	bne.n	8000dd4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d74:	4b1a      	ldr	r3, [pc, #104]	; (8000de0 <HAL_UART_MspInit+0xfc>)
 8000d76:	69db      	ldr	r3, [r3, #28]
 8000d78:	4a19      	ldr	r2, [pc, #100]	; (8000de0 <HAL_UART_MspInit+0xfc>)
 8000d7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d7e:	61d3      	str	r3, [r2, #28]
 8000d80:	4b17      	ldr	r3, [pc, #92]	; (8000de0 <HAL_UART_MspInit+0xfc>)
 8000d82:	69db      	ldr	r3, [r3, #28]
 8000d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8c:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <HAL_UART_MspInit+0xfc>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	4a13      	ldr	r2, [pc, #76]	; (8000de0 <HAL_UART_MspInit+0xfc>)
 8000d92:	f043 0304 	orr.w	r3, r3, #4
 8000d96:	6193      	str	r3, [r2, #24]
 8000d98:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <HAL_UART_MspInit+0xfc>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	f003 0304 	and.w	r3, r3, #4
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000da4:	2304      	movs	r3, #4
 8000da6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da8:	2302      	movs	r3, #2
 8000daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dac:	2303      	movs	r3, #3
 8000dae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db0:	f107 0318 	add.w	r3, r7, #24
 8000db4:	4619      	mov	r1, r3
 8000db6:	480b      	ldr	r0, [pc, #44]	; (8000de4 <HAL_UART_MspInit+0x100>)
 8000db8:	f000 fede 	bl	8001b78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000dbc:	2308      	movs	r3, #8
 8000dbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc8:	f107 0318 	add.w	r3, r7, #24
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4805      	ldr	r0, [pc, #20]	; (8000de4 <HAL_UART_MspInit+0x100>)
 8000dd0:	f000 fed2 	bl	8001b78 <HAL_GPIO_Init>
}
 8000dd4:	bf00      	nop
 8000dd6:	3728      	adds	r7, #40	; 0x28
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40013800 	.word	0x40013800
 8000de0:	40021000 	.word	0x40021000
 8000de4:	40010800 	.word	0x40010800
 8000de8:	40004400 	.word	0x40004400

08000dec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dec:	f7ff ff1f 	bl	8000c2e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000df0:	480b      	ldr	r0, [pc, #44]	; (8000e20 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000df2:	490c      	ldr	r1, [pc, #48]	; (8000e24 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000df4:	4a0c      	ldr	r2, [pc, #48]	; (8000e28 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df8:	e002      	b.n	8000e00 <LoopCopyDataInit>

08000dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfe:	3304      	adds	r3, #4

08000e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e04:	d3f9      	bcc.n	8000dfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e06:	4a09      	ldr	r2, [pc, #36]	; (8000e2c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e08:	4c09      	ldr	r4, [pc, #36]	; (8000e30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e0c:	e001      	b.n	8000e12 <LoopFillZerobss>

08000e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e10:	3204      	adds	r2, #4

08000e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e14:	d3fb      	bcc.n	8000e0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e16:	f001 ff47 	bl	8002ca8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e1a:	f7ff fe6f 	bl	8000afc <main>
  bx lr
 8000e1e:	4770      	bx	lr
  ldr r0, =_sdata
 8000e20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e24:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8000e28:	08002d4c 	.word	0x08002d4c
  ldr r2, =_sbss
 8000e2c:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8000e30:	200001e8 	.word	0x200001e8

08000e34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e34:	e7fe      	b.n	8000e34 <ADC1_2_IRQHandler>
	...

08000e38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e3c:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <HAL_Init+0x28>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a07      	ldr	r2, [pc, #28]	; (8000e60 <HAL_Init+0x28>)
 8000e42:	f043 0310 	orr.w	r3, r3, #16
 8000e46:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e48:	2003      	movs	r0, #3
 8000e4a:	f000 f91d 	bl	8001088 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e4e:	200f      	movs	r0, #15
 8000e50:	f000 f808 	bl	8000e64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e54:	f7ff fea2 	bl	8000b9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40022000 	.word	0x40022000

08000e64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e6c:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <HAL_InitTick+0x54>)
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <HAL_InitTick+0x58>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	4619      	mov	r1, r3
 8000e76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e82:	4618      	mov	r0, r3
 8000e84:	f000 f92b 	bl	80010de <HAL_SYSTICK_Config>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e00e      	b.n	8000eb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2b0f      	cmp	r3, #15
 8000e96:	d80a      	bhi.n	8000eae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	6879      	ldr	r1, [r7, #4]
 8000e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea0:	f000 f8fd 	bl	800109e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea4:	4a06      	ldr	r2, [pc, #24]	; (8000ec0 <HAL_InitTick+0x5c>)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	e000      	b.n	8000eb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000024 	.word	0x20000024
 8000ebc:	2000002c 	.word	0x2000002c
 8000ec0:	20000028 	.word	0x20000028

08000ec4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec8:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <HAL_IncTick+0x1c>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <HAL_IncTick+0x20>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	4a03      	ldr	r2, [pc, #12]	; (8000ee4 <HAL_IncTick+0x20>)
 8000ed6:	6013      	str	r3, [r2, #0]
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc80      	pop	{r7}
 8000ede:	4770      	bx	lr
 8000ee0:	2000002c 	.word	0x2000002c
 8000ee4:	200001c0 	.word	0x200001c0

08000ee8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return uwTick;
 8000eec:	4b02      	ldr	r3, [pc, #8]	; (8000ef8 <HAL_GetTick+0x10>)
 8000eee:	681b      	ldr	r3, [r3, #0]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr
 8000ef8:	200001c0 	.word	0x200001c0

08000efc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <__NVIC_SetPriorityGrouping+0x44>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f2e:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <__NVIC_SetPriorityGrouping+0x44>)
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	60d3      	str	r3, [r2, #12]
}
 8000f34:	bf00      	nop
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bc80      	pop	{r7}
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f48:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <__NVIC_GetPriorityGrouping+0x18>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	0a1b      	lsrs	r3, r3, #8
 8000f4e:	f003 0307 	and.w	r3, r3, #7
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bc80      	pop	{r7}
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	6039      	str	r1, [r7, #0]
 8000f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	db0a      	blt.n	8000f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	490c      	ldr	r1, [pc, #48]	; (8000fac <__NVIC_SetPriority+0x4c>)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	0112      	lsls	r2, r2, #4
 8000f80:	b2d2      	uxtb	r2, r2
 8000f82:	440b      	add	r3, r1
 8000f84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f88:	e00a      	b.n	8000fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	4908      	ldr	r1, [pc, #32]	; (8000fb0 <__NVIC_SetPriority+0x50>)
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	f003 030f 	and.w	r3, r3, #15
 8000f96:	3b04      	subs	r3, #4
 8000f98:	0112      	lsls	r2, r2, #4
 8000f9a:	b2d2      	uxtb	r2, r2
 8000f9c:	440b      	add	r3, r1
 8000f9e:	761a      	strb	r2, [r3, #24]
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	e000e100 	.word	0xe000e100
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b089      	sub	sp, #36	; 0x24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	f1c3 0307 	rsb	r3, r3, #7
 8000fce:	2b04      	cmp	r3, #4
 8000fd0:	bf28      	it	cs
 8000fd2:	2304      	movcs	r3, #4
 8000fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3304      	adds	r3, #4
 8000fda:	2b06      	cmp	r3, #6
 8000fdc:	d902      	bls.n	8000fe4 <NVIC_EncodePriority+0x30>
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	3b03      	subs	r3, #3
 8000fe2:	e000      	b.n	8000fe6 <NVIC_EncodePriority+0x32>
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43da      	mvns	r2, r3
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	401a      	ands	r2, r3
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	fa01 f303 	lsl.w	r3, r1, r3
 8001006:	43d9      	mvns	r1, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800100c:	4313      	orrs	r3, r2
         );
}
 800100e:	4618      	mov	r0, r3
 8001010:	3724      	adds	r7, #36	; 0x24
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr

08001018 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800101c:	f3bf 8f4f 	dsb	sy
}
 8001020:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001022:	4b06      	ldr	r3, [pc, #24]	; (800103c <__NVIC_SystemReset+0x24>)
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800102a:	4904      	ldr	r1, [pc, #16]	; (800103c <__NVIC_SystemReset+0x24>)
 800102c:	4b04      	ldr	r3, [pc, #16]	; (8001040 <__NVIC_SystemReset+0x28>)
 800102e:	4313      	orrs	r3, r2
 8001030:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001032:	f3bf 8f4f 	dsb	sy
}
 8001036:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001038:	bf00      	nop
 800103a:	e7fd      	b.n	8001038 <__NVIC_SystemReset+0x20>
 800103c:	e000ed00 	.word	0xe000ed00
 8001040:	05fa0004 	.word	0x05fa0004

08001044 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3b01      	subs	r3, #1
 8001050:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001054:	d301      	bcc.n	800105a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001056:	2301      	movs	r3, #1
 8001058:	e00f      	b.n	800107a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800105a:	4a0a      	ldr	r2, [pc, #40]	; (8001084 <SysTick_Config+0x40>)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3b01      	subs	r3, #1
 8001060:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001062:	210f      	movs	r1, #15
 8001064:	f04f 30ff 	mov.w	r0, #4294967295
 8001068:	f7ff ff7a 	bl	8000f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <SysTick_Config+0x40>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001072:	4b04      	ldr	r3, [pc, #16]	; (8001084 <SysTick_Config+0x40>)
 8001074:	2207      	movs	r2, #7
 8001076:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	e000e010 	.word	0xe000e010

08001088 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff ff33 	bl	8000efc <__NVIC_SetPriorityGrouping>
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800109e:	b580      	push	{r7, lr}
 80010a0:	b086      	sub	sp, #24
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	4603      	mov	r3, r0
 80010a6:	60b9      	str	r1, [r7, #8]
 80010a8:	607a      	str	r2, [r7, #4]
 80010aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010b0:	f7ff ff48 	bl	8000f44 <__NVIC_GetPriorityGrouping>
 80010b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	68b9      	ldr	r1, [r7, #8]
 80010ba:	6978      	ldr	r0, [r7, #20]
 80010bc:	f7ff ff7a 	bl	8000fb4 <NVIC_EncodePriority>
 80010c0:	4602      	mov	r2, r0
 80010c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c6:	4611      	mov	r1, r2
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ff49 	bl	8000f60 <__NVIC_SetPriority>
}
 80010ce:	bf00      	nop
 80010d0:	3718      	adds	r7, #24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80010da:	f7ff ff9d 	bl	8001018 <__NVIC_SystemReset>

080010de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff ffac 	bl	8001044 <SysTick_Config>
 80010ec:	4603      	mov	r3, r0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80010f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010fa:	b087      	sub	sp, #28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001112:	4b2f      	ldr	r3, [pc, #188]	; (80011d0 <HAL_FLASH_Program+0xd8>)
 8001114:	7e1b      	ldrb	r3, [r3, #24]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d101      	bne.n	800111e <HAL_FLASH_Program+0x26>
 800111a:	2302      	movs	r3, #2
 800111c:	e054      	b.n	80011c8 <HAL_FLASH_Program+0xd0>
 800111e:	4b2c      	ldr	r3, [pc, #176]	; (80011d0 <HAL_FLASH_Program+0xd8>)
 8001120:	2201      	movs	r2, #1
 8001122:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001124:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001128:	f000 f8da 	bl	80012e0 <FLASH_WaitForLastOperation>
 800112c:	4603      	mov	r3, r0
 800112e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001130:	7dfb      	ldrb	r3, [r7, #23]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d144      	bne.n	80011c0 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d102      	bne.n	8001142 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800113c:	2301      	movs	r3, #1
 800113e:	757b      	strb	r3, [r7, #21]
 8001140:	e007      	b.n	8001152 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	2b02      	cmp	r3, #2
 8001146:	d102      	bne.n	800114e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001148:	2302      	movs	r3, #2
 800114a:	757b      	strb	r3, [r7, #21]
 800114c:	e001      	b.n	8001152 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800114e:	2304      	movs	r3, #4
 8001150:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8001152:	2300      	movs	r3, #0
 8001154:	75bb      	strb	r3, [r7, #22]
 8001156:	e02d      	b.n	80011b4 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001158:	7dbb      	ldrb	r3, [r7, #22]
 800115a:	005a      	lsls	r2, r3, #1
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	eb02 0c03 	add.w	ip, r2, r3
 8001162:	7dbb      	ldrb	r3, [r7, #22]
 8001164:	0119      	lsls	r1, r3, #4
 8001166:	e9d7 2300 	ldrd	r2, r3, [r7]
 800116a:	f1c1 0620 	rsb	r6, r1, #32
 800116e:	f1a1 0020 	sub.w	r0, r1, #32
 8001172:	fa22 f401 	lsr.w	r4, r2, r1
 8001176:	fa03 f606 	lsl.w	r6, r3, r6
 800117a:	4334      	orrs	r4, r6
 800117c:	fa23 f000 	lsr.w	r0, r3, r0
 8001180:	4304      	orrs	r4, r0
 8001182:	fa23 f501 	lsr.w	r5, r3, r1
 8001186:	b2a3      	uxth	r3, r4
 8001188:	4619      	mov	r1, r3
 800118a:	4660      	mov	r0, ip
 800118c:	f000 f88c 	bl	80012a8 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001190:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001194:	f000 f8a4 	bl	80012e0 <FLASH_WaitForLastOperation>
 8001198:	4603      	mov	r3, r0
 800119a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800119c:	4b0d      	ldr	r3, [pc, #52]	; (80011d4 <HAL_FLASH_Program+0xdc>)
 800119e:	691b      	ldr	r3, [r3, #16]
 80011a0:	4a0c      	ldr	r2, [pc, #48]	; (80011d4 <HAL_FLASH_Program+0xdc>)
 80011a2:	f023 0301 	bic.w	r3, r3, #1
 80011a6:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80011a8:	7dfb      	ldrb	r3, [r7, #23]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d107      	bne.n	80011be <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80011ae:	7dbb      	ldrb	r3, [r7, #22]
 80011b0:	3301      	adds	r3, #1
 80011b2:	75bb      	strb	r3, [r7, #22]
 80011b4:	7dba      	ldrb	r2, [r7, #22]
 80011b6:	7d7b      	ldrb	r3, [r7, #21]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d3cd      	bcc.n	8001158 <HAL_FLASH_Program+0x60>
 80011bc:	e000      	b.n	80011c0 <HAL_FLASH_Program+0xc8>
      {
        break;
 80011be:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80011c0:	4b03      	ldr	r3, [pc, #12]	; (80011d0 <HAL_FLASH_Program+0xd8>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	761a      	strb	r2, [r3, #24]

  return status;
 80011c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	371c      	adds	r7, #28
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011d0:	200001c8 	.word	0x200001c8
 80011d4:	40022000 	.word	0x40022000

080011d8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80011de:	2300      	movs	r3, #0
 80011e0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80011e2:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <HAL_FLASH_Unlock+0x40>)
 80011e4:	691b      	ldr	r3, [r3, #16]
 80011e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d00d      	beq.n	800120a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80011ee:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <HAL_FLASH_Unlock+0x40>)
 80011f0:	4a0a      	ldr	r2, [pc, #40]	; (800121c <HAL_FLASH_Unlock+0x44>)
 80011f2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80011f4:	4b08      	ldr	r3, [pc, #32]	; (8001218 <HAL_FLASH_Unlock+0x40>)
 80011f6:	4a0a      	ldr	r2, [pc, #40]	; (8001220 <HAL_FLASH_Unlock+0x48>)
 80011f8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80011fa:	4b07      	ldr	r3, [pc, #28]	; (8001218 <HAL_FLASH_Unlock+0x40>)
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800120a:	79fb      	ldrb	r3, [r7, #7]
}
 800120c:	4618      	mov	r0, r3
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	bc80      	pop	{r7}
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	40022000 	.word	0x40022000
 800121c:	45670123 	.word	0x45670123
 8001220:	cdef89ab 	.word	0xcdef89ab

08001224 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001228:	4b05      	ldr	r3, [pc, #20]	; (8001240 <HAL_FLASH_Lock+0x1c>)
 800122a:	691b      	ldr	r3, [r3, #16]
 800122c:	4a04      	ldr	r2, [pc, #16]	; (8001240 <HAL_FLASH_Lock+0x1c>)
 800122e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001232:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	40022000 	.word	0x40022000

08001244 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 8001248:	4b09      	ldr	r3, [pc, #36]	; (8001270 <HAL_FLASH_OB_Unlock+0x2c>)
 800124a:	691b      	ldr	r3, [r3, #16]
 800124c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001250:	2b00      	cmp	r3, #0
 8001252:	d107      	bne.n	8001264 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <HAL_FLASH_OB_Unlock+0x2c>)
 8001256:	4a07      	ldr	r2, [pc, #28]	; (8001274 <HAL_FLASH_OB_Unlock+0x30>)
 8001258:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 800125a:	4b05      	ldr	r3, [pc, #20]	; (8001270 <HAL_FLASH_OB_Unlock+0x2c>)
 800125c:	4a06      	ldr	r2, [pc, #24]	; (8001278 <HAL_FLASH_OB_Unlock+0x34>)
 800125e:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8001260:	2300      	movs	r3, #0
 8001262:	e000      	b.n	8001266 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
}
 8001266:	4618      	mov	r0, r3
 8001268:	46bd      	mov	sp, r7
 800126a:	bc80      	pop	{r7}
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	40022000 	.word	0x40022000
 8001274:	45670123 	.word	0x45670123
 8001278:	cdef89ab 	.word	0xcdef89ab

0800127c <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 8001280:	4b05      	ldr	r3, [pc, #20]	; (8001298 <HAL_FLASH_OB_Lock+0x1c>)
 8001282:	691b      	ldr	r3, [r3, #16]
 8001284:	4a04      	ldr	r2, [pc, #16]	; (8001298 <HAL_FLASH_OB_Lock+0x1c>)
 8001286:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800128a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	46bd      	mov	sp, r7
 8001292:	bc80      	pop	{r7}
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	40022000 	.word	0x40022000

0800129c <HAL_FLASH_OB_Launch>:
  * @brief  Launch the option byte loading.
  * @note   This function will reset automatically the MCU.
  * @retval None
  */
void HAL_FLASH_OB_Launch(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* Initiates a system reset request to launch the option byte loading */
  HAL_NVIC_SystemReset();
 80012a0:	f7ff ff19 	bl	80010d6 <HAL_NVIC_SystemReset>
}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	460b      	mov	r3, r1
 80012b2:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80012b4:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <FLASH_Program_HalfWord+0x30>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80012ba:	4b08      	ldr	r3, [pc, #32]	; (80012dc <FLASH_Program_HalfWord+0x34>)
 80012bc:	691b      	ldr	r3, [r3, #16]
 80012be:	4a07      	ldr	r2, [pc, #28]	; (80012dc <FLASH_Program_HalfWord+0x34>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	887a      	ldrh	r2, [r7, #2]
 80012ca:	801a      	strh	r2, [r3, #0]
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc80      	pop	{r7}
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	200001c8 	.word	0x200001c8
 80012dc:	40022000 	.word	0x40022000

080012e0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80012e8:	f7ff fdfe 	bl	8000ee8 <HAL_GetTick>
 80012ec:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80012ee:	e010      	b.n	8001312 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f6:	d00c      	beq.n	8001312 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d007      	beq.n	800130e <FLASH_WaitForLastOperation+0x2e>
 80012fe:	f7ff fdf3 	bl	8000ee8 <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	429a      	cmp	r2, r3
 800130c:	d201      	bcs.n	8001312 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e025      	b.n	800135e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <FLASH_WaitForLastOperation+0x88>)
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1e8      	bne.n	80012f0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800131e:	4b12      	ldr	r3, [pc, #72]	; (8001368 <FLASH_WaitForLastOperation+0x88>)
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	f003 0320 	and.w	r3, r3, #32
 8001326:	2b00      	cmp	r3, #0
 8001328:	d002      	beq.n	8001330 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800132a:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <FLASH_WaitForLastOperation+0x88>)
 800132c:	2220      	movs	r2, #32
 800132e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001330:	4b0d      	ldr	r3, [pc, #52]	; (8001368 <FLASH_WaitForLastOperation+0x88>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	f003 0310 	and.w	r3, r3, #16
 8001338:	2b00      	cmp	r3, #0
 800133a:	d10b      	bne.n	8001354 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800133c:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <FLASH_WaitForLastOperation+0x88>)
 800133e:	69db      	ldr	r3, [r3, #28]
 8001340:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001344:	2b00      	cmp	r3, #0
 8001346:	d105      	bne.n	8001354 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001348:	4b07      	ldr	r3, [pc, #28]	; (8001368 <FLASH_WaitForLastOperation+0x88>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001350:	2b00      	cmp	r3, #0
 8001352:	d003      	beq.n	800135c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001354:	f000 f80a 	bl	800136c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e000      	b.n	800135e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40022000 	.word	0x40022000

0800136c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001372:	2300      	movs	r3, #0
 8001374:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001376:	4b23      	ldr	r3, [pc, #140]	; (8001404 <FLASH_SetErrorCode+0x98>)
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	f003 0310 	and.w	r3, r3, #16
 800137e:	2b00      	cmp	r3, #0
 8001380:	d009      	beq.n	8001396 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001382:	4b21      	ldr	r3, [pc, #132]	; (8001408 <FLASH_SetErrorCode+0x9c>)
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	f043 0302 	orr.w	r3, r3, #2
 800138a:	4a1f      	ldr	r2, [pc, #124]	; (8001408 <FLASH_SetErrorCode+0x9c>)
 800138c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f043 0310 	orr.w	r3, r3, #16
 8001394:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001396:	4b1b      	ldr	r3, [pc, #108]	; (8001404 <FLASH_SetErrorCode+0x98>)
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	f003 0304 	and.w	r3, r3, #4
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d009      	beq.n	80013b6 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80013a2:	4b19      	ldr	r3, [pc, #100]	; (8001408 <FLASH_SetErrorCode+0x9c>)
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	4a17      	ldr	r2, [pc, #92]	; (8001408 <FLASH_SetErrorCode+0x9c>)
 80013ac:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f043 0304 	orr.w	r3, r3, #4
 80013b4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80013b6:	4b13      	ldr	r3, [pc, #76]	; (8001404 <FLASH_SetErrorCode+0x98>)
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d00b      	beq.n	80013da <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80013c2:	4b11      	ldr	r3, [pc, #68]	; (8001408 <FLASH_SetErrorCode+0x9c>)
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	f043 0304 	orr.w	r3, r3, #4
 80013ca:	4a0f      	ldr	r2, [pc, #60]	; (8001408 <FLASH_SetErrorCode+0x9c>)
 80013cc:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80013ce:	4b0d      	ldr	r3, [pc, #52]	; (8001404 <FLASH_SetErrorCode+0x98>)
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	4a0c      	ldr	r2, [pc, #48]	; (8001404 <FLASH_SetErrorCode+0x98>)
 80013d4:	f023 0301 	bic.w	r3, r3, #1
 80013d8:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f240 1201 	movw	r2, #257	; 0x101
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d106      	bne.n	80013f2 <FLASH_SetErrorCode+0x86>
 80013e4:	4b07      	ldr	r3, [pc, #28]	; (8001404 <FLASH_SetErrorCode+0x98>)
 80013e6:	69db      	ldr	r3, [r3, #28]
 80013e8:	4a06      	ldr	r2, [pc, #24]	; (8001404 <FLASH_SetErrorCode+0x98>)
 80013ea:	f023 0301 	bic.w	r3, r3, #1
 80013ee:	61d3      	str	r3, [r2, #28]
}  
 80013f0:	e002      	b.n	80013f8 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80013f2:	4a04      	ldr	r2, [pc, #16]	; (8001404 <FLASH_SetErrorCode+0x98>)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	60d3      	str	r3, [r2, #12]
}  
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bc80      	pop	{r7}
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	40022000 	.word	0x40022000
 8001408:	200001c8 	.word	0x200001c8

0800140c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800141a:	2300      	movs	r3, #0
 800141c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800141e:	4b2f      	ldr	r3, [pc, #188]	; (80014dc <HAL_FLASHEx_Erase+0xd0>)
 8001420:	7e1b      	ldrb	r3, [r3, #24]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d101      	bne.n	800142a <HAL_FLASHEx_Erase+0x1e>
 8001426:	2302      	movs	r3, #2
 8001428:	e053      	b.n	80014d2 <HAL_FLASHEx_Erase+0xc6>
 800142a:	4b2c      	ldr	r3, [pc, #176]	; (80014dc <HAL_FLASHEx_Erase+0xd0>)
 800142c:	2201      	movs	r2, #1
 800142e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b02      	cmp	r3, #2
 8001436:	d116      	bne.n	8001466 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001438:	f24c 3050 	movw	r0, #50000	; 0xc350
 800143c:	f7ff ff50 	bl	80012e0 <FLASH_WaitForLastOperation>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d141      	bne.n	80014ca <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8001446:	2001      	movs	r0, #1
 8001448:	f000 f926 	bl	8001698 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800144c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001450:	f7ff ff46 	bl	80012e0 <FLASH_WaitForLastOperation>
 8001454:	4603      	mov	r3, r0
 8001456:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001458:	4b21      	ldr	r3, [pc, #132]	; (80014e0 <HAL_FLASHEx_Erase+0xd4>)
 800145a:	691b      	ldr	r3, [r3, #16]
 800145c:	4a20      	ldr	r2, [pc, #128]	; (80014e0 <HAL_FLASHEx_Erase+0xd4>)
 800145e:	f023 0304 	bic.w	r3, r3, #4
 8001462:	6113      	str	r3, [r2, #16]
 8001464:	e031      	b.n	80014ca <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001466:	f24c 3050 	movw	r0, #50000	; 0xc350
 800146a:	f7ff ff39 	bl	80012e0 <FLASH_WaitForLastOperation>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d12a      	bne.n	80014ca <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	f04f 32ff 	mov.w	r2, #4294967295
 800147a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	60bb      	str	r3, [r7, #8]
 8001482:	e019      	b.n	80014b8 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001484:	68b8      	ldr	r0, [r7, #8]
 8001486:	f000 fb57 	bl	8001b38 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800148a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800148e:	f7ff ff27 	bl	80012e0 <FLASH_WaitForLastOperation>
 8001492:	4603      	mov	r3, r0
 8001494:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001496:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <HAL_FLASHEx_Erase+0xd4>)
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	4a11      	ldr	r2, [pc, #68]	; (80014e0 <HAL_FLASHEx_Erase+0xd4>)
 800149c:	f023 0302 	bic.w	r3, r3, #2
 80014a0:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d003      	beq.n	80014b0 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	68ba      	ldr	r2, [r7, #8]
 80014ac:	601a      	str	r2, [r3, #0]
            break;
 80014ae:	e00c      	b.n	80014ca <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80014b6:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	029a      	lsls	r2, r3, #10
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	4413      	add	r3, r2
 80014c4:	68ba      	ldr	r2, [r7, #8]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d3dc      	bcc.n	8001484 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80014ca:	4b04      	ldr	r3, [pc, #16]	; (80014dc <HAL_FLASHEx_Erase+0xd0>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	761a      	strb	r2, [r3, #24]

  return status;
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	200001c8 	.word	0x200001c8
 80014e0:	40022000 	.word	0x40022000

080014e4 <HAL_FLASHEx_OBErase>:
  *         (system reset will occur)
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_FLASHEx_OBErase(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
  uint8_t rdptmp = OB_RDP_LEVEL_0;
 80014ea:	23a5      	movs	r3, #165	; 0xa5
 80014ec:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	71fb      	strb	r3, [r7, #7]

  /* Get the actual read protection Option Byte value */
  rdptmp = FLASH_OB_GetRDP();
 80014f2:	f000 faf5 	bl	8001ae0 <FLASH_OB_GetRDP>
 80014f6:	4603      	mov	r3, r0
 80014f8:	71bb      	strb	r3, [r7, #6]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80014fa:	f24c 3050 	movw	r0, #50000	; 0xc350
 80014fe:	f7ff feef 	bl	80012e0 <FLASH_WaitForLastOperation>
 8001502:	4603      	mov	r3, r0
 8001504:	71fb      	strb	r3, [r7, #7]

  if(status == HAL_OK)
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d123      	bne.n	8001554 <HAL_FLASHEx_OBErase+0x70>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800150c:	4b14      	ldr	r3, [pc, #80]	; (8001560 <HAL_FLASHEx_OBErase+0x7c>)
 800150e:	2200      	movs	r2, #0
 8001510:	61da      	str	r2, [r3, #28]

    /* If the previous operation is completed, proceed to erase the option bytes */
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 8001512:	4b14      	ldr	r3, [pc, #80]	; (8001564 <HAL_FLASHEx_OBErase+0x80>)
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	4a13      	ldr	r2, [pc, #76]	; (8001564 <HAL_FLASHEx_OBErase+0x80>)
 8001518:	f043 0320 	orr.w	r3, r3, #32
 800151c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800151e:	4b11      	ldr	r3, [pc, #68]	; (8001564 <HAL_FLASHEx_OBErase+0x80>)
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	4a10      	ldr	r2, [pc, #64]	; (8001564 <HAL_FLASHEx_OBErase+0x80>)
 8001524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001528:	6113      	str	r3, [r2, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800152a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800152e:	f7ff fed7 	bl	80012e0 <FLASH_WaitForLastOperation>
 8001532:	4603      	mov	r3, r0
 8001534:	71fb      	strb	r3, [r7, #7]

    /* If the erase operation is completed, disable the OPTER Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 8001536:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <HAL_FLASHEx_OBErase+0x80>)
 8001538:	691b      	ldr	r3, [r3, #16]
 800153a:	4a0a      	ldr	r2, [pc, #40]	; (8001564 <HAL_FLASHEx_OBErase+0x80>)
 800153c:	f023 0320 	bic.w	r3, r3, #32
 8001540:	6113      	str	r3, [r2, #16]

    if(status == HAL_OK)
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d105      	bne.n	8001554 <HAL_FLASHEx_OBErase+0x70>
    {
      /* Restore the last read protection Option Byte value */
      status = FLASH_OB_RDP_LevelConfig(rdptmp);
 8001548:	79bb      	ldrb	r3, [r7, #6]
 800154a:	4618      	mov	r0, r3
 800154c:	f000 fa02 	bl	8001954 <FLASH_OB_RDP_LevelConfig>
 8001550:	4603      	mov	r3, r0
 8001552:	71fb      	strb	r3, [r7, #7]
    }
  }

  /* Return the erase status */
  return status;
 8001554:	79fb      	ldrb	r3, [r7, #7]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	200001c8 	.word	0x200001c8
 8001564:	40022000 	.word	0x40022000

08001568 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001574:	4b39      	ldr	r3, [pc, #228]	; (800165c <HAL_FLASHEx_OBProgram+0xf4>)
 8001576:	7e1b      	ldrb	r3, [r3, #24]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d101      	bne.n	8001580 <HAL_FLASHEx_OBProgram+0x18>
 800157c:	2302      	movs	r3, #2
 800157e:	e069      	b.n	8001654 <HAL_FLASHEx_OBProgram+0xec>
 8001580:	4b36      	ldr	r3, [pc, #216]	; (800165c <HAL_FLASHEx_OBProgram+0xf4>)
 8001582:	2201      	movs	r2, #1
 8001584:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Write protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	2b00      	cmp	r3, #0
 8001590:	d01a      	beq.n	80015c8 <HAL_FLASHEx_OBProgram+0x60>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d107      	bne.n	80015aa <HAL_FLASHEx_OBProgram+0x42>
    {
      /* Enable of Write protection on the selected page */
      status = FLASH_OB_EnableWRP(pOBInit->WRPPage);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 f896 	bl	80016d0 <FLASH_OB_EnableWRP>
 80015a4:	4603      	mov	r3, r0
 80015a6:	73fb      	strb	r3, [r7, #15]
 80015a8:	e006      	b.n	80015b8 <HAL_FLASHEx_OBProgram+0x50>
    }
    else
    {
      /* Disable of Write protection on the selected page */
      status = FLASH_OB_DisableWRP(pOBInit->WRPPage);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f000 f930 	bl	8001814 <FLASH_OB_DisableWRP>
 80015b4:	4603      	mov	r3, r0
 80015b6:	73fb      	strb	r3, [r7, #15]
    }
    if (status != HAL_OK)
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d004      	beq.n	80015c8 <HAL_FLASHEx_OBProgram+0x60>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 80015be:	4b27      	ldr	r3, [pc, #156]	; (800165c <HAL_FLASHEx_OBProgram+0xf4>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	761a      	strb	r2, [r3, #24]
      return status;
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	e045      	b.n	8001654 <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* Read protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d00e      	beq.n	80015f2 <HAL_FLASHEx_OBProgram+0x8a>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	7c1b      	ldrb	r3, [r3, #16]
 80015d8:	4618      	mov	r0, r3
 80015da:	f000 f9bb 	bl	8001954 <FLASH_OB_RDP_LevelConfig>
 80015de:	4603      	mov	r3, r0
 80015e0:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d004      	beq.n	80015f2 <HAL_FLASHEx_OBProgram+0x8a>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 80015e8:	4b1c      	ldr	r3, [pc, #112]	; (800165c <HAL_FLASHEx_OBProgram+0xf4>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	761a      	strb	r2, [r3, #24]
      return status;
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
 80015f0:	e030      	b.n	8001654 <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* USER configuration */
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0304 	and.w	r3, r3, #4
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d00e      	beq.n	800161c <HAL_FLASHEx_OBProgram+0xb4>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	7c5b      	ldrb	r3, [r3, #17]
 8001602:	4618      	mov	r0, r3
 8001604:	f000 f9f6 	bl	80019f4 <FLASH_OB_UserConfig>
 8001608:	4603      	mov	r3, r0
 800160a:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d004      	beq.n	800161c <HAL_FLASHEx_OBProgram+0xb4>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8001612:	4b12      	ldr	r3, [pc, #72]	; (800165c <HAL_FLASHEx_OBProgram+0xf4>)
 8001614:	2200      	movs	r2, #0
 8001616:	761a      	strb	r2, [r3, #24]
      return status;
 8001618:	7bfb      	ldrb	r3, [r7, #15]
 800161a:	e01b      	b.n	8001654 <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* DATA configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_DATA) == OPTIONBYTE_DATA)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0308 	and.w	r3, r3, #8
 8001624:	2b00      	cmp	r3, #0
 8001626:	d011      	beq.n	800164c <HAL_FLASHEx_OBProgram+0xe4>
  {
    status = FLASH_OB_ProgramData(pOBInit->DATAAddress, pOBInit->DATAData);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	695a      	ldr	r2, [r3, #20]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	7e1b      	ldrb	r3, [r3, #24]
 8001630:	4619      	mov	r1, r3
 8001632:	4610      	mov	r0, r2
 8001634:	f000 fa16 	bl	8001a64 <FLASH_OB_ProgramData>
 8001638:	4603      	mov	r3, r0
 800163a:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 800163c:	7bfb      	ldrb	r3, [r7, #15]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d004      	beq.n	800164c <HAL_FLASHEx_OBProgram+0xe4>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8001642:	4b06      	ldr	r3, [pc, #24]	; (800165c <HAL_FLASHEx_OBProgram+0xf4>)
 8001644:	2200      	movs	r2, #0
 8001646:	761a      	strb	r2, [r3, #24]
      return status;
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	e003      	b.n	8001654 <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800164c:	4b03      	ldr	r3, [pc, #12]	; (800165c <HAL_FLASHEx_OBProgram+0xf4>)
 800164e:	2200      	movs	r2, #0
 8001650:	761a      	strb	r2, [r3, #24]

  return status;
 8001652:	7bfb      	ldrb	r3, [r7, #15]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	200001c8 	.word	0x200001c8

08001660 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2207      	movs	r2, #7
 800166c:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPPage = FLASH_OB_GetWRP();
 800166e:	f000 fa2d 	bl	8001acc <FLASH_OB_GetWRP>
 8001672:	4602      	mov	r2, r0
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 8001678:	f000 fa32 	bl	8001ae0 <FLASH_OB_GetRDP>
 800167c:	4603      	mov	r3, r0
 800167e:	b2da      	uxtb	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	741a      	strb	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8001684:	f000 fa48 	bl	8001b18 <FLASH_OB_GetUser>
 8001688:	4603      	mov	r3, r0
 800168a:	461a      	mov	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	745a      	strb	r2, [r3, #17]
}
 8001690:	bf00      	nop
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80016a0:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <FLASH_MassErase+0x30>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80016a6:	4b09      	ldr	r3, [pc, #36]	; (80016cc <FLASH_MassErase+0x34>)
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	4a08      	ldr	r2, [pc, #32]	; (80016cc <FLASH_MassErase+0x34>)
 80016ac:	f043 0304 	orr.w	r3, r3, #4
 80016b0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80016b2:	4b06      	ldr	r3, [pc, #24]	; (80016cc <FLASH_MassErase+0x34>)
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	4a05      	ldr	r2, [pc, #20]	; (80016cc <FLASH_MassErase+0x34>)
 80016b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016bc:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr
 80016c8:	200001c8 	.word	0x200001c8
 80016cc:	40022000 	.word	0x40022000

080016d0 <FLASH_OB_EnableWRP>:
  * @param  WriteProtectPage specifies the page(s) to be write protected.
  *         The value of this parameter depend on device used within the same series 
  * @retval HAL status 
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WriteProtectPage)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016d8:	2300      	movs	r3, #0
 80016da:	75fb      	strb	r3, [r7, #23]
  uint16_t WRP0_Data = 0xFFFF;
 80016dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016e0:	82bb      	strh	r3, [r7, #20]
#if defined(FLASH_WRP1_WRP1)
  uint16_t WRP1_Data = 0xFFFF;
 80016e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016e6:	827b      	strh	r3, [r7, #18]
#endif /* FLASH_WRP1_WRP1 */
#if defined(FLASH_WRP2_WRP2)
  uint16_t WRP2_Data = 0xFFFF;
 80016e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016ec:	823b      	strh	r3, [r7, #16]
#endif /* FLASH_WRP2_WRP2 */
#if defined(FLASH_WRP3_WRP3)
  uint16_t WRP3_Data = 0xFFFF;
 80016ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016f2:	81fb      	strh	r3, [r7, #14]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(WriteProtectPage));
    
  /* Get current write protected pages and the new pages to be protected ******/
  WriteProtectPage = (uint32_t)(~((~FLASH_OB_GetWRP()) | WriteProtectPage));
 80016f4:	f000 f9ea 	bl	8001acc <FLASH_OB_GetWRP>
 80016f8:	4602      	mov	r2, r0
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	43db      	mvns	r3, r3
 80016fe:	4013      	ands	r3, r2
 8001700:	607b      	str	r3, [r7, #4]
  
#if defined(OB_WRP_PAGES0TO15MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
#elif defined(OB_WRP_PAGES0TO31MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	b29b      	uxth	r3, r3
 8001706:	b2db      	uxtb	r3, r3
 8001708:	82bb      	strh	r3, [r7, #20]
#endif /* OB_WRP_PAGES0TO31MASK */
  
#if defined(OB_WRP_PAGES16TO31MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8U);
#elif defined(OB_WRP_PAGES32TO63MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8U);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	0a1b      	lsrs	r3, r3, #8
 800170e:	b29b      	uxth	r3, r3
 8001710:	b2db      	uxtb	r3, r3
 8001712:	827b      	strh	r3, [r7, #18]
#endif /* OB_WRP_PAGES32TO63MASK */
 
#if defined(OB_WRP_PAGES64TO95MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES64TO95MASK) >> 16U);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	0c1b      	lsrs	r3, r3, #16
 8001718:	b29b      	uxth	r3, r3
 800171a:	b2db      	uxtb	r3, r3
 800171c:	823b      	strh	r3, [r7, #16]
#if defined(OB_WRP_PAGES32TO47MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16U);
#endif /* OB_WRP_PAGES32TO47MASK */

#if defined(OB_WRP_PAGES96TO127MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES96TO127MASK) >> 24U); 
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	0e1b      	lsrs	r3, r3, #24
 8001722:	81fb      	strh	r3, [r7, #14]
#elif defined(OB_WRP_PAGES48TO127MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24U); 
#endif /* OB_WRP_PAGES96TO127MASK */
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001724:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001728:	f7ff fdda 	bl	80012e0 <FLASH_WaitForLastOperation>
 800172c:	4603      	mov	r3, r0
 800172e:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8001730:	7dfb      	ldrb	r3, [r7, #23]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d162      	bne.n	80017fc <FLASH_OB_EnableWRP+0x12c>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001736:	4b34      	ldr	r3, [pc, #208]	; (8001808 <FLASH_OB_EnableWRP+0x138>)
 8001738:	2200      	movs	r2, #0
 800173a:	61da      	str	r2, [r3, #28]

    /* To be able to write again option byte, need to perform a option byte erase */
    status = HAL_FLASHEx_OBErase();
 800173c:	f7ff fed2 	bl	80014e4 <HAL_FLASHEx_OBErase>
 8001740:	4603      	mov	r3, r0
 8001742:	75fb      	strb	r3, [r7, #23]
    if (status == HAL_OK)  
 8001744:	7dfb      	ldrb	r3, [r7, #23]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d158      	bne.n	80017fc <FLASH_OB_EnableWRP+0x12c>
    {
      /* Enable write protection */
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 800174a:	4b30      	ldr	r3, [pc, #192]	; (800180c <FLASH_OB_EnableWRP+0x13c>)
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	4a2f      	ldr	r2, [pc, #188]	; (800180c <FLASH_OB_EnableWRP+0x13c>)
 8001750:	f043 0310 	orr.w	r3, r3, #16
 8001754:	6113      	str	r3, [r2, #16]

#if defined(FLASH_WRP0_WRP0)
      if(WRP0_Data != 0xFFU)
 8001756:	8abb      	ldrh	r3, [r7, #20]
 8001758:	2bff      	cmp	r3, #255	; 0xff
 800175a:	d00d      	beq.n	8001778 <FLASH_OB_EnableWRP+0xa8>
      {
        OB->WRP0 &= WRP0_Data;
 800175c:	4b2c      	ldr	r3, [pc, #176]	; (8001810 <FLASH_OB_EnableWRP+0x140>)
 800175e:	891b      	ldrh	r3, [r3, #8]
 8001760:	b29a      	uxth	r2, r3
 8001762:	492b      	ldr	r1, [pc, #172]	; (8001810 <FLASH_OB_EnableWRP+0x140>)
 8001764:	8abb      	ldrh	r3, [r7, #20]
 8001766:	4013      	ands	r3, r2
 8001768:	b29b      	uxth	r3, r3
 800176a:	810b      	strh	r3, [r1, #8]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800176c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001770:	f7ff fdb6 	bl	80012e0 <FLASH_WaitForLastOperation>
 8001774:	4603      	mov	r3, r0
 8001776:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP0_WRP0 */

#if defined(FLASH_WRP1_WRP1)
      if((status == HAL_OK) && (WRP1_Data != 0xFFU))
 8001778:	7dfb      	ldrb	r3, [r7, #23]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d110      	bne.n	80017a0 <FLASH_OB_EnableWRP+0xd0>
 800177e:	8a7b      	ldrh	r3, [r7, #18]
 8001780:	2bff      	cmp	r3, #255	; 0xff
 8001782:	d00d      	beq.n	80017a0 <FLASH_OB_EnableWRP+0xd0>
      {
        OB->WRP1 &= WRP1_Data;
 8001784:	4b22      	ldr	r3, [pc, #136]	; (8001810 <FLASH_OB_EnableWRP+0x140>)
 8001786:	895b      	ldrh	r3, [r3, #10]
 8001788:	b29a      	uxth	r2, r3
 800178a:	4921      	ldr	r1, [pc, #132]	; (8001810 <FLASH_OB_EnableWRP+0x140>)
 800178c:	8a7b      	ldrh	r3, [r7, #18]
 800178e:	4013      	ands	r3, r2
 8001790:	b29b      	uxth	r3, r3
 8001792:	814b      	strh	r3, [r1, #10]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001794:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001798:	f7ff fda2 	bl	80012e0 <FLASH_WaitForLastOperation>
 800179c:	4603      	mov	r3, r0
 800179e:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP1_WRP1 */

#if defined(FLASH_WRP2_WRP2)
      if((status == HAL_OK) && (WRP2_Data != 0xFFU))
 80017a0:	7dfb      	ldrb	r3, [r7, #23]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d110      	bne.n	80017c8 <FLASH_OB_EnableWRP+0xf8>
 80017a6:	8a3b      	ldrh	r3, [r7, #16]
 80017a8:	2bff      	cmp	r3, #255	; 0xff
 80017aa:	d00d      	beq.n	80017c8 <FLASH_OB_EnableWRP+0xf8>
      {
        OB->WRP2 &= WRP2_Data;
 80017ac:	4b18      	ldr	r3, [pc, #96]	; (8001810 <FLASH_OB_EnableWRP+0x140>)
 80017ae:	899b      	ldrh	r3, [r3, #12]
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	4917      	ldr	r1, [pc, #92]	; (8001810 <FLASH_OB_EnableWRP+0x140>)
 80017b4:	8a3b      	ldrh	r3, [r7, #16]
 80017b6:	4013      	ands	r3, r2
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	818b      	strh	r3, [r1, #12]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80017bc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80017c0:	f7ff fd8e 	bl	80012e0 <FLASH_WaitForLastOperation>
 80017c4:	4603      	mov	r3, r0
 80017c6:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP2_WRP2 */

#if defined(FLASH_WRP3_WRP3)
      if((status == HAL_OK) && (WRP3_Data != 0xFFU))
 80017c8:	7dfb      	ldrb	r3, [r7, #23]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d110      	bne.n	80017f0 <FLASH_OB_EnableWRP+0x120>
 80017ce:	89fb      	ldrh	r3, [r7, #14]
 80017d0:	2bff      	cmp	r3, #255	; 0xff
 80017d2:	d00d      	beq.n	80017f0 <FLASH_OB_EnableWRP+0x120>
      {
        OB->WRP3 &= WRP3_Data;
 80017d4:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <FLASH_OB_EnableWRP+0x140>)
 80017d6:	89db      	ldrh	r3, [r3, #14]
 80017d8:	b29a      	uxth	r2, r3
 80017da:	490d      	ldr	r1, [pc, #52]	; (8001810 <FLASH_OB_EnableWRP+0x140>)
 80017dc:	89fb      	ldrh	r3, [r7, #14]
 80017de:	4013      	ands	r3, r2
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	81cb      	strh	r3, [r1, #14]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80017e4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80017e8:	f7ff fd7a 	bl	80012e0 <FLASH_WaitForLastOperation>
 80017ec:	4603      	mov	r3, r0
 80017ee:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP3_WRP3 */

      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <FLASH_OB_EnableWRP+0x13c>)
 80017f2:	691b      	ldr	r3, [r3, #16]
 80017f4:	4a05      	ldr	r2, [pc, #20]	; (800180c <FLASH_OB_EnableWRP+0x13c>)
 80017f6:	f023 0310 	bic.w	r3, r3, #16
 80017fa:	6113      	str	r3, [r2, #16]
    }
  }
  
  return status;
 80017fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3718      	adds	r7, #24
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	200001c8 	.word	0x200001c8
 800180c:	40022000 	.word	0x40022000
 8001810:	1ffff800 	.word	0x1ffff800

08001814 <FLASH_OB_DisableWRP>:
  * @param  WriteProtectPage specifies the page(s) to be write unprotected.
  *         The value of this parameter depend on device used within the same series 
  * @retval HAL status 
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WriteProtectPage)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800181c:	2300      	movs	r3, #0
 800181e:	75fb      	strb	r3, [r7, #23]
  uint16_t WRP0_Data = 0xFFFF;
 8001820:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001824:	82bb      	strh	r3, [r7, #20]
#if defined(FLASH_WRP1_WRP1)
  uint16_t WRP1_Data = 0xFFFF;
 8001826:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800182a:	827b      	strh	r3, [r7, #18]
#endif /* FLASH_WRP1_WRP1 */
#if defined(FLASH_WRP2_WRP2)
  uint16_t WRP2_Data = 0xFFFF;
 800182c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001830:	823b      	strh	r3, [r7, #16]
#endif /* FLASH_WRP2_WRP2 */
#if defined(FLASH_WRP3_WRP3)
  uint16_t WRP3_Data = 0xFFFF;
 8001832:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001836:	81fb      	strh	r3, [r7, #14]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(WriteProtectPage));

  /* Get current write protected pages and the new pages to be unprotected ******/
  WriteProtectPage = (FLASH_OB_GetWRP() | WriteProtectPage);
 8001838:	f000 f948 	bl	8001acc <FLASH_OB_GetWRP>
 800183c:	4602      	mov	r2, r0
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4313      	orrs	r3, r2
 8001842:	607b      	str	r3, [r7, #4]

#if defined(OB_WRP_PAGES0TO15MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
#elif defined(OB_WRP_PAGES0TO31MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	b29b      	uxth	r3, r3
 8001848:	b2db      	uxtb	r3, r3
 800184a:	82bb      	strh	r3, [r7, #20]
#endif /* OB_WRP_PAGES0TO31MASK */
  
#if defined(OB_WRP_PAGES16TO31MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8U);
#elif defined(OB_WRP_PAGES32TO63MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8U);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	0a1b      	lsrs	r3, r3, #8
 8001850:	b29b      	uxth	r3, r3
 8001852:	b2db      	uxtb	r3, r3
 8001854:	827b      	strh	r3, [r7, #18]
#endif /* OB_WRP_PAGES32TO63MASK */
 
#if defined(OB_WRP_PAGES64TO95MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES64TO95MASK) >> 16U);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	0c1b      	lsrs	r3, r3, #16
 800185a:	b29b      	uxth	r3, r3
 800185c:	b2db      	uxtb	r3, r3
 800185e:	823b      	strh	r3, [r7, #16]
#if defined(OB_WRP_PAGES32TO47MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16U);
#endif /* OB_WRP_PAGES32TO47MASK */

#if defined(OB_WRP_PAGES96TO127MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES96TO127MASK) >> 24U); 
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	0e1b      	lsrs	r3, r3, #24
 8001864:	81fb      	strh	r3, [r7, #14]
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24U); 
#endif /* OB_WRP_PAGES96TO127MASK */

    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001866:	f24c 3050 	movw	r0, #50000	; 0xc350
 800186a:	f7ff fd39 	bl	80012e0 <FLASH_WaitForLastOperation>
 800186e:	4603      	mov	r3, r0
 8001870:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8001872:	7dfb      	ldrb	r3, [r7, #23]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d162      	bne.n	800193e <FLASH_OB_DisableWRP+0x12a>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001878:	4b33      	ldr	r3, [pc, #204]	; (8001948 <FLASH_OB_DisableWRP+0x134>)
 800187a:	2200      	movs	r2, #0
 800187c:	61da      	str	r2, [r3, #28]

    /* To be able to write again option byte, need to perform a option byte erase */
    status = HAL_FLASHEx_OBErase();
 800187e:	f7ff fe31 	bl	80014e4 <HAL_FLASHEx_OBErase>
 8001882:	4603      	mov	r3, r0
 8001884:	75fb      	strb	r3, [r7, #23]
    if (status == HAL_OK)  
 8001886:	7dfb      	ldrb	r3, [r7, #23]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d158      	bne.n	800193e <FLASH_OB_DisableWRP+0x12a>
    {
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 800188c:	4b2f      	ldr	r3, [pc, #188]	; (800194c <FLASH_OB_DisableWRP+0x138>)
 800188e:	691b      	ldr	r3, [r3, #16]
 8001890:	4a2e      	ldr	r2, [pc, #184]	; (800194c <FLASH_OB_DisableWRP+0x138>)
 8001892:	f043 0310 	orr.w	r3, r3, #16
 8001896:	6113      	str	r3, [r2, #16]

#if defined(FLASH_WRP0_WRP0)
      if(WRP0_Data != 0xFFU)
 8001898:	8abb      	ldrh	r3, [r7, #20]
 800189a:	2bff      	cmp	r3, #255	; 0xff
 800189c:	d00d      	beq.n	80018ba <FLASH_OB_DisableWRP+0xa6>
      {
        OB->WRP0 |= WRP0_Data;
 800189e:	4b2c      	ldr	r3, [pc, #176]	; (8001950 <FLASH_OB_DisableWRP+0x13c>)
 80018a0:	891b      	ldrh	r3, [r3, #8]
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	492a      	ldr	r1, [pc, #168]	; (8001950 <FLASH_OB_DisableWRP+0x13c>)
 80018a6:	8abb      	ldrh	r3, [r7, #20]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	810b      	strh	r3, [r1, #8]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80018ae:	f24c 3050 	movw	r0, #50000	; 0xc350
 80018b2:	f7ff fd15 	bl	80012e0 <FLASH_WaitForLastOperation>
 80018b6:	4603      	mov	r3, r0
 80018b8:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP0_WRP0 */

#if defined(FLASH_WRP1_WRP1)
      if((status == HAL_OK) && (WRP1_Data != 0xFFU))
 80018ba:	7dfb      	ldrb	r3, [r7, #23]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d110      	bne.n	80018e2 <FLASH_OB_DisableWRP+0xce>
 80018c0:	8a7b      	ldrh	r3, [r7, #18]
 80018c2:	2bff      	cmp	r3, #255	; 0xff
 80018c4:	d00d      	beq.n	80018e2 <FLASH_OB_DisableWRP+0xce>
      {
        OB->WRP1 |= WRP1_Data;
 80018c6:	4b22      	ldr	r3, [pc, #136]	; (8001950 <FLASH_OB_DisableWRP+0x13c>)
 80018c8:	895b      	ldrh	r3, [r3, #10]
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	4920      	ldr	r1, [pc, #128]	; (8001950 <FLASH_OB_DisableWRP+0x13c>)
 80018ce:	8a7b      	ldrh	r3, [r7, #18]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	814b      	strh	r3, [r1, #10]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80018d6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80018da:	f7ff fd01 	bl	80012e0 <FLASH_WaitForLastOperation>
 80018de:	4603      	mov	r3, r0
 80018e0:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP1_WRP1 */

#if defined(FLASH_WRP2_WRP2)
      if((status == HAL_OK) && (WRP2_Data != 0xFFU))
 80018e2:	7dfb      	ldrb	r3, [r7, #23]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d110      	bne.n	800190a <FLASH_OB_DisableWRP+0xf6>
 80018e8:	8a3b      	ldrh	r3, [r7, #16]
 80018ea:	2bff      	cmp	r3, #255	; 0xff
 80018ec:	d00d      	beq.n	800190a <FLASH_OB_DisableWRP+0xf6>
      {
        OB->WRP2 |= WRP2_Data;
 80018ee:	4b18      	ldr	r3, [pc, #96]	; (8001950 <FLASH_OB_DisableWRP+0x13c>)
 80018f0:	899b      	ldrh	r3, [r3, #12]
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	4916      	ldr	r1, [pc, #88]	; (8001950 <FLASH_OB_DisableWRP+0x13c>)
 80018f6:	8a3b      	ldrh	r3, [r7, #16]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	818b      	strh	r3, [r1, #12]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80018fe:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001902:	f7ff fced 	bl	80012e0 <FLASH_WaitForLastOperation>
 8001906:	4603      	mov	r3, r0
 8001908:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP2_WRP2 */

#if defined(FLASH_WRP3_WRP3)
      if((status == HAL_OK) && (WRP3_Data != 0xFFU))
 800190a:	7dfb      	ldrb	r3, [r7, #23]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d110      	bne.n	8001932 <FLASH_OB_DisableWRP+0x11e>
 8001910:	89fb      	ldrh	r3, [r7, #14]
 8001912:	2bff      	cmp	r3, #255	; 0xff
 8001914:	d00d      	beq.n	8001932 <FLASH_OB_DisableWRP+0x11e>
      {
        OB->WRP3 |= WRP3_Data;
 8001916:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <FLASH_OB_DisableWRP+0x13c>)
 8001918:	89db      	ldrh	r3, [r3, #14]
 800191a:	b29a      	uxth	r2, r3
 800191c:	490c      	ldr	r1, [pc, #48]	; (8001950 <FLASH_OB_DisableWRP+0x13c>)
 800191e:	89fb      	ldrh	r3, [r7, #14]
 8001920:	4313      	orrs	r3, r2
 8001922:	b29b      	uxth	r3, r3
 8001924:	81cb      	strh	r3, [r1, #14]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001926:	f24c 3050 	movw	r0, #50000	; 0xc350
 800192a:	f7ff fcd9 	bl	80012e0 <FLASH_WaitForLastOperation>
 800192e:	4603      	mov	r3, r0
 8001930:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP3_WRP3 */

      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8001932:	4b06      	ldr	r3, [pc, #24]	; (800194c <FLASH_OB_DisableWRP+0x138>)
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	4a05      	ldr	r2, [pc, #20]	; (800194c <FLASH_OB_DisableWRP+0x138>)
 8001938:	f023 0310 	bic.w	r3, r3, #16
 800193c:	6113      	str	r3, [r2, #16]
    }
  }
  return status;
 800193e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	200001c8 	.word	0x200001c8
 800194c:	40022000 	.word	0x40022000
 8001950:	1ffff800 	.word	0x1ffff800

08001954 <FLASH_OB_RDP_LevelConfig>:
  *            @arg @ref OB_RDP_LEVEL_0 No protection
  *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t ReadProtectLevel)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800195e:	2300      	movs	r3, #0
 8001960:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(ReadProtectLevel));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001962:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001966:	f7ff fcbb 	bl	80012e0 <FLASH_WaitForLastOperation>
 800196a:	4603      	mov	r3, r0
 800196c:	73fb      	strb	r3, [r7, #15]
  
  if(status == HAL_OK)
 800196e:	7bfb      	ldrb	r3, [r7, #15]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d133      	bne.n	80019dc <FLASH_OB_RDP_LevelConfig+0x88>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001974:	4b1c      	ldr	r3, [pc, #112]	; (80019e8 <FLASH_OB_RDP_LevelConfig+0x94>)
 8001976:	2200      	movs	r2, #0
 8001978:	61da      	str	r2, [r3, #28]
    
    /* If the previous operation is completed, proceed to erase the option bytes */
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 800197a:	4b1c      	ldr	r3, [pc, #112]	; (80019ec <FLASH_OB_RDP_LevelConfig+0x98>)
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	4a1b      	ldr	r2, [pc, #108]	; (80019ec <FLASH_OB_RDP_LevelConfig+0x98>)
 8001980:	f043 0320 	orr.w	r3, r3, #32
 8001984:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001986:	4b19      	ldr	r3, [pc, #100]	; (80019ec <FLASH_OB_RDP_LevelConfig+0x98>)
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	4a18      	ldr	r2, [pc, #96]	; (80019ec <FLASH_OB_RDP_LevelConfig+0x98>)
 800198c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001990:	6113      	str	r3, [r2, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001992:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001996:	f7ff fca3 	bl	80012e0 <FLASH_WaitForLastOperation>
 800199a:	4603      	mov	r3, r0
 800199c:	73fb      	strb	r3, [r7, #15]

    /* If the erase operation is completed, disable the OPTER Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 800199e:	4b13      	ldr	r3, [pc, #76]	; (80019ec <FLASH_OB_RDP_LevelConfig+0x98>)
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	4a12      	ldr	r2, [pc, #72]	; (80019ec <FLASH_OB_RDP_LevelConfig+0x98>)
 80019a4:	f023 0320 	bic.w	r3, r3, #32
 80019a8:	6113      	str	r3, [r2, #16]

    if(status == HAL_OK)
 80019aa:	7bfb      	ldrb	r3, [r7, #15]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d115      	bne.n	80019dc <FLASH_OB_RDP_LevelConfig+0x88>
    {
      /* Enable the Option Bytes Programming operation */
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 80019b0:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <FLASH_OB_RDP_LevelConfig+0x98>)
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	4a0d      	ldr	r2, [pc, #52]	; (80019ec <FLASH_OB_RDP_LevelConfig+0x98>)
 80019b6:	f043 0310 	orr.w	r3, r3, #16
 80019ba:	6113      	str	r3, [r2, #16]
      
      WRITE_REG(OB->RDP, ReadProtectLevel);
 80019bc:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <FLASH_OB_RDP_LevelConfig+0x9c>)
 80019be:	79fa      	ldrb	r2, [r7, #7]
 80019c0:	b292      	uxth	r2, r2
 80019c2:	801a      	strh	r2, [r3, #0]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE); 
 80019c4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80019c8:	f7ff fc8a 	bl	80012e0 <FLASH_WaitForLastOperation>
 80019cc:	4603      	mov	r3, r0
 80019ce:	73fb      	strb	r3, [r7, #15]
      
      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 80019d0:	4b06      	ldr	r3, [pc, #24]	; (80019ec <FLASH_OB_RDP_LevelConfig+0x98>)
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	4a05      	ldr	r2, [pc, #20]	; (80019ec <FLASH_OB_RDP_LevelConfig+0x98>)
 80019d6:	f023 0310 	bic.w	r3, r3, #16
 80019da:	6113      	str	r3, [r2, #16]
    }
  }
  
  return status;
 80019dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	200001c8 	.word	0x200001c8
 80019ec:	40022000 	.word	0x40022000
 80019f0:	1ffff800 	.word	0x1ffff800

080019f4 <FLASH_OB_UserConfig>:
  *         FLASH_OBR_nRST_STOP(Bit3),FLASH_OBR_nRST_STDBY(Bit4).
  *         And BFBF2(Bit5) for STM32F101xG and STM32F103xG . 
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t UserConfig)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80019fe:	2300      	movs	r3, #0
 8001a00:	73fb      	strb	r3, [r7, #15]
#if defined(FLASH_BANK2_END)
  assert_param(IS_OB_BOOT1((UserConfig&OB_BOOT1_SET)));
#endif /* FLASH_BANK2_END */

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a02:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a06:	f7ff fc6b 	bl	80012e0 <FLASH_WaitForLastOperation>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	73fb      	strb	r3, [r7, #15]
  
  if(status == HAL_OK)
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d11b      	bne.n	8001a4c <FLASH_OB_UserConfig+0x58>
  {     
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001a14:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <FLASH_OB_UserConfig+0x64>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	61da      	str	r2, [r3, #28]

    /* Enable the Option Bytes Programming operation */
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 8001a1a:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <FLASH_OB_UserConfig+0x68>)
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	4a0f      	ldr	r2, [pc, #60]	; (8001a5c <FLASH_OB_UserConfig+0x68>)
 8001a20:	f043 0310 	orr.w	r3, r3, #16
 8001a24:	6113      	str	r3, [r2, #16]
 
#if defined(FLASH_BANK2_END)
    OB->USER = (UserConfig | 0xF0U);
#else
    OB->USER = (UserConfig | 0x88U);
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	f063 0377 	orn	r3, r3, #119	; 0x77
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <FLASH_OB_UserConfig+0x6c>)
 8001a30:	b292      	uxth	r2, r2
 8001a32:	805a      	strh	r2, [r3, #2]
#endif /* FLASH_BANK2_END */

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a34:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a38:	f7ff fc52 	bl	80012e0 <FLASH_WaitForLastOperation>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the OPTPG Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <FLASH_OB_UserConfig+0x68>)
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	4a05      	ldr	r2, [pc, #20]	; (8001a5c <FLASH_OB_UserConfig+0x68>)
 8001a46:	f023 0310 	bic.w	r3, r3, #16
 8001a4a:	6113      	str	r3, [r2, #16]
  }
  
  return status; 
 8001a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	200001c8 	.word	0x200001c8
 8001a5c:	40022000 	.word	0x40022000
 8001a60:	1ffff800 	.word	0x1ffff800

08001a64 <FLASH_OB_ProgramData>:
  *         This parameter can be 0x1FFFF804 or 0x1FFFF806. 
  * @param  Data specifies the data to be programmed.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_ProgramData(uint32_t Address, uint8_t Data)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a74:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a78:	f7ff fc32 	bl	80012e0 <FLASH_WaitForLastOperation>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	73fb      	strb	r3, [r7, #15]
  
  if(status == HAL_OK)
 8001a80:	7bfb      	ldrb	r3, [r7, #15]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d118      	bne.n	8001ab8 <FLASH_OB_ProgramData+0x54>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001a86:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <FLASH_OB_ProgramData+0x60>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	61da      	str	r2, [r3, #28]

    /* Enables the Option Bytes Programming operation */
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 8001a8c:	4b0e      	ldr	r3, [pc, #56]	; (8001ac8 <FLASH_OB_ProgramData+0x64>)
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	4a0d      	ldr	r2, [pc, #52]	; (8001ac8 <FLASH_OB_ProgramData+0x64>)
 8001a92:	f043 0310 	orr.w	r3, r3, #16
 8001a96:	6113      	str	r3, [r2, #16]
    *(__IO uint16_t*)Address = Data;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	78fa      	ldrb	r2, [r7, #3]
 8001a9c:	b292      	uxth	r2, r2
 8001a9e:	801a      	strh	r2, [r3, #0]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001aa0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001aa4:	f7ff fc1c 	bl	80012e0 <FLASH_WaitForLastOperation>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	73fb      	strb	r3, [r7, #15]
    
    /* If the program operation is completed, disable the OPTPG Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <FLASH_OB_ProgramData+0x64>)
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	4a05      	ldr	r2, [pc, #20]	; (8001ac8 <FLASH_OB_ProgramData+0x64>)
 8001ab2:	f023 0310 	bic.w	r3, r3, #16
 8001ab6:	6113      	str	r3, [r2, #16]
  }
  /* Return the Option Byte Data Program Status */
  return status;
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	200001c8 	.word	0x200001c8
 8001ac8:	40022000 	.word	0x40022000

08001acc <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval The FLASH Write Protection Option Bytes value
  */
static uint32_t FLASH_OB_GetWRP(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (uint32_t)(READ_REG(FLASH->WRPR));
 8001ad0:	4b02      	ldr	r3, [pc, #8]	; (8001adc <FLASH_OB_GetWRP+0x10>)
 8001ad2:	6a1b      	ldr	r3, [r3, #32]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr
 8001adc:	40022000 	.word	0x40022000

08001ae0 <FLASH_OB_GetRDP>:
  *         This parameter can be one of the following values:
  *            @arg @ref OB_RDP_LEVEL_0 No protection
  *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
  uint32_t readstatus = OB_RDP_LEVEL_0;
 8001ae6:	23a5      	movs	r3, #165	; 0xa5
 8001ae8:	607b      	str	r3, [r7, #4]
  uint32_t tmp_reg = 0U;
 8001aea:	2300      	movs	r3, #0
 8001aec:	603b      	str	r3, [r7, #0]
  
  /* Read RDP level bits */
  tmp_reg = READ_BIT(FLASH->OBR, FLASH_OBR_RDPRT);
 8001aee:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <FLASH_OB_GetRDP+0x34>)
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	603b      	str	r3, [r7, #0]

  if (tmp_reg == FLASH_OBR_RDPRT)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d102      	bne.n	8001b04 <FLASH_OB_GetRDP+0x24>
  {
    readstatus = OB_RDP_LEVEL_1;
 8001afe:	2300      	movs	r3, #0
 8001b00:	607b      	str	r3, [r7, #4]
 8001b02:	e001      	b.n	8001b08 <FLASH_OB_GetRDP+0x28>
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_0;
 8001b04:	23a5      	movs	r3, #165	; 0xa5
 8001b06:	607b      	str	r3, [r7, #4]
  }

  return readstatus;
 8001b08:	687b      	ldr	r3, [r7, #4]
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr
 8001b14:	40022000 	.word	0x40022000

08001b18 <FLASH_OB_GetUser>:
  * @retval The FLASH User Option Bytes values: FLASH_OBR_IWDG_SW(Bit2), 
  *         FLASH_OBR_nRST_STOP(Bit3),FLASH_OBR_nRST_STDBY(Bit4).
  *         And FLASH_OBR_BFB2(Bit5) for STM32F101xG and STM32F103xG . 
  */
static uint8_t FLASH_OB_GetUser(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return (uint8_t)((READ_REG(FLASH->OBR) & FLASH_OBR_USER) >> FLASH_POSITION_IWDGSW_BIT);
 8001b1c:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <FLASH_OB_GetUser+0x1c>)
 8001b1e:	69db      	ldr	r3, [r3, #28]
 8001b20:	089b      	lsrs	r3, r3, #2
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	f003 0307 	and.w	r3, r3, #7
 8001b28:	b2db      	uxtb	r3, r3
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bc80      	pop	{r7}
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	40022000 	.word	0x40022000

08001b38 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b40:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <FLASH_PageErase+0x38>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001b46:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <FLASH_PageErase+0x3c>)
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	4a0a      	ldr	r2, [pc, #40]	; (8001b74 <FLASH_PageErase+0x3c>)
 8001b4c:	f043 0302 	orr.w	r3, r3, #2
 8001b50:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001b52:	4a08      	ldr	r2, [pc, #32]	; (8001b74 <FLASH_PageErase+0x3c>)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001b58:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <FLASH_PageErase+0x3c>)
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	4a05      	ldr	r2, [pc, #20]	; (8001b74 <FLASH_PageErase+0x3c>)
 8001b5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b62:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bc80      	pop	{r7}
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	200001c8 	.word	0x200001c8
 8001b74:	40022000 	.word	0x40022000

08001b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b08b      	sub	sp, #44	; 0x2c
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b82:	2300      	movs	r3, #0
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b86:	2300      	movs	r3, #0
 8001b88:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b8a:	e169      	b.n	8001e60 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	69fa      	ldr	r2, [r7, #28]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	f040 8158 	bne.w	8001e5a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	4a9a      	ldr	r2, [pc, #616]	; (8001e18 <HAL_GPIO_Init+0x2a0>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d05e      	beq.n	8001c72 <HAL_GPIO_Init+0xfa>
 8001bb4:	4a98      	ldr	r2, [pc, #608]	; (8001e18 <HAL_GPIO_Init+0x2a0>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d875      	bhi.n	8001ca6 <HAL_GPIO_Init+0x12e>
 8001bba:	4a98      	ldr	r2, [pc, #608]	; (8001e1c <HAL_GPIO_Init+0x2a4>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d058      	beq.n	8001c72 <HAL_GPIO_Init+0xfa>
 8001bc0:	4a96      	ldr	r2, [pc, #600]	; (8001e1c <HAL_GPIO_Init+0x2a4>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d86f      	bhi.n	8001ca6 <HAL_GPIO_Init+0x12e>
 8001bc6:	4a96      	ldr	r2, [pc, #600]	; (8001e20 <HAL_GPIO_Init+0x2a8>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d052      	beq.n	8001c72 <HAL_GPIO_Init+0xfa>
 8001bcc:	4a94      	ldr	r2, [pc, #592]	; (8001e20 <HAL_GPIO_Init+0x2a8>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d869      	bhi.n	8001ca6 <HAL_GPIO_Init+0x12e>
 8001bd2:	4a94      	ldr	r2, [pc, #592]	; (8001e24 <HAL_GPIO_Init+0x2ac>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d04c      	beq.n	8001c72 <HAL_GPIO_Init+0xfa>
 8001bd8:	4a92      	ldr	r2, [pc, #584]	; (8001e24 <HAL_GPIO_Init+0x2ac>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d863      	bhi.n	8001ca6 <HAL_GPIO_Init+0x12e>
 8001bde:	4a92      	ldr	r2, [pc, #584]	; (8001e28 <HAL_GPIO_Init+0x2b0>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d046      	beq.n	8001c72 <HAL_GPIO_Init+0xfa>
 8001be4:	4a90      	ldr	r2, [pc, #576]	; (8001e28 <HAL_GPIO_Init+0x2b0>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d85d      	bhi.n	8001ca6 <HAL_GPIO_Init+0x12e>
 8001bea:	2b12      	cmp	r3, #18
 8001bec:	d82a      	bhi.n	8001c44 <HAL_GPIO_Init+0xcc>
 8001bee:	2b12      	cmp	r3, #18
 8001bf0:	d859      	bhi.n	8001ca6 <HAL_GPIO_Init+0x12e>
 8001bf2:	a201      	add	r2, pc, #4	; (adr r2, 8001bf8 <HAL_GPIO_Init+0x80>)
 8001bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bf8:	08001c73 	.word	0x08001c73
 8001bfc:	08001c4d 	.word	0x08001c4d
 8001c00:	08001c5f 	.word	0x08001c5f
 8001c04:	08001ca1 	.word	0x08001ca1
 8001c08:	08001ca7 	.word	0x08001ca7
 8001c0c:	08001ca7 	.word	0x08001ca7
 8001c10:	08001ca7 	.word	0x08001ca7
 8001c14:	08001ca7 	.word	0x08001ca7
 8001c18:	08001ca7 	.word	0x08001ca7
 8001c1c:	08001ca7 	.word	0x08001ca7
 8001c20:	08001ca7 	.word	0x08001ca7
 8001c24:	08001ca7 	.word	0x08001ca7
 8001c28:	08001ca7 	.word	0x08001ca7
 8001c2c:	08001ca7 	.word	0x08001ca7
 8001c30:	08001ca7 	.word	0x08001ca7
 8001c34:	08001ca7 	.word	0x08001ca7
 8001c38:	08001ca7 	.word	0x08001ca7
 8001c3c:	08001c55 	.word	0x08001c55
 8001c40:	08001c69 	.word	0x08001c69
 8001c44:	4a79      	ldr	r2, [pc, #484]	; (8001e2c <HAL_GPIO_Init+0x2b4>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d013      	beq.n	8001c72 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c4a:	e02c      	b.n	8001ca6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	623b      	str	r3, [r7, #32]
          break;
 8001c52:	e029      	b.n	8001ca8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	3304      	adds	r3, #4
 8001c5a:	623b      	str	r3, [r7, #32]
          break;
 8001c5c:	e024      	b.n	8001ca8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	3308      	adds	r3, #8
 8001c64:	623b      	str	r3, [r7, #32]
          break;
 8001c66:	e01f      	b.n	8001ca8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	330c      	adds	r3, #12
 8001c6e:	623b      	str	r3, [r7, #32]
          break;
 8001c70:	e01a      	b.n	8001ca8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d102      	bne.n	8001c80 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c7a:	2304      	movs	r3, #4
 8001c7c:	623b      	str	r3, [r7, #32]
          break;
 8001c7e:	e013      	b.n	8001ca8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d105      	bne.n	8001c94 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c88:	2308      	movs	r3, #8
 8001c8a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	69fa      	ldr	r2, [r7, #28]
 8001c90:	611a      	str	r2, [r3, #16]
          break;
 8001c92:	e009      	b.n	8001ca8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c94:	2308      	movs	r3, #8
 8001c96:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	69fa      	ldr	r2, [r7, #28]
 8001c9c:	615a      	str	r2, [r3, #20]
          break;
 8001c9e:	e003      	b.n	8001ca8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	623b      	str	r3, [r7, #32]
          break;
 8001ca4:	e000      	b.n	8001ca8 <HAL_GPIO_Init+0x130>
          break;
 8001ca6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	2bff      	cmp	r3, #255	; 0xff
 8001cac:	d801      	bhi.n	8001cb2 <HAL_GPIO_Init+0x13a>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	e001      	b.n	8001cb6 <HAL_GPIO_Init+0x13e>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	2bff      	cmp	r3, #255	; 0xff
 8001cbc:	d802      	bhi.n	8001cc4 <HAL_GPIO_Init+0x14c>
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	e002      	b.n	8001cca <HAL_GPIO_Init+0x152>
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc6:	3b08      	subs	r3, #8
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	210f      	movs	r1, #15
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	401a      	ands	r2, r3
 8001cdc:	6a39      	ldr	r1, [r7, #32]
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f000 80b1 	beq.w	8001e5a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cf8:	4b4d      	ldr	r3, [pc, #308]	; (8001e30 <HAL_GPIO_Init+0x2b8>)
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	4a4c      	ldr	r2, [pc, #304]	; (8001e30 <HAL_GPIO_Init+0x2b8>)
 8001cfe:	f043 0301 	orr.w	r3, r3, #1
 8001d02:	6193      	str	r3, [r2, #24]
 8001d04:	4b4a      	ldr	r3, [pc, #296]	; (8001e30 <HAL_GPIO_Init+0x2b8>)
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	60bb      	str	r3, [r7, #8]
 8001d0e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d10:	4a48      	ldr	r2, [pc, #288]	; (8001e34 <HAL_GPIO_Init+0x2bc>)
 8001d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d14:	089b      	lsrs	r3, r3, #2
 8001d16:	3302      	adds	r3, #2
 8001d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d1c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d20:	f003 0303 	and.w	r3, r3, #3
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	220f      	movs	r2, #15
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	4013      	ands	r3, r2
 8001d32:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a40      	ldr	r2, [pc, #256]	; (8001e38 <HAL_GPIO_Init+0x2c0>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d013      	beq.n	8001d64 <HAL_GPIO_Init+0x1ec>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a3f      	ldr	r2, [pc, #252]	; (8001e3c <HAL_GPIO_Init+0x2c4>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d00d      	beq.n	8001d60 <HAL_GPIO_Init+0x1e8>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a3e      	ldr	r2, [pc, #248]	; (8001e40 <HAL_GPIO_Init+0x2c8>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d007      	beq.n	8001d5c <HAL_GPIO_Init+0x1e4>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a3d      	ldr	r2, [pc, #244]	; (8001e44 <HAL_GPIO_Init+0x2cc>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d101      	bne.n	8001d58 <HAL_GPIO_Init+0x1e0>
 8001d54:	2303      	movs	r3, #3
 8001d56:	e006      	b.n	8001d66 <HAL_GPIO_Init+0x1ee>
 8001d58:	2304      	movs	r3, #4
 8001d5a:	e004      	b.n	8001d66 <HAL_GPIO_Init+0x1ee>
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	e002      	b.n	8001d66 <HAL_GPIO_Init+0x1ee>
 8001d60:	2301      	movs	r3, #1
 8001d62:	e000      	b.n	8001d66 <HAL_GPIO_Init+0x1ee>
 8001d64:	2300      	movs	r3, #0
 8001d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d68:	f002 0203 	and.w	r2, r2, #3
 8001d6c:	0092      	lsls	r2, r2, #2
 8001d6e:	4093      	lsls	r3, r2
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d76:	492f      	ldr	r1, [pc, #188]	; (8001e34 <HAL_GPIO_Init+0x2bc>)
 8001d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7a:	089b      	lsrs	r3, r3, #2
 8001d7c:	3302      	adds	r3, #2
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d006      	beq.n	8001d9e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d90:	4b2d      	ldr	r3, [pc, #180]	; (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	492c      	ldr	r1, [pc, #176]	; (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	608b      	str	r3, [r1, #8]
 8001d9c:	e006      	b.n	8001dac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d9e:	4b2a      	ldr	r3, [pc, #168]	; (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001da0:	689a      	ldr	r2, [r3, #8]
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	43db      	mvns	r3, r3
 8001da6:	4928      	ldr	r1, [pc, #160]	; (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001da8:	4013      	ands	r3, r2
 8001daa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d006      	beq.n	8001dc6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001db8:	4b23      	ldr	r3, [pc, #140]	; (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001dba:	68da      	ldr	r2, [r3, #12]
 8001dbc:	4922      	ldr	r1, [pc, #136]	; (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	60cb      	str	r3, [r1, #12]
 8001dc4:	e006      	b.n	8001dd4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001dc6:	4b20      	ldr	r3, [pc, #128]	; (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001dc8:	68da      	ldr	r2, [r3, #12]
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	491e      	ldr	r1, [pc, #120]	; (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d006      	beq.n	8001dee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001de0:	4b19      	ldr	r3, [pc, #100]	; (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	4918      	ldr	r1, [pc, #96]	; (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	604b      	str	r3, [r1, #4]
 8001dec:	e006      	b.n	8001dfc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001dee:	4b16      	ldr	r3, [pc, #88]	; (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	43db      	mvns	r3, r3
 8001df6:	4914      	ldr	r1, [pc, #80]	; (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001df8:	4013      	ands	r3, r2
 8001dfa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d021      	beq.n	8001e4c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e08:	4b0f      	ldr	r3, [pc, #60]	; (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	490e      	ldr	r1, [pc, #56]	; (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	600b      	str	r3, [r1, #0]
 8001e14:	e021      	b.n	8001e5a <HAL_GPIO_Init+0x2e2>
 8001e16:	bf00      	nop
 8001e18:	10320000 	.word	0x10320000
 8001e1c:	10310000 	.word	0x10310000
 8001e20:	10220000 	.word	0x10220000
 8001e24:	10210000 	.word	0x10210000
 8001e28:	10120000 	.word	0x10120000
 8001e2c:	10110000 	.word	0x10110000
 8001e30:	40021000 	.word	0x40021000
 8001e34:	40010000 	.word	0x40010000
 8001e38:	40010800 	.word	0x40010800
 8001e3c:	40010c00 	.word	0x40010c00
 8001e40:	40011000 	.word	0x40011000
 8001e44:	40011400 	.word	0x40011400
 8001e48:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <HAL_GPIO_Init+0x304>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	43db      	mvns	r3, r3
 8001e54:	4909      	ldr	r1, [pc, #36]	; (8001e7c <HAL_GPIO_Init+0x304>)
 8001e56:	4013      	ands	r3, r2
 8001e58:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e66:	fa22 f303 	lsr.w	r3, r2, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f47f ae8e 	bne.w	8001b8c <HAL_GPIO_Init+0x14>
  }
}
 8001e70:	bf00      	nop
 8001e72:	bf00      	nop
 8001e74:	372c      	adds	r7, #44	; 0x2c
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr
 8001e7c:	40010400 	.word	0x40010400

08001e80 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001e86:	f7ff f82f 	bl	8000ee8 <HAL_GetTick>
 8001e8a:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001e8c:	4b45      	ldr	r3, [pc, #276]	; (8001fa4 <HAL_RCC_DeInit+0x124>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a44      	ldr	r2, [pc, #272]	; (8001fa4 <HAL_RCC_DeInit+0x124>)
 8001e92:	f043 0301 	orr.w	r3, r3, #1
 8001e96:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001e98:	e008      	b.n	8001eac <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e9a:	f7ff f825 	bl	8000ee8 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e077      	b.n	8001f9c <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001eac:	4b3d      	ldr	r3, [pc, #244]	; (8001fa4 <HAL_RCC_DeInit+0x124>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0f0      	beq.n	8001e9a <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 8001eb8:	4b3a      	ldr	r3, [pc, #232]	; (8001fa4 <HAL_RCC_DeInit+0x124>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001ec0:	4a38      	ldr	r2, [pc, #224]	; (8001fa4 <HAL_RCC_DeInit+0x124>)
 8001ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ec6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001ec8:	f7ff f80e 	bl	8000ee8 <HAL_GetTick>
 8001ecc:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8001ece:	4b35      	ldr	r3, [pc, #212]	; (8001fa4 <HAL_RCC_DeInit+0x124>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	605a      	str	r2, [r3, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8001ed4:	e00a      	b.n	8001eec <HAL_RCC_DeInit+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ed6:	f7ff f807 	bl	8000ee8 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_DeInit+0x6c>
    {
      return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e057      	b.n	8001f9c <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8001eec:	4b2d      	ldr	r3, [pc, #180]	; (8001fa4 <HAL_RCC_DeInit+0x124>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f003 030c 	and.w	r3, r3, #12
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1ee      	bne.n	8001ed6 <HAL_RCC_DeInit+0x56>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8001ef8:	4b2b      	ldr	r3, [pc, #172]	; (8001fa8 <HAL_RCC_DeInit+0x128>)
 8001efa:	4a2c      	ldr	r2, [pc, #176]	; (8001fac <HAL_RCC_DeInit+0x12c>)
 8001efc:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001efe:	4b2c      	ldr	r3, [pc, #176]	; (8001fb0 <HAL_RCC_DeInit+0x130>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7fe ffae 	bl	8000e64 <HAL_InitTick>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <HAL_RCC_DeInit+0x92>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e044      	b.n	8001f9c <HAL_RCC_DeInit+0x11c>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001f12:	f7fe ffe9 	bl	8000ee8 <HAL_GetTick>
 8001f16:	6078      	str	r0, [r7, #4]

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001f18:	4b22      	ldr	r3, [pc, #136]	; (8001fa4 <HAL_RCC_DeInit+0x124>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a21      	ldr	r2, [pc, #132]	; (8001fa4 <HAL_RCC_DeInit+0x124>)
 8001f1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f22:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f26:	f7fe ffdf 	bl	8000ee8 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e031      	b.n	8001f9c <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001f38:	4b1a      	ldr	r3, [pc, #104]	; (8001fa4 <HAL_RCC_DeInit+0x124>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1f0      	bne.n	8001f26 <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Ensure to reset PLLSRC and PLLMUL bits */
  CLEAR_REG(RCC->CFGR);
 8001f44:	4b17      	ldr	r3, [pc, #92]	; (8001fa4 <HAL_RCC_DeInit+0x124>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	605a      	str	r2, [r3, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001f4a:	f7fe ffcd 	bl	8000ee8 <HAL_GetTick>
 8001f4e:	6078      	str	r0, [r7, #4]

  /* Reset HSEON & CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 8001f50:	4b14      	ldr	r3, [pc, #80]	; (8001fa4 <HAL_RCC_DeInit+0x124>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a13      	ldr	r2, [pc, #76]	; (8001fa4 <HAL_RCC_DeInit+0x124>)
 8001f56:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001f5a:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001f5c:	e008      	b.n	8001f70 <HAL_RCC_DeInit+0xf0>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f5e:	f7fe ffc3 	bl	8000ee8 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b64      	cmp	r3, #100	; 0x64
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_DeInit+0xf0>
    {
      return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e015      	b.n	8001f9c <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001f70:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <HAL_RCC_DeInit+0x124>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1f0      	bne.n	8001f5e <HAL_RCC_DeInit+0xde>
    }
  }

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001f7c:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <HAL_RCC_DeInit+0x124>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a08      	ldr	r2, [pc, #32]	; (8001fa4 <HAL_RCC_DeInit+0x124>)
 8001f82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f86:	6013      	str	r3, [r2, #0]
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
#endif /* RCC_CFGR2_PREDIV1 */

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8001f88:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <HAL_RCC_DeInit+0x124>)
 8001f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8c:	4a05      	ldr	r2, [pc, #20]	; (8001fa4 <HAL_RCC_DeInit+0x124>)
 8001f8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f92:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8001f94:	4b03      	ldr	r3, [pc, #12]	; (8001fa4 <HAL_RCC_DeInit+0x124>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	20000024 	.word	0x20000024
 8001fac:	007a1200 	.word	0x007a1200
 8001fb0:	20000028 	.word	0x20000028

08001fb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e272      	b.n	80024ac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f000 8087 	beq.w	80020e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fd4:	4b92      	ldr	r3, [pc, #584]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 030c 	and.w	r3, r3, #12
 8001fdc:	2b04      	cmp	r3, #4
 8001fde:	d00c      	beq.n	8001ffa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fe0:	4b8f      	ldr	r3, [pc, #572]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 030c 	and.w	r3, r3, #12
 8001fe8:	2b08      	cmp	r3, #8
 8001fea:	d112      	bne.n	8002012 <HAL_RCC_OscConfig+0x5e>
 8001fec:	4b8c      	ldr	r3, [pc, #560]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ff8:	d10b      	bne.n	8002012 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ffa:	4b89      	ldr	r3, [pc, #548]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d06c      	beq.n	80020e0 <HAL_RCC_OscConfig+0x12c>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d168      	bne.n	80020e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e24c      	b.n	80024ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800201a:	d106      	bne.n	800202a <HAL_RCC_OscConfig+0x76>
 800201c:	4b80      	ldr	r3, [pc, #512]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a7f      	ldr	r2, [pc, #508]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 8002022:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002026:	6013      	str	r3, [r2, #0]
 8002028:	e02e      	b.n	8002088 <HAL_RCC_OscConfig+0xd4>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10c      	bne.n	800204c <HAL_RCC_OscConfig+0x98>
 8002032:	4b7b      	ldr	r3, [pc, #492]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a7a      	ldr	r2, [pc, #488]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 8002038:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800203c:	6013      	str	r3, [r2, #0]
 800203e:	4b78      	ldr	r3, [pc, #480]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a77      	ldr	r2, [pc, #476]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 8002044:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002048:	6013      	str	r3, [r2, #0]
 800204a:	e01d      	b.n	8002088 <HAL_RCC_OscConfig+0xd4>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002054:	d10c      	bne.n	8002070 <HAL_RCC_OscConfig+0xbc>
 8002056:	4b72      	ldr	r3, [pc, #456]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a71      	ldr	r2, [pc, #452]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 800205c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002060:	6013      	str	r3, [r2, #0]
 8002062:	4b6f      	ldr	r3, [pc, #444]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a6e      	ldr	r2, [pc, #440]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 8002068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800206c:	6013      	str	r3, [r2, #0]
 800206e:	e00b      	b.n	8002088 <HAL_RCC_OscConfig+0xd4>
 8002070:	4b6b      	ldr	r3, [pc, #428]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a6a      	ldr	r2, [pc, #424]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 8002076:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800207a:	6013      	str	r3, [r2, #0]
 800207c:	4b68      	ldr	r3, [pc, #416]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a67      	ldr	r2, [pc, #412]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 8002082:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002086:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d013      	beq.n	80020b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002090:	f7fe ff2a 	bl	8000ee8 <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002098:	f7fe ff26 	bl	8000ee8 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b64      	cmp	r3, #100	; 0x64
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e200      	b.n	80024ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020aa:	4b5d      	ldr	r3, [pc, #372]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0f0      	beq.n	8002098 <HAL_RCC_OscConfig+0xe4>
 80020b6:	e014      	b.n	80020e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b8:	f7fe ff16 	bl	8000ee8 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020c0:	f7fe ff12 	bl	8000ee8 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b64      	cmp	r3, #100	; 0x64
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e1ec      	b.n	80024ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020d2:	4b53      	ldr	r3, [pc, #332]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f0      	bne.n	80020c0 <HAL_RCC_OscConfig+0x10c>
 80020de:	e000      	b.n	80020e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d063      	beq.n	80021b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020ee:	4b4c      	ldr	r3, [pc, #304]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f003 030c 	and.w	r3, r3, #12
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00b      	beq.n	8002112 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020fa:	4b49      	ldr	r3, [pc, #292]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f003 030c 	and.w	r3, r3, #12
 8002102:	2b08      	cmp	r3, #8
 8002104:	d11c      	bne.n	8002140 <HAL_RCC_OscConfig+0x18c>
 8002106:	4b46      	ldr	r3, [pc, #280]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d116      	bne.n	8002140 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002112:	4b43      	ldr	r3, [pc, #268]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d005      	beq.n	800212a <HAL_RCC_OscConfig+0x176>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d001      	beq.n	800212a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e1c0      	b.n	80024ac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800212a:	4b3d      	ldr	r3, [pc, #244]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	4939      	ldr	r1, [pc, #228]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 800213a:	4313      	orrs	r3, r2
 800213c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800213e:	e03a      	b.n	80021b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d020      	beq.n	800218a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002148:	4b36      	ldr	r3, [pc, #216]	; (8002224 <HAL_RCC_OscConfig+0x270>)
 800214a:	2201      	movs	r2, #1
 800214c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214e:	f7fe fecb 	bl	8000ee8 <HAL_GetTick>
 8002152:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002154:	e008      	b.n	8002168 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002156:	f7fe fec7 	bl	8000ee8 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e1a1      	b.n	80024ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002168:	4b2d      	ldr	r3, [pc, #180]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d0f0      	beq.n	8002156 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002174:	4b2a      	ldr	r3, [pc, #168]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	695b      	ldr	r3, [r3, #20]
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	4927      	ldr	r1, [pc, #156]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 8002184:	4313      	orrs	r3, r2
 8002186:	600b      	str	r3, [r1, #0]
 8002188:	e015      	b.n	80021b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800218a:	4b26      	ldr	r3, [pc, #152]	; (8002224 <HAL_RCC_OscConfig+0x270>)
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002190:	f7fe feaa 	bl	8000ee8 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002198:	f7fe fea6 	bl	8000ee8 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e180      	b.n	80024ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021aa:	4b1d      	ldr	r3, [pc, #116]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1f0      	bne.n	8002198 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0308 	and.w	r3, r3, #8
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d03a      	beq.n	8002238 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d019      	beq.n	80021fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ca:	4b17      	ldr	r3, [pc, #92]	; (8002228 <HAL_RCC_OscConfig+0x274>)
 80021cc:	2201      	movs	r2, #1
 80021ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d0:	f7fe fe8a 	bl	8000ee8 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021d8:	f7fe fe86 	bl	8000ee8 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e160      	b.n	80024ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ea:	4b0d      	ldr	r3, [pc, #52]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 80021ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0f0      	beq.n	80021d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021f6:	2001      	movs	r0, #1
 80021f8:	f000 face 	bl	8002798 <RCC_Delay>
 80021fc:	e01c      	b.n	8002238 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021fe:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <HAL_RCC_OscConfig+0x274>)
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002204:	f7fe fe70 	bl	8000ee8 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800220a:	e00f      	b.n	800222c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800220c:	f7fe fe6c 	bl	8000ee8 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d908      	bls.n	800222c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e146      	b.n	80024ac <HAL_RCC_OscConfig+0x4f8>
 800221e:	bf00      	nop
 8002220:	40021000 	.word	0x40021000
 8002224:	42420000 	.word	0x42420000
 8002228:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800222c:	4b92      	ldr	r3, [pc, #584]	; (8002478 <HAL_RCC_OscConfig+0x4c4>)
 800222e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1e9      	bne.n	800220c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 80a6 	beq.w	8002392 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002246:	2300      	movs	r3, #0
 8002248:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800224a:	4b8b      	ldr	r3, [pc, #556]	; (8002478 <HAL_RCC_OscConfig+0x4c4>)
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d10d      	bne.n	8002272 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002256:	4b88      	ldr	r3, [pc, #544]	; (8002478 <HAL_RCC_OscConfig+0x4c4>)
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	4a87      	ldr	r2, [pc, #540]	; (8002478 <HAL_RCC_OscConfig+0x4c4>)
 800225c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002260:	61d3      	str	r3, [r2, #28]
 8002262:	4b85      	ldr	r3, [pc, #532]	; (8002478 <HAL_RCC_OscConfig+0x4c4>)
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226a:	60bb      	str	r3, [r7, #8]
 800226c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800226e:	2301      	movs	r3, #1
 8002270:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002272:	4b82      	ldr	r3, [pc, #520]	; (800247c <HAL_RCC_OscConfig+0x4c8>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227a:	2b00      	cmp	r3, #0
 800227c:	d118      	bne.n	80022b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800227e:	4b7f      	ldr	r3, [pc, #508]	; (800247c <HAL_RCC_OscConfig+0x4c8>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a7e      	ldr	r2, [pc, #504]	; (800247c <HAL_RCC_OscConfig+0x4c8>)
 8002284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002288:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800228a:	f7fe fe2d 	bl	8000ee8 <HAL_GetTick>
 800228e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002290:	e008      	b.n	80022a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002292:	f7fe fe29 	bl	8000ee8 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b64      	cmp	r3, #100	; 0x64
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e103      	b.n	80024ac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a4:	4b75      	ldr	r3, [pc, #468]	; (800247c <HAL_RCC_OscConfig+0x4c8>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d0f0      	beq.n	8002292 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d106      	bne.n	80022c6 <HAL_RCC_OscConfig+0x312>
 80022b8:	4b6f      	ldr	r3, [pc, #444]	; (8002478 <HAL_RCC_OscConfig+0x4c4>)
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	4a6e      	ldr	r2, [pc, #440]	; (8002478 <HAL_RCC_OscConfig+0x4c4>)
 80022be:	f043 0301 	orr.w	r3, r3, #1
 80022c2:	6213      	str	r3, [r2, #32]
 80022c4:	e02d      	b.n	8002322 <HAL_RCC_OscConfig+0x36e>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10c      	bne.n	80022e8 <HAL_RCC_OscConfig+0x334>
 80022ce:	4b6a      	ldr	r3, [pc, #424]	; (8002478 <HAL_RCC_OscConfig+0x4c4>)
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	4a69      	ldr	r2, [pc, #420]	; (8002478 <HAL_RCC_OscConfig+0x4c4>)
 80022d4:	f023 0301 	bic.w	r3, r3, #1
 80022d8:	6213      	str	r3, [r2, #32]
 80022da:	4b67      	ldr	r3, [pc, #412]	; (8002478 <HAL_RCC_OscConfig+0x4c4>)
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	4a66      	ldr	r2, [pc, #408]	; (8002478 <HAL_RCC_OscConfig+0x4c4>)
 80022e0:	f023 0304 	bic.w	r3, r3, #4
 80022e4:	6213      	str	r3, [r2, #32]
 80022e6:	e01c      	b.n	8002322 <HAL_RCC_OscConfig+0x36e>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	2b05      	cmp	r3, #5
 80022ee:	d10c      	bne.n	800230a <HAL_RCC_OscConfig+0x356>
 80022f0:	4b61      	ldr	r3, [pc, #388]	; (8002478 <HAL_RCC_OscConfig+0x4c4>)
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	4a60      	ldr	r2, [pc, #384]	; (8002478 <HAL_RCC_OscConfig+0x4c4>)
 80022f6:	f043 0304 	orr.w	r3, r3, #4
 80022fa:	6213      	str	r3, [r2, #32]
 80022fc:	4b5e      	ldr	r3, [pc, #376]	; (8002478 <HAL_RCC_OscConfig+0x4c4>)
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	4a5d      	ldr	r2, [pc, #372]	; (8002478 <HAL_RCC_OscConfig+0x4c4>)
 8002302:	f043 0301 	orr.w	r3, r3, #1
 8002306:	6213      	str	r3, [r2, #32]
 8002308:	e00b      	b.n	8002322 <HAL_RCC_OscConfig+0x36e>
 800230a:	4b5b      	ldr	r3, [pc, #364]	; (8002478 <HAL_RCC_OscConfig+0x4c4>)
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	4a5a      	ldr	r2, [pc, #360]	; (8002478 <HAL_RCC_OscConfig+0x4c4>)
 8002310:	f023 0301 	bic.w	r3, r3, #1
 8002314:	6213      	str	r3, [r2, #32]
 8002316:	4b58      	ldr	r3, [pc, #352]	; (8002478 <HAL_RCC_OscConfig+0x4c4>)
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	4a57      	ldr	r2, [pc, #348]	; (8002478 <HAL_RCC_OscConfig+0x4c4>)
 800231c:	f023 0304 	bic.w	r3, r3, #4
 8002320:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d015      	beq.n	8002356 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800232a:	f7fe fddd 	bl	8000ee8 <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002330:	e00a      	b.n	8002348 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002332:	f7fe fdd9 	bl	8000ee8 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002340:	4293      	cmp	r3, r2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e0b1      	b.n	80024ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002348:	4b4b      	ldr	r3, [pc, #300]	; (8002478 <HAL_RCC_OscConfig+0x4c4>)
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d0ee      	beq.n	8002332 <HAL_RCC_OscConfig+0x37e>
 8002354:	e014      	b.n	8002380 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002356:	f7fe fdc7 	bl	8000ee8 <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800235c:	e00a      	b.n	8002374 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800235e:	f7fe fdc3 	bl	8000ee8 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	f241 3288 	movw	r2, #5000	; 0x1388
 800236c:	4293      	cmp	r3, r2
 800236e:	d901      	bls.n	8002374 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e09b      	b.n	80024ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002374:	4b40      	ldr	r3, [pc, #256]	; (8002478 <HAL_RCC_OscConfig+0x4c4>)
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1ee      	bne.n	800235e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002380:	7dfb      	ldrb	r3, [r7, #23]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d105      	bne.n	8002392 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002386:	4b3c      	ldr	r3, [pc, #240]	; (8002478 <HAL_RCC_OscConfig+0x4c4>)
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	4a3b      	ldr	r2, [pc, #236]	; (8002478 <HAL_RCC_OscConfig+0x4c4>)
 800238c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002390:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	2b00      	cmp	r3, #0
 8002398:	f000 8087 	beq.w	80024aa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800239c:	4b36      	ldr	r3, [pc, #216]	; (8002478 <HAL_RCC_OscConfig+0x4c4>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f003 030c 	and.w	r3, r3, #12
 80023a4:	2b08      	cmp	r3, #8
 80023a6:	d061      	beq.n	800246c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	69db      	ldr	r3, [r3, #28]
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d146      	bne.n	800243e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023b0:	4b33      	ldr	r3, [pc, #204]	; (8002480 <HAL_RCC_OscConfig+0x4cc>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b6:	f7fe fd97 	bl	8000ee8 <HAL_GetTick>
 80023ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023be:	f7fe fd93 	bl	8000ee8 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e06d      	b.n	80024ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023d0:	4b29      	ldr	r3, [pc, #164]	; (8002478 <HAL_RCC_OscConfig+0x4c4>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1f0      	bne.n	80023be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023e4:	d108      	bne.n	80023f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023e6:	4b24      	ldr	r3, [pc, #144]	; (8002478 <HAL_RCC_OscConfig+0x4c4>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	4921      	ldr	r1, [pc, #132]	; (8002478 <HAL_RCC_OscConfig+0x4c4>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023f8:	4b1f      	ldr	r3, [pc, #124]	; (8002478 <HAL_RCC_OscConfig+0x4c4>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a19      	ldr	r1, [r3, #32]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002408:	430b      	orrs	r3, r1
 800240a:	491b      	ldr	r1, [pc, #108]	; (8002478 <HAL_RCC_OscConfig+0x4c4>)
 800240c:	4313      	orrs	r3, r2
 800240e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002410:	4b1b      	ldr	r3, [pc, #108]	; (8002480 <HAL_RCC_OscConfig+0x4cc>)
 8002412:	2201      	movs	r2, #1
 8002414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002416:	f7fe fd67 	bl	8000ee8 <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800241c:	e008      	b.n	8002430 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800241e:	f7fe fd63 	bl	8000ee8 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e03d      	b.n	80024ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002430:	4b11      	ldr	r3, [pc, #68]	; (8002478 <HAL_RCC_OscConfig+0x4c4>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0f0      	beq.n	800241e <HAL_RCC_OscConfig+0x46a>
 800243c:	e035      	b.n	80024aa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800243e:	4b10      	ldr	r3, [pc, #64]	; (8002480 <HAL_RCC_OscConfig+0x4cc>)
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002444:	f7fe fd50 	bl	8000ee8 <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800244c:	f7fe fd4c 	bl	8000ee8 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e026      	b.n	80024ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800245e:	4b06      	ldr	r3, [pc, #24]	; (8002478 <HAL_RCC_OscConfig+0x4c4>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1f0      	bne.n	800244c <HAL_RCC_OscConfig+0x498>
 800246a:	e01e      	b.n	80024aa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	69db      	ldr	r3, [r3, #28]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d107      	bne.n	8002484 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e019      	b.n	80024ac <HAL_RCC_OscConfig+0x4f8>
 8002478:	40021000 	.word	0x40021000
 800247c:	40007000 	.word	0x40007000
 8002480:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002484:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <HAL_RCC_OscConfig+0x500>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	429a      	cmp	r2, r3
 8002496:	d106      	bne.n	80024a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d001      	beq.n	80024aa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e000      	b.n	80024ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3718      	adds	r7, #24
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40021000 	.word	0x40021000

080024b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e0d0      	b.n	800266e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024cc:	4b6a      	ldr	r3, [pc, #424]	; (8002678 <HAL_RCC_ClockConfig+0x1c0>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d910      	bls.n	80024fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024da:	4b67      	ldr	r3, [pc, #412]	; (8002678 <HAL_RCC_ClockConfig+0x1c0>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f023 0207 	bic.w	r2, r3, #7
 80024e2:	4965      	ldr	r1, [pc, #404]	; (8002678 <HAL_RCC_ClockConfig+0x1c0>)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ea:	4b63      	ldr	r3, [pc, #396]	; (8002678 <HAL_RCC_ClockConfig+0x1c0>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0307 	and.w	r3, r3, #7
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d001      	beq.n	80024fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e0b8      	b.n	800266e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d020      	beq.n	800254a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b00      	cmp	r3, #0
 8002512:	d005      	beq.n	8002520 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002514:	4b59      	ldr	r3, [pc, #356]	; (800267c <HAL_RCC_ClockConfig+0x1c4>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	4a58      	ldr	r2, [pc, #352]	; (800267c <HAL_RCC_ClockConfig+0x1c4>)
 800251a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800251e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0308 	and.w	r3, r3, #8
 8002528:	2b00      	cmp	r3, #0
 800252a:	d005      	beq.n	8002538 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800252c:	4b53      	ldr	r3, [pc, #332]	; (800267c <HAL_RCC_ClockConfig+0x1c4>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	4a52      	ldr	r2, [pc, #328]	; (800267c <HAL_RCC_ClockConfig+0x1c4>)
 8002532:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002536:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002538:	4b50      	ldr	r3, [pc, #320]	; (800267c <HAL_RCC_ClockConfig+0x1c4>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	494d      	ldr	r1, [pc, #308]	; (800267c <HAL_RCC_ClockConfig+0x1c4>)
 8002546:	4313      	orrs	r3, r2
 8002548:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b00      	cmp	r3, #0
 8002554:	d040      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d107      	bne.n	800256e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255e:	4b47      	ldr	r3, [pc, #284]	; (800267c <HAL_RCC_ClockConfig+0x1c4>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d115      	bne.n	8002596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e07f      	b.n	800266e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b02      	cmp	r3, #2
 8002574:	d107      	bne.n	8002586 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002576:	4b41      	ldr	r3, [pc, #260]	; (800267c <HAL_RCC_ClockConfig+0x1c4>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d109      	bne.n	8002596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e073      	b.n	800266e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002586:	4b3d      	ldr	r3, [pc, #244]	; (800267c <HAL_RCC_ClockConfig+0x1c4>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e06b      	b.n	800266e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002596:	4b39      	ldr	r3, [pc, #228]	; (800267c <HAL_RCC_ClockConfig+0x1c4>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f023 0203 	bic.w	r2, r3, #3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	4936      	ldr	r1, [pc, #216]	; (800267c <HAL_RCC_ClockConfig+0x1c4>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025a8:	f7fe fc9e 	bl	8000ee8 <HAL_GetTick>
 80025ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ae:	e00a      	b.n	80025c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025b0:	f7fe fc9a 	bl	8000ee8 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80025be:	4293      	cmp	r3, r2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e053      	b.n	800266e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c6:	4b2d      	ldr	r3, [pc, #180]	; (800267c <HAL_RCC_ClockConfig+0x1c4>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f003 020c 	and.w	r2, r3, #12
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d1eb      	bne.n	80025b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025d8:	4b27      	ldr	r3, [pc, #156]	; (8002678 <HAL_RCC_ClockConfig+0x1c0>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d210      	bcs.n	8002608 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e6:	4b24      	ldr	r3, [pc, #144]	; (8002678 <HAL_RCC_ClockConfig+0x1c0>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f023 0207 	bic.w	r2, r3, #7
 80025ee:	4922      	ldr	r1, [pc, #136]	; (8002678 <HAL_RCC_ClockConfig+0x1c0>)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f6:	4b20      	ldr	r3, [pc, #128]	; (8002678 <HAL_RCC_ClockConfig+0x1c0>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	429a      	cmp	r2, r3
 8002602:	d001      	beq.n	8002608 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e032      	b.n	800266e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0304 	and.w	r3, r3, #4
 8002610:	2b00      	cmp	r3, #0
 8002612:	d008      	beq.n	8002626 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002614:	4b19      	ldr	r3, [pc, #100]	; (800267c <HAL_RCC_ClockConfig+0x1c4>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	4916      	ldr	r1, [pc, #88]	; (800267c <HAL_RCC_ClockConfig+0x1c4>)
 8002622:	4313      	orrs	r3, r2
 8002624:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0308 	and.w	r3, r3, #8
 800262e:	2b00      	cmp	r3, #0
 8002630:	d009      	beq.n	8002646 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002632:	4b12      	ldr	r3, [pc, #72]	; (800267c <HAL_RCC_ClockConfig+0x1c4>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	490e      	ldr	r1, [pc, #56]	; (800267c <HAL_RCC_ClockConfig+0x1c4>)
 8002642:	4313      	orrs	r3, r2
 8002644:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002646:	f000 f821 	bl	800268c <HAL_RCC_GetSysClockFreq>
 800264a:	4602      	mov	r2, r0
 800264c:	4b0b      	ldr	r3, [pc, #44]	; (800267c <HAL_RCC_ClockConfig+0x1c4>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	091b      	lsrs	r3, r3, #4
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	490a      	ldr	r1, [pc, #40]	; (8002680 <HAL_RCC_ClockConfig+0x1c8>)
 8002658:	5ccb      	ldrb	r3, [r1, r3]
 800265a:	fa22 f303 	lsr.w	r3, r2, r3
 800265e:	4a09      	ldr	r2, [pc, #36]	; (8002684 <HAL_RCC_ClockConfig+0x1cc>)
 8002660:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002662:	4b09      	ldr	r3, [pc, #36]	; (8002688 <HAL_RCC_ClockConfig+0x1d0>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f7fe fbfc 	bl	8000e64 <HAL_InitTick>

  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40022000 	.word	0x40022000
 800267c:	40021000 	.word	0x40021000
 8002680:	08002d18 	.word	0x08002d18
 8002684:	20000024 	.word	0x20000024
 8002688:	20000028 	.word	0x20000028

0800268c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800268c:	b480      	push	{r7}
 800268e:	b087      	sub	sp, #28
 8002690:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002692:	2300      	movs	r3, #0
 8002694:	60fb      	str	r3, [r7, #12]
 8002696:	2300      	movs	r3, #0
 8002698:	60bb      	str	r3, [r7, #8]
 800269a:	2300      	movs	r3, #0
 800269c:	617b      	str	r3, [r7, #20]
 800269e:	2300      	movs	r3, #0
 80026a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026a6:	4b1e      	ldr	r3, [pc, #120]	; (8002720 <HAL_RCC_GetSysClockFreq+0x94>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f003 030c 	and.w	r3, r3, #12
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	d002      	beq.n	80026bc <HAL_RCC_GetSysClockFreq+0x30>
 80026b6:	2b08      	cmp	r3, #8
 80026b8:	d003      	beq.n	80026c2 <HAL_RCC_GetSysClockFreq+0x36>
 80026ba:	e027      	b.n	800270c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026bc:	4b19      	ldr	r3, [pc, #100]	; (8002724 <HAL_RCC_GetSysClockFreq+0x98>)
 80026be:	613b      	str	r3, [r7, #16]
      break;
 80026c0:	e027      	b.n	8002712 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	0c9b      	lsrs	r3, r3, #18
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	4a17      	ldr	r2, [pc, #92]	; (8002728 <HAL_RCC_GetSysClockFreq+0x9c>)
 80026cc:	5cd3      	ldrb	r3, [r2, r3]
 80026ce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d010      	beq.n	80026fc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026da:	4b11      	ldr	r3, [pc, #68]	; (8002720 <HAL_RCC_GetSysClockFreq+0x94>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	0c5b      	lsrs	r3, r3, #17
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	4a11      	ldr	r2, [pc, #68]	; (800272c <HAL_RCC_GetSysClockFreq+0xa0>)
 80026e6:	5cd3      	ldrb	r3, [r2, r3]
 80026e8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a0d      	ldr	r2, [pc, #52]	; (8002724 <HAL_RCC_GetSysClockFreq+0x98>)
 80026ee:	fb03 f202 	mul.w	r2, r3, r2
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f8:	617b      	str	r3, [r7, #20]
 80026fa:	e004      	b.n	8002706 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a0c      	ldr	r2, [pc, #48]	; (8002730 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002700:	fb02 f303 	mul.w	r3, r2, r3
 8002704:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	613b      	str	r3, [r7, #16]
      break;
 800270a:	e002      	b.n	8002712 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800270c:	4b05      	ldr	r3, [pc, #20]	; (8002724 <HAL_RCC_GetSysClockFreq+0x98>)
 800270e:	613b      	str	r3, [r7, #16]
      break;
 8002710:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002712:	693b      	ldr	r3, [r7, #16]
}
 8002714:	4618      	mov	r0, r3
 8002716:	371c      	adds	r7, #28
 8002718:	46bd      	mov	sp, r7
 800271a:	bc80      	pop	{r7}
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	40021000 	.word	0x40021000
 8002724:	007a1200 	.word	0x007a1200
 8002728:	08002d30 	.word	0x08002d30
 800272c:	08002d40 	.word	0x08002d40
 8002730:	003d0900 	.word	0x003d0900

08002734 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002738:	4b02      	ldr	r3, [pc, #8]	; (8002744 <HAL_RCC_GetHCLKFreq+0x10>)
 800273a:	681b      	ldr	r3, [r3, #0]
}
 800273c:	4618      	mov	r0, r3
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr
 8002744:	20000024 	.word	0x20000024

08002748 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800274c:	f7ff fff2 	bl	8002734 <HAL_RCC_GetHCLKFreq>
 8002750:	4602      	mov	r2, r0
 8002752:	4b05      	ldr	r3, [pc, #20]	; (8002768 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	0a1b      	lsrs	r3, r3, #8
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	4903      	ldr	r1, [pc, #12]	; (800276c <HAL_RCC_GetPCLK1Freq+0x24>)
 800275e:	5ccb      	ldrb	r3, [r1, r3]
 8002760:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002764:	4618      	mov	r0, r3
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40021000 	.word	0x40021000
 800276c:	08002d28 	.word	0x08002d28

08002770 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002774:	f7ff ffde 	bl	8002734 <HAL_RCC_GetHCLKFreq>
 8002778:	4602      	mov	r2, r0
 800277a:	4b05      	ldr	r3, [pc, #20]	; (8002790 <HAL_RCC_GetPCLK2Freq+0x20>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	0adb      	lsrs	r3, r3, #11
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	4903      	ldr	r1, [pc, #12]	; (8002794 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002786:	5ccb      	ldrb	r3, [r1, r3]
 8002788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800278c:	4618      	mov	r0, r3
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40021000 	.word	0x40021000
 8002794:	08002d28 	.word	0x08002d28

08002798 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027a0:	4b0a      	ldr	r3, [pc, #40]	; (80027cc <RCC_Delay+0x34>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a0a      	ldr	r2, [pc, #40]	; (80027d0 <RCC_Delay+0x38>)
 80027a6:	fba2 2303 	umull	r2, r3, r2, r3
 80027aa:	0a5b      	lsrs	r3, r3, #9
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	fb02 f303 	mul.w	r3, r2, r3
 80027b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027b4:	bf00      	nop
  }
  while (Delay --);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	1e5a      	subs	r2, r3, #1
 80027ba:	60fa      	str	r2, [r7, #12]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1f9      	bne.n	80027b4 <RCC_Delay+0x1c>
}
 80027c0:	bf00      	nop
 80027c2:	bf00      	nop
 80027c4:	3714      	adds	r7, #20
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr
 80027cc:	20000024 	.word	0x20000024
 80027d0:	10624dd3 	.word	0x10624dd3

080027d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e042      	b.n	800286c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d106      	bne.n	8002800 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7fe fa72 	bl	8000ce4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2224      	movs	r2, #36	; 0x24
 8002804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68da      	ldr	r2, [r3, #12]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002816:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 f9af 	bl	8002b7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	691a      	ldr	r2, [r3, #16]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800282c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	695a      	ldr	r2, [r3, #20]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800283c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68da      	ldr	r2, [r3, #12]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800284c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2220      	movs	r2, #32
 8002858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2220      	movs	r2, #32
 8002860:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b08a      	sub	sp, #40	; 0x28
 8002878:	af02      	add	r7, sp, #8
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	603b      	str	r3, [r7, #0]
 8002880:	4613      	mov	r3, r2
 8002882:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002884:	2300      	movs	r3, #0
 8002886:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b20      	cmp	r3, #32
 8002892:	d16d      	bne.n	8002970 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d002      	beq.n	80028a0 <HAL_UART_Transmit+0x2c>
 800289a:	88fb      	ldrh	r3, [r7, #6]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e066      	b.n	8002972 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2221      	movs	r2, #33	; 0x21
 80028ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028b2:	f7fe fb19 	bl	8000ee8 <HAL_GetTick>
 80028b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	88fa      	ldrh	r2, [r7, #6]
 80028bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	88fa      	ldrh	r2, [r7, #6]
 80028c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028cc:	d108      	bne.n	80028e0 <HAL_UART_Transmit+0x6c>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d104      	bne.n	80028e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80028d6:	2300      	movs	r3, #0
 80028d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	61bb      	str	r3, [r7, #24]
 80028de:	e003      	b.n	80028e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028e4:	2300      	movs	r3, #0
 80028e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80028e8:	e02a      	b.n	8002940 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	2200      	movs	r2, #0
 80028f2:	2180      	movs	r1, #128	; 0x80
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f000 f8d2 	bl	8002a9e <UART_WaitOnFlagUntilTimeout>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e036      	b.n	8002972 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d10b      	bne.n	8002922 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	881b      	ldrh	r3, [r3, #0]
 800290e:	461a      	mov	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002918:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	3302      	adds	r3, #2
 800291e:	61bb      	str	r3, [r7, #24]
 8002920:	e007      	b.n	8002932 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	781a      	ldrb	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	3301      	adds	r3, #1
 8002930:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002936:	b29b      	uxth	r3, r3
 8002938:	3b01      	subs	r3, #1
 800293a:	b29a      	uxth	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002944:	b29b      	uxth	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1cf      	bne.n	80028ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	2200      	movs	r2, #0
 8002952:	2140      	movs	r1, #64	; 0x40
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f000 f8a2 	bl	8002a9e <UART_WaitOnFlagUntilTimeout>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e006      	b.n	8002972 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2220      	movs	r2, #32
 8002968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800296c:	2300      	movs	r3, #0
 800296e:	e000      	b.n	8002972 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002970:	2302      	movs	r3, #2
  }
}
 8002972:	4618      	mov	r0, r3
 8002974:	3720      	adds	r7, #32
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b08a      	sub	sp, #40	; 0x28
 800297e:	af02      	add	r7, sp, #8
 8002980:	60f8      	str	r0, [r7, #12]
 8002982:	60b9      	str	r1, [r7, #8]
 8002984:	603b      	str	r3, [r7, #0]
 8002986:	4613      	mov	r3, r2
 8002988:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800298a:	2300      	movs	r3, #0
 800298c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b20      	cmp	r3, #32
 8002998:	d17c      	bne.n	8002a94 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d002      	beq.n	80029a6 <HAL_UART_Receive+0x2c>
 80029a0:	88fb      	ldrh	r3, [r7, #6]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e075      	b.n	8002a96 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2222      	movs	r2, #34	; 0x22
 80029b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029be:	f7fe fa93 	bl	8000ee8 <HAL_GetTick>
 80029c2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	88fa      	ldrh	r2, [r7, #6]
 80029c8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	88fa      	ldrh	r2, [r7, #6]
 80029ce:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029d8:	d108      	bne.n	80029ec <HAL_UART_Receive+0x72>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d104      	bne.n	80029ec <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 80029e2:	2300      	movs	r3, #0
 80029e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	61bb      	str	r3, [r7, #24]
 80029ea:	e003      	b.n	80029f4 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029f0:	2300      	movs	r3, #0
 80029f2:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80029f4:	e043      	b.n	8002a7e <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	2200      	movs	r2, #0
 80029fe:	2120      	movs	r1, #32
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f000 f84c 	bl	8002a9e <UART_WaitOnFlagUntilTimeout>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e042      	b.n	8002a96 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10c      	bne.n	8002a30 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	3302      	adds	r3, #2
 8002a2c:	61bb      	str	r3, [r7, #24]
 8002a2e:	e01f      	b.n	8002a70 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a38:	d007      	beq.n	8002a4a <HAL_UART_Receive+0xd0>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10a      	bne.n	8002a58 <HAL_UART_Receive+0xde>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d106      	bne.n	8002a58 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	701a      	strb	r2, [r3, #0]
 8002a56:	e008      	b.n	8002a6a <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	3b01      	subs	r3, #1
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1b6      	bne.n	80029f6 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8002a90:	2300      	movs	r3, #0
 8002a92:	e000      	b.n	8002a96 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002a94:	2302      	movs	r3, #2
  }
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3720      	adds	r7, #32
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b090      	sub	sp, #64	; 0x40
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	60f8      	str	r0, [r7, #12]
 8002aa6:	60b9      	str	r1, [r7, #8]
 8002aa8:	603b      	str	r3, [r7, #0]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002aae:	e050      	b.n	8002b52 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ab0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab6:	d04c      	beq.n	8002b52 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ab8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d007      	beq.n	8002ace <UART_WaitOnFlagUntilTimeout+0x30>
 8002abe:	f7fe fa13 	bl	8000ee8 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d241      	bcs.n	8002b52 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	330c      	adds	r3, #12
 8002ad4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad8:	e853 3f00 	ldrex	r3, [r3]
 8002adc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	330c      	adds	r3, #12
 8002aec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002aee:	637a      	str	r2, [r7, #52]	; 0x34
 8002af0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002af4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002af6:	e841 2300 	strex	r3, r2, [r1]
 8002afa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1e5      	bne.n	8002ace <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	3314      	adds	r3, #20
 8002b08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	e853 3f00 	ldrex	r3, [r3]
 8002b10:	613b      	str	r3, [r7, #16]
   return(result);
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	f023 0301 	bic.w	r3, r3, #1
 8002b18:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	3314      	adds	r3, #20
 8002b20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b22:	623a      	str	r2, [r7, #32]
 8002b24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b26:	69f9      	ldr	r1, [r7, #28]
 8002b28:	6a3a      	ldr	r2, [r7, #32]
 8002b2a:	e841 2300 	strex	r3, r2, [r1]
 8002b2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1e5      	bne.n	8002b02 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2220      	movs	r2, #32
 8002b3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2220      	movs	r2, #32
 8002b42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e00f      	b.n	8002b72 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	68ba      	ldr	r2, [r7, #8]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	bf0c      	ite	eq
 8002b62:	2301      	moveq	r3, #1
 8002b64:	2300      	movne	r3, #0
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	461a      	mov	r2, r3
 8002b6a:	79fb      	ldrb	r3, [r7, #7]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d09f      	beq.n	8002ab0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3740      	adds	r7, #64	; 0x40
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
	...

08002b7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68da      	ldr	r2, [r3, #12]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	430a      	orrs	r2, r1
 8002b98:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689a      	ldr	r2, [r3, #8]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002bb6:	f023 030c 	bic.w	r3, r3, #12
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	6812      	ldr	r2, [r2, #0]
 8002bbe:	68b9      	ldr	r1, [r7, #8]
 8002bc0:	430b      	orrs	r3, r1
 8002bc2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	699a      	ldr	r2, [r3, #24]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a2c      	ldr	r2, [pc, #176]	; (8002c90 <UART_SetConfig+0x114>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d103      	bne.n	8002bec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002be4:	f7ff fdc4 	bl	8002770 <HAL_RCC_GetPCLK2Freq>
 8002be8:	60f8      	str	r0, [r7, #12]
 8002bea:	e002      	b.n	8002bf2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002bec:	f7ff fdac 	bl	8002748 <HAL_RCC_GetPCLK1Freq>
 8002bf0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4413      	add	r3, r2
 8002bfa:	009a      	lsls	r2, r3, #2
 8002bfc:	441a      	add	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c08:	4a22      	ldr	r2, [pc, #136]	; (8002c94 <UART_SetConfig+0x118>)
 8002c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0e:	095b      	lsrs	r3, r3, #5
 8002c10:	0119      	lsls	r1, r3, #4
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	4613      	mov	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	009a      	lsls	r2, r3, #2
 8002c1c:	441a      	add	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c28:	4b1a      	ldr	r3, [pc, #104]	; (8002c94 <UART_SetConfig+0x118>)
 8002c2a:	fba3 0302 	umull	r0, r3, r3, r2
 8002c2e:	095b      	lsrs	r3, r3, #5
 8002c30:	2064      	movs	r0, #100	; 0x64
 8002c32:	fb00 f303 	mul.w	r3, r0, r3
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	011b      	lsls	r3, r3, #4
 8002c3a:	3332      	adds	r3, #50	; 0x32
 8002c3c:	4a15      	ldr	r2, [pc, #84]	; (8002c94 <UART_SetConfig+0x118>)
 8002c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c42:	095b      	lsrs	r3, r3, #5
 8002c44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c48:	4419      	add	r1, r3
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	4413      	add	r3, r2
 8002c52:	009a      	lsls	r2, r3, #2
 8002c54:	441a      	add	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c60:	4b0c      	ldr	r3, [pc, #48]	; (8002c94 <UART_SetConfig+0x118>)
 8002c62:	fba3 0302 	umull	r0, r3, r3, r2
 8002c66:	095b      	lsrs	r3, r3, #5
 8002c68:	2064      	movs	r0, #100	; 0x64
 8002c6a:	fb00 f303 	mul.w	r3, r0, r3
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	011b      	lsls	r3, r3, #4
 8002c72:	3332      	adds	r3, #50	; 0x32
 8002c74:	4a07      	ldr	r2, [pc, #28]	; (8002c94 <UART_SetConfig+0x118>)
 8002c76:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7a:	095b      	lsrs	r3, r3, #5
 8002c7c:	f003 020f 	and.w	r2, r3, #15
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	440a      	add	r2, r1
 8002c86:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002c88:	bf00      	nop
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40013800 	.word	0x40013800
 8002c94:	51eb851f 	.word	0x51eb851f

08002c98 <memset>:
 8002c98:	4603      	mov	r3, r0
 8002c9a:	4402      	add	r2, r0
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d100      	bne.n	8002ca2 <memset+0xa>
 8002ca0:	4770      	bx	lr
 8002ca2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ca6:	e7f9      	b.n	8002c9c <memset+0x4>

08002ca8 <__libc_init_array>:
 8002ca8:	b570      	push	{r4, r5, r6, lr}
 8002caa:	2600      	movs	r6, #0
 8002cac:	4d0c      	ldr	r5, [pc, #48]	; (8002ce0 <__libc_init_array+0x38>)
 8002cae:	4c0d      	ldr	r4, [pc, #52]	; (8002ce4 <__libc_init_array+0x3c>)
 8002cb0:	1b64      	subs	r4, r4, r5
 8002cb2:	10a4      	asrs	r4, r4, #2
 8002cb4:	42a6      	cmp	r6, r4
 8002cb6:	d109      	bne.n	8002ccc <__libc_init_array+0x24>
 8002cb8:	f000 f81a 	bl	8002cf0 <_init>
 8002cbc:	2600      	movs	r6, #0
 8002cbe:	4d0a      	ldr	r5, [pc, #40]	; (8002ce8 <__libc_init_array+0x40>)
 8002cc0:	4c0a      	ldr	r4, [pc, #40]	; (8002cec <__libc_init_array+0x44>)
 8002cc2:	1b64      	subs	r4, r4, r5
 8002cc4:	10a4      	asrs	r4, r4, #2
 8002cc6:	42a6      	cmp	r6, r4
 8002cc8:	d105      	bne.n	8002cd6 <__libc_init_array+0x2e>
 8002cca:	bd70      	pop	{r4, r5, r6, pc}
 8002ccc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cd0:	4798      	blx	r3
 8002cd2:	3601      	adds	r6, #1
 8002cd4:	e7ee      	b.n	8002cb4 <__libc_init_array+0xc>
 8002cd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cda:	4798      	blx	r3
 8002cdc:	3601      	adds	r6, #1
 8002cde:	e7f2      	b.n	8002cc6 <__libc_init_array+0x1e>
 8002ce0:	08002d44 	.word	0x08002d44
 8002ce4:	08002d44 	.word	0x08002d44
 8002ce8:	08002d44 	.word	0x08002d44
 8002cec:	08002d48 	.word	0x08002d48

08002cf0 <_init>:
 8002cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cf2:	bf00      	nop
 8002cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cf6:	bc08      	pop	{r3}
 8002cf8:	469e      	mov	lr, r3
 8002cfa:	4770      	bx	lr

08002cfc <_fini>:
 8002cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cfe:	bf00      	nop
 8002d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d02:	bc08      	pop	{r3}
 8002d04:	469e      	mov	lr, r3
 8002d06:	4770      	bx	lr
