
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032a0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080033ac  080033ac  000133ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033d8  080033d8  0002f008  2**0
                  CONTENTS
  4 .ARM          00000000  080033d8  080033d8  0002f008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033d8  080033d8  0002f008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033d8  080033d8  000133d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033dc  080033dc  000133dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  080033e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .APPLICATION1_SECTION 00000004  0800f000  0800f000  0002f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .APPLICATION2_SECTION 00000004  0800f004  0800f004  0002f004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000001f0  20000030  20000030  00030030  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  20000220  20000220  00030030  2**0
                  ALLOC
 13 .ARM.attributes 00000029  00000000  00000000  0002f008  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0002f031  2**0
                  CONTENTS, READONLY
 15 .debug_info   00009c55  00000000  00000000  0002f074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002010  00000000  00000000  00038cc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000009b8  00000000  00000000  0003ace0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000075b  00000000  00000000  0003b698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00017e55  00000000  00000000  0003bdf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0000c311  00000000  00000000  00053c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000859f8  00000000  00000000  0005ff59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000025f4  00000000  00000000  000e5954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000074  00000000  00000000  000e7f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	08003394 	.word	0x08003394

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
 8000148:	08003394 	.word	0x08003394

0800014c <BL_Fetch_Commend>:
#endif

/*============================================================================
 ***********************  Software Interface Definations  ********************
 ============================================================================*/
BL_Status BL_Fetch_Commend(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0

	/* To detect the status of function */
	BL_Status Status = BL_NACK;
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
	CAN_Select_Func();

#else

	/* To detect the status of uart in transmitting and receiving data */
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 8000156:	2301      	movs	r3, #1
 8000158:	717b      	strb	r3, [r7, #5]

	/* The data length that the host should be transmit at first */
	uint8_t Data_Length = RESET;
 800015a:	2300      	movs	r3, #0
 800015c:	71bb      	strb	r3, [r7, #6]

	/*Check whether to jump to app or continue in bootloader*/
    BL_Manager();
 800015e:	f000 fc83 	bl	8000a68 <BL_Manager>

	/* To clear buffer of RX and prevent carbadge messages of buffer */
	memset(BL_HostBuffer, RESET , BL_HOST_BUFFER_RX_LENGTH);
 8000162:	22c8      	movs	r2, #200	; 0xc8
 8000164:	2100      	movs	r1, #0
 8000166:	4822      	ldr	r0, [pc, #136]	; (80001f0 <BL_Fetch_Commend+0xa4>)
 8000168:	f003 f8e8 	bl	800333c <memset>
	BL_PrintMassage("Bootloader started..\r\n");
#endif
	/* Host commend format :
	   => Commend Length  (1 byte = Data_Length )
	 */
	HAL_Status = HAL_UART_Receive(BL_HOST_COMMUNICATION_UART, BL_HostBuffer, 1,
 800016c:	f04f 33ff 	mov.w	r3, #4294967295
 8000170:	2201      	movs	r2, #1
 8000172:	491f      	ldr	r1, [pc, #124]	; (80001f0 <BL_Fetch_Commend+0xa4>)
 8000174:	481f      	ldr	r0, [pc, #124]	; (80001f4 <BL_Fetch_Commend+0xa8>)
 8000176:	f002 ff52 	bl	800301e <HAL_UART_Receive>
 800017a:	4603      	mov	r3, r0
 800017c:	717b      	strb	r3, [r7, #5]
			HAL_MAX_DELAY);

	if (HAL_Status != HAL_OK){
 800017e:	797b      	ldrb	r3, [r7, #5]
 8000180:	2b00      	cmp	r3, #0
 8000182:	d002      	beq.n	800018a <BL_Fetch_Commend+0x3e>
		Status = BL_NACK ;
 8000184:	2300      	movs	r3, #0
 8000186:	71fb      	strb	r3, [r7, #7]
 8000188:	e02c      	b.n	80001e4 <BL_Fetch_Commend+0x98>
	}
	else {
		if ( BL_HostBuffer[0] == 0xCC){
 800018a:	4b19      	ldr	r3, [pc, #100]	; (80001f0 <BL_Fetch_Commend+0xa4>)
 800018c:	781b      	ldrb	r3, [r3, #0]
 800018e:	2bcc      	cmp	r3, #204	; 0xcc
 8000190:	d102      	bne.n	8000198 <BL_Fetch_Commend+0x4c>
			HAL_NVIC_SystemReset();
 8000192:	f001 fb9a 	bl	80018ca <HAL_NVIC_SystemReset>
 8000196:	e002      	b.n	800019e <BL_Fetch_Commend+0x52>
			 Commend Code (1 byte) + Delails (Data_Length)
			 Where :
			 => Commend Code is the order that Host want to do in code
			 => Delails explain what you transmit
			 */
			Data_Length = BL_HostBuffer[0];
 8000198:	4b15      	ldr	r3, [pc, #84]	; (80001f0 <BL_Fetch_Commend+0xa4>)
 800019a:	781b      	ldrb	r3, [r3, #0]
 800019c:	71bb      	strb	r3, [r7, #6]
		}

		/* we determine the number of recieving bytes next from the first number transmit in first
		   time (using buffer Data_Length and store them in BL_HostBuffer) */
		HAL_Status = HAL_UART_Receive(BL_HOST_COMMUNICATION_UART, &BL_HostBuffer[1],
 800019e:	79bb      	ldrb	r3, [r7, #6]
 80001a0:	b29a      	uxth	r2, r3
 80001a2:	f04f 33ff 	mov.w	r3, #4294967295
 80001a6:	4914      	ldr	r1, [pc, #80]	; (80001f8 <BL_Fetch_Commend+0xac>)
 80001a8:	4812      	ldr	r0, [pc, #72]	; (80001f4 <BL_Fetch_Commend+0xa8>)
 80001aa:	f002 ff38 	bl	800301e <HAL_UART_Receive>
 80001ae:	4603      	mov	r3, r0
 80001b0:	717b      	strb	r3, [r7, #5]
				Data_Length, HAL_MAX_DELAY);

		/* if it don't receive correctly */
		if (HAL_Status != HAL_OK){
 80001b2:	797b      	ldrb	r3, [r7, #5]
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d002      	beq.n	80001be <BL_Fetch_Commend+0x72>
			Status = BL_NACK ;
 80001b8:	2300      	movs	r3, #0
 80001ba:	71fb      	strb	r3, [r7, #7]
 80001bc:	e012      	b.n	80001e4 <BL_Fetch_Commend+0x98>
		}
		else {
			/* To jump on the target function from the previous commend */
			if (BL_HostBuffer[1]>=FIRST_COMMEND &&BL_HostBuffer[1]<=LAST_COMMEND ){
 80001be:	4b0c      	ldr	r3, [pc, #48]	; (80001f0 <BL_Fetch_Commend+0xa4>)
 80001c0:	785b      	ldrb	r3, [r3, #1]
 80001c2:	2b0f      	cmp	r3, #15
 80001c4:	d90c      	bls.n	80001e0 <BL_Fetch_Commend+0x94>
 80001c6:	4b0a      	ldr	r3, [pc, #40]	; (80001f0 <BL_Fetch_Commend+0xa4>)
 80001c8:	785b      	ldrb	r3, [r3, #1]
 80001ca:	2b16      	cmp	r3, #22
 80001cc:	d808      	bhi.n	80001e0 <BL_Fetch_Commend+0x94>
				Bootloader_Functions[BL_HostBuffer[1]-FIRST_COMMEND](BL_HostBuffer);
 80001ce:	4b08      	ldr	r3, [pc, #32]	; (80001f0 <BL_Fetch_Commend+0xa4>)
 80001d0:	785b      	ldrb	r3, [r3, #1]
 80001d2:	3b10      	subs	r3, #16
 80001d4:	4a09      	ldr	r2, [pc, #36]	; (80001fc <BL_Fetch_Commend+0xb0>)
 80001d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001da:	4805      	ldr	r0, [pc, #20]	; (80001f0 <BL_Fetch_Commend+0xa4>)
 80001dc:	4798      	blx	r3
 80001de:	e001      	b.n	80001e4 <BL_Fetch_Commend+0x98>
			else {
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
				BL_PrintMassage ("%d\n",BL_HostBuffer[1]);
				BL_PrintMassage ("Invalid commend code recieved from host !! \r\n");
#endif
				Status = BL_NACK ;
 80001e0:	2300      	movs	r3, #0
 80001e2:	71fb      	strb	r3, [r7, #7]
			}
		}
	}
#endif
	return Status;
 80001e4:	79fb      	ldrb	r3, [r7, #7]
}
 80001e6:	4618      	mov	r0, r3
 80001e8:	3708      	adds	r7, #8
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	2000004c 	.word	0x2000004c
 80001f4:	20000168 	.word	0x20000168
 80001f8:	2000004d 	.word	0x2000004d
 80001fc:	20000004 	.word	0x20000004

08000200 <Bootloader_Send_Data_To_Host>:

/* Function to communicate with Host */
static void Bootloader_Send_Data_To_Host(uint8_t* Host_Buffer , uint32_t Data_Len){
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
 8000208:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(BL_HOST_COMMUNICATION_UART,Host_Buffer,(uint16_t) Data_Len, HAL_MAX_DELAY);
 800020a:	683b      	ldr	r3, [r7, #0]
 800020c:	b29a      	uxth	r2, r3
 800020e:	f04f 33ff 	mov.w	r3, #4294967295
 8000212:	6879      	ldr	r1, [r7, #4]
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <Bootloader_Send_Data_To_Host+0x24>)
 8000216:	f002 fe7f 	bl	8002f18 <HAL_UART_Transmit>
}
 800021a:	bf00      	nop
 800021c:	3708      	adds	r7, #8
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}
 8000222:	bf00      	nop
 8000224:	20000168 	.word	0x20000168

08000228 <Bootloader_Get_Version>:
 your packet is
   1- 1 byte for data length = 0x02
   2- 1 byte for commend number = 0x10
   3- 1 byte to define that is for master ECU or slave ECU "Maser = 0x00 , slave = 0x01:0x05"
 */
static void Bootloader_Get_Version (uint8_t *Host_Buffer){
 8000228:	b580      	push	{r7, lr}
 800022a:	b092      	sub	sp, #72	; 0x48
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]

	/* Sending the version and vendor id's to meet the target from command */
	const uint8_t BL_Version[4] = { CBL_VENDOR_ID, CBL_SW_MAJOR_VERSION,
 8000230:	4b2a      	ldr	r3, [pc, #168]	; (80002dc <Bootloader_Get_Version+0xb4>)
 8000232:	647b      	str	r3, [r7, #68]	; 0x44
		/*Send Version CAN frame*/
		HAL_CAN_AddTxMessage(&hcan, &BL_VerTxHeader, BL_Version, BL_TxMailbox);
		while(HAL_CAN_IsTxMessagePending(&hcan, PEND_ON_ALL_TRANSMIT_MAILBOXES)); //In Retransmit mode make this with timer to detect error and avoid infinite loop.

#else
		if(MASTERID == Host_Buffer[2])
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	3302      	adds	r3, #2
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	2b00      	cmp	r3, #0
 800023c:	d106      	bne.n	800024c <Bootloader_Get_Version+0x24>
		{

#if(ECU_CONFIG == MASTERID)
			Bootloader_Send_Data_To_Host(BL_Version,4);
 800023e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000242:	2104      	movs	r1, #4
 8000244:	4618      	mov	r0, r3
 8000246:	f7ff ffdb 	bl	8000200 <Bootloader_Send_Data_To_Host>
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
		BL_PrintMassage("You sent wrong id that is not exist in ECU tree\r\n");
#endif
			}
#endif
}
 800024a:	e043      	b.n	80002d4 <Bootloader_Get_Version+0xac>
		else if(SLAVE1 == Host_Buffer[2])
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	3302      	adds	r3, #2
 8000250:	781b      	ldrb	r3, [r3, #0]
 8000252:	2b01      	cmp	r3, #1
 8000254:	d13a      	bne.n	80002cc <Bootloader_Get_Version+0xa4>
			uint8_t BL_Ver[8] = {0};//Length must be 8 or more or undefined behaviour may occur
 8000256:	2300      	movs	r3, #0
 8000258:	63fb      	str	r3, [r7, #60]	; 0x3c
 800025a:	2300      	movs	r3, #0
 800025c:	643b      	str	r3, [r7, #64]	; 0x40
			BL_VerTxHeader.DLC = 4;
 800025e:	2304      	movs	r3, #4
 8000260:	637b      	str	r3, [r7, #52]	; 0x34
			BL_VerTxHeader.ExtId = 0;
 8000262:	2300      	movs	r3, #0
 8000264:	62bb      	str	r3, [r7, #40]	; 0x28
			BL_VerTxHeader.IDE = CAN_ID_STD;
 8000266:	2300      	movs	r3, #0
 8000268:	62fb      	str	r3, [r7, #44]	; 0x2c
			BL_VerTxHeader.RTR = CAN_RTR_REMOTE;
 800026a:	2302      	movs	r3, #2
 800026c:	633b      	str	r3, [r7, #48]	; 0x30
			BL_VerTxHeader.StdId = CAN_VER_REQ_ID; //Max value of StdId is 0x7FF(0b11111111111) i.e: 11 bit length.
 800026e:	230f      	movs	r3, #15
 8000270:	627b      	str	r3, [r7, #36]	; 0x24
			BL_VerTxHeader.TransmitGlobalTime = DISABLE;
 8000272:	2300      	movs	r3, #0
 8000274:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
			HAL_CAN_AddTxMessage(&hcan, &BL_VerTxHeader, BL_Ver, BL_TxMailbox);
 8000278:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800027c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000280:	4b17      	ldr	r3, [pc, #92]	; (80002e0 <Bootloader_Get_Version+0xb8>)
 8000282:	4818      	ldr	r0, [pc, #96]	; (80002e4 <Bootloader_Get_Version+0xbc>)
 8000284:	f000 fff9 	bl	800127a <HAL_CAN_AddTxMessage>
			while(HAL_CAN_IsTxMessagePending(&hcan, PEND_ON_ALL_TRANSMIT_MAILBOXES)); //In Retransmit mode make this with timer to detect error and avoid infinite loop.
 8000288:	bf00      	nop
 800028a:	2107      	movs	r1, #7
 800028c:	4815      	ldr	r0, [pc, #84]	; (80002e4 <Bootloader_Get_Version+0xbc>)
 800028e:	f001 f8c3 	bl	8001418 <HAL_CAN_IsTxMessagePending>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d1f8      	bne.n	800028a <Bootloader_Get_Version+0x62>
				while(HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) == 0); //Polling until there is any message received
 8000298:	bf00      	nop
 800029a:	2100      	movs	r1, #0
 800029c:	4811      	ldr	r0, [pc, #68]	; (80002e4 <Bootloader_Get_Version+0xbc>)
 800029e:	f001 f9ff 	bl	80016a0 <HAL_CAN_GetRxFifoFillLevel>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d0f8      	beq.n	800029a <Bootloader_Get_Version+0x72>
				HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &BL_VerRxHeader, BL_Ver);
 80002a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002ac:	f107 0208 	add.w	r2, r7, #8
 80002b0:	2100      	movs	r1, #0
 80002b2:	480c      	ldr	r0, [pc, #48]	; (80002e4 <Bootloader_Get_Version+0xbc>)
 80002b4:	f001 f8d3 	bl	800145e <HAL_CAN_GetRxMessage>
			}while(BL_VerRxHeader.StdId != CAN_VER_RESP_ID);
 80002b8:	68bb      	ldr	r3, [r7, #8]
 80002ba:	2bf0      	cmp	r3, #240	; 0xf0
 80002bc:	d1ec      	bne.n	8000298 <Bootloader_Get_Version+0x70>
			Bootloader_Send_Data_To_Host(BL_Ver, 4);
 80002be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002c2:	2104      	movs	r1, #4
 80002c4:	4618      	mov	r0, r3
 80002c6:	f7ff ff9b 	bl	8000200 <Bootloader_Send_Data_To_Host>
}
 80002ca:	e003      	b.n	80002d4 <Bootloader_Get_Version+0xac>
			Bootloader_Send_Data_To_Host((uint8_t*) (&ErrorFrame),1);
 80002cc:	2101      	movs	r1, #1
 80002ce:	4806      	ldr	r0, [pc, #24]	; (80002e8 <Bootloader_Get_Version+0xc0>)
 80002d0:	f7ff ff96 	bl	8000200 <Bootloader_Send_Data_To_Host>
}
 80002d4:	bf00      	nop
 80002d6:	3748      	adds	r7, #72	; 0x48
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	01010464 	.word	0x01010464
 80002e0:	20000130 	.word	0x20000130
 80002e4:	20000140 	.word	0x20000140
 80002e8:	20000000 	.word	0x20000000

080002ec <CBL_STM32F103_GET_RDP_Level>:

/* Get level of protection to flash memory */
static uint8_t CBL_STM32F103_GET_RDP_Level (){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b088      	sub	sp, #32
 80002f0:	af00      	add	r7, sp, #0
	/* paramter input for function that get level of memory */
	FLASH_OBProgramInitTypeDef FLASH_OBProgram ;
	/* Get level of memory */
	HAL_FLASHEx_OBGetConfig(&FLASH_OBProgram);
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	4618      	mov	r0, r3
 80002f6:	f001 fd41 	bl	8001d7c <HAL_FLASHEx_OBGetConfig>
	/* Assign protection level in parameter [in\out] */
	return (uint8_t)FLASH_OBProgram.RDPLevel ;
 80002fa:	7d3b      	ldrb	r3, [r7, #20]
}
 80002fc:	4618      	mov	r0, r3
 80002fe:	3720      	adds	r7, #32
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}

08000304 <CBL_STM32F103_GET_WDP_Level>:


/* Get level of protection to flash memory */
static uint8_t CBL_STM32F103_GET_WDP_Level (){
 8000304:	b580      	push	{r7, lr}
 8000306:	b088      	sub	sp, #32
 8000308:	af00      	add	r7, sp, #0
	/* paramter input for function that get level of memory */
	FLASH_OBProgramInitTypeDef FLASH_OBProgram ;
	/* Get level of memory */
	HAL_FLASHEx_OBGetConfig(&FLASH_OBProgram);
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	4618      	mov	r0, r3
 800030e:	f001 fd35 	bl	8001d7c <HAL_FLASHEx_OBGetConfig>
	/* Assign protection level in parameter [in\out] */
	return (uint8_t)FLASH_OBProgram.WRPPage ; //Casting to uint8_t as I care only with first 32 pages as STM is low density(casting would change for higher densities)
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	b2db      	uxtb	r3, r3
}
 8000316:	4618      	mov	r0, r3
 8000318:	3720      	adds	r7, #32
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
	...

08000320 <Bootloader_Read_Protection_Level>:
   1- 1 byte data length = 0x03
   2- 1 byte commend number = 0x11
   3- 1 byte for ECU id
   4- 1 byte for determine write or read protection level
 */
static void Bootloader_Read_Protection_Level (uint8_t *Host_Buffer){
 8000320:	b580      	push	{r7, lr}
 8000322:	b0a0      	sub	sp, #128	; 0x80
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
	BL_PrintMassage ("Read the flash protection out level \r\n");
#endif

	/* If It's master and id is slave */
	if (SLAVE1 == Host_Buffer[2]){
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	3302      	adds	r3, #2
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	2b01      	cmp	r3, #1
 8000330:	d175      	bne.n	800041e <Bootloader_Read_Protection_Level+0xfe>
		Bootloader_Send_Data_To_Host((uint8_t*) (&Protection_Level), 1);
		return ;

#elif ((BL_CAN == ENABLE) && (ECU_CONFIG == MASTERID))
	/*Transmit CAN Read RP level Request*/
	uint8_t BL_Read_Level[8] = {0}; //Length must be 8 or more or undefined behaviour may occur
 8000332:	2300      	movs	r3, #0
 8000334:	67bb      	str	r3, [r7, #120]	; 0x78
 8000336:	2300      	movs	r3, #0
 8000338:	67fb      	str	r3, [r7, #124]	; 0x7c

	if (READ_RP == Host_Buffer[3]) {
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	3303      	adds	r3, #3
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d130      	bne.n	80003a6 <Bootloader_Read_Protection_Level+0x86>
		CAN_TxHeaderTypeDef BL_RP_TxHeader;

		BL_RP_TxHeader.DLC = 1;
 8000344:	2301      	movs	r3, #1
 8000346:	673b      	str	r3, [r7, #112]	; 0x70
		BL_RP_TxHeader.ExtId = 0;
 8000348:	2300      	movs	r3, #0
 800034a:	667b      	str	r3, [r7, #100]	; 0x64
		BL_RP_TxHeader.IDE = CAN_ID_STD;
 800034c:	2300      	movs	r3, #0
 800034e:	66bb      	str	r3, [r7, #104]	; 0x68
		BL_RP_TxHeader.RTR = CAN_RTR_REMOTE;
 8000350:	2302      	movs	r3, #2
 8000352:	66fb      	str	r3, [r7, #108]	; 0x6c
		BL_RP_TxHeader.StdId = CAN_READ_RP_REQ_ID; //Max value of StdId is 0x7FF(0b11111111111) i.e: 11 bit length.
 8000354:	231f      	movs	r3, #31
 8000356:	663b      	str	r3, [r7, #96]	; 0x60
		BL_RP_TxHeader.TransmitGlobalTime = DISABLE;
 8000358:	2300      	movs	r3, #0
 800035a:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

		HAL_CAN_AddTxMessage(&hcan, &BL_RP_TxHeader, BL_Read_Level, BL_TxMailbox);
 800035e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8000362:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000366:	4b41      	ldr	r3, [pc, #260]	; (800046c <Bootloader_Read_Protection_Level+0x14c>)
 8000368:	4841      	ldr	r0, [pc, #260]	; (8000470 <Bootloader_Read_Protection_Level+0x150>)
 800036a:	f000 ff86 	bl	800127a <HAL_CAN_AddTxMessage>
		while(HAL_CAN_IsTxMessagePending(&hcan, PEND_ON_ALL_TRANSMIT_MAILBOXES)); //In Retransmit mode make this with timer to detect error and avoid infinite loop.
 800036e:	bf00      	nop
 8000370:	2107      	movs	r1, #7
 8000372:	483f      	ldr	r0, [pc, #252]	; (8000470 <Bootloader_Read_Protection_Level+0x150>)
 8000374:	f001 f850 	bl	8001418 <HAL_CAN_IsTxMessagePending>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d1f8      	bne.n	8000370 <Bootloader_Read_Protection_Level+0x50>
		/*Transmit CAN Read RP level Response*/
		CAN_RxHeaderTypeDef BL_Read_RP_RxHeader;

		do{
			/*Read response VER message*/
			while(HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) == 0); //Polling until there is any message received
 800037e:	bf00      	nop
 8000380:	2100      	movs	r1, #0
 8000382:	483b      	ldr	r0, [pc, #236]	; (8000470 <Bootloader_Read_Protection_Level+0x150>)
 8000384:	f001 f98c 	bl	80016a0 <HAL_CAN_GetRxFifoFillLevel>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0f8      	beq.n	8000380 <Bootloader_Read_Protection_Level+0x60>
			HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &BL_Read_RP_RxHeader, BL_Read_Level);
 800038e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000392:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000396:	2100      	movs	r1, #0
 8000398:	4835      	ldr	r0, [pc, #212]	; (8000470 <Bootloader_Read_Protection_Level+0x150>)
 800039a:	f001 f860 	bl	800145e <HAL_CAN_GetRxMessage>

		}while(BL_RP_TxHeader.StdId != CAN_READ_RP_RESP_ID);
 800039e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80003a0:	2bf1      	cmp	r3, #241	; 0xf1
 80003a2:	d1ec      	bne.n	800037e <Bootloader_Read_Protection_Level+0x5e>
 80003a4:	e034      	b.n	8000410 <Bootloader_Read_Protection_Level+0xf0>
	}
	else if (READ_WP == Host_Buffer[3]) {
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	3303      	adds	r3, #3
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	2b01      	cmp	r3, #1
 80003ae:	d12f      	bne.n	8000410 <Bootloader_Read_Protection_Level+0xf0>
		CAN_TxHeaderTypeDef BL_WP_TxHeader;

		BL_WP_TxHeader.DLC = 1;
 80003b0:	2301      	movs	r3, #1
 80003b2:	63fb      	str	r3, [r7, #60]	; 0x3c
		BL_WP_TxHeader.ExtId = 0;
 80003b4:	2300      	movs	r3, #0
 80003b6:	633b      	str	r3, [r7, #48]	; 0x30
		BL_WP_TxHeader.IDE = CAN_ID_STD;
 80003b8:	2300      	movs	r3, #0
 80003ba:	637b      	str	r3, [r7, #52]	; 0x34
		BL_WP_TxHeader.RTR = CAN_RTR_REMOTE;
 80003bc:	2302      	movs	r3, #2
 80003be:	63bb      	str	r3, [r7, #56]	; 0x38
		BL_WP_TxHeader.StdId = CAN_READ_WP_REQ_ID; //Max value of StdId is 0x7FF(0b11111111111) i.e: 11 bit length.
 80003c0:	232f      	movs	r3, #47	; 0x2f
 80003c2:	62fb      	str	r3, [r7, #44]	; 0x2c
		BL_WP_TxHeader.TransmitGlobalTime = DISABLE;
 80003c4:	2300      	movs	r3, #0
 80003c6:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

		HAL_CAN_AddTxMessage(&hcan, &BL_WP_TxHeader, BL_Read_Level, BL_TxMailbox);
 80003ca:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80003ce:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80003d2:	4b26      	ldr	r3, [pc, #152]	; (800046c <Bootloader_Read_Protection_Level+0x14c>)
 80003d4:	4826      	ldr	r0, [pc, #152]	; (8000470 <Bootloader_Read_Protection_Level+0x150>)
 80003d6:	f000 ff50 	bl	800127a <HAL_CAN_AddTxMessage>
		while(HAL_CAN_IsTxMessagePending(&hcan, PEND_ON_ALL_TRANSMIT_MAILBOXES)); //In Retransmit mode make this with timer to detect error and avoid infinite loop.
 80003da:	bf00      	nop
 80003dc:	2107      	movs	r1, #7
 80003de:	4824      	ldr	r0, [pc, #144]	; (8000470 <Bootloader_Read_Protection_Level+0x150>)
 80003e0:	f001 f81a 	bl	8001418 <HAL_CAN_IsTxMessagePending>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d1f8      	bne.n	80003dc <Bootloader_Read_Protection_Level+0xbc>
		CAN_RxHeaderTypeDef BL_Read_WP_RxHeader;

		do
		{
			/*Read response VER message*/
			while(HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) == 0); //Polling until there is any message received
 80003ea:	bf00      	nop
 80003ec:	2100      	movs	r1, #0
 80003ee:	4820      	ldr	r0, [pc, #128]	; (8000470 <Bootloader_Read_Protection_Level+0x150>)
 80003f0:	f001 f956 	bl	80016a0 <HAL_CAN_GetRxFifoFillLevel>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d0f8      	beq.n	80003ec <Bootloader_Read_Protection_Level+0xcc>
			HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &BL_Read_WP_RxHeader, BL_Read_Level);
 80003fa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80003fe:	f107 0210 	add.w	r2, r7, #16
 8000402:	2100      	movs	r1, #0
 8000404:	481a      	ldr	r0, [pc, #104]	; (8000470 <Bootloader_Read_Protection_Level+0x150>)
 8000406:	f001 f82a 	bl	800145e <HAL_CAN_GetRxMessage>

		}while(BL_Read_WP_RxHeader.StdId != CAN_READ_WP_RESP_ID);
 800040a:	693b      	ldr	r3, [r7, #16]
 800040c:	2bf2      	cmp	r3, #242	; 0xf2
 800040e:	d1ec      	bne.n	80003ea <Bootloader_Read_Protection_Level+0xca>
	}

	/*Sending RP to ESP*/
	Bootloader_Send_Data_To_Host(BL_Read_Level,1);
 8000410:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000414:	2101      	movs	r1, #1
 8000416:	4618      	mov	r0, r3
 8000418:	f7ff fef2 	bl	8000200 <Bootloader_Send_Data_To_Host>
 800041c:	e023      	b.n	8000466 <Bootloader_Read_Protection_Level+0x146>
	}

	/* If it's slave and id is slave
	 * If it's master and id is master
	 *  */
	if (READ_RP == Host_Buffer[3]) {
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	3303      	adds	r3, #3
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	2b00      	cmp	r3, #0
 8000426:	d10a      	bne.n	800043e <Bootloader_Read_Protection_Level+0x11e>
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
		BL_PrintMassage("Read Protection level = %x\r\n", RDP_Level);
#endif

#if (ECU_CONFIG == MASTERID) || ( (BL_CAN == DISABLE) && (ECU_CONFIG == SLAVE1) )
		uint8_t RDP_Level = CBL_STM32F103_GET_RDP_Level();
 8000428:	f7ff ff60 	bl	80002ec <CBL_STM32F103_GET_RDP_Level>
 800042c:	4603      	mov	r3, r0
 800042e:	73fb      	strb	r3, [r7, #15]

		/* Report level */
		Bootloader_Send_Data_To_Host((uint8_t*) (&RDP_Level), 1);
 8000430:	f107 030f 	add.w	r3, r7, #15
 8000434:	2101      	movs	r1, #1
 8000436:	4618      	mov	r0, r3
 8000438:	f7ff fee2 	bl	8000200 <Bootloader_Send_Data_To_Host>
 800043c:	e013      	b.n	8000466 <Bootloader_Read_Protection_Level+0x146>

	HAL_CAN_AddTxMessage(&hcan, &BL_RP_TxHeader, BL_Read_Level, BL_TxMailbox);
	while(HAL_CAN_IsTxMessagePending(&hcan, PEND_ON_ALL_TRANSMIT_MAILBOXES)); //In Retransmit mode make this with timer to detect error and avoid infinite loop.
#endif
	}
	else if (READ_WP == Host_Buffer[3]) {
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	3303      	adds	r3, #3
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	2b01      	cmp	r3, #1
 8000446:	d10a      	bne.n	800045e <Bootloader_Read_Protection_Level+0x13e>
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
		BL_PrintMassage("Write Protection level = %x\r\n", WDP_Level);
#endif

#if (ECU_CONFIG == MASTERID) || ( (BL_CAN == DISABLE) && (ECU_CONFIG == SLAVE1) )
		uint8_t WDP_Level = CBL_STM32F103_GET_WDP_Level();
 8000448:	f7ff ff5c 	bl	8000304 <CBL_STM32F103_GET_WDP_Level>
 800044c:	4603      	mov	r3, r0
 800044e:	73bb      	strb	r3, [r7, #14]

		/* Report level */
		Bootloader_Send_Data_To_Host((uint8_t*) (&WDP_Level), 1);
 8000450:	f107 030e 	add.w	r3, r7, #14
 8000454:	2101      	movs	r1, #1
 8000456:	4618      	mov	r0, r3
 8000458:	f7ff fed2 	bl	8000200 <Bootloader_Send_Data_To_Host>
 800045c:	e003      	b.n	8000466 <Bootloader_Read_Protection_Level+0x146>
		while(HAL_CAN_IsTxMessagePending(&hcan, PEND_ON_ALL_TRANSMIT_MAILBOXES)); //In Retransmit mode make this with timer to detect error and avoid infinite loop.
#endif
	}
	else {
		/* Report Error frame */
		Bootloader_Send_Data_To_Host((uint8_t*) (&ErrorFrame),1);
 800045e:	2101      	movs	r1, #1
 8000460:	4804      	ldr	r0, [pc, #16]	; (8000474 <Bootloader_Read_Protection_Level+0x154>)
 8000462:	f7ff fecd 	bl	8000200 <Bootloader_Send_Data_To_Host>
	}
}
 8000466:	3780      	adds	r7, #128	; 0x80
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	20000130 	.word	0x20000130
 8000470:	20000140 	.word	0x20000140
 8000474:	20000000 	.word	0x20000000

08000478 <Bootloader_Enable_R_Protection>:
   1- 1 byte data length = 0x03
   2- 1 byte commend number = 0x15
   3- 1 byte for ECU id
   4- 1 byte for determine write or read protection level
 */
static void Bootloader_Enable_R_Protection(uint8_t *Host_Buffer){
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
	 * 5. Lock option byte. 		HAL_FLASH_OB_Lock
	 * 6. Reset.					HAL_FLASH_OB_Launch
	 *
	 *
	 * */
	uint8_t ROP_Level_Status = ROP_LEVEL_CHANGE_INVALID;
 8000480:	2300      	movs	r3, #0
 8000482:	73bb      	strb	r3, [r7, #14]
	uint8_t Host_ROP_Level   = Host_Buffer[3] ;
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	78db      	ldrb	r3, [r3, #3]
 8000488:	73fb      	strb	r3, [r7, #15]
		Bootloader_Send_Data_To_Host((uint8_t*) (&ROP_Level_Status), 1);
		return ;
#endif
	}

	if (CBL_ROP_LEVEL_0 == Host_ROP_Level){
 800048a:	7bfb      	ldrb	r3, [r7, #15]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d11b      	bne.n	80004c8 <Bootloader_Enable_R_Protection+0x50>
		pOBInit.OptionType = OPTIONBYTE_RDP;
 8000490:	4b21      	ldr	r3, [pc, #132]	; (8000518 <Bootloader_Enable_R_Protection+0xa0>)
 8000492:	2202      	movs	r2, #2
 8000494:	601a      	str	r2, [r3, #0]
		pOBInit.RDPLevel = OB_RDP_LEVEL_0;
 8000496:	4b20      	ldr	r3, [pc, #128]	; (8000518 <Bootloader_Enable_R_Protection+0xa0>)
 8000498:	22a5      	movs	r2, #165	; 0xa5
 800049a:	741a      	strb	r2, [r3, #16]

		HAL_FLASH_Unlock();
 800049c:	f001 fa96 	bl	80019cc <HAL_FLASH_Unlock>
		HAL_FLASH_OB_Unlock();
 80004a0:	f001 faca 	bl	8001a38 <HAL_FLASH_OB_Unlock>
		HAL_FLASHEx_OBProgram(&pOBInit);
 80004a4:	481c      	ldr	r0, [pc, #112]	; (8000518 <Bootloader_Enable_R_Protection+0xa0>)
 80004a6:	f001 fbed 	bl	8001c84 <HAL_FLASHEx_OBProgram>
		HAL_FLASH_Lock();
 80004aa:	f001 fab5 	bl	8001a18 <HAL_FLASH_Lock>
		HAL_FLASH_OB_Lock();
 80004ae:	f001 fadf 	bl	8001a70 <HAL_FLASH_OB_Lock>

		ROP_Level_Status = ROP_LEVEL_CHANGE_VALID;
 80004b2:	2301      	movs	r3, #1
 80004b4:	73bb      	strb	r3, [r7, #14]
		Bootloader_Send_Data_To_Host((uint8_t *)&ROP_Level_Status, 1);
 80004b6:	f107 030e 	add.w	r3, r7, #14
 80004ba:	2101      	movs	r1, #1
 80004bc:	4618      	mov	r0, r3
 80004be:	f7ff fe9f 	bl	8000200 <Bootloader_Send_Data_To_Host>

		HAL_FLASH_OB_Launch();
 80004c2:	f001 fae5 	bl	8001a90 <HAL_FLASH_OB_Launch>
	}
	else {
		/* Report Error frame */
		Bootloader_Send_Data_To_Host((uint8_t*) (&ErrorFrame),1);
	}
}
 80004c6:	e022      	b.n	800050e <Bootloader_Enable_R_Protection+0x96>
	else if (CBL_ROP_LEVEL_1 == Host_ROP_Level) {
 80004c8:	7bfb      	ldrb	r3, [r7, #15]
 80004ca:	2b01      	cmp	r3, #1
 80004cc:	d11b      	bne.n	8000506 <Bootloader_Enable_R_Protection+0x8e>
		pOBInit.OptionType = OPTIONBYTE_RDP;
 80004ce:	4b12      	ldr	r3, [pc, #72]	; (8000518 <Bootloader_Enable_R_Protection+0xa0>)
 80004d0:	2202      	movs	r2, #2
 80004d2:	601a      	str	r2, [r3, #0]
		pOBInit.RDPLevel = OB_RDP_LEVEL_1;
 80004d4:	4b10      	ldr	r3, [pc, #64]	; (8000518 <Bootloader_Enable_R_Protection+0xa0>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	741a      	strb	r2, [r3, #16]
		HAL_FLASH_Unlock();
 80004da:	f001 fa77 	bl	80019cc <HAL_FLASH_Unlock>
		HAL_FLASH_OB_Unlock();
 80004de:	f001 faab 	bl	8001a38 <HAL_FLASH_OB_Unlock>
		HAL_FLASHEx_OBProgram(&pOBInit);
 80004e2:	480d      	ldr	r0, [pc, #52]	; (8000518 <Bootloader_Enable_R_Protection+0xa0>)
 80004e4:	f001 fbce 	bl	8001c84 <HAL_FLASHEx_OBProgram>
		HAL_FLASH_Lock();
 80004e8:	f001 fa96 	bl	8001a18 <HAL_FLASH_Lock>
		HAL_FLASH_OB_Lock();
 80004ec:	f001 fac0 	bl	8001a70 <HAL_FLASH_OB_Lock>
		ROP_Level_Status = ROP_LEVEL_CHANGE_VALID;
 80004f0:	2301      	movs	r3, #1
 80004f2:	73bb      	strb	r3, [r7, #14]
		Bootloader_Send_Data_To_Host((uint8_t *)&ROP_Level_Status, 1);
 80004f4:	f107 030e 	add.w	r3, r7, #14
 80004f8:	2101      	movs	r1, #1
 80004fa:	4618      	mov	r0, r3
 80004fc:	f7ff fe80 	bl	8000200 <Bootloader_Send_Data_To_Host>
		HAL_FLASH_OB_Launch();
 8000500:	f001 fac6 	bl	8001a90 <HAL_FLASH_OB_Launch>
}
 8000504:	e003      	b.n	800050e <Bootloader_Enable_R_Protection+0x96>
		Bootloader_Send_Data_To_Host((uint8_t*) (&ErrorFrame),1);
 8000506:	2101      	movs	r1, #1
 8000508:	4804      	ldr	r0, [pc, #16]	; (800051c <Bootloader_Enable_R_Protection+0xa4>)
 800050a:	f7ff fe79 	bl	8000200 <Bootloader_Send_Data_To_Host>
}
 800050e:	bf00      	nop
 8000510:	3710      	adds	r7, #16
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	20000114 	.word	0x20000114
 800051c:	20000000 	.word	0x20000000

08000520 <Bootloader_Enable_W_Protection>:
   1- 1 byte data length = 0x03
   2- 1 byte commend number = 0x16
   3- 1 byte for ECU id
   4- 1 byte for determine write or read protection level
 */
static void Bootloader_Enable_W_Protection(uint8_t *Host_Buffer){
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
	 * 6. Reset.					HAL_FLASH_OB_Launch
	 *
	 *
	 * */

	uint8_t WOP_Level_Status = WOP_LEVEL_CHANGE_INVALID;
 8000528:	2300      	movs	r3, #0
 800052a:	73bb      	strb	r3, [r7, #14]
	uint8_t Host_WP_Level = Host_Buffer[3];
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	78db      	ldrb	r3, [r3, #3]
 8000530:	73fb      	strb	r3, [r7, #15]
		Bootloader_Send_Data_To_Host((uint8_t*) (&WOP_Level_Status), 1);
		return ;
#endif
	}

	if (OB_WRPSTATE_ENABLE == Host_WP_Level) {
 8000532:	7bfb      	ldrb	r3, [r7, #15]
 8000534:	2b01      	cmp	r3, #1
 8000536:	d11e      	bne.n	8000576 <Bootloader_Enable_W_Protection+0x56>
		pOBInit.OptionType = OPTIONBYTE_WRP;
 8000538:	4b24      	ldr	r3, [pc, #144]	; (80005cc <Bootloader_Enable_W_Protection+0xac>)
 800053a:	2201      	movs	r2, #1
 800053c:	601a      	str	r2, [r3, #0]
		pOBInit.WRPState = OB_WRPSTATE_ENABLE;
 800053e:	4b23      	ldr	r3, [pc, #140]	; (80005cc <Bootloader_Enable_W_Protection+0xac>)
 8000540:	2201      	movs	r2, #1
 8000542:	605a      	str	r2, [r3, #4]
		pOBInit.WRPPage = OB_WRP_PAGES0TO3 | OB_WRP_PAGES4TO7 | OB_WRP_PAGES8TO11 | OB_WRP_PAGES12TO15 | OB_WRP_PAGES16TO19 | OB_WRP_PAGES20TO23 | OB_WRP_PAGES24TO27 | OB_WRP_PAGES28TO31;//We make ORing operations to enable write protect to all pages
 8000544:	4b21      	ldr	r3, [pc, #132]	; (80005cc <Bootloader_Enable_W_Protection+0xac>)
 8000546:	22ff      	movs	r2, #255	; 0xff
 8000548:	609a      	str	r2, [r3, #8]

		HAL_FLASH_Unlock();
 800054a:	f001 fa3f 	bl	80019cc <HAL_FLASH_Unlock>
		HAL_FLASH_OB_Unlock();
 800054e:	f001 fa73 	bl	8001a38 <HAL_FLASH_OB_Unlock>
		HAL_FLASHEx_OBProgram(&pOBInit);
 8000552:	481e      	ldr	r0, [pc, #120]	; (80005cc <Bootloader_Enable_W_Protection+0xac>)
 8000554:	f001 fb96 	bl	8001c84 <HAL_FLASHEx_OBProgram>
		HAL_FLASH_Lock();
 8000558:	f001 fa5e 	bl	8001a18 <HAL_FLASH_Lock>
		HAL_FLASH_OB_Lock();
 800055c:	f001 fa88 	bl	8001a70 <HAL_FLASH_OB_Lock>

		WOP_Level_Status = WOP_LEVEL_CHANGE_VALID;
 8000560:	2301      	movs	r3, #1
 8000562:	73bb      	strb	r3, [r7, #14]
		Bootloader_Send_Data_To_Host((uint8_t*) (&WOP_Level_Status), 1);
 8000564:	f107 030e 	add.w	r3, r7, #14
 8000568:	2101      	movs	r1, #1
 800056a:	4618      	mov	r0, r3
 800056c:	f7ff fe48 	bl	8000200 <Bootloader_Send_Data_To_Host>

		HAL_FLASH_OB_Launch();
 8000570:	f001 fa8e 	bl	8001a90 <HAL_FLASH_OB_Launch>

	} else {
		/* Report Error frame */
		Bootloader_Send_Data_To_Host((uint8_t*) (&ErrorFrame),1);
	}
}
 8000574:	e025      	b.n	80005c2 <Bootloader_Enable_W_Protection+0xa2>
	} else if (OB_WRPSTATE_DISABLE == Host_WP_Level) {
 8000576:	7bfb      	ldrb	r3, [r7, #15]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d11e      	bne.n	80005ba <Bootloader_Enable_W_Protection+0x9a>
		pOBInit.OptionType = OPTIONBYTE_WRP;
 800057c:	4b13      	ldr	r3, [pc, #76]	; (80005cc <Bootloader_Enable_W_Protection+0xac>)
 800057e:	2201      	movs	r2, #1
 8000580:	601a      	str	r2, [r3, #0]
		pOBInit.WRPState = OB_WRPSTATE_DISABLE;
 8000582:	4b12      	ldr	r3, [pc, #72]	; (80005cc <Bootloader_Enable_W_Protection+0xac>)
 8000584:	2200      	movs	r2, #0
 8000586:	605a      	str	r2, [r3, #4]
		pOBInit.WRPPage = OB_WRP_PAGES0TO3 | OB_WRP_PAGES4TO7 | OB_WRP_PAGES8TO11 | OB_WRP_PAGES12TO15 | OB_WRP_PAGES16TO19 | OB_WRP_PAGES20TO23 | OB_WRP_PAGES24TO27 | OB_WRP_PAGES28TO31;//We make ORing operation to disable write protect to all pages(you should increase OR operation for higher densities STM)
 8000588:	4b10      	ldr	r3, [pc, #64]	; (80005cc <Bootloader_Enable_W_Protection+0xac>)
 800058a:	22ff      	movs	r2, #255	; 0xff
 800058c:	609a      	str	r2, [r3, #8]
		HAL_FLASH_Unlock();
 800058e:	f001 fa1d 	bl	80019cc <HAL_FLASH_Unlock>
		HAL_FLASH_OB_Unlock();
 8000592:	f001 fa51 	bl	8001a38 <HAL_FLASH_OB_Unlock>
		HAL_FLASHEx_OBProgram(&pOBInit);
 8000596:	480d      	ldr	r0, [pc, #52]	; (80005cc <Bootloader_Enable_W_Protection+0xac>)
 8000598:	f001 fb74 	bl	8001c84 <HAL_FLASHEx_OBProgram>
		HAL_FLASH_Lock();
 800059c:	f001 fa3c 	bl	8001a18 <HAL_FLASH_Lock>
		HAL_FLASH_OB_Lock();
 80005a0:	f001 fa66 	bl	8001a70 <HAL_FLASH_OB_Lock>
		WOP_Level_Status = WOP_LEVEL_CHANGE_VALID;
 80005a4:	2301      	movs	r3, #1
 80005a6:	73bb      	strb	r3, [r7, #14]
		Bootloader_Send_Data_To_Host((uint8_t*) (&WOP_Level_Status), 1);
 80005a8:	f107 030e 	add.w	r3, r7, #14
 80005ac:	2101      	movs	r1, #1
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff fe26 	bl	8000200 <Bootloader_Send_Data_To_Host>
		HAL_FLASH_OB_Launch();
 80005b4:	f001 fa6c 	bl	8001a90 <HAL_FLASH_OB_Launch>
}
 80005b8:	e003      	b.n	80005c2 <Bootloader_Enable_W_Protection+0xa2>
		Bootloader_Send_Data_To_Host((uint8_t*) (&ErrorFrame),1);
 80005ba:	2101      	movs	r1, #1
 80005bc:	4804      	ldr	r0, [pc, #16]	; (80005d0 <Bootloader_Enable_W_Protection+0xb0>)
 80005be:	f7ff fe1f 	bl	8000200 <Bootloader_Send_Data_To_Host>
}
 80005c2:	bf00      	nop
 80005c4:	3710      	adds	r7, #16
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000114 	.word	0x20000114
 80005d0:	20000000 	.word	0x20000000

080005d4 <Host_Jump_Address_Verfication>:


/* Verify that the address given from host is valid */
static uint8_t Host_Jump_Address_Verfication (uint32_t Jump_Address){
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	/* TO check on state of given address is in region or not */
	uint8_t Address_Verification_State = ADDRESS_IS_INVALID ;
 80005dc:	2300      	movs	r3, #0
 80005de:	73fb      	strb	r3, [r7, #15]

	/* Check that it is at RAM memory */
	if (Jump_Address>= SRAM_BASE && Jump_Address <=STM32F103_SRAM_END){
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80005e6:	d306      	bcc.n	80005f6 <Host_Jump_Address_Verfication+0x22>
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	4a0c      	ldr	r2, [pc, #48]	; (800061c <Host_Jump_Address_Verfication+0x48>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d802      	bhi.n	80005f6 <Host_Jump_Address_Verfication+0x22>
		Address_Verification_State = ADDRESS_IS_VALID ;
 80005f0:	2301      	movs	r3, #1
 80005f2:	73fb      	strb	r3, [r7, #15]
 80005f4:	e00c      	b.n	8000610 <Host_Jump_Address_Verfication+0x3c>
	}
	/* Check that it is at Flash memory */
	else if(Jump_Address>= FLASH_BASE && Jump_Address <=STM32F103_FLASH_END){
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80005fc:	d306      	bcc.n	800060c <Host_Jump_Address_Verfication+0x38>
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4a07      	ldr	r2, [pc, #28]	; (8000620 <Host_Jump_Address_Verfication+0x4c>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d802      	bhi.n	800060c <Host_Jump_Address_Verfication+0x38>
		Address_Verification_State = ADDRESS_IS_VALID ;
 8000606:	2301      	movs	r3, #1
 8000608:	73fb      	strb	r3, [r7, #15]
 800060a:	e001      	b.n	8000610 <Host_Jump_Address_Verfication+0x3c>
	}
	/* Invalid region */
	else {
		Address_Verification_State = ADDRESS_IS_INVALID ;
 800060c:	2300      	movs	r3, #0
 800060e:	73fb      	strb	r3, [r7, #15]
	}

	return Address_Verification_State ;
 8000610:	7bfb      	ldrb	r3, [r7, #15]
}
 8000612:	4618      	mov	r0, r3
 8000614:	3714      	adds	r7, #20
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr
 800061c:	20005000 	.word	0x20005000
 8000620:	08010000 	.word	0x08010000

08000624 <Bootloader_Erase_Flash>:
   1- 1 byte data length = 0x0A
   2- 1 byte commend number = 0x15
   3- 4 bytes for page address
   4- 1 byte for number of pages
 */
static void Bootloader_Erase_Flash (uint8_t *Host_Buffer){
 8000624:	b580      	push	{r7, lr}
 8000626:	b092      	sub	sp, #72	; 0x48
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
	/* To check on Erase state */
	uint8_t Erase_Status = UNSUCESSFUL_ERASE ;
 800062c:	2302      	movs	r3, #2
 800062e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	HAL_CAN_AddTxMessage(&hcan, &BL_Erase_TxHeader, &Erase_Status, BL_TxMailbox);
	while(HAL_CAN_IsTxMessagePending(&hcan, PEND_ON_ALL_TRANSMIT_MAILBOXES)); //In Retransmit mode make this with timer to detect error and avoid infinite loop.
#else
		/* Perform Mass erase or sector erase of the user flash */
		if (Host_Buffer[6] == MASTERID )
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	3306      	adds	r3, #6
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d122      	bne.n	8000682 <Bootloader_Erase_Flash+0x5e>
		{
#if(ECU_CONFIG == MASTERID)
			/*Sending frame to ECU2*/
			HAL_UART_Transmit(&huart2, &Host_Buffer[0], 1, 5); //sending length first, The time must be 5 to avoid errors
 800063c:	2305      	movs	r3, #5
 800063e:	2201      	movs	r2, #1
 8000640:	6879      	ldr	r1, [r7, #4]
 8000642:	483a      	ldr	r0, [pc, #232]	; (800072c <Bootloader_Erase_Flash+0x108>)
 8000644:	f002 fc68 	bl	8002f18 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, &Host_Buffer[1], Host_Buffer[0], 5*Host_Buffer[0]); //sending remaining frame, The time must be of about 5 times the length to avoid errors
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	1c59      	adds	r1, r3, #1
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	b29a      	uxth	r2, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	4618      	mov	r0, r3
 8000658:	4603      	mov	r3, r0
 800065a:	009b      	lsls	r3, r3, #2
 800065c:	4403      	add	r3, r0
 800065e:	4833      	ldr	r0, [pc, #204]	; (800072c <Bootloader_Erase_Flash+0x108>)
 8000660:	f002 fc5a 	bl	8002f18 <HAL_UART_Transmit>


			/*Receiving Ack from ECU2*/
			HAL_UART_Receive(&huart2, (uint8_t *)&Erase_Status, 1, HAL_MAX_DELAY); //Receive Error status
 8000664:	f107 0147 	add.w	r1, r7, #71	; 0x47
 8000668:	f04f 33ff 	mov.w	r3, #4294967295
 800066c:	2201      	movs	r2, #1
 800066e:	482f      	ldr	r0, [pc, #188]	; (800072c <Bootloader_Erase_Flash+0x108>)
 8000670:	f002 fcd5 	bl	800301e <HAL_UART_Receive>

			/*Sending Ack to ESP*/
			Bootloader_Send_Data_To_Host((uint8_t *)&Erase_Status, 1);
 8000674:	f107 0347 	add.w	r3, r7, #71	; 0x47
 8000678:	2101      	movs	r1, #1
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff fdc0 	bl	8000200 <Bootloader_Send_Data_To_Host>
 8000680:	e04f      	b.n	8000722 <Bootloader_Erase_Flash+0xfe>
			/* Report Error */
			Erase_Status = UNSUCESSFUL_ERASE ;
			Bootloader_Send_Data_To_Host((uint8_t *)(&Erase_Status),1);
#endif
		}
		else if(Host_Buffer[6] == SLAVE1 )
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	3306      	adds	r3, #6
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b01      	cmp	r3, #1
 800068a:	d141      	bne.n	8000710 <Bootloader_Erase_Flash+0xec>
#if((BL_CAN == ENABLE) && (ECU_CONFIG == MASTERID))
			/*Create buffer contains Amount of data and start address to be erased
			 *Length of buffer(when it act as buffer receiver) must be 8 or more, otherwise undefined behaviour may occur as CAN_Receive() will write data in un-allocated stack memory region
			 * */
			uint8_t BL_Erase_Memory[8];
			BL_Erase_Memory[0] = Host_Buffer[7]; //storing page amount to erase
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	79db      	ldrb	r3, [r3, #7]
 8000690:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
			*((uint32_t *)(&BL_Erase_Memory[1])) = *((uint32_t*)&Host_Buffer[2]); //storing start address
 8000694:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000698:	3301      	adds	r3, #1
 800069a:	687a      	ldr	r2, [r7, #4]
 800069c:	f8d2 2002 	ldr.w	r2, [r2, #2]
 80006a0:	601a      	str	r2, [r3, #0]

			/*Transmit Amount of data and Start address needed to be erased through one CAN frame*/
			CAN_TxHeaderTypeDef BL_EraseMemory_TxHeader; //Create Erase_memory struct Txheader for CAN transmit function
			BL_EraseMemory_TxHeader.DLC = 5;
 80006a2:	2305      	movs	r3, #5
 80006a4:	637b      	str	r3, [r7, #52]	; 0x34
			BL_EraseMemory_TxHeader.ExtId = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	62bb      	str	r3, [r7, #40]	; 0x28
			BL_EraseMemory_TxHeader.IDE = CAN_ID_STD;
 80006aa:	2300      	movs	r3, #0
 80006ac:	62fb      	str	r3, [r7, #44]	; 0x2c
			BL_EraseMemory_TxHeader.RTR = CAN_RTR_DATA;
 80006ae:	2300      	movs	r3, #0
 80006b0:	633b      	str	r3, [r7, #48]	; 0x30
			BL_EraseMemory_TxHeader.StdId = CAN_ERASE_MEMORY_ID; //Max value of StdId is 0x7FF(0b11111111111) i.e: 11 bit length.
 80006b2:	23f4      	movs	r3, #244	; 0xf4
 80006b4:	627b      	str	r3, [r7, #36]	; 0x24
			BL_EraseMemory_TxHeader.TransmitGlobalTime = DISABLE;
 80006b6:	2300      	movs	r3, #0
 80006b8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

			HAL_CAN_AddTxMessage(&hcan, &BL_EraseMemory_TxHeader, BL_Erase_Memory, BL_TxMailbox);
 80006bc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80006c0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80006c4:	4b1a      	ldr	r3, [pc, #104]	; (8000730 <Bootloader_Erase_Flash+0x10c>)
 80006c6:	481b      	ldr	r0, [pc, #108]	; (8000734 <Bootloader_Erase_Flash+0x110>)
 80006c8:	f000 fdd7 	bl	800127a <HAL_CAN_AddTxMessage>
			while(HAL_CAN_IsTxMessagePending(&hcan, PEND_ON_ALL_TRANSMIT_MAILBOXES)); //In Retransmit mode make this with timer to detect error and avoid infinite loop.
 80006cc:	bf00      	nop
 80006ce:	2107      	movs	r1, #7
 80006d0:	4818      	ldr	r0, [pc, #96]	; (8000734 <Bootloader_Erase_Flash+0x110>)
 80006d2:	f000 fea1 	bl	8001418 <HAL_CAN_IsTxMessagePending>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d1f8      	bne.n	80006ce <Bootloader_Erase_Flash+0xaa>
			/*Receiving Ack status from Slave*/
			CAN_RxHeaderTypeDef BL_EraseMemory_RxHeader; //Create Erase_memory struct Rxheader for receive function

			do
			{
				while(HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) == 0); //Polling until there is any message received in FIFO0
 80006dc:	bf00      	nop
 80006de:	2100      	movs	r1, #0
 80006e0:	4814      	ldr	r0, [pc, #80]	; (8000734 <Bootloader_Erase_Flash+0x110>)
 80006e2:	f000 ffdd 	bl	80016a0 <HAL_CAN_GetRxFifoFillLevel>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d0f8      	beq.n	80006de <Bootloader_Erase_Flash+0xba>
				HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &BL_EraseMemory_RxHeader, BL_Erase_Memory);
 80006ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006f0:	f107 0208 	add.w	r2, r7, #8
 80006f4:	2100      	movs	r1, #0
 80006f6:	480f      	ldr	r0, [pc, #60]	; (8000734 <Bootloader_Erase_Flash+0x110>)
 80006f8:	f000 feb1 	bl	800145e <HAL_CAN_GetRxMessage>
			}while(BL_EraseMemory_RxHeader.StdId != CAN_ERASE_MEMORY_ID); //Neglect other IDs Re-receive if other ID frame is received in FIFO0, until receiving CAN_ERASE_MEMORY_ID frame
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	2bf4      	cmp	r3, #244	; 0xf4
 8000700:	d1ec      	bne.n	80006dc <Bootloader_Erase_Flash+0xb8>

			/*Sending Ack status to ESP*/
			Bootloader_Send_Data_To_Host(BL_Erase_Memory, 1);
 8000702:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000706:	2101      	movs	r1, #1
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff fd79 	bl	8000200 <Bootloader_Send_Data_To_Host>
 800070e:	e008      	b.n	8000722 <Bootloader_Erase_Flash+0xfe>
			Bootloader_Send_Data_To_Host((uint8_t *)(&Erase_Status),1);
#endif
		}
		else
		{
			Erase_Status = UNSUCESSFUL_ERASE ;
 8000710:	2302      	movs	r3, #2
 8000712:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			Bootloader_Send_Data_To_Host((uint8_t *)(&Erase_Status),1);
 8000716:	f107 0347 	add.w	r3, r7, #71	; 0x47
 800071a:	2101      	movs	r1, #1
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff fd6f 	bl	8000200 <Bootloader_Send_Data_To_Host>
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
			BL_PrintMassage("Unsucessful erased\r\n");
#endif
		}
#endif
}
 8000722:	bf00      	nop
 8000724:	3748      	adds	r7, #72	; 0x48
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200001b0 	.word	0x200001b0
 8000730:	20000130 	.word	0x20000130
 8000734:	20000140 	.word	0x20000140

08000738 <Flash_Memory_Write_Payload>:


/* Write actually in flash memory */
static uint8_t Flash_Memory_Write_Payload(uint8_t *Host_PayLoad,
	uint32_t Payload_Start_Address, uint8_t Payload_Len) {
 8000738:	b5b0      	push	{r4, r5, r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af00      	add	r7, sp, #0
 800073e:	60f8      	str	r0, [r7, #12]
 8000740:	60b9      	str	r1, [r7, #8]
 8000742:	4613      	mov	r3, r2
 8000744:	71fb      	strb	r3, [r7, #7]
	/* The status in dealing HAL functions */
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 8000746:	2301      	movs	r3, #1
 8000748:	77fb      	strb	r3, [r7, #31]
	/* Status writing in flash memory */
	uint8_t Status = FLASH_PAYLOAD_WRITING_FAILED;
 800074a:	2300      	movs	r3, #0
 800074c:	77bb      	strb	r3, [r7, #30]
	/* The number of words in data appliction sections */
	uint8_t PayLoad_Counter = RESET ;
 800074e:	2300      	movs	r3, #0
 8000750:	777b      	strb	r3, [r7, #29]
	/* buffering half word */
	uint16_t Payload_Buffer = RESET ;
 8000752:	2300      	movs	r3, #0
 8000754:	837b      	strh	r3, [r7, #26]
	/* address of current writing half word */
	uint32_t Address = RESET ;
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]

	/* Writing steps */
	/* Open flash memory */
	HAL_Status = HAL_FLASH_Unlock();
 800075a:	f001 f937 	bl	80019cc <HAL_FLASH_Unlock>
 800075e:	4603      	mov	r3, r0
 8000760:	77fb      	strb	r3, [r7, #31]

	/* If it opened */
	if (HAL_Status == HAL_OK) {
 8000762:	7ffb      	ldrb	r3, [r7, #31]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d134      	bne.n	80007d2 <Flash_Memory_Write_Payload+0x9a>
		/* Transfer the data sections half word by half word */
		while (Payload_Len !=0 && Status == HAL_OK ){
 8000768:	e024      	b.n	80007b4 <Flash_Memory_Write_Payload+0x7c>
			Payload_Buffer = (uint16_t) Host_PayLoad[PayLoad_Counter]
 800076a:	7f7b      	ldrb	r3, [r7, #29]
 800076c:	68fa      	ldr	r2, [r7, #12]
 800076e:	4413      	add	r3, r2
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	b21a      	sxth	r2, r3
													 |( (uint16_t)Host_PayLoad[PayLoad_Counter+1] << ONE_BYTE );
 8000774:	7f7b      	ldrb	r3, [r7, #29]
 8000776:	3301      	adds	r3, #1
 8000778:	68f9      	ldr	r1, [r7, #12]
 800077a:	440b      	add	r3, r1
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	021b      	lsls	r3, r3, #8
 8000780:	b21b      	sxth	r3, r3
 8000782:	4313      	orrs	r3, r2
 8000784:	b21b      	sxth	r3, r3
			Payload_Buffer = (uint16_t) Host_PayLoad[PayLoad_Counter]
 8000786:	837b      	strh	r3, [r7, #26]

			/*update the flash address each itration */
			Address = Payload_Start_Address + PayLoad_Counter ;
 8000788:	7f7b      	ldrb	r3, [r7, #29]
 800078a:	68ba      	ldr	r2, [r7, #8]
 800078c:	4413      	add	r3, r2
 800078e:	617b      	str	r3, [r7, #20]

			/*Writing the Date in the flash Halfword by Halfword */
			HAL_Status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 8000790:	8b7b      	ldrh	r3, [r7, #26]
 8000792:	2200      	movs	r2, #0
 8000794:	461c      	mov	r4, r3
 8000796:	4615      	mov	r5, r2
 8000798:	4622      	mov	r2, r4
 800079a:	462b      	mov	r3, r5
 800079c:	6979      	ldr	r1, [r7, #20]
 800079e:	2001      	movs	r0, #1
 80007a0:	f001 f8a4 	bl	80018ec <HAL_FLASH_Program>
 80007a4:	4603      	mov	r3, r0
 80007a6:	77fb      	strb	r3, [r7, #31]
					Address, (uint64_t)Payload_Buffer);

			/*To increment PayLoad_Counter and stopped on new half word in host packet frame
			  To decrement Payload_Len to be sure that all of host packet frame is written
			 */
			Payload_Len-=2;
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	3b02      	subs	r3, #2
 80007ac:	71fb      	strb	r3, [r7, #7]
			PayLoad_Counter+=2;
 80007ae:	7f7b      	ldrb	r3, [r7, #29]
 80007b0:	3302      	adds	r3, #2
 80007b2:	777b      	strb	r3, [r7, #29]
		while (Payload_Len !=0 && Status == HAL_OK ){
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d002      	beq.n	80007c0 <Flash_Memory_Write_Payload+0x88>
 80007ba:	7fbb      	ldrb	r3, [r7, #30]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d0d4      	beq.n	800076a <Flash_Memory_Write_Payload+0x32>
		}

		/* if function can't write on memory Status be failed */
		if (HAL_Status != HAL_OK) {
 80007c0:	7ffb      	ldrb	r3, [r7, #31]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d002      	beq.n	80007cc <Flash_Memory_Write_Payload+0x94>
			Status = FLASH_PAYLOAD_WRITING_FAILED;
 80007c6:	2300      	movs	r3, #0
 80007c8:	77bb      	strb	r3, [r7, #30]
 80007ca:	e004      	b.n	80007d6 <Flash_Memory_Write_Payload+0x9e>
		} else {
			/* All iterations, It can write on memory make status passed */
			Status = FLASH_PAYLOAD_WRITING_PASSED;
 80007cc:	2301      	movs	r3, #1
 80007ce:	77bb      	strb	r3, [r7, #30]
 80007d0:	e001      	b.n	80007d6 <Flash_Memory_Write_Payload+0x9e>
		}
	}
	else {
		/* If it can't open memory make status failed */
		Status = FLASH_PAYLOAD_WRITING_FAILED;
 80007d2:	2300      	movs	r3, #0
 80007d4:	77bb      	strb	r3, [r7, #30]
	}

	/* If all status is OK so It will lock memory */
	if (Status == FLASH_PAYLOAD_WRITING_PASSED && HAL_Status == HAL_OK) {
 80007d6:	7fbb      	ldrb	r3, [r7, #30]
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d10f      	bne.n	80007fc <Flash_Memory_Write_Payload+0xc4>
 80007dc:	7ffb      	ldrb	r3, [r7, #31]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d10c      	bne.n	80007fc <Flash_Memory_Write_Payload+0xc4>
		HAL_Status = HAL_FLASH_Lock();
 80007e2:	f001 f919 	bl	8001a18 <HAL_FLASH_Lock>
 80007e6:	4603      	mov	r3, r0
 80007e8:	77fb      	strb	r3, [r7, #31]

		/* Check if it locked it true or not */
		if (HAL_Status != HAL_OK) {
 80007ea:	7ffb      	ldrb	r3, [r7, #31]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d002      	beq.n	80007f6 <Flash_Memory_Write_Payload+0xbe>
			Status = FLASH_PAYLOAD_WRITING_FAILED;
 80007f0:	2300      	movs	r3, #0
 80007f2:	77bb      	strb	r3, [r7, #30]
		if (HAL_Status != HAL_OK) {
 80007f4:	e004      	b.n	8000800 <Flash_Memory_Write_Payload+0xc8>
		} else {
			Status = FLASH_PAYLOAD_WRITING_PASSED;
 80007f6:	2301      	movs	r3, #1
 80007f8:	77bb      	strb	r3, [r7, #30]
		if (HAL_Status != HAL_OK) {
 80007fa:	e001      	b.n	8000800 <Flash_Memory_Write_Payload+0xc8>
		}
	} else {
		/* If one of status is not OK so It will make returned status with failed */
		Status = FLASH_PAYLOAD_WRITING_FAILED;
 80007fc:	2300      	movs	r3, #0
 80007fe:	77bb      	strb	r3, [r7, #30]
	}
	return Status;
 8000800:	7fbb      	ldrb	r3, [r7, #30]
}
 8000802:	4618      	mov	r0, r3
 8000804:	3720      	adds	r7, #32
 8000806:	46bd      	mov	sp, r7
 8000808:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800080c <Bootloader_Memory_Write>:
   2- 1 byte commend number = 0x16
   3- 4 bytes for address
   4- 1 byte for size of writing data
   5- N bytes of data info
 */
static void Bootloader_Memory_Write (uint8_t *Host_Buffer){
 800080c:	b580      	push	{r7, lr}
 800080e:	b094      	sub	sp, #80	; 0x50
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	/* Base address that you will write on */
	uint32_t HOST_Address = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	64fb      	str	r3, [r7, #76]	; 0x4c
	/* Number of bytes that will be sent */
	uint8_t Payload_Len = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	/* The status of input address from the host */
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 800081e:	2300      	movs	r3, #0
 8000820:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	/* Status writing in flash memory */
	uint8_t Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITING_FAILED;
 8000824:	2300      	movs	r3, #0
 8000826:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
		while(HAL_CAN_IsTxMessagePending(&hcan, PEND_ON_ALL_TRANSMIT_MAILBOXES)); //In Retransmit mode make this with timer to detect error and avoid infinite loop.
	}

#else
		/* Extract the start address from the Host packet */
		HOST_Address = *((uint32_t *)(&Host_Buffer[2]));
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000830:	64fb      	str	r3, [r7, #76]	; 0x4c
		/* Extract the payload length from the Host packet */
		Payload_Len = Host_Buffer[8];
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	7a1b      	ldrb	r3, [r3, #8]
 8000836:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

		/* Verify the Extracted address to be valid address */
		Address_Verification = Host_Jump_Address_Verfication(HOST_Address);
 800083a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800083c:	f7ff feca 	bl	80005d4 <Host_Jump_Address_Verfication>
 8000840:	4603      	mov	r3, r0
 8000842:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

		if(ADDRESS_IS_VALID == Address_Verification)
 8000846:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800084a:	2b01      	cmp	r3, #1
 800084c:	d170      	bne.n	8000930 <Bootloader_Memory_Write+0x124>
		{
			if (Host_Buffer[6] == MASTERID){
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	3306      	adds	r3, #6
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d111      	bne.n	800087c <Bootloader_Memory_Write+0x70>

#if(ECU_CONFIG == MASTERID)
				/* Write the payload to the Flash memory */
				Flash_Payload_Write_Status = Flash_Memory_Write_Payload((uint8_t *)&Host_Buffer[9], HOST_Address, Payload_Len);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	3309      	adds	r3, #9
 800085c:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8000860:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff ff68 	bl	8000738 <Flash_Memory_Write_Payload>
 8000868:	4603      	mov	r3, r0
 800086a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
				/* Report payload writing state */
				Bootloader_Send_Data_To_Host((uint8_t *)&Flash_Payload_Write_Status, 1);
 800086e:	f107 0349 	add.w	r3, r7, #73	; 0x49
 8000872:	2101      	movs	r1, #1
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff fcc3 	bl	8000200 <Bootloader_Send_Data_To_Host>
			/* Report address verification failed */
			Address_Verification = ADDRESS_IS_INVALID;
			Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification, 1);
		}
#endif
}
 800087a:	e062      	b.n	8000942 <Bootloader_Memory_Write+0x136>
			else if(Host_Buffer[6] == SLAVE1) {
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	3306      	adds	r3, #6
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	2b01      	cmp	r3, #1
 8000884:	d14a      	bne.n	800091c <Bootloader_Memory_Write+0x110>
				BL_Write_Programe[0] = Payload_Len;
 8000886:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800088a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
				*((uint32_t *)(&BL_Write_Programe[1])) = HOST_Address;
 800088e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000892:	3301      	adds	r3, #1
 8000894:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000896:	601a      	str	r2, [r3, #0]
				BL_WritePrograme_TxHeader.DLC = 5;
 8000898:	2305      	movs	r3, #5
 800089a:	63bb      	str	r3, [r7, #56]	; 0x38
				BL_WritePrograme_TxHeader.ExtId = 0;
 800089c:	2300      	movs	r3, #0
 800089e:	62fb      	str	r3, [r7, #44]	; 0x2c
				BL_WritePrograme_TxHeader.IDE = CAN_ID_STD;
 80008a0:	2300      	movs	r3, #0
 80008a2:	633b      	str	r3, [r7, #48]	; 0x30
				BL_WritePrograme_TxHeader.RTR = CAN_RTR_DATA;
 80008a4:	2300      	movs	r3, #0
 80008a6:	637b      	str	r3, [r7, #52]	; 0x34
				BL_WritePrograme_TxHeader.StdId = CAN_FLASH_PROGRAM_ID; //Max value of StdId is 0x7FF(0b11111111111) i.e: 11 bit length.
 80008a8:	23f3      	movs	r3, #243	; 0xf3
 80008aa:	62bb      	str	r3, [r7, #40]	; 0x28
				BL_WritePrograme_TxHeader.TransmitGlobalTime = DISABLE;
 80008ac:	2300      	movs	r3, #0
 80008ae:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
				HAL_CAN_AddTxMessage(&hcan, &BL_WritePrograme_TxHeader, BL_Write_Programe, BL_TxMailbox);
 80008b2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80008b6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80008ba:	4b24      	ldr	r3, [pc, #144]	; (800094c <Bootloader_Memory_Write+0x140>)
 80008bc:	4824      	ldr	r0, [pc, #144]	; (8000950 <Bootloader_Memory_Write+0x144>)
 80008be:	f000 fcdc 	bl	800127a <HAL_CAN_AddTxMessage>
				while(HAL_CAN_IsTxMessagePending(&hcan, PEND_ON_ALL_TRANSMIT_MAILBOXES)); //In Retransmit mode make this with timer to detect error and avoid infinite loop.
 80008c2:	bf00      	nop
 80008c4:	2107      	movs	r1, #7
 80008c6:	4822      	ldr	r0, [pc, #136]	; (8000950 <Bootloader_Memory_Write+0x144>)
 80008c8:	f000 fda6 	bl	8001418 <HAL_CAN_IsTxMessagePending>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d1f8      	bne.n	80008c4 <Bootloader_Memory_Write+0xb8>
				CAN_TransmitData(&hcan, &BL_WritePrograme_TxHeader, (uint8_t *)&Host_Buffer[9], Payload_Len);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	f103 0209 	add.w	r2, r3, #9
 80008d8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80008dc:	b29b      	uxth	r3, r3
 80008de:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80008e2:	481b      	ldr	r0, [pc, #108]	; (8000950 <Bootloader_Memory_Write+0x144>)
 80008e4:	f000 f8e9 	bl	8000aba <CAN_TransmitData>
					while(HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) == 0); //Polling until there is any message received
 80008e8:	bf00      	nop
 80008ea:	2100      	movs	r1, #0
 80008ec:	4818      	ldr	r0, [pc, #96]	; (8000950 <Bootloader_Memory_Write+0x144>)
 80008ee:	f000 fed7 	bl	80016a0 <HAL_CAN_GetRxFifoFillLevel>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d0f8      	beq.n	80008ea <Bootloader_Memory_Write+0xde>
					HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &BL_WritePrograme_RxHeader, BL_Write_Programe);
 80008f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008fc:	f107 020c 	add.w	r2, r7, #12
 8000900:	2100      	movs	r1, #0
 8000902:	4813      	ldr	r0, [pc, #76]	; (8000950 <Bootloader_Memory_Write+0x144>)
 8000904:	f000 fdab 	bl	800145e <HAL_CAN_GetRxMessage>
				}while(BL_WritePrograme_RxHeader.StdId != CAN_FLASH_PROGRAM_ID);
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	2bf3      	cmp	r3, #243	; 0xf3
 800090c:	d1ec      	bne.n	80008e8 <Bootloader_Memory_Write+0xdc>
				Bootloader_Send_Data_To_Host(BL_Write_Programe, 1);
 800090e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000912:	2101      	movs	r1, #1
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff fc73 	bl	8000200 <Bootloader_Send_Data_To_Host>
}
 800091a:	e012      	b.n	8000942 <Bootloader_Memory_Write+0x136>
				Address_Verification = ADDRESS_IS_INVALID;
 800091c:	2300      	movs	r3, #0
 800091e:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
				Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification, 1);
 8000922:	f107 034a 	add.w	r3, r7, #74	; 0x4a
 8000926:	2101      	movs	r1, #1
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff fc69 	bl	8000200 <Bootloader_Send_Data_To_Host>
}
 800092e:	e008      	b.n	8000942 <Bootloader_Memory_Write+0x136>
			Address_Verification = ADDRESS_IS_INVALID;
 8000930:	2300      	movs	r3, #0
 8000932:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
			Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification, 1);
 8000936:	f107 034a 	add.w	r3, r7, #74	; 0x4a
 800093a:	2101      	movs	r1, #1
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff fc5f 	bl	8000200 <Bootloader_Send_Data_To_Host>
}
 8000942:	bf00      	nop
 8000944:	3750      	adds	r7, #80	; 0x50
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000130 	.word	0x20000130
 8000950:	20000140 	.word	0x20000140

08000954 <Bootloader_Jump_To_Address>:
   1- 1 byte data length    = 0x06
   2- 1 byte commend number = 0x12
   3- 1 byte for ECU
   4,5,6,7- 4 bytes for address
 */
static void Bootloader_Jump_To_Address (uint8_t *Host_Buffer){
 8000954:	b580      	push	{r7, lr}
 8000956:	b08e      	sub	sp, #56	; 0x38
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
	BL_PrintMassage ("Bootloader jump to specified address \r\n");
#endif

#if (BL_CAN == ENABLE)
	uint8_t APP = 0 ;
 800095c:	2300      	movs	r3, #0
 800095e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

#if  (ECU_CONFIG == MASTERID)

	/* Buffering address */
	uint32_t HOST_Address = RESET ;
 8000962:	2300      	movs	r3, #0
 8000964:	633b      	str	r3, [r7, #48]	; 0x30
	/* TO check on state of given address is in region or not */
	uint8_t Address_Verification_State = ADDRESS_IS_INVALID ;
 8000966:	2300      	movs	r3, #0
 8000968:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	/* To get the content of Host_Buffer and variable"Host_Jump_Address" realizes that it is address
	 - &Host_Buffer[2] --> express the address of array of host
	 - (uint32_t *)    --> casting it to pointer of uint32
	 - *               --> De-reference it and get the content of buffer at this element
	 */
	HOST_Address = *((uint32_t *)(&Host_Buffer[2]));
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000972:	633b      	str	r3, [r7, #48]	; 0x30

	if (HOST_Address == FLASH_PAGE_BASE_ADDRESS_APP1){
 8000974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000976:	4a1a      	ldr	r2, [pc, #104]	; (80009e0 <Bootloader_Jump_To_Address+0x8c>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d103      	bne.n	8000984 <Bootloader_Jump_To_Address+0x30>
		APP = APPLICATION1 ;
 800097c:	2301      	movs	r3, #1
 800097e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000982:	e006      	b.n	8000992 <Bootloader_Jump_To_Address+0x3e>
	}
	else if (HOST_Address == FLASH_PAGE_BASE_ADDRESS_APP2){
 8000984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000986:	4a17      	ldr	r2, [pc, #92]	; (80009e4 <Bootloader_Jump_To_Address+0x90>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d102      	bne.n	8000992 <Bootloader_Jump_To_Address+0x3e>
		APP = APPLICATION2 ;
 800098c:	2302      	movs	r3, #2
 800098e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}

	/*Create and initiate buffer to send*/
	uint8_t BL_JUMP_TO_APP[8]; //Length must be 8 or more or undefined behaviour may occur
	BL_JUMP_TO_APP[0] = APP;   //Store which App needed to jump to
 8000992:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000996:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	/*Transmit which app to jump to through one CAN frame*/
	CAN_TxHeaderTypeDef BL_Jump_To_App_TxHeader; //Create Jump_To_App struct Txheader for CAN transmit function

	BL_Jump_To_App_TxHeader.DLC = 1;
 800099a:	2301      	movs	r3, #1
 800099c:	61fb      	str	r3, [r7, #28]
	BL_Jump_To_App_TxHeader.ExtId = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
	BL_Jump_To_App_TxHeader.IDE = CAN_ID_STD;
 80009a2:	2300      	movs	r3, #0
 80009a4:	617b      	str	r3, [r7, #20]
	BL_Jump_To_App_TxHeader.RTR = CAN_RTR_DATA;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61bb      	str	r3, [r7, #24]
	BL_Jump_To_App_TxHeader.StdId = CAN_JUMP_TO_APP_ID; //Max value of StdId is 0x7FF(0b11111111111) i.e: 11 bit length.
 80009aa:	23f5      	movs	r3, #245	; 0xf5
 80009ac:	60fb      	str	r3, [r7, #12]
	BL_Jump_To_App_TxHeader.TransmitGlobalTime = DISABLE;
 80009ae:	2300      	movs	r3, #0
 80009b0:	f887 3020 	strb.w	r3, [r7, #32]

	HAL_CAN_AddTxMessage(&hcan, &BL_Jump_To_App_TxHeader, BL_JUMP_TO_APP, BL_TxMailbox);
 80009b4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80009b8:	f107 010c 	add.w	r1, r7, #12
 80009bc:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <Bootloader_Jump_To_Address+0x94>)
 80009be:	480b      	ldr	r0, [pc, #44]	; (80009ec <Bootloader_Jump_To_Address+0x98>)
 80009c0:	f000 fc5b 	bl	800127a <HAL_CAN_AddTxMessage>
	while(HAL_CAN_IsTxMessagePending(&hcan, PEND_ON_ALL_TRANSMIT_MAILBOXES)); //In Retransmit mode make this with timer to detect error and avoid infinite loop.
 80009c4:	bf00      	nop
 80009c6:	2107      	movs	r1, #7
 80009c8:	4808      	ldr	r0, [pc, #32]	; (80009ec <Bootloader_Jump_To_Address+0x98>)
 80009ca:	f000 fd25 	bl	8001418 <HAL_CAN_IsTxMessagePending>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d1f8      	bne.n	80009c6 <Bootloader_Jump_To_Address+0x72>
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
		BL_PrintMassage("Address verification unsucessed\r\n");
#endif
	}
#endif
}
 80009d4:	bf00      	nop
 80009d6:	bf00      	nop
 80009d8:	3738      	adds	r7, #56	; 0x38
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	08005000 	.word	0x08005000
 80009e4:	0800a000 	.word	0x0800a000
 80009e8:	20000130 	.word	0x20000130
 80009ec:	20000140 	.word	0x20000140

080009f0 <Bootloader_Jump_To_User_App1>:
 Be sure that
   1- base address in application is updated in (Bootloader_Jump_To_User_App)
   2- update size of bootloader code with suitable size as 17k or 15k
   3- update origin address of application code in flash memory in linker script and size also
 */
static void Bootloader_Jump_To_User_App1 (){
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
	/* Value of the main stack pointer of our main application find at address 0 in IVT */
	uint32_t MSP_Value = *((volatile uint32_t*)FLASH_PAGE_BASE_ADDRESS_APP1);
 80009f6:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <Bootloader_Jump_To_User_App1+0x34>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	60fb      	str	r3, [r7, #12]
	/* Reset Handler defination function of our main application */
	uint32_t MainAppAddr = *((volatile uint32_t*)(FLASH_PAGE_BASE_ADDRESS_APP1+4));
 80009fc:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <Bootloader_Jump_To_User_App1+0x38>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	60bb      	str	r3, [r7, #8]
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
	BL_PrintMassage("Jump to application\r\n");
#endif

	/* Declare pointer to function contain the beginning address of reset function in user application */
	pFunc ResetHandler_Address = (pFunc)MainAppAddr;
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	607b      	str	r3, [r7, #4]

	/* Deinitionalization of modules that used in bootloader and work
	   the configurations of new application */
	HAL_RCC_DeInit(); /* Resets the RCC clock configuration to the default reset state. */
 8000a06:	f001 fd8d 	bl	8002524 <HAL_RCC_DeInit>
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	f383 8808 	msr	MSP, r3
}
 8000a14:	bf00      	nop

	/* Reset main stack pointer */
	__set_MSP(MSP_Value);

	/* Jump to Apllication Reset Handler */
	ResetHandler_Address();
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4798      	blx	r3
}
 8000a1a:	bf00      	nop
 8000a1c:	3710      	adds	r7, #16
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	08005000 	.word	0x08005000
 8000a28:	08005004 	.word	0x08005004

08000a2c <Bootloader_Jump_To_User_App2>:
 Be sure that
   1- base address in application is updated in (Bootloader_Jump_To_User_App)
   2- update size of bootloader code with suitable size as 17k or 15k
   3- update origin address of application code in flash memory in linker script and size also
 */
static void Bootloader_Jump_To_User_App2 (){
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
	/* Value of the main stack pointer of our main application find at address 0 in IVT */
	uint32_t MSP_Value = *((volatile uint32_t*)FLASH_PAGE_BASE_ADDRESS_APP2);
 8000a32:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <Bootloader_Jump_To_User_App2+0x34>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	60fb      	str	r3, [r7, #12]
	/* Reset Handler defination function of our main application */
	uint32_t MainAppAddr = *((volatile uint32_t*)(FLASH_PAGE_BASE_ADDRESS_APP2+4));
 8000a38:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <Bootloader_Jump_To_User_App2+0x38>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	60bb      	str	r3, [r7, #8]
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
	BL_PrintMassage("Jump to application\r\n");
#endif

	/* Declare pointer to function contain the beginning address of reset function in user application */
	pFunc ResetHandler_Address = (pFunc)MainAppAddr;
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	607b      	str	r3, [r7, #4]

	/* Deinitionalization of modules that used in bootloader and work
	   the configurations of new application */
	HAL_RCC_DeInit(); /* Resets the RCC clock configuration to the default reset state. */
 8000a42:	f001 fd6f 	bl	8002524 <HAL_RCC_DeInit>
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	f383 8808 	msr	MSP, r3
}
 8000a50:	bf00      	nop

	/* Reset main stack pointer */
	__set_MSP(MSP_Value);

	/* Jump to Apllication Reset Handler */
	ResetHandler_Address();
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4798      	blx	r3
}
 8000a56:	bf00      	nop
 8000a58:	3710      	adds	r7, #16
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	0800a000 	.word	0x0800a000
 8000a64:	0800a004 	.word	0x0800a004

08000a68 <BL_Manager>:
		Flash_Memory_Write_Payload((uint8_t *) &FLAG_APP_ON, FLAG_APP2_ADDRESS, 4);
	}
}

static void BL_Manager(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
    if(Get_Program_Flag_Status(FLAG_APP1_ADDRESS) == FLAG_RISED)
 8000a6c:	480a      	ldr	r0, [pc, #40]	; (8000a98 <BL_Manager+0x30>)
 8000a6e:	f000 f817 	bl	8000aa0 <Get_Program_Flag_Status>
 8000a72:	4603      	mov	r3, r0
 8000a74:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 8000a78:	d102      	bne.n	8000a80 <BL_Manager+0x18>
	{
		/*Jump to App1*/
		Bootloader_Jump_To_User_App1();
 8000a7a:	f7ff ffb9 	bl	80009f0 <Bootloader_Jump_To_User_App1>
	else if(Get_Program_Flag_Status(FLAG_APP2_ADDRESS) == FLAG_RISED)
	{
		/*Jump to App2*/
		Bootloader_Jump_To_User_App2();
	}
}
 8000a7e:	e008      	b.n	8000a92 <BL_Manager+0x2a>
	else if(Get_Program_Flag_Status(FLAG_APP2_ADDRESS) == FLAG_RISED)
 8000a80:	4806      	ldr	r0, [pc, #24]	; (8000a9c <BL_Manager+0x34>)
 8000a82:	f000 f80d 	bl	8000aa0 <Get_Program_Flag_Status>
 8000a86:	4603      	mov	r3, r0
 8000a88:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 8000a8c:	d101      	bne.n	8000a92 <BL_Manager+0x2a>
		Bootloader_Jump_To_User_App2();
 8000a8e:	f7ff ffcd 	bl	8000a2c <Bootloader_Jump_To_User_App2>
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	0800f000 	.word	0x0800f000
 8000a9c:	0800f004 	.word	0x0800f004

08000aa0 <Get_Program_Flag_Status>:

uint32_t Get_Program_Flag_Status(uint32_t Address)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	uint32_t Status = (*(uint32_t*)Address);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	60fb      	str	r3, [r7, #12]
	return Status;
 8000aae:	68fb      	ldr	r3, [r7, #12]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr

08000aba <CAN_TransmitData>:

/*We make this function to handle sending large files that are bigger than MAX_DATA_CAN_LENGTH
 *You shouldn't send remote frames by this function
 * */
void CAN_TransmitData(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *Header, uint8_t TxData[], uint16_t Length)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b086      	sub	sp, #24
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	60f8      	str	r0, [r7, #12]
 8000ac2:	60b9      	str	r1, [r7, #8]
 8000ac4:	607a      	str	r2, [r7, #4]
 8000ac6:	807b      	strh	r3, [r7, #2]
	uint16_t i =0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	82fb      	strh	r3, [r7, #22]
	uint32_t Mailbox = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	613b      	str	r3, [r7, #16]

	while(i < Length)
 8000ad0:	e02b      	b.n	8000b2a <CAN_TransmitData+0x70>
	{
		/*Wait until all messages in mailbox are send*/
		while(HAL_CAN_IsTxMessagePending(hcan, PEND_ON_ALL_TRANSMIT_MAILBOXES)); //In Retransmit mode make this with timer to detect error and avoid infinite loop.
 8000ad2:	bf00      	nop
 8000ad4:	2107      	movs	r1, #7
 8000ad6:	68f8      	ldr	r0, [r7, #12]
 8000ad8:	f000 fc9e 	bl	8001418 <HAL_CAN_IsTxMessagePending>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d1f8      	bne.n	8000ad4 <CAN_TransmitData+0x1a>

		/*Send data as 8 byte packets until remaining data is less than 8*/
		if(Length - i < MAX_DATA_CAN_LENGTH)
 8000ae2:	887a      	ldrh	r2, [r7, #2]
 8000ae4:	8afb      	ldrh	r3, [r7, #22]
 8000ae6:	1ad3      	subs	r3, r2, r3
 8000ae8:	2b07      	cmp	r3, #7
 8000aea:	dc0f      	bgt.n	8000b0c <CAN_TransmitData+0x52>
		{
			Header->DLC = Length - i;
 8000aec:	887a      	ldrh	r2, [r7, #2]
 8000aee:	8afb      	ldrh	r3, [r7, #22]
 8000af0:	1ad3      	subs	r3, r2, r3
 8000af2:	461a      	mov	r2, r3
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	611a      	str	r2, [r3, #16]
			HAL_CAN_AddTxMessage(hcan, Header, &TxData[i], &Mailbox);
 8000af8:	8afb      	ldrh	r3, [r7, #22]
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	441a      	add	r2, r3
 8000afe:	f107 0310 	add.w	r3, r7, #16
 8000b02:	68b9      	ldr	r1, [r7, #8]
 8000b04:	68f8      	ldr	r0, [r7, #12]
 8000b06:	f000 fbb8 	bl	800127a <HAL_CAN_AddTxMessage>
 8000b0a:	e012      	b.n	8000b32 <CAN_TransmitData+0x78>
			return;
		}
		else
		{
			Header->DLC = MAX_DATA_CAN_LENGTH;
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	2208      	movs	r2, #8
 8000b10:	611a      	str	r2, [r3, #16]
			HAL_CAN_AddTxMessage(hcan, Header, &TxData[i], &Mailbox);
 8000b12:	8afb      	ldrh	r3, [r7, #22]
 8000b14:	687a      	ldr	r2, [r7, #4]
 8000b16:	441a      	add	r2, r3
 8000b18:	f107 0310 	add.w	r3, r7, #16
 8000b1c:	68b9      	ldr	r1, [r7, #8]
 8000b1e:	68f8      	ldr	r0, [r7, #12]
 8000b20:	f000 fbab 	bl	800127a <HAL_CAN_AddTxMessage>
			i += MAX_DATA_CAN_LENGTH;
 8000b24:	8afb      	ldrh	r3, [r7, #22]
 8000b26:	3308      	adds	r3, #8
 8000b28:	82fb      	strh	r3, [r7, #22]
	while(i < Length)
 8000b2a:	8afa      	ldrh	r2, [r7, #22]
 8000b2c:	887b      	ldrh	r3, [r7, #2]
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d3cf      	bcc.n	8000ad2 <CAN_TransmitData+0x18>
		}
	}

}
 8000b32:	3718      	adds	r7, #24
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000b3c:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <MX_CAN_Init+0x64>)
 8000b3e:	4a18      	ldr	r2, [pc, #96]	; (8000ba0 <MX_CAN_Init+0x68>)
 8000b40:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 32;
 8000b42:	4b16      	ldr	r3, [pc, #88]	; (8000b9c <MX_CAN_Init+0x64>)
 8000b44:	2220      	movs	r2, #32
 8000b46:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000b48:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <MX_CAN_Init+0x64>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000b4e:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <MX_CAN_Init+0x64>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_16TQ;
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <MX_CAN_Init+0x64>)
 8000b56:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8000b5a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <MX_CAN_Init+0x64>)
 8000b5e:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8000b62:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000b64:	4b0d      	ldr	r3, [pc, #52]	; (8000b9c <MX_CAN_Init+0x64>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <MX_CAN_Init+0x64>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000b70:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <MX_CAN_Init+0x64>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <MX_CAN_Init+0x64>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = ENABLE;
 8000b7c:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <MX_CAN_Init+0x64>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <MX_CAN_Init+0x64>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000b88:	4804      	ldr	r0, [pc, #16]	; (8000b9c <MX_CAN_Init+0x64>)
 8000b8a:	f000 fa7b 	bl	8001084 <HAL_CAN_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000b94:	f000 f8c0 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000140 	.word	0x20000140
 8000ba0:	40006400 	.word	0x40006400

08000ba4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b088      	sub	sp, #32
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 0310 	add.w	r3, r7, #16
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a1c      	ldr	r2, [pc, #112]	; (8000c30 <HAL_CAN_MspInit+0x8c>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d131      	bne.n	8000c28 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000bc4:	4b1b      	ldr	r3, [pc, #108]	; (8000c34 <HAL_CAN_MspInit+0x90>)
 8000bc6:	69db      	ldr	r3, [r3, #28]
 8000bc8:	4a1a      	ldr	r2, [pc, #104]	; (8000c34 <HAL_CAN_MspInit+0x90>)
 8000bca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bce:	61d3      	str	r3, [r2, #28]
 8000bd0:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <HAL_CAN_MspInit+0x90>)
 8000bd2:	69db      	ldr	r3, [r3, #28]
 8000bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bdc:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <HAL_CAN_MspInit+0x90>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	4a14      	ldr	r2, [pc, #80]	; (8000c34 <HAL_CAN_MspInit+0x90>)
 8000be2:	f043 0304 	orr.w	r3, r3, #4
 8000be6:	6193      	str	r3, [r2, #24]
 8000be8:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <HAL_CAN_MspInit+0x90>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	f003 0304 	and.w	r3, r3, #4
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000bf4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bf8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c02:	f107 0310 	add.w	r3, r7, #16
 8000c06:	4619      	mov	r1, r3
 8000c08:	480b      	ldr	r0, [pc, #44]	; (8000c38 <HAL_CAN_MspInit+0x94>)
 8000c0a:	f001 fb07 	bl	800221c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000c0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c14:	2302      	movs	r3, #2
 8000c16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1c:	f107 0310 	add.w	r3, r7, #16
 8000c20:	4619      	mov	r1, r3
 8000c22:	4805      	ldr	r0, [pc, #20]	; (8000c38 <HAL_CAN_MspInit+0x94>)
 8000c24:	f001 fafa 	bl	800221c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000c28:	bf00      	nop
 8000c2a:	3720      	adds	r7, #32
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40006400 	.word	0x40006400
 8000c34:	40021000 	.word	0x40021000
 8000c38:	40010800 	.word	0x40010800

08000c3c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <MX_GPIO_Init+0x40>)
 8000c44:	699b      	ldr	r3, [r3, #24]
 8000c46:	4a0d      	ldr	r2, [pc, #52]	; (8000c7c <MX_GPIO_Init+0x40>)
 8000c48:	f043 0320 	orr.w	r3, r3, #32
 8000c4c:	6193      	str	r3, [r2, #24]
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <MX_GPIO_Init+0x40>)
 8000c50:	699b      	ldr	r3, [r3, #24]
 8000c52:	f003 0320 	and.w	r3, r3, #32
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5a:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <MX_GPIO_Init+0x40>)
 8000c5c:	699b      	ldr	r3, [r3, #24]
 8000c5e:	4a07      	ldr	r2, [pc, #28]	; (8000c7c <MX_GPIO_Init+0x40>)
 8000c60:	f043 0304 	orr.w	r3, r3, #4
 8000c64:	6193      	str	r3, [r2, #24]
 8000c66:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <MX_GPIO_Init+0x40>)
 8000c68:	699b      	ldr	r3, [r3, #24]
 8000c6a:	f003 0304 	and.w	r3, r3, #4
 8000c6e:	603b      	str	r3, [r7, #0]
 8000c70:	683b      	ldr	r3, [r7, #0]

}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bc80      	pop	{r7}
 8000c7a:	4770      	bx	lr
 8000c7c:	40021000 	.word	0x40021000

08000c80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c84:	f000 f99c 	bl	8000fc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c88:	f000 f80b 	bl	8000ca2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c8c:	f7ff ffd6 	bl	8000c3c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000c90:	f000 f898 	bl	8000dc4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000c94:	f000 f8c0 	bl	8000e18 <MX_USART2_UART_Init>
  MX_CAN_Init();
 8000c98:	f7ff ff4e 	bl	8000b38 <MX_CAN_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		BL_Fetch_Commend();
 8000c9c:	f7ff fa56 	bl	800014c <BL_Fetch_Commend>
 8000ca0:	e7fc      	b.n	8000c9c <main+0x1c>

08000ca2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b090      	sub	sp, #64	; 0x40
 8000ca6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ca8:	f107 0318 	add.w	r3, r7, #24
 8000cac:	2228      	movs	r2, #40	; 0x28
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f002 fb43 	bl	800333c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ccc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cd2:	f107 0318 	add.w	r3, r7, #24
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f001 fcbe 	bl	8002658 <HAL_RCC_OscConfig>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <SystemClock_Config+0x44>
  {
    Error_Handler();
 8000ce2:	f000 f819 	bl	8000d18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ce6:	230f      	movs	r3, #15
 8000ce8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000cea:	2301      	movs	r3, #1
 8000cec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cf6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4618      	mov	r0, r3
 8000d02:	f001 ff2b 	bl	8002b5c <HAL_RCC_ClockConfig>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d0c:	f000 f804 	bl	8000d18 <Error_Handler>
  }
}
 8000d10:	bf00      	nop
 8000d12:	3740      	adds	r7, #64	; 0x40
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d1c:	b672      	cpsid	i
}
 8000d1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <Error_Handler+0x8>
	...

08000d24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <HAL_MspInit+0x40>)
 8000d2c:	699b      	ldr	r3, [r3, #24]
 8000d2e:	4a0d      	ldr	r2, [pc, #52]	; (8000d64 <HAL_MspInit+0x40>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6193      	str	r3, [r2, #24]
 8000d36:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <HAL_MspInit+0x40>)
 8000d38:	699b      	ldr	r3, [r3, #24]
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d42:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <HAL_MspInit+0x40>)
 8000d44:	69db      	ldr	r3, [r3, #28]
 8000d46:	4a07      	ldr	r2, [pc, #28]	; (8000d64 <HAL_MspInit+0x40>)
 8000d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d4c:	61d3      	str	r3, [r2, #28]
 8000d4e:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <HAL_MspInit+0x40>)
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr
 8000d64:	40021000 	.word	0x40021000

08000d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <NMI_Handler+0x4>

08000d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d72:	e7fe      	b.n	8000d72 <HardFault_Handler+0x4>

08000d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <MemManage_Handler+0x4>

08000d7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <BusFault_Handler+0x4>

08000d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <UsageFault_Handler+0x4>

08000d86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr

08000d92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bc80      	pop	{r7}
 8000d9c:	4770      	bx	lr

08000d9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bc80      	pop	{r7}
 8000da8:	4770      	bx	lr

08000daa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dae:	f000 f94d 	bl	800104c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dba:	bf00      	nop
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bc80      	pop	{r7}
 8000dc0:	4770      	bx	lr
	...

08000dc4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dc8:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <MX_USART1_UART_Init+0x4c>)
 8000dca:	4a12      	ldr	r2, [pc, #72]	; (8000e14 <MX_USART1_UART_Init+0x50>)
 8000dcc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dce:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <MX_USART1_UART_Init+0x4c>)
 8000dd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <MX_USART1_UART_Init+0x4c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <MX_USART1_UART_Init+0x4c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000de2:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <MX_USART1_UART_Init+0x4c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000de8:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <MX_USART1_UART_Init+0x4c>)
 8000dea:	220c      	movs	r2, #12
 8000dec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dee:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <MX_USART1_UART_Init+0x4c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <MX_USART1_UART_Init+0x4c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dfa:	4805      	ldr	r0, [pc, #20]	; (8000e10 <MX_USART1_UART_Init+0x4c>)
 8000dfc:	f002 f83c 	bl	8002e78 <HAL_UART_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e06:	f7ff ff87 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000168 	.word	0x20000168
 8000e14:	40013800 	.word	0x40013800

08000e18 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <MX_USART2_UART_Init+0x4c>)
 8000e1e:	4a12      	ldr	r2, [pc, #72]	; (8000e68 <MX_USART2_UART_Init+0x50>)
 8000e20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e22:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <MX_USART2_UART_Init+0x4c>)
 8000e24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <MX_USART2_UART_Init+0x4c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e30:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <MX_USART2_UART_Init+0x4c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e36:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <MX_USART2_UART_Init+0x4c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e3c:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <MX_USART2_UART_Init+0x4c>)
 8000e3e:	220c      	movs	r2, #12
 8000e40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e42:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <MX_USART2_UART_Init+0x4c>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <MX_USART2_UART_Init+0x4c>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e4e:	4805      	ldr	r0, [pc, #20]	; (8000e64 <MX_USART2_UART_Init+0x4c>)
 8000e50:	f002 f812 	bl	8002e78 <HAL_UART_Init>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e5a:	f7ff ff5d 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	200001b0 	.word	0x200001b0
 8000e68:	40004400 	.word	0x40004400

08000e6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08a      	sub	sp, #40	; 0x28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 0318 	add.w	r3, r7, #24
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a37      	ldr	r2, [pc, #220]	; (8000f64 <HAL_UART_MspInit+0xf8>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d132      	bne.n	8000ef2 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e8c:	4b36      	ldr	r3, [pc, #216]	; (8000f68 <HAL_UART_MspInit+0xfc>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	4a35      	ldr	r2, [pc, #212]	; (8000f68 <HAL_UART_MspInit+0xfc>)
 8000e92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e96:	6193      	str	r3, [r2, #24]
 8000e98:	4b33      	ldr	r3, [pc, #204]	; (8000f68 <HAL_UART_MspInit+0xfc>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ea0:	617b      	str	r3, [r7, #20]
 8000ea2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea4:	4b30      	ldr	r3, [pc, #192]	; (8000f68 <HAL_UART_MspInit+0xfc>)
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	4a2f      	ldr	r2, [pc, #188]	; (8000f68 <HAL_UART_MspInit+0xfc>)
 8000eaa:	f043 0304 	orr.w	r3, r3, #4
 8000eae:	6193      	str	r3, [r2, #24]
 8000eb0:	4b2d      	ldr	r3, [pc, #180]	; (8000f68 <HAL_UART_MspInit+0xfc>)
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	f003 0304 	and.w	r3, r3, #4
 8000eb8:	613b      	str	r3, [r7, #16]
 8000eba:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ebc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ec0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eca:	f107 0318 	add.w	r3, r7, #24
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4826      	ldr	r0, [pc, #152]	; (8000f6c <HAL_UART_MspInit+0x100>)
 8000ed2:	f001 f9a3 	bl	800221c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee4:	f107 0318 	add.w	r3, r7, #24
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4820      	ldr	r0, [pc, #128]	; (8000f6c <HAL_UART_MspInit+0x100>)
 8000eec:	f001 f996 	bl	800221c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ef0:	e034      	b.n	8000f5c <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a1e      	ldr	r2, [pc, #120]	; (8000f70 <HAL_UART_MspInit+0x104>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d12f      	bne.n	8000f5c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000efc:	4b1a      	ldr	r3, [pc, #104]	; (8000f68 <HAL_UART_MspInit+0xfc>)
 8000efe:	69db      	ldr	r3, [r3, #28]
 8000f00:	4a19      	ldr	r2, [pc, #100]	; (8000f68 <HAL_UART_MspInit+0xfc>)
 8000f02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f06:	61d3      	str	r3, [r2, #28]
 8000f08:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <HAL_UART_MspInit+0xfc>)
 8000f0a:	69db      	ldr	r3, [r3, #28]
 8000f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f14:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <HAL_UART_MspInit+0xfc>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	4a13      	ldr	r2, [pc, #76]	; (8000f68 <HAL_UART_MspInit+0xfc>)
 8000f1a:	f043 0304 	orr.w	r3, r3, #4
 8000f1e:	6193      	str	r3, [r2, #24]
 8000f20:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <HAL_UART_MspInit+0xfc>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	f003 0304 	and.w	r3, r3, #4
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f2c:	2304      	movs	r3, #4
 8000f2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f30:	2302      	movs	r3, #2
 8000f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f34:	2303      	movs	r3, #3
 8000f36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f38:	f107 0318 	add.w	r3, r7, #24
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	480b      	ldr	r0, [pc, #44]	; (8000f6c <HAL_UART_MspInit+0x100>)
 8000f40:	f001 f96c 	bl	800221c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f44:	2308      	movs	r3, #8
 8000f46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f50:	f107 0318 	add.w	r3, r7, #24
 8000f54:	4619      	mov	r1, r3
 8000f56:	4805      	ldr	r0, [pc, #20]	; (8000f6c <HAL_UART_MspInit+0x100>)
 8000f58:	f001 f960 	bl	800221c <HAL_GPIO_Init>
}
 8000f5c:	bf00      	nop
 8000f5e:	3728      	adds	r7, #40	; 0x28
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40013800 	.word	0x40013800
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	40010800 	.word	0x40010800
 8000f70:	40004400 	.word	0x40004400

08000f74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f74:	f7ff ff1f 	bl	8000db6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f78:	480b      	ldr	r0, [pc, #44]	; (8000fa8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f7a:	490c      	ldr	r1, [pc, #48]	; (8000fac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f7c:	4a0c      	ldr	r2, [pc, #48]	; (8000fb0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f80:	e002      	b.n	8000f88 <LoopCopyDataInit>

08000f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f86:	3304      	adds	r3, #4

08000f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f8c:	d3f9      	bcc.n	8000f82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f8e:	4a09      	ldr	r2, [pc, #36]	; (8000fb4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f90:	4c09      	ldr	r4, [pc, #36]	; (8000fb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f94:	e001      	b.n	8000f9a <LoopFillZerobss>

08000f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f98:	3204      	adds	r2, #4

08000f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f9c:	d3fb      	bcc.n	8000f96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f9e:	f002 f9d5 	bl	800334c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fa2:	f7ff fe6d 	bl	8000c80 <main>
  bx lr
 8000fa6:	4770      	bx	lr
  ldr r0, =_sdata
 8000fa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fac:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000fb0:	080033e0 	.word	0x080033e0
  ldr r2, =_sbss
 8000fb4:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8000fb8:	20000220 	.word	0x20000220

08000fbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fbc:	e7fe      	b.n	8000fbc <ADC1_2_IRQHandler>
	...

08000fc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <HAL_Init+0x28>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a07      	ldr	r2, [pc, #28]	; (8000fe8 <HAL_Init+0x28>)
 8000fca:	f043 0310 	orr.w	r3, r3, #16
 8000fce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd0:	2003      	movs	r0, #3
 8000fd2:	f000 fc53 	bl	800187c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd6:	200f      	movs	r0, #15
 8000fd8:	f000 f808 	bl	8000fec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fdc:	f7ff fea2 	bl	8000d24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40022000 	.word	0x40022000

08000fec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <HAL_InitTick+0x54>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4b12      	ldr	r3, [pc, #72]	; (8001044 <HAL_InitTick+0x58>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001002:	fbb3 f3f1 	udiv	r3, r3, r1
 8001006:	fbb2 f3f3 	udiv	r3, r2, r3
 800100a:	4618      	mov	r0, r3
 800100c:	f000 fc61 	bl	80018d2 <HAL_SYSTICK_Config>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e00e      	b.n	8001038 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2b0f      	cmp	r3, #15
 800101e:	d80a      	bhi.n	8001036 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001020:	2200      	movs	r2, #0
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	f04f 30ff 	mov.w	r0, #4294967295
 8001028:	f000 fc33 	bl	8001892 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800102c:	4a06      	ldr	r2, [pc, #24]	; (8001048 <HAL_InitTick+0x5c>)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001032:	2300      	movs	r3, #0
 8001034:	e000      	b.n	8001038 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
}
 8001038:	4618      	mov	r0, r3
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000020 	.word	0x20000020
 8001044:	20000028 	.word	0x20000028
 8001048:	20000024 	.word	0x20000024

0800104c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <HAL_IncTick+0x1c>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	461a      	mov	r2, r3
 8001056:	4b05      	ldr	r3, [pc, #20]	; (800106c <HAL_IncTick+0x20>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4413      	add	r3, r2
 800105c:	4a03      	ldr	r2, [pc, #12]	; (800106c <HAL_IncTick+0x20>)
 800105e:	6013      	str	r3, [r2, #0]
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr
 8001068:	20000028 	.word	0x20000028
 800106c:	200001f8 	.word	0x200001f8

08001070 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return uwTick;
 8001074:	4b02      	ldr	r3, [pc, #8]	; (8001080 <HAL_GetTick+0x10>)
 8001076:	681b      	ldr	r3, [r3, #0]
}
 8001078:	4618      	mov	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr
 8001080:	200001f8 	.word	0x200001f8

08001084 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d101      	bne.n	8001096 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e0ed      	b.n	8001272 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f893 3020 	ldrb.w	r3, [r3, #32]
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d102      	bne.n	80010a8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff fd7e 	bl	8000ba4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f042 0201 	orr.w	r2, r2, #1
 80010b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010b8:	f7ff ffda 	bl	8001070 <HAL_GetTick>
 80010bc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010be:	e012      	b.n	80010e6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010c0:	f7ff ffd6 	bl	8001070 <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	2b0a      	cmp	r3, #10
 80010cc:	d90b      	bls.n	80010e6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2205      	movs	r2, #5
 80010de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e0c5      	b.n	8001272 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f003 0301 	and.w	r3, r3, #1
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d0e5      	beq.n	80010c0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f022 0202 	bic.w	r2, r2, #2
 8001102:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001104:	f7ff ffb4 	bl	8001070 <HAL_GetTick>
 8001108:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800110a:	e012      	b.n	8001132 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800110c:	f7ff ffb0 	bl	8001070 <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b0a      	cmp	r3, #10
 8001118:	d90b      	bls.n	8001132 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2205      	movs	r2, #5
 800112a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e09f      	b.n	8001272 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0302 	and.w	r3, r3, #2
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1e5      	bne.n	800110c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	7e1b      	ldrb	r3, [r3, #24]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d108      	bne.n	800115a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	e007      	b.n	800116a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001168:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	7e5b      	ldrb	r3, [r3, #25]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d108      	bne.n	8001184 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	e007      	b.n	8001194 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001192:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	7e9b      	ldrb	r3, [r3, #26]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d108      	bne.n	80011ae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f042 0220 	orr.w	r2, r2, #32
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	e007      	b.n	80011be <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f022 0220 	bic.w	r2, r2, #32
 80011bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	7edb      	ldrb	r3, [r3, #27]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d108      	bne.n	80011d8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f022 0210 	bic.w	r2, r2, #16
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	e007      	b.n	80011e8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f042 0210 	orr.w	r2, r2, #16
 80011e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	7f1b      	ldrb	r3, [r3, #28]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d108      	bne.n	8001202 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f042 0208 	orr.w	r2, r2, #8
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	e007      	b.n	8001212 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f022 0208 	bic.w	r2, r2, #8
 8001210:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	7f5b      	ldrb	r3, [r3, #29]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d108      	bne.n	800122c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f042 0204 	orr.w	r2, r2, #4
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	e007      	b.n	800123c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f022 0204 	bic.w	r2, r2, #4
 800123a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	689a      	ldr	r2, [r3, #8]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	431a      	orrs	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	691b      	ldr	r3, [r3, #16]
 800124a:	431a      	orrs	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	ea42 0103 	orr.w	r1, r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	1e5a      	subs	r2, r3, #1
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	430a      	orrs	r2, r1
 8001260:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2200      	movs	r2, #0
 8001266:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2201      	movs	r2, #1
 800126c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800127a:	b480      	push	{r7}
 800127c:	b089      	sub	sp, #36	; 0x24
 800127e:	af00      	add	r7, sp, #0
 8001280:	60f8      	str	r0, [r7, #12]
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
 8001286:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800128e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001298:	7ffb      	ldrb	r3, [r7, #31]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d003      	beq.n	80012a6 <HAL_CAN_AddTxMessage+0x2c>
 800129e:	7ffb      	ldrb	r3, [r7, #31]
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	f040 80ad 	bne.w	8001400 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d10a      	bne.n	80012c6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d105      	bne.n	80012c6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	f000 8095 	beq.w	80013f0 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	0e1b      	lsrs	r3, r3, #24
 80012ca:	f003 0303 	and.w	r3, r3, #3
 80012ce:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80012d0:	2201      	movs	r2, #1
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	409a      	lsls	r2, r3
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d10d      	bne.n	80012fe <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80012ec:	68f9      	ldr	r1, [r7, #12]
 80012ee:	6809      	ldr	r1, [r1, #0]
 80012f0:	431a      	orrs	r2, r3
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	3318      	adds	r3, #24
 80012f6:	011b      	lsls	r3, r3, #4
 80012f8:	440b      	add	r3, r1
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	e00f      	b.n	800131e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001308:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800130e:	68f9      	ldr	r1, [r7, #12]
 8001310:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001312:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	3318      	adds	r3, #24
 8001318:	011b      	lsls	r3, r3, #4
 800131a:	440b      	add	r3, r1
 800131c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	6819      	ldr	r1, [r3, #0]
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	691a      	ldr	r2, [r3, #16]
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	3318      	adds	r3, #24
 800132a:	011b      	lsls	r3, r3, #4
 800132c:	440b      	add	r3, r1
 800132e:	3304      	adds	r3, #4
 8001330:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	7d1b      	ldrb	r3, [r3, #20]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d111      	bne.n	800135e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	3318      	adds	r3, #24
 8001342:	011b      	lsls	r3, r3, #4
 8001344:	4413      	add	r3, r2
 8001346:	3304      	adds	r3, #4
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	68fa      	ldr	r2, [r7, #12]
 800134c:	6811      	ldr	r1, [r2, #0]
 800134e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	3318      	adds	r3, #24
 8001356:	011b      	lsls	r3, r3, #4
 8001358:	440b      	add	r3, r1
 800135a:	3304      	adds	r3, #4
 800135c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	3307      	adds	r3, #7
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	061a      	lsls	r2, r3, #24
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	3306      	adds	r3, #6
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	041b      	lsls	r3, r3, #16
 800136e:	431a      	orrs	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3305      	adds	r3, #5
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	021b      	lsls	r3, r3, #8
 8001378:	4313      	orrs	r3, r2
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	3204      	adds	r2, #4
 800137e:	7812      	ldrb	r2, [r2, #0]
 8001380:	4610      	mov	r0, r2
 8001382:	68fa      	ldr	r2, [r7, #12]
 8001384:	6811      	ldr	r1, [r2, #0]
 8001386:	ea43 0200 	orr.w	r2, r3, r0
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	011b      	lsls	r3, r3, #4
 800138e:	440b      	add	r3, r1
 8001390:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001394:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	3303      	adds	r3, #3
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	061a      	lsls	r2, r3, #24
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	3302      	adds	r3, #2
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	041b      	lsls	r3, r3, #16
 80013a6:	431a      	orrs	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3301      	adds	r3, #1
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	021b      	lsls	r3, r3, #8
 80013b0:	4313      	orrs	r3, r2
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	7812      	ldrb	r2, [r2, #0]
 80013b6:	4610      	mov	r0, r2
 80013b8:	68fa      	ldr	r2, [r7, #12]
 80013ba:	6811      	ldr	r1, [r2, #0]
 80013bc:	ea43 0200 	orr.w	r2, r3, r0
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	011b      	lsls	r3, r3, #4
 80013c4:	440b      	add	r3, r1
 80013c6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80013ca:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	3318      	adds	r3, #24
 80013d4:	011b      	lsls	r3, r3, #4
 80013d6:	4413      	add	r3, r2
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	68fa      	ldr	r2, [r7, #12]
 80013dc:	6811      	ldr	r1, [r2, #0]
 80013de:	f043 0201 	orr.w	r2, r3, #1
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	3318      	adds	r3, #24
 80013e6:	011b      	lsls	r3, r3, #4
 80013e8:	440b      	add	r3, r1
 80013ea:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80013ec:	2300      	movs	r3, #0
 80013ee:	e00e      	b.n	800140e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e006      	b.n	800140e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001404:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
  }
}
 800140e:	4618      	mov	r0, r3
 8001410:	3724      	adds	r7, #36	; 0x24
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr

08001418 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f893 3020 	ldrb.w	r3, [r3, #32]
 800142c:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 800142e:	7afb      	ldrb	r3, [r7, #11]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d002      	beq.n	800143a <HAL_CAN_IsTxMessagePending+0x22>
 8001434:	7afb      	ldrb	r3, [r7, #11]
 8001436:	2b02      	cmp	r3, #2
 8001438:	d10b      	bne.n	8001452 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	069b      	lsls	r3, r3, #26
 8001444:	401a      	ands	r2, r3
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	069b      	lsls	r3, r3, #26
 800144a:	429a      	cmp	r2, r3
 800144c:	d001      	beq.n	8001452 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 800144e:	2301      	movs	r3, #1
 8001450:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8001452:	68fb      	ldr	r3, [r7, #12]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr

0800145e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800145e:	b480      	push	{r7}
 8001460:	b087      	sub	sp, #28
 8001462:	af00      	add	r7, sp, #0
 8001464:	60f8      	str	r0, [r7, #12]
 8001466:	60b9      	str	r1, [r7, #8]
 8001468:	607a      	str	r2, [r7, #4]
 800146a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001472:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001474:	7dfb      	ldrb	r3, [r7, #23]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d003      	beq.n	8001482 <HAL_CAN_GetRxMessage+0x24>
 800147a:	7dfb      	ldrb	r3, [r7, #23]
 800147c:	2b02      	cmp	r3, #2
 800147e:	f040 8103 	bne.w	8001688 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d10e      	bne.n	80014a6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	f003 0303 	and.w	r3, r3, #3
 8001492:	2b00      	cmp	r3, #0
 8001494:	d116      	bne.n	80014c4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e0f7      	b.n	8001696 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	691b      	ldr	r3, [r3, #16]
 80014ac:	f003 0303 	and.w	r3, r3, #3
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d107      	bne.n	80014c4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e0e8      	b.n	8001696 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	331b      	adds	r3, #27
 80014cc:	011b      	lsls	r3, r3, #4
 80014ce:	4413      	add	r3, r2
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0204 	and.w	r2, r3, #4
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d10c      	bne.n	80014fc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	331b      	adds	r3, #27
 80014ea:	011b      	lsls	r3, r3, #4
 80014ec:	4413      	add	r3, r2
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	0d5b      	lsrs	r3, r3, #21
 80014f2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	e00b      	b.n	8001514 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	331b      	adds	r3, #27
 8001504:	011b      	lsls	r3, r3, #4
 8001506:	4413      	add	r3, r2
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	331b      	adds	r3, #27
 800151c:	011b      	lsls	r3, r3, #4
 800151e:	4413      	add	r3, r2
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0202 	and.w	r2, r3, #2
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	331b      	adds	r3, #27
 8001532:	011b      	lsls	r3, r3, #4
 8001534:	4413      	add	r3, r2
 8001536:	3304      	adds	r3, #4
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0308 	and.w	r3, r3, #8
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2208      	movs	r2, #8
 8001546:	611a      	str	r2, [r3, #16]
 8001548:	e00b      	b.n	8001562 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	331b      	adds	r3, #27
 8001552:	011b      	lsls	r3, r3, #4
 8001554:	4413      	add	r3, r2
 8001556:	3304      	adds	r3, #4
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 020f 	and.w	r2, r3, #15
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	331b      	adds	r3, #27
 800156a:	011b      	lsls	r3, r3, #4
 800156c:	4413      	add	r3, r2
 800156e:	3304      	adds	r3, #4
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	0a1b      	lsrs	r3, r3, #8
 8001574:	b2da      	uxtb	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	331b      	adds	r3, #27
 8001582:	011b      	lsls	r3, r3, #4
 8001584:	4413      	add	r3, r2
 8001586:	3304      	adds	r3, #4
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	0c1b      	lsrs	r3, r3, #16
 800158c:	b29a      	uxth	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	011b      	lsls	r3, r3, #4
 800159a:	4413      	add	r3, r2
 800159c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	011b      	lsls	r3, r3, #4
 80015b0:	4413      	add	r3, r2
 80015b2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	0a1a      	lsrs	r2, r3, #8
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	3301      	adds	r3, #1
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	011b      	lsls	r3, r3, #4
 80015ca:	4413      	add	r3, r2
 80015cc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	0c1a      	lsrs	r2, r3, #16
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	3302      	adds	r3, #2
 80015d8:	b2d2      	uxtb	r2, r2
 80015da:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	011b      	lsls	r3, r3, #4
 80015e4:	4413      	add	r3, r2
 80015e6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	0e1a      	lsrs	r2, r3, #24
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	3303      	adds	r3, #3
 80015f2:	b2d2      	uxtb	r2, r2
 80015f4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	011b      	lsls	r3, r3, #4
 80015fe:	4413      	add	r3, r2
 8001600:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	3304      	adds	r3, #4
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	011b      	lsls	r3, r3, #4
 8001616:	4413      	add	r3, r2
 8001618:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	0a1a      	lsrs	r2, r3, #8
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	3305      	adds	r3, #5
 8001624:	b2d2      	uxtb	r2, r2
 8001626:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	011b      	lsls	r3, r3, #4
 8001630:	4413      	add	r3, r2
 8001632:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	0c1a      	lsrs	r2, r3, #16
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	3306      	adds	r3, #6
 800163e:	b2d2      	uxtb	r2, r2
 8001640:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	011b      	lsls	r3, r3, #4
 800164a:	4413      	add	r3, r2
 800164c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	0e1a      	lsrs	r2, r3, #24
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	3307      	adds	r3, #7
 8001658:	b2d2      	uxtb	r2, r2
 800165a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d108      	bne.n	8001674 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68da      	ldr	r2, [r3, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f042 0220 	orr.w	r2, r2, #32
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	e007      	b.n	8001684 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	691a      	ldr	r2, [r3, #16]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f042 0220 	orr.w	r2, r2, #32
 8001682:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001684:	2300      	movs	r3, #0
 8001686:	e006      	b.n	8001696 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
  }
}
 8001696:	4618      	mov	r0, r3
 8001698:	371c      	adds	r7, #28
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr

080016a0 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016b4:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80016b6:	7afb      	ldrb	r3, [r7, #11]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d002      	beq.n	80016c2 <HAL_CAN_GetRxFifoFillLevel+0x22>
 80016bc:	7afb      	ldrb	r3, [r7, #11]
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d10f      	bne.n	80016e2 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d106      	bne.n	80016d6 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	f003 0303 	and.w	r3, r3, #3
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	e005      	b.n	80016e2 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	691b      	ldr	r3, [r3, #16]
 80016dc:	f003 0303 	and.w	r3, r3, #3
 80016e0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80016e2:	68fb      	ldr	r3, [r7, #12]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc80      	pop	{r7}
 80016ec:	4770      	bx	lr
	...

080016f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001700:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <__NVIC_SetPriorityGrouping+0x44>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001706:	68ba      	ldr	r2, [r7, #8]
 8001708:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800170c:	4013      	ands	r3, r2
 800170e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001718:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800171c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001722:	4a04      	ldr	r2, [pc, #16]	; (8001734 <__NVIC_SetPriorityGrouping+0x44>)
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	60d3      	str	r3, [r2, #12]
}
 8001728:	bf00      	nop
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800173c:	4b04      	ldr	r3, [pc, #16]	; (8001750 <__NVIC_GetPriorityGrouping+0x18>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	0a1b      	lsrs	r3, r3, #8
 8001742:	f003 0307 	and.w	r3, r3, #7
}
 8001746:	4618      	mov	r0, r3
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	6039      	str	r1, [r7, #0]
 800175e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001764:	2b00      	cmp	r3, #0
 8001766:	db0a      	blt.n	800177e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	b2da      	uxtb	r2, r3
 800176c:	490c      	ldr	r1, [pc, #48]	; (80017a0 <__NVIC_SetPriority+0x4c>)
 800176e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001772:	0112      	lsls	r2, r2, #4
 8001774:	b2d2      	uxtb	r2, r2
 8001776:	440b      	add	r3, r1
 8001778:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800177c:	e00a      	b.n	8001794 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	b2da      	uxtb	r2, r3
 8001782:	4908      	ldr	r1, [pc, #32]	; (80017a4 <__NVIC_SetPriority+0x50>)
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	f003 030f 	and.w	r3, r3, #15
 800178a:	3b04      	subs	r3, #4
 800178c:	0112      	lsls	r2, r2, #4
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	440b      	add	r3, r1
 8001792:	761a      	strb	r2, [r3, #24]
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	bc80      	pop	{r7}
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	e000e100 	.word	0xe000e100
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b089      	sub	sp, #36	; 0x24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	f1c3 0307 	rsb	r3, r3, #7
 80017c2:	2b04      	cmp	r3, #4
 80017c4:	bf28      	it	cs
 80017c6:	2304      	movcs	r3, #4
 80017c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3304      	adds	r3, #4
 80017ce:	2b06      	cmp	r3, #6
 80017d0:	d902      	bls.n	80017d8 <NVIC_EncodePriority+0x30>
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	3b03      	subs	r3, #3
 80017d6:	e000      	b.n	80017da <NVIC_EncodePriority+0x32>
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017dc:	f04f 32ff 	mov.w	r2, #4294967295
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43da      	mvns	r2, r3
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	401a      	ands	r2, r3
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017f0:	f04f 31ff 	mov.w	r1, #4294967295
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	fa01 f303 	lsl.w	r3, r1, r3
 80017fa:	43d9      	mvns	r1, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001800:	4313      	orrs	r3, r2
         );
}
 8001802:	4618      	mov	r0, r3
 8001804:	3724      	adds	r7, #36	; 0x24
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr

0800180c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001810:	f3bf 8f4f 	dsb	sy
}
 8001814:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001816:	4b06      	ldr	r3, [pc, #24]	; (8001830 <__NVIC_SystemReset+0x24>)
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800181e:	4904      	ldr	r1, [pc, #16]	; (8001830 <__NVIC_SystemReset+0x24>)
 8001820:	4b04      	ldr	r3, [pc, #16]	; (8001834 <__NVIC_SystemReset+0x28>)
 8001822:	4313      	orrs	r3, r2
 8001824:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001826:	f3bf 8f4f 	dsb	sy
}
 800182a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800182c:	bf00      	nop
 800182e:	e7fd      	b.n	800182c <__NVIC_SystemReset+0x20>
 8001830:	e000ed00 	.word	0xe000ed00
 8001834:	05fa0004 	.word	0x05fa0004

08001838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3b01      	subs	r3, #1
 8001844:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001848:	d301      	bcc.n	800184e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800184a:	2301      	movs	r3, #1
 800184c:	e00f      	b.n	800186e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800184e:	4a0a      	ldr	r2, [pc, #40]	; (8001878 <SysTick_Config+0x40>)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3b01      	subs	r3, #1
 8001854:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001856:	210f      	movs	r1, #15
 8001858:	f04f 30ff 	mov.w	r0, #4294967295
 800185c:	f7ff ff7a 	bl	8001754 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001860:	4b05      	ldr	r3, [pc, #20]	; (8001878 <SysTick_Config+0x40>)
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001866:	4b04      	ldr	r3, [pc, #16]	; (8001878 <SysTick_Config+0x40>)
 8001868:	2207      	movs	r2, #7
 800186a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	e000e010 	.word	0xe000e010

0800187c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7ff ff33 	bl	80016f0 <__NVIC_SetPriorityGrouping>
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001892:	b580      	push	{r7, lr}
 8001894:	b086      	sub	sp, #24
 8001896:	af00      	add	r7, sp, #0
 8001898:	4603      	mov	r3, r0
 800189a:	60b9      	str	r1, [r7, #8]
 800189c:	607a      	str	r2, [r7, #4]
 800189e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018a4:	f7ff ff48 	bl	8001738 <__NVIC_GetPriorityGrouping>
 80018a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	68b9      	ldr	r1, [r7, #8]
 80018ae:	6978      	ldr	r0, [r7, #20]
 80018b0:	f7ff ff7a 	bl	80017a8 <NVIC_EncodePriority>
 80018b4:	4602      	mov	r2, r0
 80018b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ba:	4611      	mov	r1, r2
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff ff49 	bl	8001754 <__NVIC_SetPriority>
}
 80018c2:	bf00      	nop
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80018ce:	f7ff ff9d 	bl	800180c <__NVIC_SystemReset>

080018d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff ffac 	bl	8001838 <SysTick_Config>
 80018e0:	4603      	mov	r3, r0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
	...

080018ec <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80018ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ee:	b087      	sub	sp, #28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80018fe:	2300      	movs	r3, #0
 8001900:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8001902:	2300      	movs	r3, #0
 8001904:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001906:	4b2f      	ldr	r3, [pc, #188]	; (80019c4 <HAL_FLASH_Program+0xd8>)
 8001908:	7e1b      	ldrb	r3, [r3, #24]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d101      	bne.n	8001912 <HAL_FLASH_Program+0x26>
 800190e:	2302      	movs	r3, #2
 8001910:	e054      	b.n	80019bc <HAL_FLASH_Program+0xd0>
 8001912:	4b2c      	ldr	r3, [pc, #176]	; (80019c4 <HAL_FLASH_Program+0xd8>)
 8001914:	2201      	movs	r2, #1
 8001916:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001918:	f24c 3050 	movw	r0, #50000	; 0xc350
 800191c:	f000 f8da 	bl	8001ad4 <FLASH_WaitForLastOperation>
 8001920:	4603      	mov	r3, r0
 8001922:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001924:	7dfb      	ldrb	r3, [r7, #23]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d144      	bne.n	80019b4 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d102      	bne.n	8001936 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001930:	2301      	movs	r3, #1
 8001932:	757b      	strb	r3, [r7, #21]
 8001934:	e007      	b.n	8001946 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2b02      	cmp	r3, #2
 800193a:	d102      	bne.n	8001942 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800193c:	2302      	movs	r3, #2
 800193e:	757b      	strb	r3, [r7, #21]
 8001940:	e001      	b.n	8001946 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8001942:	2304      	movs	r3, #4
 8001944:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8001946:	2300      	movs	r3, #0
 8001948:	75bb      	strb	r3, [r7, #22]
 800194a:	e02d      	b.n	80019a8 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800194c:	7dbb      	ldrb	r3, [r7, #22]
 800194e:	005a      	lsls	r2, r3, #1
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	eb02 0c03 	add.w	ip, r2, r3
 8001956:	7dbb      	ldrb	r3, [r7, #22]
 8001958:	0119      	lsls	r1, r3, #4
 800195a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800195e:	f1c1 0620 	rsb	r6, r1, #32
 8001962:	f1a1 0020 	sub.w	r0, r1, #32
 8001966:	fa22 f401 	lsr.w	r4, r2, r1
 800196a:	fa03 f606 	lsl.w	r6, r3, r6
 800196e:	4334      	orrs	r4, r6
 8001970:	fa23 f000 	lsr.w	r0, r3, r0
 8001974:	4304      	orrs	r4, r0
 8001976:	fa23 f501 	lsr.w	r5, r3, r1
 800197a:	b2a3      	uxth	r3, r4
 800197c:	4619      	mov	r1, r3
 800197e:	4660      	mov	r0, ip
 8001980:	f000 f88c 	bl	8001a9c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001984:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001988:	f000 f8a4 	bl	8001ad4 <FLASH_WaitForLastOperation>
 800198c:	4603      	mov	r3, r0
 800198e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001990:	4b0d      	ldr	r3, [pc, #52]	; (80019c8 <HAL_FLASH_Program+0xdc>)
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	4a0c      	ldr	r2, [pc, #48]	; (80019c8 <HAL_FLASH_Program+0xdc>)
 8001996:	f023 0301 	bic.w	r3, r3, #1
 800199a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800199c:	7dfb      	ldrb	r3, [r7, #23]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d107      	bne.n	80019b2 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80019a2:	7dbb      	ldrb	r3, [r7, #22]
 80019a4:	3301      	adds	r3, #1
 80019a6:	75bb      	strb	r3, [r7, #22]
 80019a8:	7dba      	ldrb	r2, [r7, #22]
 80019aa:	7d7b      	ldrb	r3, [r7, #21]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d3cd      	bcc.n	800194c <HAL_FLASH_Program+0x60>
 80019b0:	e000      	b.n	80019b4 <HAL_FLASH_Program+0xc8>
      {
        break;
 80019b2:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80019b4:	4b03      	ldr	r3, [pc, #12]	; (80019c4 <HAL_FLASH_Program+0xd8>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	761a      	strb	r2, [r3, #24]

  return status;
 80019ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	371c      	adds	r7, #28
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019c4:	20000200 	.word	0x20000200
 80019c8:	40022000 	.word	0x40022000

080019cc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80019d2:	2300      	movs	r3, #0
 80019d4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80019d6:	4b0d      	ldr	r3, [pc, #52]	; (8001a0c <HAL_FLASH_Unlock+0x40>)
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d00d      	beq.n	80019fe <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80019e2:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <HAL_FLASH_Unlock+0x40>)
 80019e4:	4a0a      	ldr	r2, [pc, #40]	; (8001a10 <HAL_FLASH_Unlock+0x44>)
 80019e6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80019e8:	4b08      	ldr	r3, [pc, #32]	; (8001a0c <HAL_FLASH_Unlock+0x40>)
 80019ea:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <HAL_FLASH_Unlock+0x48>)
 80019ec:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80019ee:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <HAL_FLASH_Unlock+0x40>)
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80019fe:	79fb      	ldrb	r3, [r7, #7]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc80      	pop	{r7}
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	40022000 	.word	0x40022000
 8001a10:	45670123 	.word	0x45670123
 8001a14:	cdef89ab 	.word	0xcdef89ab

08001a18 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001a1c:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <HAL_FLASH_Lock+0x1c>)
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	4a04      	ldr	r2, [pc, #16]	; (8001a34 <HAL_FLASH_Lock+0x1c>)
 8001a22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a26:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	40022000 	.word	0x40022000

08001a38 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 8001a3c:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <HAL_FLASH_OB_Unlock+0x2c>)
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d107      	bne.n	8001a58 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8001a48:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <HAL_FLASH_OB_Unlock+0x2c>)
 8001a4a:	4a07      	ldr	r2, [pc, #28]	; (8001a68 <HAL_FLASH_OB_Unlock+0x30>)
 8001a4c:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8001a4e:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <HAL_FLASH_OB_Unlock+0x2c>)
 8001a50:	4a06      	ldr	r2, [pc, #24]	; (8001a6c <HAL_FLASH_OB_Unlock+0x34>)
 8001a52:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8001a54:	2300      	movs	r3, #0
 8001a56:	e000      	b.n	8001a5a <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	40022000 	.word	0x40022000
 8001a68:	45670123 	.word	0x45670123
 8001a6c:	cdef89ab 	.word	0xcdef89ab

08001a70 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 8001a74:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <HAL_FLASH_OB_Lock+0x1c>)
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	4a04      	ldr	r2, [pc, #16]	; (8001a8c <HAL_FLASH_OB_Lock+0x1c>)
 8001a7a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001a7e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	40022000 	.word	0x40022000

08001a90 <HAL_FLASH_OB_Launch>:
  * @brief  Launch the option byte loading.
  * @note   This function will reset automatically the MCU.
  * @retval None
  */
void HAL_FLASH_OB_Launch(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* Initiates a system reset request to launch the option byte loading */
  HAL_NVIC_SystemReset();
 8001a94:	f7ff ff19 	bl	80018ca <HAL_NVIC_SystemReset>
}
 8001a98:	bf00      	nop
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001aa8:	4b08      	ldr	r3, [pc, #32]	; (8001acc <FLASH_Program_HalfWord+0x30>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001aae:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <FLASH_Program_HalfWord+0x34>)
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	4a07      	ldr	r2, [pc, #28]	; (8001ad0 <FLASH_Program_HalfWord+0x34>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	887a      	ldrh	r2, [r7, #2]
 8001abe:	801a      	strh	r2, [r3, #0]
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	20000200 	.word	0x20000200
 8001ad0:	40022000 	.word	0x40022000

08001ad4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001adc:	f7ff fac8 	bl	8001070 <HAL_GetTick>
 8001ae0:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001ae2:	e010      	b.n	8001b06 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aea:	d00c      	beq.n	8001b06 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d007      	beq.n	8001b02 <FLASH_WaitForLastOperation+0x2e>
 8001af2:	f7ff fabd 	bl	8001070 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d201      	bcs.n	8001b06 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e025      	b.n	8001b52 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001b06:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <FLASH_WaitForLastOperation+0x88>)
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1e8      	bne.n	8001ae4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001b12:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <FLASH_WaitForLastOperation+0x88>)
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	f003 0320 	and.w	r3, r3, #32
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d002      	beq.n	8001b24 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001b1e:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <FLASH_WaitForLastOperation+0x88>)
 8001b20:	2220      	movs	r2, #32
 8001b22:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001b24:	4b0d      	ldr	r3, [pc, #52]	; (8001b5c <FLASH_WaitForLastOperation+0x88>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	f003 0310 	and.w	r3, r3, #16
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d10b      	bne.n	8001b48 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001b30:	4b0a      	ldr	r3, [pc, #40]	; (8001b5c <FLASH_WaitForLastOperation+0x88>)
 8001b32:	69db      	ldr	r3, [r3, #28]
 8001b34:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d105      	bne.n	8001b48 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001b3c:	4b07      	ldr	r3, [pc, #28]	; (8001b5c <FLASH_WaitForLastOperation+0x88>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d003      	beq.n	8001b50 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001b48:	f000 f80a 	bl	8001b60 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e000      	b.n	8001b52 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40022000 	.word	0x40022000

08001b60 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001b66:	2300      	movs	r3, #0
 8001b68:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001b6a:	4b23      	ldr	r3, [pc, #140]	; (8001bf8 <FLASH_SetErrorCode+0x98>)
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	f003 0310 	and.w	r3, r3, #16
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d009      	beq.n	8001b8a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001b76:	4b21      	ldr	r3, [pc, #132]	; (8001bfc <FLASH_SetErrorCode+0x9c>)
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	f043 0302 	orr.w	r3, r3, #2
 8001b7e:	4a1f      	ldr	r2, [pc, #124]	; (8001bfc <FLASH_SetErrorCode+0x9c>)
 8001b80:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f043 0310 	orr.w	r3, r3, #16
 8001b88:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001b8a:	4b1b      	ldr	r3, [pc, #108]	; (8001bf8 <FLASH_SetErrorCode+0x98>)
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	f003 0304 	and.w	r3, r3, #4
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d009      	beq.n	8001baa <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001b96:	4b19      	ldr	r3, [pc, #100]	; (8001bfc <FLASH_SetErrorCode+0x9c>)
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	f043 0301 	orr.w	r3, r3, #1
 8001b9e:	4a17      	ldr	r2, [pc, #92]	; (8001bfc <FLASH_SetErrorCode+0x9c>)
 8001ba0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f043 0304 	orr.w	r3, r3, #4
 8001ba8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001baa:	4b13      	ldr	r3, [pc, #76]	; (8001bf8 <FLASH_SetErrorCode+0x98>)
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00b      	beq.n	8001bce <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001bb6:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <FLASH_SetErrorCode+0x9c>)
 8001bb8:	69db      	ldr	r3, [r3, #28]
 8001bba:	f043 0304 	orr.w	r3, r3, #4
 8001bbe:	4a0f      	ldr	r2, [pc, #60]	; (8001bfc <FLASH_SetErrorCode+0x9c>)
 8001bc0:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001bc2:	4b0d      	ldr	r3, [pc, #52]	; (8001bf8 <FLASH_SetErrorCode+0x98>)
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	4a0c      	ldr	r2, [pc, #48]	; (8001bf8 <FLASH_SetErrorCode+0x98>)
 8001bc8:	f023 0301 	bic.w	r3, r3, #1
 8001bcc:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f240 1201 	movw	r2, #257	; 0x101
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d106      	bne.n	8001be6 <FLASH_SetErrorCode+0x86>
 8001bd8:	4b07      	ldr	r3, [pc, #28]	; (8001bf8 <FLASH_SetErrorCode+0x98>)
 8001bda:	69db      	ldr	r3, [r3, #28]
 8001bdc:	4a06      	ldr	r2, [pc, #24]	; (8001bf8 <FLASH_SetErrorCode+0x98>)
 8001bde:	f023 0301 	bic.w	r3, r3, #1
 8001be2:	61d3      	str	r3, [r2, #28]
}  
 8001be4:	e002      	b.n	8001bec <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001be6:	4a04      	ldr	r2, [pc, #16]	; (8001bf8 <FLASH_SetErrorCode+0x98>)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	60d3      	str	r3, [r2, #12]
}  
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	40022000 	.word	0x40022000
 8001bfc:	20000200 	.word	0x20000200

08001c00 <HAL_FLASHEx_OBErase>:
  *         (system reset will occur)
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_FLASHEx_OBErase(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
  uint8_t rdptmp = OB_RDP_LEVEL_0;
 8001c06:	23a5      	movs	r3, #165	; 0xa5
 8001c08:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	71fb      	strb	r3, [r7, #7]

  /* Get the actual read protection Option Byte value */
  rdptmp = FLASH_OB_GetRDP();
 8001c0e:	f000 fad9 	bl	80021c4 <FLASH_OB_GetRDP>
 8001c12:	4603      	mov	r3, r0
 8001c14:	71bb      	strb	r3, [r7, #6]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c16:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c1a:	f7ff ff5b 	bl	8001ad4 <FLASH_WaitForLastOperation>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	71fb      	strb	r3, [r7, #7]

  if(status == HAL_OK)
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d123      	bne.n	8001c70 <HAL_FLASHEx_OBErase+0x70>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001c28:	4b14      	ldr	r3, [pc, #80]	; (8001c7c <HAL_FLASHEx_OBErase+0x7c>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	61da      	str	r2, [r3, #28]

    /* If the previous operation is completed, proceed to erase the option bytes */
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 8001c2e:	4b14      	ldr	r3, [pc, #80]	; (8001c80 <HAL_FLASHEx_OBErase+0x80>)
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	4a13      	ldr	r2, [pc, #76]	; (8001c80 <HAL_FLASHEx_OBErase+0x80>)
 8001c34:	f043 0320 	orr.w	r3, r3, #32
 8001c38:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001c3a:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <HAL_FLASHEx_OBErase+0x80>)
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	4a10      	ldr	r2, [pc, #64]	; (8001c80 <HAL_FLASHEx_OBErase+0x80>)
 8001c40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c44:	6113      	str	r3, [r2, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c46:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c4a:	f7ff ff43 	bl	8001ad4 <FLASH_WaitForLastOperation>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	71fb      	strb	r3, [r7, #7]

    /* If the erase operation is completed, disable the OPTER Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 8001c52:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <HAL_FLASHEx_OBErase+0x80>)
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	4a0a      	ldr	r2, [pc, #40]	; (8001c80 <HAL_FLASHEx_OBErase+0x80>)
 8001c58:	f023 0320 	bic.w	r3, r3, #32
 8001c5c:	6113      	str	r3, [r2, #16]

    if(status == HAL_OK)
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d105      	bne.n	8001c70 <HAL_FLASHEx_OBErase+0x70>
    {
      /* Restore the last read protection Option Byte value */
      status = FLASH_OB_RDP_LevelConfig(rdptmp);
 8001c64:	79bb      	ldrb	r3, [r7, #6]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f000 f9e6 	bl	8002038 <FLASH_OB_RDP_LevelConfig>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	71fb      	strb	r3, [r7, #7]
    }
  }

  /* Return the erase status */
  return status;
 8001c70:	79fb      	ldrb	r3, [r7, #7]
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000200 	.word	0x20000200
 8001c80:	40022000 	.word	0x40022000

08001c84 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001c90:	4b39      	ldr	r3, [pc, #228]	; (8001d78 <HAL_FLASHEx_OBProgram+0xf4>)
 8001c92:	7e1b      	ldrb	r3, [r3, #24]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d101      	bne.n	8001c9c <HAL_FLASHEx_OBProgram+0x18>
 8001c98:	2302      	movs	r3, #2
 8001c9a:	e069      	b.n	8001d70 <HAL_FLASHEx_OBProgram+0xec>
 8001c9c:	4b36      	ldr	r3, [pc, #216]	; (8001d78 <HAL_FLASHEx_OBProgram+0xf4>)
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Write protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d01a      	beq.n	8001ce4 <HAL_FLASHEx_OBProgram+0x60>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d107      	bne.n	8001cc6 <HAL_FLASHEx_OBProgram+0x42>
    {
      /* Enable of Write protection on the selected page */
      status = FLASH_OB_EnableWRP(pOBInit->WRPPage);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f000 f87a 	bl	8001db4 <FLASH_OB_EnableWRP>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	73fb      	strb	r3, [r7, #15]
 8001cc4:	e006      	b.n	8001cd4 <HAL_FLASHEx_OBProgram+0x50>
    }
    else
    {
      /* Disable of Write protection on the selected page */
      status = FLASH_OB_DisableWRP(pOBInit->WRPPage);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 f914 	bl	8001ef8 <FLASH_OB_DisableWRP>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	73fb      	strb	r3, [r7, #15]
    }
    if (status != HAL_OK)
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d004      	beq.n	8001ce4 <HAL_FLASHEx_OBProgram+0x60>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8001cda:	4b27      	ldr	r3, [pc, #156]	; (8001d78 <HAL_FLASHEx_OBProgram+0xf4>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	761a      	strb	r2, [r3, #24]
      return status;
 8001ce0:	7bfb      	ldrb	r3, [r7, #15]
 8001ce2:	e045      	b.n	8001d70 <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* Read protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d00e      	beq.n	8001d0e <HAL_FLASHEx_OBProgram+0x8a>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	7c1b      	ldrb	r3, [r3, #16]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f000 f99f 	bl	8002038 <FLASH_OB_RDP_LevelConfig>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 8001cfe:	7bfb      	ldrb	r3, [r7, #15]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d004      	beq.n	8001d0e <HAL_FLASHEx_OBProgram+0x8a>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8001d04:	4b1c      	ldr	r3, [pc, #112]	; (8001d78 <HAL_FLASHEx_OBProgram+0xf4>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	761a      	strb	r2, [r3, #24]
      return status;
 8001d0a:	7bfb      	ldrb	r3, [r7, #15]
 8001d0c:	e030      	b.n	8001d70 <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* USER configuration */
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0304 	and.w	r3, r3, #4
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d00e      	beq.n	8001d38 <HAL_FLASHEx_OBProgram+0xb4>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	7c5b      	ldrb	r3, [r3, #17]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f000 f9da 	bl	80020d8 <FLASH_OB_UserConfig>
 8001d24:	4603      	mov	r3, r0
 8001d26:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 8001d28:	7bfb      	ldrb	r3, [r7, #15]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d004      	beq.n	8001d38 <HAL_FLASHEx_OBProgram+0xb4>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8001d2e:	4b12      	ldr	r3, [pc, #72]	; (8001d78 <HAL_FLASHEx_OBProgram+0xf4>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	761a      	strb	r2, [r3, #24]
      return status;
 8001d34:	7bfb      	ldrb	r3, [r7, #15]
 8001d36:	e01b      	b.n	8001d70 <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* DATA configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_DATA) == OPTIONBYTE_DATA)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0308 	and.w	r3, r3, #8
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d011      	beq.n	8001d68 <HAL_FLASHEx_OBProgram+0xe4>
  {
    status = FLASH_OB_ProgramData(pOBInit->DATAAddress, pOBInit->DATAData);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	695a      	ldr	r2, [r3, #20]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	7e1b      	ldrb	r3, [r3, #24]
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4610      	mov	r0, r2
 8001d50:	f000 f9fa 	bl	8002148 <FLASH_OB_ProgramData>
 8001d54:	4603      	mov	r3, r0
 8001d56:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d004      	beq.n	8001d68 <HAL_FLASHEx_OBProgram+0xe4>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8001d5e:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <HAL_FLASHEx_OBProgram+0xf4>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	761a      	strb	r2, [r3, #24]
      return status;
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
 8001d66:	e003      	b.n	8001d70 <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001d68:	4b03      	ldr	r3, [pc, #12]	; (8001d78 <HAL_FLASHEx_OBProgram+0xf4>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	761a      	strb	r2, [r3, #24]

  return status;
 8001d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20000200 	.word	0x20000200

08001d7c <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2207      	movs	r2, #7
 8001d88:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPPage = FLASH_OB_GetWRP();
 8001d8a:	f000 fa11 	bl	80021b0 <FLASH_OB_GetWRP>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 8001d94:	f000 fa16 	bl	80021c4 <FLASH_OB_GetRDP>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	741a      	strb	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8001da0:	f000 fa2c 	bl	80021fc <FLASH_OB_GetUser>
 8001da4:	4603      	mov	r3, r0
 8001da6:	461a      	mov	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	745a      	strb	r2, [r3, #17]
}
 8001dac:	bf00      	nop
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <FLASH_OB_EnableWRP>:
  * @param  WriteProtectPage specifies the page(s) to be write protected.
  *         The value of this parameter depend on device used within the same series 
  * @retval HAL status 
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WriteProtectPage)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	75fb      	strb	r3, [r7, #23]
  uint16_t WRP0_Data = 0xFFFF;
 8001dc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dc4:	82bb      	strh	r3, [r7, #20]
#if defined(FLASH_WRP1_WRP1)
  uint16_t WRP1_Data = 0xFFFF;
 8001dc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dca:	827b      	strh	r3, [r7, #18]
#endif /* FLASH_WRP1_WRP1 */
#if defined(FLASH_WRP2_WRP2)
  uint16_t WRP2_Data = 0xFFFF;
 8001dcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dd0:	823b      	strh	r3, [r7, #16]
#endif /* FLASH_WRP2_WRP2 */
#if defined(FLASH_WRP3_WRP3)
  uint16_t WRP3_Data = 0xFFFF;
 8001dd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dd6:	81fb      	strh	r3, [r7, #14]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(WriteProtectPage));
    
  /* Get current write protected pages and the new pages to be protected ******/
  WriteProtectPage = (uint32_t)(~((~FLASH_OB_GetWRP()) | WriteProtectPage));
 8001dd8:	f000 f9ea 	bl	80021b0 <FLASH_OB_GetWRP>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	43db      	mvns	r3, r3
 8001de2:	4013      	ands	r3, r2
 8001de4:	607b      	str	r3, [r7, #4]
  
#if defined(OB_WRP_PAGES0TO15MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
#elif defined(OB_WRP_PAGES0TO31MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	82bb      	strh	r3, [r7, #20]
#endif /* OB_WRP_PAGES0TO31MASK */
  
#if defined(OB_WRP_PAGES16TO31MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8U);
#elif defined(OB_WRP_PAGES32TO63MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8U);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	0a1b      	lsrs	r3, r3, #8
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	827b      	strh	r3, [r7, #18]
#endif /* OB_WRP_PAGES32TO63MASK */
 
#if defined(OB_WRP_PAGES64TO95MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES64TO95MASK) >> 16U);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	0c1b      	lsrs	r3, r3, #16
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	823b      	strh	r3, [r7, #16]
#if defined(OB_WRP_PAGES32TO47MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16U);
#endif /* OB_WRP_PAGES32TO47MASK */

#if defined(OB_WRP_PAGES96TO127MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES96TO127MASK) >> 24U); 
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	0e1b      	lsrs	r3, r3, #24
 8001e06:	81fb      	strh	r3, [r7, #14]
#elif defined(OB_WRP_PAGES48TO127MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24U); 
#endif /* OB_WRP_PAGES96TO127MASK */
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001e08:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001e0c:	f7ff fe62 	bl	8001ad4 <FLASH_WaitForLastOperation>
 8001e10:	4603      	mov	r3, r0
 8001e12:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8001e14:	7dfb      	ldrb	r3, [r7, #23]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d162      	bne.n	8001ee0 <FLASH_OB_EnableWRP+0x12c>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001e1a:	4b34      	ldr	r3, [pc, #208]	; (8001eec <FLASH_OB_EnableWRP+0x138>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	61da      	str	r2, [r3, #28]

    /* To be able to write again option byte, need to perform a option byte erase */
    status = HAL_FLASHEx_OBErase();
 8001e20:	f7ff feee 	bl	8001c00 <HAL_FLASHEx_OBErase>
 8001e24:	4603      	mov	r3, r0
 8001e26:	75fb      	strb	r3, [r7, #23]
    if (status == HAL_OK)  
 8001e28:	7dfb      	ldrb	r3, [r7, #23]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d158      	bne.n	8001ee0 <FLASH_OB_EnableWRP+0x12c>
    {
      /* Enable write protection */
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8001e2e:	4b30      	ldr	r3, [pc, #192]	; (8001ef0 <FLASH_OB_EnableWRP+0x13c>)
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	4a2f      	ldr	r2, [pc, #188]	; (8001ef0 <FLASH_OB_EnableWRP+0x13c>)
 8001e34:	f043 0310 	orr.w	r3, r3, #16
 8001e38:	6113      	str	r3, [r2, #16]

#if defined(FLASH_WRP0_WRP0)
      if(WRP0_Data != 0xFFU)
 8001e3a:	8abb      	ldrh	r3, [r7, #20]
 8001e3c:	2bff      	cmp	r3, #255	; 0xff
 8001e3e:	d00d      	beq.n	8001e5c <FLASH_OB_EnableWRP+0xa8>
      {
        OB->WRP0 &= WRP0_Data;
 8001e40:	4b2c      	ldr	r3, [pc, #176]	; (8001ef4 <FLASH_OB_EnableWRP+0x140>)
 8001e42:	891b      	ldrh	r3, [r3, #8]
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	492b      	ldr	r1, [pc, #172]	; (8001ef4 <FLASH_OB_EnableWRP+0x140>)
 8001e48:	8abb      	ldrh	r3, [r7, #20]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	810b      	strh	r3, [r1, #8]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001e50:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001e54:	f7ff fe3e 	bl	8001ad4 <FLASH_WaitForLastOperation>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP0_WRP0 */

#if defined(FLASH_WRP1_WRP1)
      if((status == HAL_OK) && (WRP1_Data != 0xFFU))
 8001e5c:	7dfb      	ldrb	r3, [r7, #23]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d110      	bne.n	8001e84 <FLASH_OB_EnableWRP+0xd0>
 8001e62:	8a7b      	ldrh	r3, [r7, #18]
 8001e64:	2bff      	cmp	r3, #255	; 0xff
 8001e66:	d00d      	beq.n	8001e84 <FLASH_OB_EnableWRP+0xd0>
      {
        OB->WRP1 &= WRP1_Data;
 8001e68:	4b22      	ldr	r3, [pc, #136]	; (8001ef4 <FLASH_OB_EnableWRP+0x140>)
 8001e6a:	895b      	ldrh	r3, [r3, #10]
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	4921      	ldr	r1, [pc, #132]	; (8001ef4 <FLASH_OB_EnableWRP+0x140>)
 8001e70:	8a7b      	ldrh	r3, [r7, #18]
 8001e72:	4013      	ands	r3, r2
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	814b      	strh	r3, [r1, #10]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001e78:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001e7c:	f7ff fe2a 	bl	8001ad4 <FLASH_WaitForLastOperation>
 8001e80:	4603      	mov	r3, r0
 8001e82:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP1_WRP1 */

#if defined(FLASH_WRP2_WRP2)
      if((status == HAL_OK) && (WRP2_Data != 0xFFU))
 8001e84:	7dfb      	ldrb	r3, [r7, #23]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d110      	bne.n	8001eac <FLASH_OB_EnableWRP+0xf8>
 8001e8a:	8a3b      	ldrh	r3, [r7, #16]
 8001e8c:	2bff      	cmp	r3, #255	; 0xff
 8001e8e:	d00d      	beq.n	8001eac <FLASH_OB_EnableWRP+0xf8>
      {
        OB->WRP2 &= WRP2_Data;
 8001e90:	4b18      	ldr	r3, [pc, #96]	; (8001ef4 <FLASH_OB_EnableWRP+0x140>)
 8001e92:	899b      	ldrh	r3, [r3, #12]
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	4917      	ldr	r1, [pc, #92]	; (8001ef4 <FLASH_OB_EnableWRP+0x140>)
 8001e98:	8a3b      	ldrh	r3, [r7, #16]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	818b      	strh	r3, [r1, #12]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ea0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001ea4:	f7ff fe16 	bl	8001ad4 <FLASH_WaitForLastOperation>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP2_WRP2 */

#if defined(FLASH_WRP3_WRP3)
      if((status == HAL_OK) && (WRP3_Data != 0xFFU))
 8001eac:	7dfb      	ldrb	r3, [r7, #23]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d110      	bne.n	8001ed4 <FLASH_OB_EnableWRP+0x120>
 8001eb2:	89fb      	ldrh	r3, [r7, #14]
 8001eb4:	2bff      	cmp	r3, #255	; 0xff
 8001eb6:	d00d      	beq.n	8001ed4 <FLASH_OB_EnableWRP+0x120>
      {
        OB->WRP3 &= WRP3_Data;
 8001eb8:	4b0e      	ldr	r3, [pc, #56]	; (8001ef4 <FLASH_OB_EnableWRP+0x140>)
 8001eba:	89db      	ldrh	r3, [r3, #14]
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	490d      	ldr	r1, [pc, #52]	; (8001ef4 <FLASH_OB_EnableWRP+0x140>)
 8001ec0:	89fb      	ldrh	r3, [r7, #14]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	81cb      	strh	r3, [r1, #14]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ec8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001ecc:	f7ff fe02 	bl	8001ad4 <FLASH_WaitForLastOperation>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP3_WRP3 */

      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8001ed4:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <FLASH_OB_EnableWRP+0x13c>)
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	4a05      	ldr	r2, [pc, #20]	; (8001ef0 <FLASH_OB_EnableWRP+0x13c>)
 8001eda:	f023 0310 	bic.w	r3, r3, #16
 8001ede:	6113      	str	r3, [r2, #16]
    }
  }
  
  return status;
 8001ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000200 	.word	0x20000200
 8001ef0:	40022000 	.word	0x40022000
 8001ef4:	1ffff800 	.word	0x1ffff800

08001ef8 <FLASH_OB_DisableWRP>:
  * @param  WriteProtectPage specifies the page(s) to be write unprotected.
  *         The value of this parameter depend on device used within the same series 
  * @retval HAL status 
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WriteProtectPage)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b086      	sub	sp, #24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f00:	2300      	movs	r3, #0
 8001f02:	75fb      	strb	r3, [r7, #23]
  uint16_t WRP0_Data = 0xFFFF;
 8001f04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f08:	82bb      	strh	r3, [r7, #20]
#if defined(FLASH_WRP1_WRP1)
  uint16_t WRP1_Data = 0xFFFF;
 8001f0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f0e:	827b      	strh	r3, [r7, #18]
#endif /* FLASH_WRP1_WRP1 */
#if defined(FLASH_WRP2_WRP2)
  uint16_t WRP2_Data = 0xFFFF;
 8001f10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f14:	823b      	strh	r3, [r7, #16]
#endif /* FLASH_WRP2_WRP2 */
#if defined(FLASH_WRP3_WRP3)
  uint16_t WRP3_Data = 0xFFFF;
 8001f16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f1a:	81fb      	strh	r3, [r7, #14]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(WriteProtectPage));

  /* Get current write protected pages and the new pages to be unprotected ******/
  WriteProtectPage = (FLASH_OB_GetWRP() | WriteProtectPage);
 8001f1c:	f000 f948 	bl	80021b0 <FLASH_OB_GetWRP>
 8001f20:	4602      	mov	r2, r0
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	607b      	str	r3, [r7, #4]

#if defined(OB_WRP_PAGES0TO15MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
#elif defined(OB_WRP_PAGES0TO31MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	82bb      	strh	r3, [r7, #20]
#endif /* OB_WRP_PAGES0TO31MASK */
  
#if defined(OB_WRP_PAGES16TO31MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8U);
#elif defined(OB_WRP_PAGES32TO63MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8U);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	0a1b      	lsrs	r3, r3, #8
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	827b      	strh	r3, [r7, #18]
#endif /* OB_WRP_PAGES32TO63MASK */
 
#if defined(OB_WRP_PAGES64TO95MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES64TO95MASK) >> 16U);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	0c1b      	lsrs	r3, r3, #16
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	823b      	strh	r3, [r7, #16]
#if defined(OB_WRP_PAGES32TO47MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16U);
#endif /* OB_WRP_PAGES32TO47MASK */

#if defined(OB_WRP_PAGES96TO127MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES96TO127MASK) >> 24U); 
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	0e1b      	lsrs	r3, r3, #24
 8001f48:	81fb      	strh	r3, [r7, #14]
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24U); 
#endif /* OB_WRP_PAGES96TO127MASK */

    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001f4a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001f4e:	f7ff fdc1 	bl	8001ad4 <FLASH_WaitForLastOperation>
 8001f52:	4603      	mov	r3, r0
 8001f54:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8001f56:	7dfb      	ldrb	r3, [r7, #23]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d162      	bne.n	8002022 <FLASH_OB_DisableWRP+0x12a>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001f5c:	4b33      	ldr	r3, [pc, #204]	; (800202c <FLASH_OB_DisableWRP+0x134>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	61da      	str	r2, [r3, #28]

    /* To be able to write again option byte, need to perform a option byte erase */
    status = HAL_FLASHEx_OBErase();
 8001f62:	f7ff fe4d 	bl	8001c00 <HAL_FLASHEx_OBErase>
 8001f66:	4603      	mov	r3, r0
 8001f68:	75fb      	strb	r3, [r7, #23]
    if (status == HAL_OK)  
 8001f6a:	7dfb      	ldrb	r3, [r7, #23]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d158      	bne.n	8002022 <FLASH_OB_DisableWRP+0x12a>
    {
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8001f70:	4b2f      	ldr	r3, [pc, #188]	; (8002030 <FLASH_OB_DisableWRP+0x138>)
 8001f72:	691b      	ldr	r3, [r3, #16]
 8001f74:	4a2e      	ldr	r2, [pc, #184]	; (8002030 <FLASH_OB_DisableWRP+0x138>)
 8001f76:	f043 0310 	orr.w	r3, r3, #16
 8001f7a:	6113      	str	r3, [r2, #16]

#if defined(FLASH_WRP0_WRP0)
      if(WRP0_Data != 0xFFU)
 8001f7c:	8abb      	ldrh	r3, [r7, #20]
 8001f7e:	2bff      	cmp	r3, #255	; 0xff
 8001f80:	d00d      	beq.n	8001f9e <FLASH_OB_DisableWRP+0xa6>
      {
        OB->WRP0 |= WRP0_Data;
 8001f82:	4b2c      	ldr	r3, [pc, #176]	; (8002034 <FLASH_OB_DisableWRP+0x13c>)
 8001f84:	891b      	ldrh	r3, [r3, #8]
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	492a      	ldr	r1, [pc, #168]	; (8002034 <FLASH_OB_DisableWRP+0x13c>)
 8001f8a:	8abb      	ldrh	r3, [r7, #20]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	810b      	strh	r3, [r1, #8]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001f92:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001f96:	f7ff fd9d 	bl	8001ad4 <FLASH_WaitForLastOperation>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP0_WRP0 */

#if defined(FLASH_WRP1_WRP1)
      if((status == HAL_OK) && (WRP1_Data != 0xFFU))
 8001f9e:	7dfb      	ldrb	r3, [r7, #23]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d110      	bne.n	8001fc6 <FLASH_OB_DisableWRP+0xce>
 8001fa4:	8a7b      	ldrh	r3, [r7, #18]
 8001fa6:	2bff      	cmp	r3, #255	; 0xff
 8001fa8:	d00d      	beq.n	8001fc6 <FLASH_OB_DisableWRP+0xce>
      {
        OB->WRP1 |= WRP1_Data;
 8001faa:	4b22      	ldr	r3, [pc, #136]	; (8002034 <FLASH_OB_DisableWRP+0x13c>)
 8001fac:	895b      	ldrh	r3, [r3, #10]
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	4920      	ldr	r1, [pc, #128]	; (8002034 <FLASH_OB_DisableWRP+0x13c>)
 8001fb2:	8a7b      	ldrh	r3, [r7, #18]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	814b      	strh	r3, [r1, #10]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001fba:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001fbe:	f7ff fd89 	bl	8001ad4 <FLASH_WaitForLastOperation>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP1_WRP1 */

#if defined(FLASH_WRP2_WRP2)
      if((status == HAL_OK) && (WRP2_Data != 0xFFU))
 8001fc6:	7dfb      	ldrb	r3, [r7, #23]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d110      	bne.n	8001fee <FLASH_OB_DisableWRP+0xf6>
 8001fcc:	8a3b      	ldrh	r3, [r7, #16]
 8001fce:	2bff      	cmp	r3, #255	; 0xff
 8001fd0:	d00d      	beq.n	8001fee <FLASH_OB_DisableWRP+0xf6>
      {
        OB->WRP2 |= WRP2_Data;
 8001fd2:	4b18      	ldr	r3, [pc, #96]	; (8002034 <FLASH_OB_DisableWRP+0x13c>)
 8001fd4:	899b      	ldrh	r3, [r3, #12]
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	4916      	ldr	r1, [pc, #88]	; (8002034 <FLASH_OB_DisableWRP+0x13c>)
 8001fda:	8a3b      	ldrh	r3, [r7, #16]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	818b      	strh	r3, [r1, #12]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001fe2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001fe6:	f7ff fd75 	bl	8001ad4 <FLASH_WaitForLastOperation>
 8001fea:	4603      	mov	r3, r0
 8001fec:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP2_WRP2 */

#if defined(FLASH_WRP3_WRP3)
      if((status == HAL_OK) && (WRP3_Data != 0xFFU))
 8001fee:	7dfb      	ldrb	r3, [r7, #23]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d110      	bne.n	8002016 <FLASH_OB_DisableWRP+0x11e>
 8001ff4:	89fb      	ldrh	r3, [r7, #14]
 8001ff6:	2bff      	cmp	r3, #255	; 0xff
 8001ff8:	d00d      	beq.n	8002016 <FLASH_OB_DisableWRP+0x11e>
      {
        OB->WRP3 |= WRP3_Data;
 8001ffa:	4b0e      	ldr	r3, [pc, #56]	; (8002034 <FLASH_OB_DisableWRP+0x13c>)
 8001ffc:	89db      	ldrh	r3, [r3, #14]
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	490c      	ldr	r1, [pc, #48]	; (8002034 <FLASH_OB_DisableWRP+0x13c>)
 8002002:	89fb      	ldrh	r3, [r7, #14]
 8002004:	4313      	orrs	r3, r2
 8002006:	b29b      	uxth	r3, r3
 8002008:	81cb      	strh	r3, [r1, #14]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800200a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800200e:	f7ff fd61 	bl	8001ad4 <FLASH_WaitForLastOperation>
 8002012:	4603      	mov	r3, r0
 8002014:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP3_WRP3 */

      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002016:	4b06      	ldr	r3, [pc, #24]	; (8002030 <FLASH_OB_DisableWRP+0x138>)
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	4a05      	ldr	r2, [pc, #20]	; (8002030 <FLASH_OB_DisableWRP+0x138>)
 800201c:	f023 0310 	bic.w	r3, r3, #16
 8002020:	6113      	str	r3, [r2, #16]
    }
  }
  return status;
 8002022:	7dfb      	ldrb	r3, [r7, #23]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	20000200 	.word	0x20000200
 8002030:	40022000 	.word	0x40022000
 8002034:	1ffff800 	.word	0x1ffff800

08002038 <FLASH_OB_RDP_LevelConfig>:
  *            @arg @ref OB_RDP_LEVEL_0 No protection
  *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t ReadProtectLevel)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002042:	2300      	movs	r3, #0
 8002044:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(ReadProtectLevel));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002046:	f24c 3050 	movw	r0, #50000	; 0xc350
 800204a:	f7ff fd43 	bl	8001ad4 <FLASH_WaitForLastOperation>
 800204e:	4603      	mov	r3, r0
 8002050:	73fb      	strb	r3, [r7, #15]
  
  if(status == HAL_OK)
 8002052:	7bfb      	ldrb	r3, [r7, #15]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d133      	bne.n	80020c0 <FLASH_OB_RDP_LevelConfig+0x88>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002058:	4b1c      	ldr	r3, [pc, #112]	; (80020cc <FLASH_OB_RDP_LevelConfig+0x94>)
 800205a:	2200      	movs	r2, #0
 800205c:	61da      	str	r2, [r3, #28]
    
    /* If the previous operation is completed, proceed to erase the option bytes */
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 800205e:	4b1c      	ldr	r3, [pc, #112]	; (80020d0 <FLASH_OB_RDP_LevelConfig+0x98>)
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	4a1b      	ldr	r2, [pc, #108]	; (80020d0 <FLASH_OB_RDP_LevelConfig+0x98>)
 8002064:	f043 0320 	orr.w	r3, r3, #32
 8002068:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800206a:	4b19      	ldr	r3, [pc, #100]	; (80020d0 <FLASH_OB_RDP_LevelConfig+0x98>)
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	4a18      	ldr	r2, [pc, #96]	; (80020d0 <FLASH_OB_RDP_LevelConfig+0x98>)
 8002070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002074:	6113      	str	r3, [r2, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002076:	f24c 3050 	movw	r0, #50000	; 0xc350
 800207a:	f7ff fd2b 	bl	8001ad4 <FLASH_WaitForLastOperation>
 800207e:	4603      	mov	r3, r0
 8002080:	73fb      	strb	r3, [r7, #15]

    /* If the erase operation is completed, disable the OPTER Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 8002082:	4b13      	ldr	r3, [pc, #76]	; (80020d0 <FLASH_OB_RDP_LevelConfig+0x98>)
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	4a12      	ldr	r2, [pc, #72]	; (80020d0 <FLASH_OB_RDP_LevelConfig+0x98>)
 8002088:	f023 0320 	bic.w	r3, r3, #32
 800208c:	6113      	str	r3, [r2, #16]

    if(status == HAL_OK)
 800208e:	7bfb      	ldrb	r3, [r7, #15]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d115      	bne.n	80020c0 <FLASH_OB_RDP_LevelConfig+0x88>
    {
      /* Enable the Option Bytes Programming operation */
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002094:	4b0e      	ldr	r3, [pc, #56]	; (80020d0 <FLASH_OB_RDP_LevelConfig+0x98>)
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	4a0d      	ldr	r2, [pc, #52]	; (80020d0 <FLASH_OB_RDP_LevelConfig+0x98>)
 800209a:	f043 0310 	orr.w	r3, r3, #16
 800209e:	6113      	str	r3, [r2, #16]
      
      WRITE_REG(OB->RDP, ReadProtectLevel);
 80020a0:	4b0c      	ldr	r3, [pc, #48]	; (80020d4 <FLASH_OB_RDP_LevelConfig+0x9c>)
 80020a2:	79fa      	ldrb	r2, [r7, #7]
 80020a4:	b292      	uxth	r2, r2
 80020a6:	801a      	strh	r2, [r3, #0]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE); 
 80020a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80020ac:	f7ff fd12 	bl	8001ad4 <FLASH_WaitForLastOperation>
 80020b0:	4603      	mov	r3, r0
 80020b2:	73fb      	strb	r3, [r7, #15]
      
      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 80020b4:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <FLASH_OB_RDP_LevelConfig+0x98>)
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	4a05      	ldr	r2, [pc, #20]	; (80020d0 <FLASH_OB_RDP_LevelConfig+0x98>)
 80020ba:	f023 0310 	bic.w	r3, r3, #16
 80020be:	6113      	str	r3, [r2, #16]
    }
  }
  
  return status;
 80020c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000200 	.word	0x20000200
 80020d0:	40022000 	.word	0x40022000
 80020d4:	1ffff800 	.word	0x1ffff800

080020d8 <FLASH_OB_UserConfig>:
  *         FLASH_OBR_nRST_STOP(Bit3),FLASH_OBR_nRST_STDBY(Bit4).
  *         And BFBF2(Bit5) for STM32F101xG and STM32F103xG . 
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t UserConfig)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80020e2:	2300      	movs	r3, #0
 80020e4:	73fb      	strb	r3, [r7, #15]
#if defined(FLASH_BANK2_END)
  assert_param(IS_OB_BOOT1((UserConfig&OB_BOOT1_SET)));
#endif /* FLASH_BANK2_END */

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80020e6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80020ea:	f7ff fcf3 	bl	8001ad4 <FLASH_WaitForLastOperation>
 80020ee:	4603      	mov	r3, r0
 80020f0:	73fb      	strb	r3, [r7, #15]
  
  if(status == HAL_OK)
 80020f2:	7bfb      	ldrb	r3, [r7, #15]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d11b      	bne.n	8002130 <FLASH_OB_UserConfig+0x58>
  {     
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80020f8:	4b10      	ldr	r3, [pc, #64]	; (800213c <FLASH_OB_UserConfig+0x64>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	61da      	str	r2, [r3, #28]

    /* Enable the Option Bytes Programming operation */
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 80020fe:	4b10      	ldr	r3, [pc, #64]	; (8002140 <FLASH_OB_UserConfig+0x68>)
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	4a0f      	ldr	r2, [pc, #60]	; (8002140 <FLASH_OB_UserConfig+0x68>)
 8002104:	f043 0310 	orr.w	r3, r3, #16
 8002108:	6113      	str	r3, [r2, #16]
 
#if defined(FLASH_BANK2_END)
    OB->USER = (UserConfig | 0xF0U);
#else
    OB->USER = (UserConfig | 0x88U);
 800210a:	79fb      	ldrb	r3, [r7, #7]
 800210c:	f063 0377 	orn	r3, r3, #119	; 0x77
 8002110:	b2da      	uxtb	r2, r3
 8002112:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <FLASH_OB_UserConfig+0x6c>)
 8002114:	b292      	uxth	r2, r2
 8002116:	805a      	strh	r2, [r3, #2]
#endif /* FLASH_BANK2_END */

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002118:	f24c 3050 	movw	r0, #50000	; 0xc350
 800211c:	f7ff fcda 	bl	8001ad4 <FLASH_WaitForLastOperation>
 8002120:	4603      	mov	r3, r0
 8002122:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the OPTPG Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002124:	4b06      	ldr	r3, [pc, #24]	; (8002140 <FLASH_OB_UserConfig+0x68>)
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	4a05      	ldr	r2, [pc, #20]	; (8002140 <FLASH_OB_UserConfig+0x68>)
 800212a:	f023 0310 	bic.w	r3, r3, #16
 800212e:	6113      	str	r3, [r2, #16]
  }
  
  return status; 
 8002130:	7bfb      	ldrb	r3, [r7, #15]
}
 8002132:	4618      	mov	r0, r3
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	20000200 	.word	0x20000200
 8002140:	40022000 	.word	0x40022000
 8002144:	1ffff800 	.word	0x1ffff800

08002148 <FLASH_OB_ProgramData>:
  *         This parameter can be 0x1FFFF804 or 0x1FFFF806. 
  * @param  Data specifies the data to be programmed.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_ProgramData(uint32_t Address, uint8_t Data)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002158:	f24c 3050 	movw	r0, #50000	; 0xc350
 800215c:	f7ff fcba 	bl	8001ad4 <FLASH_WaitForLastOperation>
 8002160:	4603      	mov	r3, r0
 8002162:	73fb      	strb	r3, [r7, #15]
  
  if(status == HAL_OK)
 8002164:	7bfb      	ldrb	r3, [r7, #15]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d118      	bne.n	800219c <FLASH_OB_ProgramData+0x54>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800216a:	4b0f      	ldr	r3, [pc, #60]	; (80021a8 <FLASH_OB_ProgramData+0x60>)
 800216c:	2200      	movs	r2, #0
 800216e:	61da      	str	r2, [r3, #28]

    /* Enables the Option Bytes Programming operation */
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 8002170:	4b0e      	ldr	r3, [pc, #56]	; (80021ac <FLASH_OB_ProgramData+0x64>)
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	4a0d      	ldr	r2, [pc, #52]	; (80021ac <FLASH_OB_ProgramData+0x64>)
 8002176:	f043 0310 	orr.w	r3, r3, #16
 800217a:	6113      	str	r3, [r2, #16]
    *(__IO uint16_t*)Address = Data;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	78fa      	ldrb	r2, [r7, #3]
 8002180:	b292      	uxth	r2, r2
 8002182:	801a      	strh	r2, [r3, #0]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002184:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002188:	f7ff fca4 	bl	8001ad4 <FLASH_WaitForLastOperation>
 800218c:	4603      	mov	r3, r0
 800218e:	73fb      	strb	r3, [r7, #15]
    
    /* If the program operation is completed, disable the OPTPG Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002190:	4b06      	ldr	r3, [pc, #24]	; (80021ac <FLASH_OB_ProgramData+0x64>)
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	4a05      	ldr	r2, [pc, #20]	; (80021ac <FLASH_OB_ProgramData+0x64>)
 8002196:	f023 0310 	bic.w	r3, r3, #16
 800219a:	6113      	str	r3, [r2, #16]
  }
  /* Return the Option Byte Data Program Status */
  return status;
 800219c:	7bfb      	ldrb	r3, [r7, #15]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	20000200 	.word	0x20000200
 80021ac:	40022000 	.word	0x40022000

080021b0 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval The FLASH Write Protection Option Bytes value
  */
static uint32_t FLASH_OB_GetWRP(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (uint32_t)(READ_REG(FLASH->WRPR));
 80021b4:	4b02      	ldr	r3, [pc, #8]	; (80021c0 <FLASH_OB_GetWRP+0x10>)
 80021b6:	6a1b      	ldr	r3, [r3, #32]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bc80      	pop	{r7}
 80021be:	4770      	bx	lr
 80021c0:	40022000 	.word	0x40022000

080021c4 <FLASH_OB_GetRDP>:
  *         This parameter can be one of the following values:
  *            @arg @ref OB_RDP_LEVEL_0 No protection
  *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
  uint32_t readstatus = OB_RDP_LEVEL_0;
 80021ca:	23a5      	movs	r3, #165	; 0xa5
 80021cc:	607b      	str	r3, [r7, #4]
  uint32_t tmp_reg = 0U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	603b      	str	r3, [r7, #0]
  
  /* Read RDP level bits */
  tmp_reg = READ_BIT(FLASH->OBR, FLASH_OBR_RDPRT);
 80021d2:	4b09      	ldr	r3, [pc, #36]	; (80021f8 <FLASH_OB_GetRDP+0x34>)
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	603b      	str	r3, [r7, #0]

  if (tmp_reg == FLASH_OBR_RDPRT)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d102      	bne.n	80021e8 <FLASH_OB_GetRDP+0x24>
  {
    readstatus = OB_RDP_LEVEL_1;
 80021e2:	2300      	movs	r3, #0
 80021e4:	607b      	str	r3, [r7, #4]
 80021e6:	e001      	b.n	80021ec <FLASH_OB_GetRDP+0x28>
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_0;
 80021e8:	23a5      	movs	r3, #165	; 0xa5
 80021ea:	607b      	str	r3, [r7, #4]
  }

  return readstatus;
 80021ec:	687b      	ldr	r3, [r7, #4]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr
 80021f8:	40022000 	.word	0x40022000

080021fc <FLASH_OB_GetUser>:
  * @retval The FLASH User Option Bytes values: FLASH_OBR_IWDG_SW(Bit2), 
  *         FLASH_OBR_nRST_STOP(Bit3),FLASH_OBR_nRST_STDBY(Bit4).
  *         And FLASH_OBR_BFB2(Bit5) for STM32F101xG and STM32F103xG . 
  */
static uint8_t FLASH_OB_GetUser(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return (uint8_t)((READ_REG(FLASH->OBR) & FLASH_OBR_USER) >> FLASH_POSITION_IWDGSW_BIT);
 8002200:	4b05      	ldr	r3, [pc, #20]	; (8002218 <FLASH_OB_GetUser+0x1c>)
 8002202:	69db      	ldr	r3, [r3, #28]
 8002204:	089b      	lsrs	r3, r3, #2
 8002206:	b2db      	uxtb	r3, r3
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	b2db      	uxtb	r3, r3
}
 800220e:	4618      	mov	r0, r3
 8002210:	46bd      	mov	sp, r7
 8002212:	bc80      	pop	{r7}
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	40022000 	.word	0x40022000

0800221c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800221c:	b480      	push	{r7}
 800221e:	b08b      	sub	sp, #44	; 0x2c
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002226:	2300      	movs	r3, #0
 8002228:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800222a:	2300      	movs	r3, #0
 800222c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800222e:	e169      	b.n	8002504 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002230:	2201      	movs	r2, #1
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	69fa      	ldr	r2, [r7, #28]
 8002240:	4013      	ands	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	429a      	cmp	r2, r3
 800224a:	f040 8158 	bne.w	80024fe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	4a9a      	ldr	r2, [pc, #616]	; (80024bc <HAL_GPIO_Init+0x2a0>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d05e      	beq.n	8002316 <HAL_GPIO_Init+0xfa>
 8002258:	4a98      	ldr	r2, [pc, #608]	; (80024bc <HAL_GPIO_Init+0x2a0>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d875      	bhi.n	800234a <HAL_GPIO_Init+0x12e>
 800225e:	4a98      	ldr	r2, [pc, #608]	; (80024c0 <HAL_GPIO_Init+0x2a4>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d058      	beq.n	8002316 <HAL_GPIO_Init+0xfa>
 8002264:	4a96      	ldr	r2, [pc, #600]	; (80024c0 <HAL_GPIO_Init+0x2a4>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d86f      	bhi.n	800234a <HAL_GPIO_Init+0x12e>
 800226a:	4a96      	ldr	r2, [pc, #600]	; (80024c4 <HAL_GPIO_Init+0x2a8>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d052      	beq.n	8002316 <HAL_GPIO_Init+0xfa>
 8002270:	4a94      	ldr	r2, [pc, #592]	; (80024c4 <HAL_GPIO_Init+0x2a8>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d869      	bhi.n	800234a <HAL_GPIO_Init+0x12e>
 8002276:	4a94      	ldr	r2, [pc, #592]	; (80024c8 <HAL_GPIO_Init+0x2ac>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d04c      	beq.n	8002316 <HAL_GPIO_Init+0xfa>
 800227c:	4a92      	ldr	r2, [pc, #584]	; (80024c8 <HAL_GPIO_Init+0x2ac>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d863      	bhi.n	800234a <HAL_GPIO_Init+0x12e>
 8002282:	4a92      	ldr	r2, [pc, #584]	; (80024cc <HAL_GPIO_Init+0x2b0>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d046      	beq.n	8002316 <HAL_GPIO_Init+0xfa>
 8002288:	4a90      	ldr	r2, [pc, #576]	; (80024cc <HAL_GPIO_Init+0x2b0>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d85d      	bhi.n	800234a <HAL_GPIO_Init+0x12e>
 800228e:	2b12      	cmp	r3, #18
 8002290:	d82a      	bhi.n	80022e8 <HAL_GPIO_Init+0xcc>
 8002292:	2b12      	cmp	r3, #18
 8002294:	d859      	bhi.n	800234a <HAL_GPIO_Init+0x12e>
 8002296:	a201      	add	r2, pc, #4	; (adr r2, 800229c <HAL_GPIO_Init+0x80>)
 8002298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800229c:	08002317 	.word	0x08002317
 80022a0:	080022f1 	.word	0x080022f1
 80022a4:	08002303 	.word	0x08002303
 80022a8:	08002345 	.word	0x08002345
 80022ac:	0800234b 	.word	0x0800234b
 80022b0:	0800234b 	.word	0x0800234b
 80022b4:	0800234b 	.word	0x0800234b
 80022b8:	0800234b 	.word	0x0800234b
 80022bc:	0800234b 	.word	0x0800234b
 80022c0:	0800234b 	.word	0x0800234b
 80022c4:	0800234b 	.word	0x0800234b
 80022c8:	0800234b 	.word	0x0800234b
 80022cc:	0800234b 	.word	0x0800234b
 80022d0:	0800234b 	.word	0x0800234b
 80022d4:	0800234b 	.word	0x0800234b
 80022d8:	0800234b 	.word	0x0800234b
 80022dc:	0800234b 	.word	0x0800234b
 80022e0:	080022f9 	.word	0x080022f9
 80022e4:	0800230d 	.word	0x0800230d
 80022e8:	4a79      	ldr	r2, [pc, #484]	; (80024d0 <HAL_GPIO_Init+0x2b4>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d013      	beq.n	8002316 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022ee:	e02c      	b.n	800234a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	623b      	str	r3, [r7, #32]
          break;
 80022f6:	e029      	b.n	800234c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	3304      	adds	r3, #4
 80022fe:	623b      	str	r3, [r7, #32]
          break;
 8002300:	e024      	b.n	800234c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	3308      	adds	r3, #8
 8002308:	623b      	str	r3, [r7, #32]
          break;
 800230a:	e01f      	b.n	800234c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	330c      	adds	r3, #12
 8002312:	623b      	str	r3, [r7, #32]
          break;
 8002314:	e01a      	b.n	800234c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d102      	bne.n	8002324 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800231e:	2304      	movs	r3, #4
 8002320:	623b      	str	r3, [r7, #32]
          break;
 8002322:	e013      	b.n	800234c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d105      	bne.n	8002338 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800232c:	2308      	movs	r3, #8
 800232e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69fa      	ldr	r2, [r7, #28]
 8002334:	611a      	str	r2, [r3, #16]
          break;
 8002336:	e009      	b.n	800234c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002338:	2308      	movs	r3, #8
 800233a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	69fa      	ldr	r2, [r7, #28]
 8002340:	615a      	str	r2, [r3, #20]
          break;
 8002342:	e003      	b.n	800234c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002344:	2300      	movs	r3, #0
 8002346:	623b      	str	r3, [r7, #32]
          break;
 8002348:	e000      	b.n	800234c <HAL_GPIO_Init+0x130>
          break;
 800234a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	2bff      	cmp	r3, #255	; 0xff
 8002350:	d801      	bhi.n	8002356 <HAL_GPIO_Init+0x13a>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	e001      	b.n	800235a <HAL_GPIO_Init+0x13e>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	3304      	adds	r3, #4
 800235a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	2bff      	cmp	r3, #255	; 0xff
 8002360:	d802      	bhi.n	8002368 <HAL_GPIO_Init+0x14c>
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	e002      	b.n	800236e <HAL_GPIO_Init+0x152>
 8002368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236a:	3b08      	subs	r3, #8
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	210f      	movs	r1, #15
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	fa01 f303 	lsl.w	r3, r1, r3
 800237c:	43db      	mvns	r3, r3
 800237e:	401a      	ands	r2, r3
 8002380:	6a39      	ldr	r1, [r7, #32]
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	fa01 f303 	lsl.w	r3, r1, r3
 8002388:	431a      	orrs	r2, r3
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002396:	2b00      	cmp	r3, #0
 8002398:	f000 80b1 	beq.w	80024fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800239c:	4b4d      	ldr	r3, [pc, #308]	; (80024d4 <HAL_GPIO_Init+0x2b8>)
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	4a4c      	ldr	r2, [pc, #304]	; (80024d4 <HAL_GPIO_Init+0x2b8>)
 80023a2:	f043 0301 	orr.w	r3, r3, #1
 80023a6:	6193      	str	r3, [r2, #24]
 80023a8:	4b4a      	ldr	r3, [pc, #296]	; (80024d4 <HAL_GPIO_Init+0x2b8>)
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	60bb      	str	r3, [r7, #8]
 80023b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023b4:	4a48      	ldr	r2, [pc, #288]	; (80024d8 <HAL_GPIO_Init+0x2bc>)
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	089b      	lsrs	r3, r3, #2
 80023ba:	3302      	adds	r3, #2
 80023bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c4:	f003 0303 	and.w	r3, r3, #3
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	220f      	movs	r2, #15
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	43db      	mvns	r3, r3
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	4013      	ands	r3, r2
 80023d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a40      	ldr	r2, [pc, #256]	; (80024dc <HAL_GPIO_Init+0x2c0>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d013      	beq.n	8002408 <HAL_GPIO_Init+0x1ec>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a3f      	ldr	r2, [pc, #252]	; (80024e0 <HAL_GPIO_Init+0x2c4>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d00d      	beq.n	8002404 <HAL_GPIO_Init+0x1e8>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a3e      	ldr	r2, [pc, #248]	; (80024e4 <HAL_GPIO_Init+0x2c8>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d007      	beq.n	8002400 <HAL_GPIO_Init+0x1e4>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a3d      	ldr	r2, [pc, #244]	; (80024e8 <HAL_GPIO_Init+0x2cc>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d101      	bne.n	80023fc <HAL_GPIO_Init+0x1e0>
 80023f8:	2303      	movs	r3, #3
 80023fa:	e006      	b.n	800240a <HAL_GPIO_Init+0x1ee>
 80023fc:	2304      	movs	r3, #4
 80023fe:	e004      	b.n	800240a <HAL_GPIO_Init+0x1ee>
 8002400:	2302      	movs	r3, #2
 8002402:	e002      	b.n	800240a <HAL_GPIO_Init+0x1ee>
 8002404:	2301      	movs	r3, #1
 8002406:	e000      	b.n	800240a <HAL_GPIO_Init+0x1ee>
 8002408:	2300      	movs	r3, #0
 800240a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800240c:	f002 0203 	and.w	r2, r2, #3
 8002410:	0092      	lsls	r2, r2, #2
 8002412:	4093      	lsls	r3, r2
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	4313      	orrs	r3, r2
 8002418:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800241a:	492f      	ldr	r1, [pc, #188]	; (80024d8 <HAL_GPIO_Init+0x2bc>)
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	089b      	lsrs	r3, r3, #2
 8002420:	3302      	adds	r3, #2
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d006      	beq.n	8002442 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002434:	4b2d      	ldr	r3, [pc, #180]	; (80024ec <HAL_GPIO_Init+0x2d0>)
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	492c      	ldr	r1, [pc, #176]	; (80024ec <HAL_GPIO_Init+0x2d0>)
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	4313      	orrs	r3, r2
 800243e:	608b      	str	r3, [r1, #8]
 8002440:	e006      	b.n	8002450 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002442:	4b2a      	ldr	r3, [pc, #168]	; (80024ec <HAL_GPIO_Init+0x2d0>)
 8002444:	689a      	ldr	r2, [r3, #8]
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	43db      	mvns	r3, r3
 800244a:	4928      	ldr	r1, [pc, #160]	; (80024ec <HAL_GPIO_Init+0x2d0>)
 800244c:	4013      	ands	r3, r2
 800244e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d006      	beq.n	800246a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800245c:	4b23      	ldr	r3, [pc, #140]	; (80024ec <HAL_GPIO_Init+0x2d0>)
 800245e:	68da      	ldr	r2, [r3, #12]
 8002460:	4922      	ldr	r1, [pc, #136]	; (80024ec <HAL_GPIO_Init+0x2d0>)
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	4313      	orrs	r3, r2
 8002466:	60cb      	str	r3, [r1, #12]
 8002468:	e006      	b.n	8002478 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800246a:	4b20      	ldr	r3, [pc, #128]	; (80024ec <HAL_GPIO_Init+0x2d0>)
 800246c:	68da      	ldr	r2, [r3, #12]
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	43db      	mvns	r3, r3
 8002472:	491e      	ldr	r1, [pc, #120]	; (80024ec <HAL_GPIO_Init+0x2d0>)
 8002474:	4013      	ands	r3, r2
 8002476:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d006      	beq.n	8002492 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002484:	4b19      	ldr	r3, [pc, #100]	; (80024ec <HAL_GPIO_Init+0x2d0>)
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	4918      	ldr	r1, [pc, #96]	; (80024ec <HAL_GPIO_Init+0x2d0>)
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	4313      	orrs	r3, r2
 800248e:	604b      	str	r3, [r1, #4]
 8002490:	e006      	b.n	80024a0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002492:	4b16      	ldr	r3, [pc, #88]	; (80024ec <HAL_GPIO_Init+0x2d0>)
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	43db      	mvns	r3, r3
 800249a:	4914      	ldr	r1, [pc, #80]	; (80024ec <HAL_GPIO_Init+0x2d0>)
 800249c:	4013      	ands	r3, r2
 800249e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d021      	beq.n	80024f0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024ac:	4b0f      	ldr	r3, [pc, #60]	; (80024ec <HAL_GPIO_Init+0x2d0>)
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	490e      	ldr	r1, [pc, #56]	; (80024ec <HAL_GPIO_Init+0x2d0>)
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	600b      	str	r3, [r1, #0]
 80024b8:	e021      	b.n	80024fe <HAL_GPIO_Init+0x2e2>
 80024ba:	bf00      	nop
 80024bc:	10320000 	.word	0x10320000
 80024c0:	10310000 	.word	0x10310000
 80024c4:	10220000 	.word	0x10220000
 80024c8:	10210000 	.word	0x10210000
 80024cc:	10120000 	.word	0x10120000
 80024d0:	10110000 	.word	0x10110000
 80024d4:	40021000 	.word	0x40021000
 80024d8:	40010000 	.word	0x40010000
 80024dc:	40010800 	.word	0x40010800
 80024e0:	40010c00 	.word	0x40010c00
 80024e4:	40011000 	.word	0x40011000
 80024e8:	40011400 	.word	0x40011400
 80024ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024f0:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <HAL_GPIO_Init+0x304>)
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	43db      	mvns	r3, r3
 80024f8:	4909      	ldr	r1, [pc, #36]	; (8002520 <HAL_GPIO_Init+0x304>)
 80024fa:	4013      	ands	r3, r2
 80024fc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	3301      	adds	r3, #1
 8002502:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	fa22 f303 	lsr.w	r3, r2, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	f47f ae8e 	bne.w	8002230 <HAL_GPIO_Init+0x14>
  }
}
 8002514:	bf00      	nop
 8002516:	bf00      	nop
 8002518:	372c      	adds	r7, #44	; 0x2c
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr
 8002520:	40010400 	.word	0x40010400

08002524 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800252a:	f7fe fda1 	bl	8001070 <HAL_GetTick>
 800252e:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002530:	4b45      	ldr	r3, [pc, #276]	; (8002648 <HAL_RCC_DeInit+0x124>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a44      	ldr	r2, [pc, #272]	; (8002648 <HAL_RCC_DeInit+0x124>)
 8002536:	f043 0301 	orr.w	r3, r3, #1
 800253a:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800253c:	e008      	b.n	8002550 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800253e:	f7fe fd97 	bl	8001070 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e077      	b.n	8002640 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002550:	4b3d      	ldr	r3, [pc, #244]	; (8002648 <HAL_RCC_DeInit+0x124>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0f0      	beq.n	800253e <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 800255c:	4b3a      	ldr	r3, [pc, #232]	; (8002648 <HAL_RCC_DeInit+0x124>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002564:	4a38      	ldr	r2, [pc, #224]	; (8002648 <HAL_RCC_DeInit+0x124>)
 8002566:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800256a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800256c:	f7fe fd80 	bl	8001070 <HAL_GetTick>
 8002570:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8002572:	4b35      	ldr	r3, [pc, #212]	; (8002648 <HAL_RCC_DeInit+0x124>)
 8002574:	2200      	movs	r2, #0
 8002576:	605a      	str	r2, [r3, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002578:	e00a      	b.n	8002590 <HAL_RCC_DeInit+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800257a:	f7fe fd79 	bl	8001070 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	f241 3288 	movw	r2, #5000	; 0x1388
 8002588:	4293      	cmp	r3, r2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_DeInit+0x6c>
    {
      return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e057      	b.n	8002640 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002590:	4b2d      	ldr	r3, [pc, #180]	; (8002648 <HAL_RCC_DeInit+0x124>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 030c 	and.w	r3, r3, #12
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1ee      	bne.n	800257a <HAL_RCC_DeInit+0x56>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 800259c:	4b2b      	ldr	r3, [pc, #172]	; (800264c <HAL_RCC_DeInit+0x128>)
 800259e:	4a2c      	ldr	r2, [pc, #176]	; (8002650 <HAL_RCC_DeInit+0x12c>)
 80025a0:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80025a2:	4b2c      	ldr	r3, [pc, #176]	; (8002654 <HAL_RCC_DeInit+0x130>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7fe fd20 	bl	8000fec <HAL_InitTick>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <HAL_RCC_DeInit+0x92>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e044      	b.n	8002640 <HAL_RCC_DeInit+0x11c>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80025b6:	f7fe fd5b 	bl	8001070 <HAL_GetTick>
 80025ba:	6078      	str	r0, [r7, #4]

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80025bc:	4b22      	ldr	r3, [pc, #136]	; (8002648 <HAL_RCC_DeInit+0x124>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a21      	ldr	r2, [pc, #132]	; (8002648 <HAL_RCC_DeInit+0x124>)
 80025c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025c6:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80025c8:	e008      	b.n	80025dc <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ca:	f7fe fd51 	bl	8001070 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e031      	b.n	8002640 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80025dc:	4b1a      	ldr	r3, [pc, #104]	; (8002648 <HAL_RCC_DeInit+0x124>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1f0      	bne.n	80025ca <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Ensure to reset PLLSRC and PLLMUL bits */
  CLEAR_REG(RCC->CFGR);
 80025e8:	4b17      	ldr	r3, [pc, #92]	; (8002648 <HAL_RCC_DeInit+0x124>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	605a      	str	r2, [r3, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80025ee:	f7fe fd3f 	bl	8001070 <HAL_GetTick>
 80025f2:	6078      	str	r0, [r7, #4]

  /* Reset HSEON & CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 80025f4:	4b14      	ldr	r3, [pc, #80]	; (8002648 <HAL_RCC_DeInit+0x124>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a13      	ldr	r2, [pc, #76]	; (8002648 <HAL_RCC_DeInit+0x124>)
 80025fa:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80025fe:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002600:	e008      	b.n	8002614 <HAL_RCC_DeInit+0xf0>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002602:	f7fe fd35 	bl	8001070 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b64      	cmp	r3, #100	; 0x64
 800260e:	d901      	bls.n	8002614 <HAL_RCC_DeInit+0xf0>
    {
      return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e015      	b.n	8002640 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002614:	4b0c      	ldr	r3, [pc, #48]	; (8002648 <HAL_RCC_DeInit+0x124>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1f0      	bne.n	8002602 <HAL_RCC_DeInit+0xde>
    }
  }

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8002620:	4b09      	ldr	r3, [pc, #36]	; (8002648 <HAL_RCC_DeInit+0x124>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a08      	ldr	r2, [pc, #32]	; (8002648 <HAL_RCC_DeInit+0x124>)
 8002626:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800262a:	6013      	str	r3, [r2, #0]
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
#endif /* RCC_CFGR2_PREDIV1 */

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800262c:	4b06      	ldr	r3, [pc, #24]	; (8002648 <HAL_RCC_DeInit+0x124>)
 800262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002630:	4a05      	ldr	r2, [pc, #20]	; (8002648 <HAL_RCC_DeInit+0x124>)
 8002632:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002636:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8002638:	4b03      	ldr	r3, [pc, #12]	; (8002648 <HAL_RCC_DeInit+0x124>)
 800263a:	2200      	movs	r2, #0
 800263c:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40021000 	.word	0x40021000
 800264c:	20000020 	.word	0x20000020
 8002650:	007a1200 	.word	0x007a1200
 8002654:	20000024 	.word	0x20000024

08002658 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e272      	b.n	8002b50 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b00      	cmp	r3, #0
 8002674:	f000 8087 	beq.w	8002786 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002678:	4b92      	ldr	r3, [pc, #584]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 030c 	and.w	r3, r3, #12
 8002680:	2b04      	cmp	r3, #4
 8002682:	d00c      	beq.n	800269e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002684:	4b8f      	ldr	r3, [pc, #572]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f003 030c 	and.w	r3, r3, #12
 800268c:	2b08      	cmp	r3, #8
 800268e:	d112      	bne.n	80026b6 <HAL_RCC_OscConfig+0x5e>
 8002690:	4b8c      	ldr	r3, [pc, #560]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800269c:	d10b      	bne.n	80026b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800269e:	4b89      	ldr	r3, [pc, #548]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d06c      	beq.n	8002784 <HAL_RCC_OscConfig+0x12c>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d168      	bne.n	8002784 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e24c      	b.n	8002b50 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026be:	d106      	bne.n	80026ce <HAL_RCC_OscConfig+0x76>
 80026c0:	4b80      	ldr	r3, [pc, #512]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a7f      	ldr	r2, [pc, #508]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 80026c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ca:	6013      	str	r3, [r2, #0]
 80026cc:	e02e      	b.n	800272c <HAL_RCC_OscConfig+0xd4>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10c      	bne.n	80026f0 <HAL_RCC_OscConfig+0x98>
 80026d6:	4b7b      	ldr	r3, [pc, #492]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a7a      	ldr	r2, [pc, #488]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 80026dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	4b78      	ldr	r3, [pc, #480]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a77      	ldr	r2, [pc, #476]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 80026e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ec:	6013      	str	r3, [r2, #0]
 80026ee:	e01d      	b.n	800272c <HAL_RCC_OscConfig+0xd4>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026f8:	d10c      	bne.n	8002714 <HAL_RCC_OscConfig+0xbc>
 80026fa:	4b72      	ldr	r3, [pc, #456]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a71      	ldr	r2, [pc, #452]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 8002700:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	4b6f      	ldr	r3, [pc, #444]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a6e      	ldr	r2, [pc, #440]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 800270c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	e00b      	b.n	800272c <HAL_RCC_OscConfig+0xd4>
 8002714:	4b6b      	ldr	r3, [pc, #428]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a6a      	ldr	r2, [pc, #424]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 800271a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800271e:	6013      	str	r3, [r2, #0]
 8002720:	4b68      	ldr	r3, [pc, #416]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a67      	ldr	r2, [pc, #412]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 8002726:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800272a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d013      	beq.n	800275c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002734:	f7fe fc9c 	bl	8001070 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800273c:	f7fe fc98 	bl	8001070 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b64      	cmp	r3, #100	; 0x64
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e200      	b.n	8002b50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274e:	4b5d      	ldr	r3, [pc, #372]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0f0      	beq.n	800273c <HAL_RCC_OscConfig+0xe4>
 800275a:	e014      	b.n	8002786 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275c:	f7fe fc88 	bl	8001070 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002764:	f7fe fc84 	bl	8001070 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b64      	cmp	r3, #100	; 0x64
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e1ec      	b.n	8002b50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002776:	4b53      	ldr	r3, [pc, #332]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1f0      	bne.n	8002764 <HAL_RCC_OscConfig+0x10c>
 8002782:	e000      	b.n	8002786 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002784:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d063      	beq.n	800285a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002792:	4b4c      	ldr	r3, [pc, #304]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f003 030c 	and.w	r3, r3, #12
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00b      	beq.n	80027b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800279e:	4b49      	ldr	r3, [pc, #292]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f003 030c 	and.w	r3, r3, #12
 80027a6:	2b08      	cmp	r3, #8
 80027a8:	d11c      	bne.n	80027e4 <HAL_RCC_OscConfig+0x18c>
 80027aa:	4b46      	ldr	r3, [pc, #280]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d116      	bne.n	80027e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027b6:	4b43      	ldr	r3, [pc, #268]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d005      	beq.n	80027ce <HAL_RCC_OscConfig+0x176>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d001      	beq.n	80027ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e1c0      	b.n	8002b50 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ce:	4b3d      	ldr	r3, [pc, #244]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	4939      	ldr	r1, [pc, #228]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027e2:	e03a      	b.n	800285a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d020      	beq.n	800282e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027ec:	4b36      	ldr	r3, [pc, #216]	; (80028c8 <HAL_RCC_OscConfig+0x270>)
 80027ee:	2201      	movs	r2, #1
 80027f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f2:	f7fe fc3d 	bl	8001070 <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f8:	e008      	b.n	800280c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027fa:	f7fe fc39 	bl	8001070 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e1a1      	b.n	8002b50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800280c:	4b2d      	ldr	r3, [pc, #180]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d0f0      	beq.n	80027fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002818:	4b2a      	ldr	r3, [pc, #168]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	4927      	ldr	r1, [pc, #156]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 8002828:	4313      	orrs	r3, r2
 800282a:	600b      	str	r3, [r1, #0]
 800282c:	e015      	b.n	800285a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800282e:	4b26      	ldr	r3, [pc, #152]	; (80028c8 <HAL_RCC_OscConfig+0x270>)
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002834:	f7fe fc1c 	bl	8001070 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800283c:	f7fe fc18 	bl	8001070 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e180      	b.n	8002b50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800284e:	4b1d      	ldr	r3, [pc, #116]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1f0      	bne.n	800283c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0308 	and.w	r3, r3, #8
 8002862:	2b00      	cmp	r3, #0
 8002864:	d03a      	beq.n	80028dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d019      	beq.n	80028a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800286e:	4b17      	ldr	r3, [pc, #92]	; (80028cc <HAL_RCC_OscConfig+0x274>)
 8002870:	2201      	movs	r2, #1
 8002872:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002874:	f7fe fbfc 	bl	8001070 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800287c:	f7fe fbf8 	bl	8001070 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e160      	b.n	8002b50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800288e:	4b0d      	ldr	r3, [pc, #52]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d0f0      	beq.n	800287c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800289a:	2001      	movs	r0, #1
 800289c:	f000 face 	bl	8002e3c <RCC_Delay>
 80028a0:	e01c      	b.n	80028dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028a2:	4b0a      	ldr	r3, [pc, #40]	; (80028cc <HAL_RCC_OscConfig+0x274>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a8:	f7fe fbe2 	bl	8001070 <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ae:	e00f      	b.n	80028d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028b0:	f7fe fbde 	bl	8001070 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d908      	bls.n	80028d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e146      	b.n	8002b50 <HAL_RCC_OscConfig+0x4f8>
 80028c2:	bf00      	nop
 80028c4:	40021000 	.word	0x40021000
 80028c8:	42420000 	.word	0x42420000
 80028cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d0:	4b92      	ldr	r3, [pc, #584]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1e9      	bne.n	80028b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 80a6 	beq.w	8002a36 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ea:	2300      	movs	r3, #0
 80028ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ee:	4b8b      	ldr	r3, [pc, #556]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10d      	bne.n	8002916 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028fa:	4b88      	ldr	r3, [pc, #544]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	4a87      	ldr	r2, [pc, #540]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002904:	61d3      	str	r3, [r2, #28]
 8002906:	4b85      	ldr	r3, [pc, #532]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290e:	60bb      	str	r3, [r7, #8]
 8002910:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002912:	2301      	movs	r3, #1
 8002914:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002916:	4b82      	ldr	r3, [pc, #520]	; (8002b20 <HAL_RCC_OscConfig+0x4c8>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800291e:	2b00      	cmp	r3, #0
 8002920:	d118      	bne.n	8002954 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002922:	4b7f      	ldr	r3, [pc, #508]	; (8002b20 <HAL_RCC_OscConfig+0x4c8>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a7e      	ldr	r2, [pc, #504]	; (8002b20 <HAL_RCC_OscConfig+0x4c8>)
 8002928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800292c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800292e:	f7fe fb9f 	bl	8001070 <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002936:	f7fe fb9b 	bl	8001070 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b64      	cmp	r3, #100	; 0x64
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e103      	b.n	8002b50 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002948:	4b75      	ldr	r3, [pc, #468]	; (8002b20 <HAL_RCC_OscConfig+0x4c8>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0f0      	beq.n	8002936 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d106      	bne.n	800296a <HAL_RCC_OscConfig+0x312>
 800295c:	4b6f      	ldr	r3, [pc, #444]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	4a6e      	ldr	r2, [pc, #440]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002962:	f043 0301 	orr.w	r3, r3, #1
 8002966:	6213      	str	r3, [r2, #32]
 8002968:	e02d      	b.n	80029c6 <HAL_RCC_OscConfig+0x36e>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d10c      	bne.n	800298c <HAL_RCC_OscConfig+0x334>
 8002972:	4b6a      	ldr	r3, [pc, #424]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	4a69      	ldr	r2, [pc, #420]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002978:	f023 0301 	bic.w	r3, r3, #1
 800297c:	6213      	str	r3, [r2, #32]
 800297e:	4b67      	ldr	r3, [pc, #412]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	4a66      	ldr	r2, [pc, #408]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002984:	f023 0304 	bic.w	r3, r3, #4
 8002988:	6213      	str	r3, [r2, #32]
 800298a:	e01c      	b.n	80029c6 <HAL_RCC_OscConfig+0x36e>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	2b05      	cmp	r3, #5
 8002992:	d10c      	bne.n	80029ae <HAL_RCC_OscConfig+0x356>
 8002994:	4b61      	ldr	r3, [pc, #388]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	4a60      	ldr	r2, [pc, #384]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 800299a:	f043 0304 	orr.w	r3, r3, #4
 800299e:	6213      	str	r3, [r2, #32]
 80029a0:	4b5e      	ldr	r3, [pc, #376]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	4a5d      	ldr	r2, [pc, #372]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 80029a6:	f043 0301 	orr.w	r3, r3, #1
 80029aa:	6213      	str	r3, [r2, #32]
 80029ac:	e00b      	b.n	80029c6 <HAL_RCC_OscConfig+0x36e>
 80029ae:	4b5b      	ldr	r3, [pc, #364]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	4a5a      	ldr	r2, [pc, #360]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 80029b4:	f023 0301 	bic.w	r3, r3, #1
 80029b8:	6213      	str	r3, [r2, #32]
 80029ba:	4b58      	ldr	r3, [pc, #352]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	4a57      	ldr	r2, [pc, #348]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 80029c0:	f023 0304 	bic.w	r3, r3, #4
 80029c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d015      	beq.n	80029fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ce:	f7fe fb4f 	bl	8001070 <HAL_GetTick>
 80029d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d4:	e00a      	b.n	80029ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029d6:	f7fe fb4b 	bl	8001070 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e0b1      	b.n	8002b50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ec:	4b4b      	ldr	r3, [pc, #300]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0ee      	beq.n	80029d6 <HAL_RCC_OscConfig+0x37e>
 80029f8:	e014      	b.n	8002a24 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029fa:	f7fe fb39 	bl	8001070 <HAL_GetTick>
 80029fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a00:	e00a      	b.n	8002a18 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a02:	f7fe fb35 	bl	8001070 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e09b      	b.n	8002b50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a18:	4b40      	ldr	r3, [pc, #256]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1ee      	bne.n	8002a02 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a24:	7dfb      	ldrb	r3, [r7, #23]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d105      	bne.n	8002a36 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a2a:	4b3c      	ldr	r3, [pc, #240]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	4a3b      	ldr	r2, [pc, #236]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002a30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a34:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 8087 	beq.w	8002b4e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a40:	4b36      	ldr	r3, [pc, #216]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f003 030c 	and.w	r3, r3, #12
 8002a48:	2b08      	cmp	r3, #8
 8002a4a:	d061      	beq.n	8002b10 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d146      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a54:	4b33      	ldr	r3, [pc, #204]	; (8002b24 <HAL_RCC_OscConfig+0x4cc>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5a:	f7fe fb09 	bl	8001070 <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a62:	f7fe fb05 	bl	8001070 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e06d      	b.n	8002b50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a74:	4b29      	ldr	r3, [pc, #164]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1f0      	bne.n	8002a62 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a88:	d108      	bne.n	8002a9c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a8a:	4b24      	ldr	r3, [pc, #144]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	4921      	ldr	r1, [pc, #132]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a9c:	4b1f      	ldr	r3, [pc, #124]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a19      	ldr	r1, [r3, #32]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aac:	430b      	orrs	r3, r1
 8002aae:	491b      	ldr	r1, [pc, #108]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ab4:	4b1b      	ldr	r3, [pc, #108]	; (8002b24 <HAL_RCC_OscConfig+0x4cc>)
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aba:	f7fe fad9 	bl	8001070 <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac2:	f7fe fad5 	bl	8001070 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e03d      	b.n	8002b50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ad4:	4b11      	ldr	r3, [pc, #68]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d0f0      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x46a>
 8002ae0:	e035      	b.n	8002b4e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae2:	4b10      	ldr	r3, [pc, #64]	; (8002b24 <HAL_RCC_OscConfig+0x4cc>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae8:	f7fe fac2 	bl	8001070 <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af0:	f7fe fabe 	bl	8001070 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e026      	b.n	8002b50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b02:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1f0      	bne.n	8002af0 <HAL_RCC_OscConfig+0x498>
 8002b0e:	e01e      	b.n	8002b4e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d107      	bne.n	8002b28 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e019      	b.n	8002b50 <HAL_RCC_OscConfig+0x4f8>
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	40007000 	.word	0x40007000
 8002b24:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b28:	4b0b      	ldr	r3, [pc, #44]	; (8002b58 <HAL_RCC_OscConfig+0x500>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d106      	bne.n	8002b4a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d001      	beq.n	8002b4e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e000      	b.n	8002b50 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3718      	adds	r7, #24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40021000 	.word	0x40021000

08002b5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e0d0      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b70:	4b6a      	ldr	r3, [pc, #424]	; (8002d1c <HAL_RCC_ClockConfig+0x1c0>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d910      	bls.n	8002ba0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b7e:	4b67      	ldr	r3, [pc, #412]	; (8002d1c <HAL_RCC_ClockConfig+0x1c0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f023 0207 	bic.w	r2, r3, #7
 8002b86:	4965      	ldr	r1, [pc, #404]	; (8002d1c <HAL_RCC_ClockConfig+0x1c0>)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8e:	4b63      	ldr	r3, [pc, #396]	; (8002d1c <HAL_RCC_ClockConfig+0x1c0>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d001      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e0b8      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d020      	beq.n	8002bee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d005      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bb8:	4b59      	ldr	r3, [pc, #356]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	4a58      	ldr	r2, [pc, #352]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002bbe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002bc2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0308 	and.w	r3, r3, #8
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d005      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bd0:	4b53      	ldr	r3, [pc, #332]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	4a52      	ldr	r2, [pc, #328]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002bda:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bdc:	4b50      	ldr	r3, [pc, #320]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	494d      	ldr	r1, [pc, #308]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d040      	beq.n	8002c7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d107      	bne.n	8002c12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c02:	4b47      	ldr	r3, [pc, #284]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d115      	bne.n	8002c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e07f      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d107      	bne.n	8002c2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c1a:	4b41      	ldr	r3, [pc, #260]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d109      	bne.n	8002c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e073      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c2a:	4b3d      	ldr	r3, [pc, #244]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e06b      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c3a:	4b39      	ldr	r3, [pc, #228]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f023 0203 	bic.w	r2, r3, #3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	4936      	ldr	r1, [pc, #216]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c4c:	f7fe fa10 	bl	8001070 <HAL_GetTick>
 8002c50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c52:	e00a      	b.n	8002c6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c54:	f7fe fa0c 	bl	8001070 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e053      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c6a:	4b2d      	ldr	r3, [pc, #180]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f003 020c 	and.w	r2, r3, #12
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d1eb      	bne.n	8002c54 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c7c:	4b27      	ldr	r3, [pc, #156]	; (8002d1c <HAL_RCC_ClockConfig+0x1c0>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d210      	bcs.n	8002cac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c8a:	4b24      	ldr	r3, [pc, #144]	; (8002d1c <HAL_RCC_ClockConfig+0x1c0>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f023 0207 	bic.w	r2, r3, #7
 8002c92:	4922      	ldr	r1, [pc, #136]	; (8002d1c <HAL_RCC_ClockConfig+0x1c0>)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c9a:	4b20      	ldr	r3, [pc, #128]	; (8002d1c <HAL_RCC_ClockConfig+0x1c0>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0307 	and.w	r3, r3, #7
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d001      	beq.n	8002cac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e032      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d008      	beq.n	8002cca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cb8:	4b19      	ldr	r3, [pc, #100]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	4916      	ldr	r1, [pc, #88]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0308 	and.w	r3, r3, #8
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d009      	beq.n	8002cea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cd6:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	490e      	ldr	r1, [pc, #56]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cea:	f000 f821 	bl	8002d30 <HAL_RCC_GetSysClockFreq>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	4b0b      	ldr	r3, [pc, #44]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	091b      	lsrs	r3, r3, #4
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	490a      	ldr	r1, [pc, #40]	; (8002d24 <HAL_RCC_ClockConfig+0x1c8>)
 8002cfc:	5ccb      	ldrb	r3, [r1, r3]
 8002cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8002d02:	4a09      	ldr	r2, [pc, #36]	; (8002d28 <HAL_RCC_ClockConfig+0x1cc>)
 8002d04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d06:	4b09      	ldr	r3, [pc, #36]	; (8002d2c <HAL_RCC_ClockConfig+0x1d0>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7fe f96e 	bl	8000fec <HAL_InitTick>

  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	40022000 	.word	0x40022000
 8002d20:	40021000 	.word	0x40021000
 8002d24:	080033ac 	.word	0x080033ac
 8002d28:	20000020 	.word	0x20000020
 8002d2c:	20000024 	.word	0x20000024

08002d30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b087      	sub	sp, #28
 8002d34:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	60fb      	str	r3, [r7, #12]
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	60bb      	str	r3, [r7, #8]
 8002d3e:	2300      	movs	r3, #0
 8002d40:	617b      	str	r3, [r7, #20]
 8002d42:	2300      	movs	r3, #0
 8002d44:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d46:	2300      	movs	r3, #0
 8002d48:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d4a:	4b1e      	ldr	r3, [pc, #120]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f003 030c 	and.w	r3, r3, #12
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d002      	beq.n	8002d60 <HAL_RCC_GetSysClockFreq+0x30>
 8002d5a:	2b08      	cmp	r3, #8
 8002d5c:	d003      	beq.n	8002d66 <HAL_RCC_GetSysClockFreq+0x36>
 8002d5e:	e027      	b.n	8002db0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d60:	4b19      	ldr	r3, [pc, #100]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d62:	613b      	str	r3, [r7, #16]
      break;
 8002d64:	e027      	b.n	8002db6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	0c9b      	lsrs	r3, r3, #18
 8002d6a:	f003 030f 	and.w	r3, r3, #15
 8002d6e:	4a17      	ldr	r2, [pc, #92]	; (8002dcc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d70:	5cd3      	ldrb	r3, [r2, r3]
 8002d72:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d010      	beq.n	8002da0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d7e:	4b11      	ldr	r3, [pc, #68]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	0c5b      	lsrs	r3, r3, #17
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	4a11      	ldr	r2, [pc, #68]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d8a:	5cd3      	ldrb	r3, [r2, r3]
 8002d8c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a0d      	ldr	r2, [pc, #52]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d92:	fb03 f202 	mul.w	r2, r3, r2
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d9c:	617b      	str	r3, [r7, #20]
 8002d9e:	e004      	b.n	8002daa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a0c      	ldr	r2, [pc, #48]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002da4:	fb02 f303 	mul.w	r3, r2, r3
 8002da8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	613b      	str	r3, [r7, #16]
      break;
 8002dae:	e002      	b.n	8002db6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002db0:	4b05      	ldr	r3, [pc, #20]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002db2:	613b      	str	r3, [r7, #16]
      break;
 8002db4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002db6:	693b      	ldr	r3, [r7, #16]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	371c      	adds	r7, #28
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bc80      	pop	{r7}
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	007a1200 	.word	0x007a1200
 8002dcc:	080033c4 	.word	0x080033c4
 8002dd0:	080033d4 	.word	0x080033d4
 8002dd4:	003d0900 	.word	0x003d0900

08002dd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ddc:	4b02      	ldr	r3, [pc, #8]	; (8002de8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002dde:	681b      	ldr	r3, [r3, #0]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bc80      	pop	{r7}
 8002de6:	4770      	bx	lr
 8002de8:	20000020 	.word	0x20000020

08002dec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002df0:	f7ff fff2 	bl	8002dd8 <HAL_RCC_GetHCLKFreq>
 8002df4:	4602      	mov	r2, r0
 8002df6:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	0a1b      	lsrs	r3, r3, #8
 8002dfc:	f003 0307 	and.w	r3, r3, #7
 8002e00:	4903      	ldr	r1, [pc, #12]	; (8002e10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e02:	5ccb      	ldrb	r3, [r1, r3]
 8002e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	080033bc 	.word	0x080033bc

08002e14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e18:	f7ff ffde 	bl	8002dd8 <HAL_RCC_GetHCLKFreq>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	4b05      	ldr	r3, [pc, #20]	; (8002e34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	0adb      	lsrs	r3, r3, #11
 8002e24:	f003 0307 	and.w	r3, r3, #7
 8002e28:	4903      	ldr	r1, [pc, #12]	; (8002e38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e2a:	5ccb      	ldrb	r3, [r1, r3]
 8002e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	40021000 	.word	0x40021000
 8002e38:	080033bc 	.word	0x080033bc

08002e3c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e44:	4b0a      	ldr	r3, [pc, #40]	; (8002e70 <RCC_Delay+0x34>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a0a      	ldr	r2, [pc, #40]	; (8002e74 <RCC_Delay+0x38>)
 8002e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4e:	0a5b      	lsrs	r3, r3, #9
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	fb02 f303 	mul.w	r3, r2, r3
 8002e56:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e58:	bf00      	nop
  }
  while (Delay --);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	1e5a      	subs	r2, r3, #1
 8002e5e:	60fa      	str	r2, [r7, #12]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1f9      	bne.n	8002e58 <RCC_Delay+0x1c>
}
 8002e64:	bf00      	nop
 8002e66:	bf00      	nop
 8002e68:	3714      	adds	r7, #20
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr
 8002e70:	20000020 	.word	0x20000020
 8002e74:	10624dd3 	.word	0x10624dd3

08002e78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e042      	b.n	8002f10 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d106      	bne.n	8002ea4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7fd ffe4 	bl	8000e6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2224      	movs	r2, #36	; 0x24
 8002ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68da      	ldr	r2, [r3, #12]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002eba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 f9af 	bl	8003220 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	691a      	ldr	r2, [r3, #16]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ed0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	695a      	ldr	r2, [r3, #20]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ee0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68da      	ldr	r2, [r3, #12]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ef0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2220      	movs	r2, #32
 8002efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2220      	movs	r2, #32
 8002f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b08a      	sub	sp, #40	; 0x28
 8002f1c:	af02      	add	r7, sp, #8
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	603b      	str	r3, [r7, #0]
 8002f24:	4613      	mov	r3, r2
 8002f26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b20      	cmp	r3, #32
 8002f36:	d16d      	bne.n	8003014 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d002      	beq.n	8002f44 <HAL_UART_Transmit+0x2c>
 8002f3e:	88fb      	ldrh	r3, [r7, #6]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e066      	b.n	8003016 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2221      	movs	r2, #33	; 0x21
 8002f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f56:	f7fe f88b 	bl	8001070 <HAL_GetTick>
 8002f5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	88fa      	ldrh	r2, [r7, #6]
 8002f60:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	88fa      	ldrh	r2, [r7, #6]
 8002f66:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f70:	d108      	bne.n	8002f84 <HAL_UART_Transmit+0x6c>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d104      	bne.n	8002f84 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	61bb      	str	r3, [r7, #24]
 8002f82:	e003      	b.n	8002f8c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f8c:	e02a      	b.n	8002fe4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	2200      	movs	r2, #0
 8002f96:	2180      	movs	r1, #128	; 0x80
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f000 f8d2 	bl	8003142 <UART_WaitOnFlagUntilTimeout>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e036      	b.n	8003016 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10b      	bne.n	8002fc6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	881b      	ldrh	r3, [r3, #0]
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fbc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	3302      	adds	r3, #2
 8002fc2:	61bb      	str	r3, [r7, #24]
 8002fc4:	e007      	b.n	8002fd6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	781a      	ldrb	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1cf      	bne.n	8002f8e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	2140      	movs	r1, #64	; 0x40
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f000 f8a2 	bl	8003142 <UART_WaitOnFlagUntilTimeout>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e006      	b.n	8003016 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2220      	movs	r2, #32
 800300c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003010:	2300      	movs	r3, #0
 8003012:	e000      	b.n	8003016 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003014:	2302      	movs	r3, #2
  }
}
 8003016:	4618      	mov	r0, r3
 8003018:	3720      	adds	r7, #32
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b08a      	sub	sp, #40	; 0x28
 8003022:	af02      	add	r7, sp, #8
 8003024:	60f8      	str	r0, [r7, #12]
 8003026:	60b9      	str	r1, [r7, #8]
 8003028:	603b      	str	r3, [r7, #0]
 800302a:	4613      	mov	r3, r2
 800302c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800302e:	2300      	movs	r3, #0
 8003030:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b20      	cmp	r3, #32
 800303c:	d17c      	bne.n	8003138 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d002      	beq.n	800304a <HAL_UART_Receive+0x2c>
 8003044:	88fb      	ldrh	r3, [r7, #6]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e075      	b.n	800313a <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2222      	movs	r2, #34	; 0x22
 8003058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003062:	f7fe f805 	bl	8001070 <HAL_GetTick>
 8003066:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	88fa      	ldrh	r2, [r7, #6]
 800306c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	88fa      	ldrh	r2, [r7, #6]
 8003072:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800307c:	d108      	bne.n	8003090 <HAL_UART_Receive+0x72>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d104      	bne.n	8003090 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8003086:	2300      	movs	r3, #0
 8003088:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	61bb      	str	r3, [r7, #24]
 800308e:	e003      	b.n	8003098 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003094:	2300      	movs	r3, #0
 8003096:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003098:	e043      	b.n	8003122 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	9300      	str	r3, [sp, #0]
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	2200      	movs	r2, #0
 80030a2:	2120      	movs	r1, #32
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f000 f84c 	bl	8003142 <UART_WaitOnFlagUntilTimeout>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e042      	b.n	800313a <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10c      	bne.n	80030d4 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	3302      	adds	r3, #2
 80030d0:	61bb      	str	r3, [r7, #24]
 80030d2:	e01f      	b.n	8003114 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030dc:	d007      	beq.n	80030ee <HAL_UART_Receive+0xd0>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10a      	bne.n	80030fc <HAL_UART_Receive+0xde>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d106      	bne.n	80030fc <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	701a      	strb	r2, [r3, #0]
 80030fa:	e008      	b.n	800310e <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	b2db      	uxtb	r3, r3
 8003104:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003108:	b2da      	uxtb	r2, r3
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	3301      	adds	r3, #1
 8003112:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003118:	b29b      	uxth	r3, r3
 800311a:	3b01      	subs	r3, #1
 800311c:	b29a      	uxth	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003126:	b29b      	uxth	r3, r3
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1b6      	bne.n	800309a <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2220      	movs	r2, #32
 8003130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8003134:	2300      	movs	r3, #0
 8003136:	e000      	b.n	800313a <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003138:	2302      	movs	r3, #2
  }
}
 800313a:	4618      	mov	r0, r3
 800313c:	3720      	adds	r7, #32
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b090      	sub	sp, #64	; 0x40
 8003146:	af00      	add	r7, sp, #0
 8003148:	60f8      	str	r0, [r7, #12]
 800314a:	60b9      	str	r1, [r7, #8]
 800314c:	603b      	str	r3, [r7, #0]
 800314e:	4613      	mov	r3, r2
 8003150:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003152:	e050      	b.n	80031f6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003154:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800315a:	d04c      	beq.n	80031f6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800315c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800315e:	2b00      	cmp	r3, #0
 8003160:	d007      	beq.n	8003172 <UART_WaitOnFlagUntilTimeout+0x30>
 8003162:	f7fd ff85 	bl	8001070 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800316e:	429a      	cmp	r2, r3
 8003170:	d241      	bcs.n	80031f6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	330c      	adds	r3, #12
 8003178:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317c:	e853 3f00 	ldrex	r3, [r3]
 8003180:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003184:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003188:	63fb      	str	r3, [r7, #60]	; 0x3c
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	330c      	adds	r3, #12
 8003190:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003192:	637a      	str	r2, [r7, #52]	; 0x34
 8003194:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003196:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003198:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800319a:	e841 2300 	strex	r3, r2, [r1]
 800319e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80031a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1e5      	bne.n	8003172 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	3314      	adds	r3, #20
 80031ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	e853 3f00 	ldrex	r3, [r3]
 80031b4:	613b      	str	r3, [r7, #16]
   return(result);
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	f023 0301 	bic.w	r3, r3, #1
 80031bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	3314      	adds	r3, #20
 80031c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031c6:	623a      	str	r2, [r7, #32]
 80031c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ca:	69f9      	ldr	r1, [r7, #28]
 80031cc:	6a3a      	ldr	r2, [r7, #32]
 80031ce:	e841 2300 	strex	r3, r2, [r1]
 80031d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1e5      	bne.n	80031a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2220      	movs	r2, #32
 80031de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2220      	movs	r2, #32
 80031e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e00f      	b.n	8003216 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	4013      	ands	r3, r2
 8003200:	68ba      	ldr	r2, [r7, #8]
 8003202:	429a      	cmp	r2, r3
 8003204:	bf0c      	ite	eq
 8003206:	2301      	moveq	r3, #1
 8003208:	2300      	movne	r3, #0
 800320a:	b2db      	uxtb	r3, r3
 800320c:	461a      	mov	r2, r3
 800320e:	79fb      	ldrb	r3, [r7, #7]
 8003210:	429a      	cmp	r2, r3
 8003212:	d09f      	beq.n	8003154 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3740      	adds	r7, #64	; 0x40
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
	...

08003220 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68da      	ldr	r2, [r3, #12]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	4313      	orrs	r3, r2
 800324e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800325a:	f023 030c 	bic.w	r3, r3, #12
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	6812      	ldr	r2, [r2, #0]
 8003262:	68b9      	ldr	r1, [r7, #8]
 8003264:	430b      	orrs	r3, r1
 8003266:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	699a      	ldr	r2, [r3, #24]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a2c      	ldr	r2, [pc, #176]	; (8003334 <UART_SetConfig+0x114>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d103      	bne.n	8003290 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003288:	f7ff fdc4 	bl	8002e14 <HAL_RCC_GetPCLK2Freq>
 800328c:	60f8      	str	r0, [r7, #12]
 800328e:	e002      	b.n	8003296 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003290:	f7ff fdac 	bl	8002dec <HAL_RCC_GetPCLK1Freq>
 8003294:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	4613      	mov	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	009a      	lsls	r2, r3, #2
 80032a0:	441a      	add	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ac:	4a22      	ldr	r2, [pc, #136]	; (8003338 <UART_SetConfig+0x118>)
 80032ae:	fba2 2303 	umull	r2, r3, r2, r3
 80032b2:	095b      	lsrs	r3, r3, #5
 80032b4:	0119      	lsls	r1, r3, #4
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	4613      	mov	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4413      	add	r3, r2
 80032be:	009a      	lsls	r2, r3, #2
 80032c0:	441a      	add	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80032cc:	4b1a      	ldr	r3, [pc, #104]	; (8003338 <UART_SetConfig+0x118>)
 80032ce:	fba3 0302 	umull	r0, r3, r3, r2
 80032d2:	095b      	lsrs	r3, r3, #5
 80032d4:	2064      	movs	r0, #100	; 0x64
 80032d6:	fb00 f303 	mul.w	r3, r0, r3
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	3332      	adds	r3, #50	; 0x32
 80032e0:	4a15      	ldr	r2, [pc, #84]	; (8003338 <UART_SetConfig+0x118>)
 80032e2:	fba2 2303 	umull	r2, r3, r2, r3
 80032e6:	095b      	lsrs	r3, r3, #5
 80032e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032ec:	4419      	add	r1, r3
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	4613      	mov	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	009a      	lsls	r2, r3, #2
 80032f8:	441a      	add	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	fbb2 f2f3 	udiv	r2, r2, r3
 8003304:	4b0c      	ldr	r3, [pc, #48]	; (8003338 <UART_SetConfig+0x118>)
 8003306:	fba3 0302 	umull	r0, r3, r3, r2
 800330a:	095b      	lsrs	r3, r3, #5
 800330c:	2064      	movs	r0, #100	; 0x64
 800330e:	fb00 f303 	mul.w	r3, r0, r3
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	3332      	adds	r3, #50	; 0x32
 8003318:	4a07      	ldr	r2, [pc, #28]	; (8003338 <UART_SetConfig+0x118>)
 800331a:	fba2 2303 	umull	r2, r3, r2, r3
 800331e:	095b      	lsrs	r3, r3, #5
 8003320:	f003 020f 	and.w	r2, r3, #15
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	440a      	add	r2, r1
 800332a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800332c:	bf00      	nop
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40013800 	.word	0x40013800
 8003338:	51eb851f 	.word	0x51eb851f

0800333c <memset>:
 800333c:	4603      	mov	r3, r0
 800333e:	4402      	add	r2, r0
 8003340:	4293      	cmp	r3, r2
 8003342:	d100      	bne.n	8003346 <memset+0xa>
 8003344:	4770      	bx	lr
 8003346:	f803 1b01 	strb.w	r1, [r3], #1
 800334a:	e7f9      	b.n	8003340 <memset+0x4>

0800334c <__libc_init_array>:
 800334c:	b570      	push	{r4, r5, r6, lr}
 800334e:	2600      	movs	r6, #0
 8003350:	4d0c      	ldr	r5, [pc, #48]	; (8003384 <__libc_init_array+0x38>)
 8003352:	4c0d      	ldr	r4, [pc, #52]	; (8003388 <__libc_init_array+0x3c>)
 8003354:	1b64      	subs	r4, r4, r5
 8003356:	10a4      	asrs	r4, r4, #2
 8003358:	42a6      	cmp	r6, r4
 800335a:	d109      	bne.n	8003370 <__libc_init_array+0x24>
 800335c:	f000 f81a 	bl	8003394 <_init>
 8003360:	2600      	movs	r6, #0
 8003362:	4d0a      	ldr	r5, [pc, #40]	; (800338c <__libc_init_array+0x40>)
 8003364:	4c0a      	ldr	r4, [pc, #40]	; (8003390 <__libc_init_array+0x44>)
 8003366:	1b64      	subs	r4, r4, r5
 8003368:	10a4      	asrs	r4, r4, #2
 800336a:	42a6      	cmp	r6, r4
 800336c:	d105      	bne.n	800337a <__libc_init_array+0x2e>
 800336e:	bd70      	pop	{r4, r5, r6, pc}
 8003370:	f855 3b04 	ldr.w	r3, [r5], #4
 8003374:	4798      	blx	r3
 8003376:	3601      	adds	r6, #1
 8003378:	e7ee      	b.n	8003358 <__libc_init_array+0xc>
 800337a:	f855 3b04 	ldr.w	r3, [r5], #4
 800337e:	4798      	blx	r3
 8003380:	3601      	adds	r6, #1
 8003382:	e7f2      	b.n	800336a <__libc_init_array+0x1e>
 8003384:	080033d8 	.word	0x080033d8
 8003388:	080033d8 	.word	0x080033d8
 800338c:	080033d8 	.word	0x080033d8
 8003390:	080033dc 	.word	0x080033dc

08003394 <_init>:
 8003394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003396:	bf00      	nop
 8003398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800339a:	bc08      	pop	{r3}
 800339c:	469e      	mov	lr, r3
 800339e:	4770      	bx	lr

080033a0 <_fini>:
 80033a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033a2:	bf00      	nop
 80033a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033a6:	bc08      	pop	{r3}
 80033a8:	469e      	mov	lr, r3
 80033aa:	4770      	bx	lr
