
Bootlaoder_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002714  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002820  08002820  00012820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800284c  0800284c  0002f008  2**0
                  CONTENTS
  4 .ARM          00000000  0800284c  0800284c  0002f008  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800284c  0800284c  0002f008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800284c  0800284c  0001284c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002850  08002850  00012850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002854  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .APPLICATION1_SECTION 00000004  0800f000  0800f000  0002f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .APPLICATION2_SECTION 00000004  0800f004  0800f004  0002f004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000130  20000018  20000018  00030018  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  20000148  20000148  00030018  2**0
                  ALLOC
 13 .ARM.attributes 00000029  00000000  00000000  0002f008  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0002f031  2**0
                  CONTENTS, READONLY
 15 .debug_info   00009b15  00000000  00000000  0002f074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002010  00000000  00000000  00038b89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000009b8  00000000  00000000  0003aba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000758  00000000  00000000  0003b558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00017e55  00000000  00000000  0003bcb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0000c1b5  00000000  00000000  00053b05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0008595e  00000000  00000000  0005fcba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000025f4  00000000  00000000  000e5618  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000007a  00000000  00000000  000e7c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08002808 	.word	0x08002808

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08002808 	.word	0x08002808

0800014c <BL_Fetch_Commend>:
#endif

/*============================================================================
 ***********************  Software Interface Definations  ********************
 ============================================================================*/
BL_Status BL_Fetch_Commend(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0

	/* To detect the status of function */
	BL_Status Status = BL_NACK;
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]

#if((BL_CAN == ENABLE) && (ECU_CONFIG == SLAVE1))
	/*Allow Callback FIFO0 MSG pending to execute, to Handle both receiving with FIFO1(Polling) and FIFO0(interrupt) */
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING |CAN_IT_ERROR |CAN_IT_LAST_ERROR_CODE);
 8000156:	f648 0102 	movw	r1, #34818	; 0x8802
 800015a:	4816      	ldr	r0, [pc, #88]	; (80001b4 <BL_Fetch_Commend+0x68>)
 800015c:	f001 f941 	bl	80013e2 <HAL_CAN_ActivateNotification>

	/*Polling on CAN frames that come from FIFO1(FIFO1 is designed for remote frames)*/
	while(HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO1) == 0) //Polling until there is any message received
 8000160:	e003      	b.n	800016a <BL_Fetch_Commend+0x1e>
	{
		if(BL_FiFO0_Flag != 0) //Break from infinite loop if message stored in FIFO0(BL_FiFO0_Flag is set if FIFO0_Msg_pending call back is called)
 8000162:	4b15      	ldr	r3, [pc, #84]	; (80001b8 <BL_Fetch_Commend+0x6c>)
 8000164:	781b      	ldrb	r3, [r3, #0]
 8000166:	2b00      	cmp	r3, #0
 8000168:	d107      	bne.n	800017a <BL_Fetch_Commend+0x2e>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO1) == 0) //Polling until there is any message received
 800016a:	2101      	movs	r1, #1
 800016c:	4811      	ldr	r0, [pc, #68]	; (80001b4 <BL_Fetch_Commend+0x68>)
 800016e:	f001 f911 	bl	8001394 <HAL_CAN_GetRxFifoFillLevel>
 8000172:	4603      	mov	r3, r0
 8000174:	2b00      	cmp	r3, #0
 8000176:	d0f4      	beq.n	8000162 <BL_Fetch_Commend+0x16>
 8000178:	e000      	b.n	800017c <BL_Fetch_Commend+0x30>
		{
			break;
 800017a:	bf00      	nop
		}
	}

	/*Receive the message that stored in either FIFO1 or FIFO0*/
	if(BL_FiFO0_Flag != 0) //Means message stored in FIFO0
 800017c:	4b0e      	ldr	r3, [pc, #56]	; (80001b8 <BL_Fetch_Commend+0x6c>)
 800017e:	781b      	ldrb	r3, [r3, #0]
 8000180:	2b00      	cmp	r3, #0
 8000182:	d009      	beq.n	8000198 <BL_Fetch_Commend+0x4c>
	{
		BL_FiFO0_Flag = 0;
 8000184:	4b0c      	ldr	r3, [pc, #48]	; (80001b8 <BL_Fetch_Commend+0x6c>)
 8000186:	2200      	movs	r2, #0
 8000188:	701a      	strb	r2, [r3, #0]
		HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &BL_RxHeader, BL_RxData); //Receive from FIFO0
 800018a:	4b0c      	ldr	r3, [pc, #48]	; (80001bc <BL_Fetch_Commend+0x70>)
 800018c:	4a0c      	ldr	r2, [pc, #48]	; (80001c0 <BL_Fetch_Commend+0x74>)
 800018e:	2100      	movs	r1, #0
 8000190:	4808      	ldr	r0, [pc, #32]	; (80001b4 <BL_Fetch_Commend+0x68>)
 8000192:	f000 ffde 	bl	8001152 <HAL_CAN_GetRxMessage>
 8000196:	e005      	b.n	80001a4 <BL_Fetch_Commend+0x58>
	}
	else //Means message stored in FIFO1
	{
		HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO1, &BL_RxHeader, BL_RxData); //Receive from FIFO1
 8000198:	4b08      	ldr	r3, [pc, #32]	; (80001bc <BL_Fetch_Commend+0x70>)
 800019a:	4a09      	ldr	r2, [pc, #36]	; (80001c0 <BL_Fetch_Commend+0x74>)
 800019c:	2101      	movs	r1, #1
 800019e:	4805      	ldr	r0, [pc, #20]	; (80001b4 <BL_Fetch_Commend+0x68>)
 80001a0:	f000 ffd7 	bl	8001152 <HAL_CAN_GetRxMessage>
	}

	/*Select which BL_Function to call based on message_ID and Filter_match_index*/
	CAN_Select_Func();
 80001a4:	f000 faf0 	bl	8000788 <CAN_Select_Func>
				Status = BL_NACK ;
			}
		}
	}
#endif
	return Status;
 80001a8:	79fb      	ldrb	r3, [r7, #7]
}
 80001aa:	4618      	mov	r0, r3
 80001ac:	3708      	adds	r7, #8
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bd80      	pop	{r7, pc}
 80001b2:	bf00      	nop
 80001b4:	2000006c 	.word	0x2000006c
 80001b8:	20000034 	.word	0x20000034
 80001bc:	20000064 	.word	0x20000064
 80001c0:	20000038 	.word	0x20000038

080001c4 <Bootloader_Get_Version>:
 your packet is
   1- 1 byte for data length = 0x02
   2- 1 byte for commend number = 0x10
   3- 1 byte to define that is for master ECU or slave ECU "Maser = 0x00 , slave = 0x01:0x05"
 */
static void Bootloader_Get_Version (uint8_t *Host_Buffer){
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b08a      	sub	sp, #40	; 0x28
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]

	/* Sending the version and vendor id's to meet the target from command */
	const uint8_t BL_Version[4] = { CBL_VENDOR_ID, CBL_SW_MAJOR_VERSION,
 80001cc:	4b11      	ldr	r3, [pc, #68]	; (8000214 <Bootloader_Get_Version+0x50>)
 80001ce:	627b      	str	r3, [r7, #36]	; 0x24

#if((BL_CAN == ENABLE) && (ECU_CONFIG == SLAVE1))

		/*Create and initialise TxHeader*/
		CAN_TxHeaderTypeDef BL_VerTxHeader;
		BL_VerTxHeader.DLC = 4;
 80001d0:	2304      	movs	r3, #4
 80001d2:	61fb      	str	r3, [r7, #28]
		BL_VerTxHeader.ExtId = 0;
 80001d4:	2300      	movs	r3, #0
 80001d6:	613b      	str	r3, [r7, #16]
		BL_VerTxHeader.IDE = CAN_ID_STD;
 80001d8:	2300      	movs	r3, #0
 80001da:	617b      	str	r3, [r7, #20]
		BL_VerTxHeader.RTR = CAN_RTR_DATA;
 80001dc:	2300      	movs	r3, #0
 80001de:	61bb      	str	r3, [r7, #24]
		BL_VerTxHeader.StdId = CAN_VER_RESP_ID; //Max value of StdId is 0x7FF(0b11111111111) i.e: 11 bit length.
 80001e0:	23f0      	movs	r3, #240	; 0xf0
 80001e2:	60fb      	str	r3, [r7, #12]
		BL_VerTxHeader.TransmitGlobalTime = DISABLE;
 80001e4:	2300      	movs	r3, #0
 80001e6:	f887 3020 	strb.w	r3, [r7, #32]

		/*Send Version CAN frame*/
		HAL_CAN_AddTxMessage(&hcan, &BL_VerTxHeader, BL_Version, BL_TxMailbox);
 80001ea:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80001ee:	f107 010c 	add.w	r1, r7, #12
 80001f2:	4b09      	ldr	r3, [pc, #36]	; (8000218 <Bootloader_Get_Version+0x54>)
 80001f4:	4809      	ldr	r0, [pc, #36]	; (800021c <Bootloader_Get_Version+0x58>)
 80001f6:	f000 feba 	bl	8000f6e <HAL_CAN_AddTxMessage>
		while(HAL_CAN_IsTxMessagePending(&hcan, PEND_ON_ALL_TRANSMIT_MAILBOXES)); //In Retransmit mode make this with timer to detect error and avoid infinite loop.
 80001fa:	bf00      	nop
 80001fc:	2107      	movs	r1, #7
 80001fe:	4807      	ldr	r0, [pc, #28]	; (800021c <Bootloader_Get_Version+0x58>)
 8000200:	f000 ff84 	bl	800110c <HAL_CAN_IsTxMessagePending>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	d1f8      	bne.n	80001fc <Bootloader_Get_Version+0x38>
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
		BL_PrintMassage("You sent wrong id that is not exist in ECU tree\r\n");
#endif
			}
#endif
}
 800020a:	bf00      	nop
 800020c:	bf00      	nop
 800020e:	3728      	adds	r7, #40	; 0x28
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}
 8000214:	01010464 	.word	0x01010464
 8000218:	20000054 	.word	0x20000054
 800021c:	2000006c 	.word	0x2000006c

08000220 <CBL_STM32F103_GET_RDP_Level>:

/* Get level of protection to flash memory */
static uint8_t CBL_STM32F103_GET_RDP_Level (){
 8000220:	b580      	push	{r7, lr}
 8000222:	b088      	sub	sp, #32
 8000224:	af00      	add	r7, sp, #0
	/* paramter input for function that get level of memory */
	FLASH_OBProgramInitTypeDef FLASH_OBProgram ;
	/* Get level of memory */
	HAL_FLASHEx_OBGetConfig(&FLASH_OBProgram);
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	4618      	mov	r0, r3
 800022a:	f001 fbc1 	bl	80019b0 <HAL_FLASHEx_OBGetConfig>
	/* Assign protection level in parameter [in\out] */
	return (uint8_t)FLASH_OBProgram.RDPLevel ;
 800022e:	7d3b      	ldrb	r3, [r7, #20]
}
 8000230:	4618      	mov	r0, r3
 8000232:	3720      	adds	r7, #32
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}

08000238 <CBL_STM32F103_GET_WDP_Level>:


/* Get level of protection to flash memory */
static uint8_t CBL_STM32F103_GET_WDP_Level (){
 8000238:	b580      	push	{r7, lr}
 800023a:	b088      	sub	sp, #32
 800023c:	af00      	add	r7, sp, #0
	/* paramter input for function that get level of memory */
	FLASH_OBProgramInitTypeDef FLASH_OBProgram ;
	/* Get level of memory */
	HAL_FLASHEx_OBGetConfig(&FLASH_OBProgram);
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	4618      	mov	r0, r3
 8000242:	f001 fbb5 	bl	80019b0 <HAL_FLASHEx_OBGetConfig>
	/* Assign protection level in parameter [in\out] */
	return (uint8_t)FLASH_OBProgram.WRPPage ; //Casting to uint8_t as I care only with first 32 pages as STM is low density(casting would change for higher densities)
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	b2db      	uxtb	r3, r3
}
 800024a:	4618      	mov	r0, r3
 800024c:	3720      	adds	r7, #32
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
	...

08000254 <Host_Jump_Address_Verfication>:
	}
}


/* Verify that the address given from host is valid */
static uint8_t Host_Jump_Address_Verfication (uint32_t Jump_Address){
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
	/* TO check on state of given address is in region or not */
	uint8_t Address_Verification_State = ADDRESS_IS_INVALID ;
 800025c:	2300      	movs	r3, #0
 800025e:	73fb      	strb	r3, [r7, #15]

	/* Check that it is at RAM memory */
	if (Jump_Address>= SRAM_BASE && Jump_Address <=STM32F103_SRAM_END){
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000266:	d306      	bcc.n	8000276 <Host_Jump_Address_Verfication+0x22>
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	4a0c      	ldr	r2, [pc, #48]	; (800029c <Host_Jump_Address_Verfication+0x48>)
 800026c:	4293      	cmp	r3, r2
 800026e:	d802      	bhi.n	8000276 <Host_Jump_Address_Verfication+0x22>
		Address_Verification_State = ADDRESS_IS_VALID ;
 8000270:	2301      	movs	r3, #1
 8000272:	73fb      	strb	r3, [r7, #15]
 8000274:	e00c      	b.n	8000290 <Host_Jump_Address_Verfication+0x3c>
	}
	/* Check that it is at Flash memory */
	else if(Jump_Address>= FLASH_BASE && Jump_Address <=STM32F103_FLASH_END){
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800027c:	d306      	bcc.n	800028c <Host_Jump_Address_Verfication+0x38>
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	4a07      	ldr	r2, [pc, #28]	; (80002a0 <Host_Jump_Address_Verfication+0x4c>)
 8000282:	4293      	cmp	r3, r2
 8000284:	d802      	bhi.n	800028c <Host_Jump_Address_Verfication+0x38>
		Address_Verification_State = ADDRESS_IS_VALID ;
 8000286:	2301      	movs	r3, #1
 8000288:	73fb      	strb	r3, [r7, #15]
 800028a:	e001      	b.n	8000290 <Host_Jump_Address_Verfication+0x3c>
	}
	/* Invalid region */
	else {
		Address_Verification_State = ADDRESS_IS_INVALID ;
 800028c:	2300      	movs	r3, #0
 800028e:	73fb      	strb	r3, [r7, #15]
	}

	return Address_Verification_State ;
 8000290:	7bfb      	ldrb	r3, [r7, #15]
}
 8000292:	4618      	mov	r0, r3
 8000294:	3714      	adds	r7, #20
 8000296:	46bd      	mov	sp, r7
 8000298:	bc80      	pop	{r7}
 800029a:	4770      	bx	lr
 800029c:	20005000 	.word	0x20005000
 80002a0:	08010000 	.word	0x08010000

080002a4 <Perform_Flash_Erase>:


/* Get erasing flash actually */
static uint8_t Perform_Flash_Erase (uint32_t PageAddress, uint8_t Number_Of_Pages){
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b088      	sub	sp, #32
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
 80002ac:	460b      	mov	r3, r1
 80002ae:	70fb      	strb	r3, [r7, #3]
	/* To check that the sectors in not overflow the size of flash */
	uint8_t Page_validity_Status  = PAGE_INVALID_NUMBER ;
 80002b0:	2300      	movs	r3, #0
 80002b2:	77fb      	strb	r3, [r7, #31]
	/* Status of erasing flash */
	HAL_StatusTypeDef HAL_Status = HAL_ERROR ;
 80002b4:	2301      	movs	r3, #1
 80002b6:	77bb      	strb	r3, [r7, #30]
	/* Error sector status */
	uint32_t PageError = RESET ;
 80002b8:	2300      	movs	r3, #0
 80002ba:	61bb      	str	r3, [r7, #24]
	/* Define struct to configure parameters[in] */
	FLASH_EraseInitTypeDef pEraseInit ;
	/* Define the used bank in flash memory */
	pEraseInit.Banks = FLASH_BANK_1 ;
 80002bc:	2301      	movs	r3, #1
 80002be:	60fb      	str	r3, [r7, #12]

	/* another pages is agreed but check that is acess the number of pages in flash */
	if (Number_Of_Pages >= CBL_FLASH_MAX_PAGES_NUMBER && CBL_FLASH_MASS_ERASE != PageAddress){
 80002c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	da05      	bge.n	80002d4 <Perform_Flash_Erase+0x30>
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	2bff      	cmp	r3, #255	; 0xff
 80002cc:	d002      	beq.n	80002d4 <Perform_Flash_Erase+0x30>
		Page_validity_Status = PAGE_INVALID_NUMBER ;
 80002ce:	2300      	movs	r3, #0
 80002d0:	77fb      	strb	r3, [r7, #31]
 80002d2:	e030      	b.n	8000336 <Perform_Flash_Erase+0x92>
	/* erase all memory or specific page */
	else {
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
		BL_PrintMassage ("It is in range of flash memory \r\n");
#endif
		Page_validity_Status = PAGE_VALID_NUMBER ;
 80002d4:	2301      	movs	r3, #1
 80002d6:	77fb      	strb	r3, [r7, #31]
		pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 80002d8:	2300      	movs	r3, #0
 80002da:	60bb      	str	r3, [r7, #8]

		/* Check if he want to erase all memory flash */
		if ( CBL_FLASH_MASS_ERASE == PageAddress  ){
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	2bff      	cmp	r3, #255	; 0xff
 80002e0:	d104      	bne.n	80002ec <Perform_Flash_Erase+0x48>
			pEraseInit.PageAddress = FLASH_PAGE_BASE_ADDRESS_APP1;
 80002e2:	4b17      	ldr	r3, [pc, #92]	; (8000340 <Perform_Flash_Erase+0x9c>)
 80002e4:	613b      	str	r3, [r7, #16]
			pEraseInit.NbPages = APPLICATION_SIZE;
 80002e6:	2313      	movs	r3, #19
 80002e8:	617b      	str	r3, [r7, #20]
 80002ea:	e003      	b.n	80002f4 <Perform_Flash_Erase+0x50>
		/* erase specific page */
		else {
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
			BL_PrintMassage ("Page erase \r\n");
#endif
			pEraseInit.PageAddress = PageAddress;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	613b      	str	r3, [r7, #16]
			pEraseInit.NbPages = Number_Of_Pages;
 80002f0:	78fb      	ldrb	r3, [r7, #3]
 80002f2:	617b      	str	r3, [r7, #20]
		}

		/* To unlock flash memory */
		HAL_Status = HAL_FLASH_Unlock();
 80002f4:	f001 fa08 	bl	8001708 <HAL_FLASH_Unlock>
 80002f8:	4603      	mov	r3, r0
 80002fa:	77bb      	strb	r3, [r7, #30]

		/* if it's opened correctly */
		if (HAL_Status == HAL_OK){
 80002fc:	7fbb      	ldrb	r3, [r7, #30]
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d117      	bne.n	8000332 <Perform_Flash_Erase+0x8e>
			/* Perform a mass erase or erase the specified FLASH memory sectors */
			HAL_Status = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 8000302:	f107 0218 	add.w	r2, r7, #24
 8000306:	f107 0308 	add.w	r3, r7, #8
 800030a:	4611      	mov	r1, r2
 800030c:	4618      	mov	r0, r3
 800030e:	f001 fae3 	bl	80018d8 <HAL_FLASHEx_Erase>
 8000312:	4603      	mov	r3, r0
 8000314:	77bb      	strb	r3, [r7, #30]

			/* To check that the flash memory is erased sucessfully */
			if (HAL_SUCESSFUL_ERASE == PageError){
 8000316:	69bb      	ldr	r3, [r7, #24]
 8000318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800031c:	d102      	bne.n	8000324 <Perform_Flash_Erase+0x80>
				Page_validity_Status = SUCESSFUL_ERASE ;
 800031e:	2303      	movs	r3, #3
 8000320:	77fb      	strb	r3, [r7, #31]
 8000322:	e001      	b.n	8000328 <Perform_Flash_Erase+0x84>
			}
			/* Didn't erase*/
			else {
				Page_validity_Status = UNSUCESSFUL_ERASE ;
 8000324:	2302      	movs	r3, #2
 8000326:	77fb      	strb	r3, [r7, #31]
			}

			HAL_Status = HAL_FLASH_Lock();
 8000328:	f001 fa14 	bl	8001754 <HAL_FLASH_Lock>
 800032c:	4603      	mov	r3, r0
 800032e:	77bb      	strb	r3, [r7, #30]
 8000330:	e001      	b.n	8000336 <Perform_Flash_Erase+0x92>
		}
		/* Not opened */
		else {
			Page_validity_Status = UNSUCESSFUL_ERASE ;
 8000332:	2302      	movs	r3, #2
 8000334:	77fb      	strb	r3, [r7, #31]
		}
	}
	return Page_validity_Status ;
 8000336:	7ffb      	ldrb	r3, [r7, #31]
}
 8000338:	4618      	mov	r0, r3
 800033a:	3720      	adds	r7, #32
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}
 8000340:	08005000 	.word	0x08005000

08000344 <Bootloader_Erase_Flash>:
   1- 1 byte data length = 0x0A
   2- 1 byte commend number = 0x15
   3- 4 bytes for page address
   4- 1 byte for number of pages
 */
static void Bootloader_Erase_Flash (uint8_t *Host_Buffer){
 8000344:	b580      	push	{r7, lr}
 8000346:	b08a      	sub	sp, #40	; 0x28
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
	/* To check on Erase state */
	uint8_t Erase_Status = UNSUCESSFUL_ERASE ;
 800034c:	2302      	movs	r3, #2
 800034e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif

#if((BL_CAN == ENABLE) && (ECU_CONFIG == SLAVE1))

	/*Erase memory from begin address in &Host_Buffer[1] and with amount of pages in Host_Buffer[0]*/
	Erase_Status = Perform_Flash_Erase (*((uint32_t*)&Host_Buffer[1]), Host_Buffer[0]);
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	3301      	adds	r3, #1
 8000356:	681a      	ldr	r2, [r3, #0]
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	4619      	mov	r1, r3
 800035e:	4610      	mov	r0, r2
 8000360:	f7ff ffa0 	bl	80002a4 <Perform_Flash_Erase>
 8000364:	4603      	mov	r3, r0
 8000366:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/*Send Ack Erase status to Master*/
	CAN_TxHeaderTypeDef BL_Erase_TxHeader;

	BL_Erase_TxHeader.DLC = 1;
 800036a:	2301      	movs	r3, #1
 800036c:	61fb      	str	r3, [r7, #28]
	BL_Erase_TxHeader.ExtId = 0;
 800036e:	2300      	movs	r3, #0
 8000370:	613b      	str	r3, [r7, #16]
	BL_Erase_TxHeader.IDE = CAN_ID_STD;
 8000372:	2300      	movs	r3, #0
 8000374:	617b      	str	r3, [r7, #20]
	BL_Erase_TxHeader.RTR = CAN_RTR_DATA;
 8000376:	2300      	movs	r3, #0
 8000378:	61bb      	str	r3, [r7, #24]
	BL_Erase_TxHeader.StdId = CAN_ERASE_MEMORY_ID; //Max value of StdId is 0x7FF(0b11111111111) i.e: 11 bit length.
 800037a:	23f4      	movs	r3, #244	; 0xf4
 800037c:	60fb      	str	r3, [r7, #12]
	BL_Erase_TxHeader.TransmitGlobalTime = DISABLE;
 800037e:	2300      	movs	r3, #0
 8000380:	f887 3020 	strb.w	r3, [r7, #32]

	HAL_CAN_AddTxMessage(&hcan, &BL_Erase_TxHeader, &Erase_Status, BL_TxMailbox);
 8000384:	f107 0227 	add.w	r2, r7, #39	; 0x27
 8000388:	f107 010c 	add.w	r1, r7, #12
 800038c:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <Bootloader_Erase_Flash+0x6c>)
 800038e:	4809      	ldr	r0, [pc, #36]	; (80003b4 <Bootloader_Erase_Flash+0x70>)
 8000390:	f000 fded 	bl	8000f6e <HAL_CAN_AddTxMessage>
	while(HAL_CAN_IsTxMessagePending(&hcan, PEND_ON_ALL_TRANSMIT_MAILBOXES)); //In Retransmit mode make this with timer to detect error and avoid infinite loop.
 8000394:	bf00      	nop
 8000396:	2107      	movs	r1, #7
 8000398:	4806      	ldr	r0, [pc, #24]	; (80003b4 <Bootloader_Erase_Flash+0x70>)
 800039a:	f000 feb7 	bl	800110c <HAL_CAN_IsTxMessagePending>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d1f8      	bne.n	8000396 <Bootloader_Erase_Flash+0x52>
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
			BL_PrintMassage("Unsucessful erased\r\n");
#endif
		}
#endif
}
 80003a4:	bf00      	nop
 80003a6:	bf00      	nop
 80003a8:	3728      	adds	r7, #40	; 0x28
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	20000054 	.word	0x20000054
 80003b4:	2000006c 	.word	0x2000006c

080003b8 <Flash_Memory_Write_Payload>:


/* Write actually in flash memory */
static uint8_t Flash_Memory_Write_Payload(uint8_t *Host_PayLoad,
	uint32_t Payload_Start_Address, uint8_t Payload_Len) {
 80003b8:	b5b0      	push	{r4, r5, r7, lr}
 80003ba:	b088      	sub	sp, #32
 80003bc:	af00      	add	r7, sp, #0
 80003be:	60f8      	str	r0, [r7, #12]
 80003c0:	60b9      	str	r1, [r7, #8]
 80003c2:	4613      	mov	r3, r2
 80003c4:	71fb      	strb	r3, [r7, #7]
	/* The status in dealing HAL functions */
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 80003c6:	2301      	movs	r3, #1
 80003c8:	77fb      	strb	r3, [r7, #31]
	/* Status writing in flash memory */
	uint8_t Status = FLASH_PAYLOAD_WRITING_FAILED;
 80003ca:	2300      	movs	r3, #0
 80003cc:	77bb      	strb	r3, [r7, #30]
	/* The number of words in data appliction sections */
	uint8_t PayLoad_Counter = RESET ;
 80003ce:	2300      	movs	r3, #0
 80003d0:	777b      	strb	r3, [r7, #29]
	/* buffering half word */
	uint16_t Payload_Buffer = RESET ;
 80003d2:	2300      	movs	r3, #0
 80003d4:	837b      	strh	r3, [r7, #26]
	/* address of current writing half word */
	uint32_t Address = RESET ;
 80003d6:	2300      	movs	r3, #0
 80003d8:	617b      	str	r3, [r7, #20]

	/* Writing steps */
	/* Open flash memory */
	HAL_Status = HAL_FLASH_Unlock();
 80003da:	f001 f995 	bl	8001708 <HAL_FLASH_Unlock>
 80003de:	4603      	mov	r3, r0
 80003e0:	77fb      	strb	r3, [r7, #31]

	/* If it opened */
	if (HAL_Status == HAL_OK) {
 80003e2:	7ffb      	ldrb	r3, [r7, #31]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d134      	bne.n	8000452 <Flash_Memory_Write_Payload+0x9a>
		/* Transfer the data sections half word by half word */
		while (Payload_Len !=0 && Status == HAL_OK ){
 80003e8:	e024      	b.n	8000434 <Flash_Memory_Write_Payload+0x7c>
			Payload_Buffer = (uint16_t) Host_PayLoad[PayLoad_Counter]
 80003ea:	7f7b      	ldrb	r3, [r7, #29]
 80003ec:	68fa      	ldr	r2, [r7, #12]
 80003ee:	4413      	add	r3, r2
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	b21a      	sxth	r2, r3
													 |( (uint16_t)Host_PayLoad[PayLoad_Counter+1] << ONE_BYTE );
 80003f4:	7f7b      	ldrb	r3, [r7, #29]
 80003f6:	3301      	adds	r3, #1
 80003f8:	68f9      	ldr	r1, [r7, #12]
 80003fa:	440b      	add	r3, r1
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	021b      	lsls	r3, r3, #8
 8000400:	b21b      	sxth	r3, r3
 8000402:	4313      	orrs	r3, r2
 8000404:	b21b      	sxth	r3, r3
			Payload_Buffer = (uint16_t) Host_PayLoad[PayLoad_Counter]
 8000406:	837b      	strh	r3, [r7, #26]

			/*update the flash address each itration */
			Address = Payload_Start_Address + PayLoad_Counter ;
 8000408:	7f7b      	ldrb	r3, [r7, #29]
 800040a:	68ba      	ldr	r2, [r7, #8]
 800040c:	4413      	add	r3, r2
 800040e:	617b      	str	r3, [r7, #20]

			/*Writing the Date in the flash Halfword by Halfword */
			HAL_Status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 8000410:	8b7b      	ldrh	r3, [r7, #26]
 8000412:	2200      	movs	r2, #0
 8000414:	461c      	mov	r4, r3
 8000416:	4615      	mov	r5, r2
 8000418:	4622      	mov	r2, r4
 800041a:	462b      	mov	r3, r5
 800041c:	6979      	ldr	r1, [r7, #20]
 800041e:	2001      	movs	r0, #1
 8000420:	f001 f902 	bl	8001628 <HAL_FLASH_Program>
 8000424:	4603      	mov	r3, r0
 8000426:	77fb      	strb	r3, [r7, #31]
					Address, (uint64_t)Payload_Buffer);

			/*To increment PayLoad_Counter and stopped on new half word in host packet frame
			  To decrement Payload_Len to be sure that all of host packet frame is written
			 */
			Payload_Len-=2;
 8000428:	79fb      	ldrb	r3, [r7, #7]
 800042a:	3b02      	subs	r3, #2
 800042c:	71fb      	strb	r3, [r7, #7]
			PayLoad_Counter+=2;
 800042e:	7f7b      	ldrb	r3, [r7, #29]
 8000430:	3302      	adds	r3, #2
 8000432:	777b      	strb	r3, [r7, #29]
		while (Payload_Len !=0 && Status == HAL_OK ){
 8000434:	79fb      	ldrb	r3, [r7, #7]
 8000436:	2b00      	cmp	r3, #0
 8000438:	d002      	beq.n	8000440 <Flash_Memory_Write_Payload+0x88>
 800043a:	7fbb      	ldrb	r3, [r7, #30]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d0d4      	beq.n	80003ea <Flash_Memory_Write_Payload+0x32>
		}

		/* if function can't write on memory Status be failed */
		if (HAL_Status != HAL_OK) {
 8000440:	7ffb      	ldrb	r3, [r7, #31]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d002      	beq.n	800044c <Flash_Memory_Write_Payload+0x94>
			Status = FLASH_PAYLOAD_WRITING_FAILED;
 8000446:	2300      	movs	r3, #0
 8000448:	77bb      	strb	r3, [r7, #30]
 800044a:	e004      	b.n	8000456 <Flash_Memory_Write_Payload+0x9e>
		} else {
			/* All iterations, It can write on memory make status passed */
			Status = FLASH_PAYLOAD_WRITING_PASSED;
 800044c:	2301      	movs	r3, #1
 800044e:	77bb      	strb	r3, [r7, #30]
 8000450:	e001      	b.n	8000456 <Flash_Memory_Write_Payload+0x9e>
		}
	}
	else {
		/* If it can't open memory make status failed */
		Status = FLASH_PAYLOAD_WRITING_FAILED;
 8000452:	2300      	movs	r3, #0
 8000454:	77bb      	strb	r3, [r7, #30]
	}

	/* If all status is OK so It will lock memory */
	if (Status == FLASH_PAYLOAD_WRITING_PASSED && HAL_Status == HAL_OK) {
 8000456:	7fbb      	ldrb	r3, [r7, #30]
 8000458:	2b01      	cmp	r3, #1
 800045a:	d10f      	bne.n	800047c <Flash_Memory_Write_Payload+0xc4>
 800045c:	7ffb      	ldrb	r3, [r7, #31]
 800045e:	2b00      	cmp	r3, #0
 8000460:	d10c      	bne.n	800047c <Flash_Memory_Write_Payload+0xc4>
		HAL_Status = HAL_FLASH_Lock();
 8000462:	f001 f977 	bl	8001754 <HAL_FLASH_Lock>
 8000466:	4603      	mov	r3, r0
 8000468:	77fb      	strb	r3, [r7, #31]

		/* Check if it locked it true or not */
		if (HAL_Status != HAL_OK) {
 800046a:	7ffb      	ldrb	r3, [r7, #31]
 800046c:	2b00      	cmp	r3, #0
 800046e:	d002      	beq.n	8000476 <Flash_Memory_Write_Payload+0xbe>
			Status = FLASH_PAYLOAD_WRITING_FAILED;
 8000470:	2300      	movs	r3, #0
 8000472:	77bb      	strb	r3, [r7, #30]
		if (HAL_Status != HAL_OK) {
 8000474:	e004      	b.n	8000480 <Flash_Memory_Write_Payload+0xc8>
		} else {
			Status = FLASH_PAYLOAD_WRITING_PASSED;
 8000476:	2301      	movs	r3, #1
 8000478:	77bb      	strb	r3, [r7, #30]
		if (HAL_Status != HAL_OK) {
 800047a:	e001      	b.n	8000480 <Flash_Memory_Write_Payload+0xc8>
		}
	} else {
		/* If one of status is not OK so It will make returned status with failed */
		Status = FLASH_PAYLOAD_WRITING_FAILED;
 800047c:	2300      	movs	r3, #0
 800047e:	77bb      	strb	r3, [r7, #30]
	}
	return Status;
 8000480:	7fbb      	ldrb	r3, [r7, #30]
}
 8000482:	4618      	mov	r0, r3
 8000484:	3720      	adds	r7, #32
 8000486:	46bd      	mov	sp, r7
 8000488:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800048c <Bootloader_Memory_Write>:
   2- 1 byte commend number = 0x16
   3- 4 bytes for address
   4- 1 byte for size of writing data
   5- N bytes of data info
 */
static void Bootloader_Memory_Write (uint8_t *Host_Buffer){
 800048c:	b580      	push	{r7, lr}
 800048e:	b0ac      	sub	sp, #176	; 0xb0
 8000490:	af02      	add	r7, sp, #8
 8000492:	6078      	str	r0, [r7, #4]
	/* Base address that you will write on */
	uint32_t HOST_Address = 0;
 8000494:	2300      	movs	r3, #0
 8000496:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	/* Number of bytes that will be sent */
	uint8_t Payload_Len = 0;
 800049a:	2300      	movs	r3, #0
 800049c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
	/* The status of input address from the host */
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 80004a0:	2300      	movs	r3, #0
 80004a2:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
	/* Status writing in flash memory */
	uint8_t Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITING_FAILED;
 80004a6:	2300      	movs	r3, #0
 80004a8:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
#endif

#if((BL_CAN == ENABLE) && (ECU_CONFIG == SLAVE1))

	/* Base address that you will write on */
	HOST_Address = *((uint32_t *)(&Host_Buffer[1]));;
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80004b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	/*Receive stream of file data*/
	CAN_RxHeaderTypeDef BL_WritePrograme_RxHeader;
	uint8_t Flash_Program_File_Buffer[100];
	CAN_ReceiveData(&hcan, CAN_RX_FIFO0, &BL_WritePrograme_RxHeader, Flash_Program_File_Buffer, Payload_Len); //Receive from FIFO0 as CAN_FLASH_PROGRAM_ID is mapped to be stored in FIFO0
 80004b6:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80004ba:	b29b      	uxth	r3, r3
 80004bc:	f107 0120 	add.w	r1, r7, #32
 80004c0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80004c4:	9300      	str	r3, [sp, #0]
 80004c6:	460b      	mov	r3, r1
 80004c8:	2100      	movs	r1, #0
 80004ca:	4825      	ldr	r0, [pc, #148]	; (8000560 <Bootloader_Memory_Write+0xd4>)
 80004cc:	f000 f8b8 	bl	8000640 <CAN_ReceiveData>

	/*Create and initialise TxHeader*/
	CAN_TxHeaderTypeDef BL_WritePrograme_TxHeader;
	BL_WritePrograme_TxHeader.DLC = 1;
 80004d0:	2301      	movs	r3, #1
 80004d2:	61bb      	str	r3, [r7, #24]
	BL_WritePrograme_TxHeader.ExtId = 0;
 80004d4:	2300      	movs	r3, #0
 80004d6:	60fb      	str	r3, [r7, #12]
	BL_WritePrograme_TxHeader.IDE = CAN_ID_STD;
 80004d8:	2300      	movs	r3, #0
 80004da:	613b      	str	r3, [r7, #16]
	BL_WritePrograme_TxHeader.RTR = CAN_RTR_DATA;
 80004dc:	2300      	movs	r3, #0
 80004de:	617b      	str	r3, [r7, #20]
	BL_WritePrograme_TxHeader.StdId = CAN_FLASH_PROGRAM_ID; //Max value of StdId is 0x7FF(0b11111111111) i.e: 11 bit length.
 80004e0:	23f3      	movs	r3, #243	; 0xf3
 80004e2:	60bb      	str	r3, [r7, #8]
	BL_WritePrograme_TxHeader.TransmitGlobalTime = DISABLE;
 80004e4:	2300      	movs	r3, #0
 80004e6:	773b      	strb	r3, [r7, #28]


	Address_Verification = Host_Jump_Address_Verfication(HOST_Address);
 80004e8:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80004ec:	f7ff feb2 	bl	8000254 <Host_Jump_Address_Verfication>
 80004f0:	4603      	mov	r3, r0
 80004f2:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2

	if(Address_Verification == ADDRESS_IS_VALID)
 80004f6:	f897 30a2 	ldrb.w	r3, [r7, #162]	; 0xa2
 80004fa:	2b01      	cmp	r3, #1
 80004fc:	d11c      	bne.n	8000538 <Bootloader_Memory_Write+0xac>
	{
		Flash_Payload_Write_Status = Flash_Memory_Write_Payload(Flash_Program_File_Buffer, HOST_Address, Payload_Len);
 80004fe:	f897 20a3 	ldrb.w	r2, [r7, #163]	; 0xa3
 8000502:	f107 0320 	add.w	r3, r7, #32
 8000506:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800050a:	4618      	mov	r0, r3
 800050c:	f7ff ff54 	bl	80003b8 <Flash_Memory_Write_Payload>
 8000510:	4603      	mov	r3, r0
 8000512:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1

		/*Send Ack Status to Master*/
		HAL_CAN_AddTxMessage(&hcan, &BL_WritePrograme_TxHeader, &Flash_Payload_Write_Status, BL_TxMailbox);
 8000516:	f107 02a1 	add.w	r2, r7, #161	; 0xa1
 800051a:	f107 0108 	add.w	r1, r7, #8
 800051e:	4b11      	ldr	r3, [pc, #68]	; (8000564 <Bootloader_Memory_Write+0xd8>)
 8000520:	480f      	ldr	r0, [pc, #60]	; (8000560 <Bootloader_Memory_Write+0xd4>)
 8000522:	f000 fd24 	bl	8000f6e <HAL_CAN_AddTxMessage>
		while(HAL_CAN_IsTxMessagePending(&hcan, PEND_ON_ALL_TRANSMIT_MAILBOXES)); //In Retransmit mode make this with timer to detect error and avoid infinite loop.
 8000526:	bf00      	nop
 8000528:	2107      	movs	r1, #7
 800052a:	480d      	ldr	r0, [pc, #52]	; (8000560 <Bootloader_Memory_Write+0xd4>)
 800052c:	f000 fdee 	bl	800110c <HAL_CAN_IsTxMessagePending>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d1f8      	bne.n	8000528 <Bootloader_Memory_Write+0x9c>
			/* Report address verification failed */
			Address_Verification = ADDRESS_IS_INVALID;
			Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification, 1);
		}
#endif
}
 8000536:	e00f      	b.n	8000558 <Bootloader_Memory_Write+0xcc>
		HAL_CAN_AddTxMessage(&hcan, &BL_WritePrograme_TxHeader, &Address_Verification, BL_TxMailbox);
 8000538:	f107 02a2 	add.w	r2, r7, #162	; 0xa2
 800053c:	f107 0108 	add.w	r1, r7, #8
 8000540:	4b08      	ldr	r3, [pc, #32]	; (8000564 <Bootloader_Memory_Write+0xd8>)
 8000542:	4807      	ldr	r0, [pc, #28]	; (8000560 <Bootloader_Memory_Write+0xd4>)
 8000544:	f000 fd13 	bl	8000f6e <HAL_CAN_AddTxMessage>
		while(HAL_CAN_IsTxMessagePending(&hcan, PEND_ON_ALL_TRANSMIT_MAILBOXES)); //In Retransmit mode make this with timer to detect error and avoid infinite loop.
 8000548:	bf00      	nop
 800054a:	2107      	movs	r1, #7
 800054c:	4804      	ldr	r0, [pc, #16]	; (8000560 <Bootloader_Memory_Write+0xd4>)
 800054e:	f000 fddd 	bl	800110c <HAL_CAN_IsTxMessagePending>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d1f8      	bne.n	800054a <Bootloader_Memory_Write+0xbe>
}
 8000558:	bf00      	nop
 800055a:	37a8      	adds	r7, #168	; 0xa8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	2000006c 	.word	0x2000006c
 8000564:	20000054 	.word	0x20000054

08000568 <Bootloader_Jump_To_Address>:
   1- 1 byte data length    = 0x06
   2- 1 byte commend number = 0x12
   3- 1 byte for ECU
   4,5,6,7- 4 bytes for address
 */
static void Bootloader_Jump_To_Address (uint8_t *Host_Buffer){
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
	BL_PrintMassage ("Bootloader jump to specified address \r\n");
#endif

#if (BL_CAN == ENABLE)
	uint8_t APP = 0 ;
 8000570:	2300      	movs	r3, #0
 8000572:	73fb      	strb	r3, [r7, #15]

	HAL_CAN_AddTxMessage(&hcan, &BL_Jump_To_App_TxHeader, BL_JUMP_TO_APP, BL_TxMailbox);
	while(HAL_CAN_IsTxMessagePending(&hcan, PEND_ON_ALL_TRANSMIT_MAILBOXES)); //In Retransmit mode make this with timer to detect error and avoid infinite loop.

#elif (ECU_CONFIG == SLAVE1)
	 APP = Host_Buffer[0] ;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	73fb      	strb	r3, [r7, #15]
	 HAL_FLASH_Unlock();
 800057a:	f001 f8c5 	bl	8001708 <HAL_FLASH_Unlock>
	 Perform_Flash_Erase(FLAG_APP1_ADDRESS, 0x01);
 800057e:	2101      	movs	r1, #1
 8000580:	481b      	ldr	r0, [pc, #108]	; (80005f0 <Bootloader_Jump_To_Address+0x88>)
 8000582:	f7ff fe8f 	bl	80002a4 <Perform_Flash_Erase>

	/* To edit the application flag */
	if (APP == APPLICATION1)
 8000586:	7bfb      	ldrb	r3, [r7, #15]
 8000588:	2b01      	cmp	r3, #1
 800058a:	d114      	bne.n	80005b6 <Bootloader_Jump_To_Address+0x4e>
	{
		Write_Program_Flag(FLAG_APP1_ADDRESS, FLAG_APP_ON);
 800058c:	4b19      	ldr	r3, [pc, #100]	; (80005f4 <Bootloader_Jump_To_Address+0x8c>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4619      	mov	r1, r3
 8000592:	4817      	ldr	r0, [pc, #92]	; (80005f0 <Bootloader_Jump_To_Address+0x88>)
 8000594:	f000 f938 	bl	8000808 <Write_Program_Flag>
		Write_Program_Flag(FLAG_APP2_ADDRESS, FLAG_APP_OFF);
 8000598:	4b17      	ldr	r3, [pc, #92]	; (80005f8 <Bootloader_Jump_To_Address+0x90>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4619      	mov	r1, r3
 800059e:	4817      	ldr	r0, [pc, #92]	; (80005fc <Bootloader_Jump_To_Address+0x94>)
 80005a0:	f000 f932 	bl	8000808 <Write_Program_Flag>
		Write_Program_Flag(FLAG_BL_ADDRESS, FLAG_APP_OFF);
 80005a4:	4b14      	ldr	r3, [pc, #80]	; (80005f8 <Bootloader_Jump_To_Address+0x90>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4619      	mov	r1, r3
 80005aa:	4815      	ldr	r0, [pc, #84]	; (8000600 <Bootloader_Jump_To_Address+0x98>)
 80005ac:	f000 f92c 	bl	8000808 <Write_Program_Flag>
		HAL_NVIC_SystemReset();
 80005b0:	f001 f829 	bl	8001606 <HAL_NVIC_SystemReset>
 80005b4:	e016      	b.n	80005e4 <Bootloader_Jump_To_Address+0x7c>
	}
	else if (APP == APPLICATION2)
 80005b6:	7bfb      	ldrb	r3, [r7, #15]
 80005b8:	2b02      	cmp	r3, #2
 80005ba:	d113      	bne.n	80005e4 <Bootloader_Jump_To_Address+0x7c>
	{
		Write_Program_Flag(FLAG_APP1_ADDRESS, FLAG_APP_OFF);
 80005bc:	4b0e      	ldr	r3, [pc, #56]	; (80005f8 <Bootloader_Jump_To_Address+0x90>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4619      	mov	r1, r3
 80005c2:	480b      	ldr	r0, [pc, #44]	; (80005f0 <Bootloader_Jump_To_Address+0x88>)
 80005c4:	f000 f920 	bl	8000808 <Write_Program_Flag>
		Write_Program_Flag(FLAG_APP2_ADDRESS, FLAG_APP_ON);
 80005c8:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <Bootloader_Jump_To_Address+0x8c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4619      	mov	r1, r3
 80005ce:	480b      	ldr	r0, [pc, #44]	; (80005fc <Bootloader_Jump_To_Address+0x94>)
 80005d0:	f000 f91a 	bl	8000808 <Write_Program_Flag>
		Write_Program_Flag(FLAG_BL_ADDRESS, FLAG_APP_OFF);
 80005d4:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <Bootloader_Jump_To_Address+0x90>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4619      	mov	r1, r3
 80005da:	4809      	ldr	r0, [pc, #36]	; (8000600 <Bootloader_Jump_To_Address+0x98>)
 80005dc:	f000 f914 	bl	8000808 <Write_Program_Flag>
		HAL_NVIC_SystemReset();
 80005e0:	f001 f811 	bl	8001606 <HAL_NVIC_SystemReset>
	}
	else
	{
		/* Warning to ESP */
	}
	HAL_FLASH_Lock();//To disable writing to flash after finishing the function
 80005e4:	f001 f8b6 	bl	8001754 <HAL_FLASH_Lock>
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
		BL_PrintMassage("Address verification unsucessed\r\n");
#endif
	}
#endif
}
 80005e8:	bf00      	nop
 80005ea:	3710      	adds	r7, #16
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	0800f000 	.word	0x0800f000
 80005f4:	20000000 	.word	0x20000000
 80005f8:	20000004 	.word	0x20000004
 80005fc:	0800f004 	.word	0x0800f004
 8000600:	0801fc08 	.word	0x0801fc08

08000604 <MemCopy>:
	va_end(args);
}


void MemCopy(uint8_t* Dest_Ptr, uint8_t* Source_Ptr, uint32_t Length)
{
 8000604:	b480      	push	{r7}
 8000606:	b087      	sub	sp, #28
 8000608:	af00      	add	r7, sp, #0
 800060a:	60f8      	str	r0, [r7, #12]
 800060c:	60b9      	str	r1, [r7, #8]
 800060e:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for(i = 0; i < Length; i++)
 8000610:	2300      	movs	r3, #0
 8000612:	617b      	str	r3, [r7, #20]
 8000614:	e00a      	b.n	800062c <MemCopy+0x28>
	{
		Dest_Ptr[i] = Source_Ptr[i];
 8000616:	68ba      	ldr	r2, [r7, #8]
 8000618:	697b      	ldr	r3, [r7, #20]
 800061a:	441a      	add	r2, r3
 800061c:	68f9      	ldr	r1, [r7, #12]
 800061e:	697b      	ldr	r3, [r7, #20]
 8000620:	440b      	add	r3, r1
 8000622:	7812      	ldrb	r2, [r2, #0]
 8000624:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < Length; i++)
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	3301      	adds	r3, #1
 800062a:	617b      	str	r3, [r7, #20]
 800062c:	697a      	ldr	r2, [r7, #20]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	429a      	cmp	r2, r3
 8000632:	d3f0      	bcc.n	8000616 <MemCopy+0x12>
	}
}
 8000634:	bf00      	nop
 8000636:	bf00      	nop
 8000638:	371c      	adds	r7, #28
 800063a:	46bd      	mov	sp, r7
 800063c:	bc80      	pop	{r7}
 800063e:	4770      	bx	lr

08000640 <CAN_ReceiveData>:

/*We make this function to handle Receiving large files that are bigger than MAX_DATA_CAN_LENGTH
 * To avoid unexpected errors it is a MUST to Pass Buffer[8] or bigger to this function
 *This function will not receive any remote frame*/
void CAN_ReceiveData(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *Header, uint8_t RxData[], uint16_t Length)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b088      	sub	sp, #32
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]
 800064c:	603b      	str	r3, [r7, #0]
	uint16_t i =0;
 800064e:	2300      	movs	r3, #0
 8000650:	83fb      	strh	r3, [r7, #30]
	uint8_t RxMessage[8];
	while(i < Length)
 8000652:	e037      	b.n	80006c4 <CAN_ReceiveData+0x84>
	{
		/*Receive single CAN Message*/
		while(HAL_CAN_GetRxFifoFillLevel(hcan, RxFifo) == 0); //Polling until there is any message received
 8000654:	bf00      	nop
 8000656:	68b9      	ldr	r1, [r7, #8]
 8000658:	68f8      	ldr	r0, [r7, #12]
 800065a:	f000 fe9b 	bl	8001394 <HAL_CAN_GetRxFifoFillLevel>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d0f8      	beq.n	8000656 <CAN_ReceiveData+0x16>

		/*Get the received message information and data
		 *You may use HAL_CAN_GetRxMessage(hcan, RxFifo, Header, &RxData[i]) for better performance as there will no need to MemCopy(),
		 *but this will lead to undefined behaviour as we write to non allocated stack memory i.e: uint8 Rx[8]; Rx[9] = 10;
		 * */
		HAL_CAN_GetRxMessage(hcan, RxFifo, Header, RxMessage);
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	68b9      	ldr	r1, [r7, #8]
 800066c:	68f8      	ldr	r0, [r7, #12]
 800066e:	f000 fd70 	bl	8001152 <HAL_CAN_GetRxMessage>

		/*Remote Message should be discarded*/
		if(Header->RTR == CAN_RTR_REMOTE)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	68db      	ldr	r3, [r3, #12]
 8000676:	2b02      	cmp	r3, #2
 8000678:	d100      	bne.n	800067c <CAN_ReceiveData+0x3c>
		{
			continue;
 800067a:	e023      	b.n	80006c4 <CAN_ReceiveData+0x84>
		{
			/*Do nothing*/
		}

		/*Store Data in dedicated buffer*/
		if((i + Header->DLC) > Length) //This condition to handle when number of data in "RxData[]" is bigger than needed number of data in "Length"
 800067c:	8bfa      	ldrh	r2, [r7, #30]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	691b      	ldr	r3, [r3, #16]
 8000682:	441a      	add	r2, r3
 8000684:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000686:	429a      	cmp	r2, r3
 8000688:	d90c      	bls.n	80006a4 <CAN_ReceiveData+0x64>
		{
			MemCopy(&RxData[i], RxMessage, (Length - i)); //(Length - i) is the remaining part of the File after sending Frames of data size MAX_DATA_CAN_LENGTH from it
 800068a:	8bfb      	ldrh	r3, [r7, #30]
 800068c:	683a      	ldr	r2, [r7, #0]
 800068e:	18d0      	adds	r0, r2, r3
 8000690:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000692:	8bfb      	ldrh	r3, [r7, #30]
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	461a      	mov	r2, r3
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	4619      	mov	r1, r3
 800069e:	f7ff ffb1 	bl	8000604 <MemCopy>
 80006a2:	e009      	b.n	80006b8 <CAN_ReceiveData+0x78>
		}
		else
		{
			MemCopy(&RxData[i], RxMessage, Header->DLC);
 80006a4:	8bfb      	ldrh	r3, [r7, #30]
 80006a6:	683a      	ldr	r2, [r7, #0]
 80006a8:	18d0      	adds	r0, r2, r3
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	691a      	ldr	r2, [r3, #16]
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4619      	mov	r1, r3
 80006b4:	f7ff ffa6 	bl	8000604 <MemCopy>
		}
		i += Header->DLC;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	691b      	ldr	r3, [r3, #16]
 80006bc:	b29a      	uxth	r2, r3
 80006be:	8bfb      	ldrh	r3, [r7, #30]
 80006c0:	4413      	add	r3, r2
 80006c2:	83fb      	strh	r3, [r7, #30]
	while(i < Length)
 80006c4:	8bfa      	ldrh	r2, [r7, #30]
 80006c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d3c3      	bcc.n	8000654 <CAN_ReceiveData+0x14>
	}
}
 80006cc:	bf00      	nop
 80006ce:	bf00      	nop
 80006d0:	3720      	adds	r7, #32
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
	...

080006d8 <CAN_Read_RP_Level>:


void CAN_Read_RP_Level(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b088      	sub	sp, #32
 80006dc:	af00      	add	r7, sp, #0
	/*Create Variable to send RP level through it*/
	uint8_t RDP_Level = CBL_STM32F103_GET_RDP_Level();
 80006de:	f7ff fd9f 	bl	8000220 <CBL_STM32F103_GET_RDP_Level>
 80006e2:	4603      	mov	r3, r0
 80006e4:	77fb      	strb	r3, [r7, #31]

	/*Create and initialise TxHeader*/
	CAN_TxHeaderTypeDef BL_RPTxHeader;
	BL_RPTxHeader.DLC = 1;
 80006e6:	2301      	movs	r3, #1
 80006e8:	617b      	str	r3, [r7, #20]
	BL_RPTxHeader.ExtId = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60bb      	str	r3, [r7, #8]
	BL_RPTxHeader.IDE = CAN_ID_STD;
 80006ee:	2300      	movs	r3, #0
 80006f0:	60fb      	str	r3, [r7, #12]
	BL_RPTxHeader.RTR = CAN_RTR_DATA;
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
	BL_RPTxHeader.StdId = CAN_READ_RP_RESP_ID; //Max value of StdId is 0x7FF(0b11111111111) i.e: 11 bit length.
 80006f6:	23f1      	movs	r3, #241	; 0xf1
 80006f8:	607b      	str	r3, [r7, #4]
	BL_RPTxHeader.TransmitGlobalTime = DISABLE;
 80006fa:	2300      	movs	r3, #0
 80006fc:	763b      	strb	r3, [r7, #24]

	/*Send RP level CAN frame*/
	HAL_CAN_AddTxMessage(&hcan, &BL_RPTxHeader, &RDP_Level, BL_TxMailbox);
 80006fe:	f107 021f 	add.w	r2, r7, #31
 8000702:	1d39      	adds	r1, r7, #4
 8000704:	4b08      	ldr	r3, [pc, #32]	; (8000728 <CAN_Read_RP_Level+0x50>)
 8000706:	4809      	ldr	r0, [pc, #36]	; (800072c <CAN_Read_RP_Level+0x54>)
 8000708:	f000 fc31 	bl	8000f6e <HAL_CAN_AddTxMessage>
	while(HAL_CAN_IsTxMessagePending(&hcan, PEND_ON_ALL_TRANSMIT_MAILBOXES)); //In Retransmit mode make this with timer to detect error and avoid infinite loop.
 800070c:	bf00      	nop
 800070e:	2107      	movs	r1, #7
 8000710:	4806      	ldr	r0, [pc, #24]	; (800072c <CAN_Read_RP_Level+0x54>)
 8000712:	f000 fcfb 	bl	800110c <HAL_CAN_IsTxMessagePending>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d1f8      	bne.n	800070e <CAN_Read_RP_Level+0x36>
}
 800071c:	bf00      	nop
 800071e:	bf00      	nop
 8000720:	3720      	adds	r7, #32
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000054 	.word	0x20000054
 800072c:	2000006c 	.word	0x2000006c

08000730 <CAN_Read_WP_Level>:



void CAN_Read_WP_Level(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b088      	sub	sp, #32
 8000734:	af00      	add	r7, sp, #0
	/*Create Variable to send RP level through it*/
	uint8_t	WDP_Level = CBL_STM32F103_GET_WDP_Level();
 8000736:	f7ff fd7f 	bl	8000238 <CBL_STM32F103_GET_WDP_Level>
 800073a:	4603      	mov	r3, r0
 800073c:	77fb      	strb	r3, [r7, #31]

	/*Create and initialise TxHeader*/
	CAN_TxHeaderTypeDef BL_WPTxHeader;
	BL_WPTxHeader.DLC = 1;
 800073e:	2301      	movs	r3, #1
 8000740:	617b      	str	r3, [r7, #20]
	BL_WPTxHeader.ExtId = 0;
 8000742:	2300      	movs	r3, #0
 8000744:	60bb      	str	r3, [r7, #8]
	BL_WPTxHeader.IDE = CAN_ID_STD;
 8000746:	2300      	movs	r3, #0
 8000748:	60fb      	str	r3, [r7, #12]
	BL_WPTxHeader.RTR = CAN_RTR_DATA;
 800074a:	2300      	movs	r3, #0
 800074c:	613b      	str	r3, [r7, #16]
	BL_WPTxHeader.StdId = CAN_READ_WP_RESP_ID; //Max value of StdId is 0x7FF(0b11111111111) i.e: 11 bit length.
 800074e:	23f2      	movs	r3, #242	; 0xf2
 8000750:	607b      	str	r3, [r7, #4]
	BL_WPTxHeader.TransmitGlobalTime = DISABLE;
 8000752:	2300      	movs	r3, #0
 8000754:	763b      	strb	r3, [r7, #24]

	/*Send RP level CAN frame*/
	HAL_CAN_AddTxMessage(&hcan, &BL_WPTxHeader, &WDP_Level, BL_TxMailbox);
 8000756:	f107 021f 	add.w	r2, r7, #31
 800075a:	1d39      	adds	r1, r7, #4
 800075c:	4b08      	ldr	r3, [pc, #32]	; (8000780 <CAN_Read_WP_Level+0x50>)
 800075e:	4809      	ldr	r0, [pc, #36]	; (8000784 <CAN_Read_WP_Level+0x54>)
 8000760:	f000 fc05 	bl	8000f6e <HAL_CAN_AddTxMessage>
	while(HAL_CAN_IsTxMessagePending(&hcan, PEND_ON_ALL_TRANSMIT_MAILBOXES)); //In Retransmit mode make this with timer to detect error and avoid infinite loop.
 8000764:	bf00      	nop
 8000766:	2107      	movs	r1, #7
 8000768:	4806      	ldr	r0, [pc, #24]	; (8000784 <CAN_Read_WP_Level+0x54>)
 800076a:	f000 fccf 	bl	800110c <HAL_CAN_IsTxMessagePending>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d1f8      	bne.n	8000766 <CAN_Read_WP_Level+0x36>
}
 8000774:	bf00      	nop
 8000776:	bf00      	nop
 8000778:	3720      	adds	r7, #32
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000054 	.word	0x20000054
 8000784:	2000006c 	.word	0x2000006c

08000788 <CAN_Select_Func>:
	}
}


void CAN_Select_Func(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	/*Select which Bootloader Function to enter*/
	if(BL_RxHeader.FilterMatchIndex == CAN_MATCH_FILTER_INDEX0) //Entering this condition means received frame is Remote frame
 800078c:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <CAN_Select_Func+0x78>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d114      	bne.n	80007be <CAN_Select_Func+0x36>
	{
		/*Select needed Bootloader Function based on received StandardID of CAN frame*/
		switch(BL_RxHeader.StdId)
 8000794:	4b1a      	ldr	r3, [pc, #104]	; (8000800 <CAN_Select_Func+0x78>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2b2f      	cmp	r3, #47	; 0x2f
 800079a:	d00d      	beq.n	80007b8 <CAN_Select_Func+0x30>
 800079c:	2b2f      	cmp	r3, #47	; 0x2f
 800079e:	d829      	bhi.n	80007f4 <CAN_Select_Func+0x6c>
 80007a0:	2b0f      	cmp	r3, #15
 80007a2:	d002      	beq.n	80007aa <CAN_Select_Func+0x22>
 80007a4:	2b1f      	cmp	r3, #31
 80007a6:	d004      	beq.n	80007b2 <CAN_Select_Func+0x2a>
		case CAN_READ_WP_REQ_ID:
			CAN_Read_WP_Level();
			break;

		default:
			break;
 80007a8:	e024      	b.n	80007f4 <CAN_Select_Func+0x6c>
			Bootloader_Get_Version(BL_RxData);
 80007aa:	4816      	ldr	r0, [pc, #88]	; (8000804 <CAN_Select_Func+0x7c>)
 80007ac:	f7ff fd0a 	bl	80001c4 <Bootloader_Get_Version>
			break;
 80007b0:	e023      	b.n	80007fa <CAN_Select_Func+0x72>
			CAN_Read_RP_Level();
 80007b2:	f7ff ff91 	bl	80006d8 <CAN_Read_RP_Level>
			break;
 80007b6:	e020      	b.n	80007fa <CAN_Select_Func+0x72>
			CAN_Read_WP_Level();
 80007b8:	f7ff ffba 	bl	8000730 <CAN_Read_WP_Level>
			break;
 80007bc:	e01d      	b.n	80007fa <CAN_Select_Func+0x72>
		}
	}
	else if(BL_RxHeader.FilterMatchIndex == CAN_MATCH_FILTER_INDEX2) //Entering this condition means received frame is Data frame
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <CAN_Select_Func+0x78>)
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	2b02      	cmp	r3, #2
 80007c4:	d119      	bne.n	80007fa <CAN_Select_Func+0x72>
	{
		/*Select needed Bootloader Function based on received StandardID of CAN frame*/
		switch(BL_RxHeader.StdId)
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <CAN_Select_Func+0x78>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2bf5      	cmp	r3, #245	; 0xf5
 80007cc:	d00e      	beq.n	80007ec <CAN_Select_Func+0x64>
 80007ce:	2bf5      	cmp	r3, #245	; 0xf5
 80007d0:	d812      	bhi.n	80007f8 <CAN_Select_Func+0x70>
 80007d2:	2bf3      	cmp	r3, #243	; 0xf3
 80007d4:	d002      	beq.n	80007dc <CAN_Select_Func+0x54>
 80007d6:	2bf4      	cmp	r3, #244	; 0xf4
 80007d8:	d004      	beq.n	80007e4 <CAN_Select_Func+0x5c>

		case CAN_JUMP_TO_APP_ID:
			Bootloader_Jump_To_Address(BL_RxData);

		default:
			break;
 80007da:	e00d      	b.n	80007f8 <CAN_Select_Func+0x70>
			Bootloader_Memory_Write(BL_RxData);
 80007dc:	4809      	ldr	r0, [pc, #36]	; (8000804 <CAN_Select_Func+0x7c>)
 80007de:	f7ff fe55 	bl	800048c <Bootloader_Memory_Write>
			break;
 80007e2:	e00a      	b.n	80007fa <CAN_Select_Func+0x72>
			Bootloader_Erase_Flash(BL_RxData);
 80007e4:	4807      	ldr	r0, [pc, #28]	; (8000804 <CAN_Select_Func+0x7c>)
 80007e6:	f7ff fdad 	bl	8000344 <Bootloader_Erase_Flash>
			break;
 80007ea:	e006      	b.n	80007fa <CAN_Select_Func+0x72>
			Bootloader_Jump_To_Address(BL_RxData);
 80007ec:	4805      	ldr	r0, [pc, #20]	; (8000804 <CAN_Select_Func+0x7c>)
 80007ee:	f7ff febb 	bl	8000568 <Bootloader_Jump_To_Address>
			break;
 80007f2:	e001      	b.n	80007f8 <CAN_Select_Func+0x70>
			break;
 80007f4:	bf00      	nop
 80007f6:	e000      	b.n	80007fa <CAN_Select_Func+0x72>
			break;
 80007f8:	bf00      	nop
	}
	else
	{
		/*Do Nothing*/
	}
}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000038 	.word	0x20000038
 8000804:	20000064 	.word	0x20000064

08000808 <Write_Program_Flag>:

static void Write_Program_Flag(uint32_t Address, uint32_t Value)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, (uint64_t)Value);
 8000812:	6839      	ldr	r1, [r7, #0]
 8000814:	2000      	movs	r0, #0
 8000816:	460a      	mov	r2, r1
 8000818:	4603      	mov	r3, r0
 800081a:	6879      	ldr	r1, [r7, #4]
 800081c:	2002      	movs	r0, #2
 800081e:	f000 ff03 	bl	8001628 <HAL_FLASH_Program>
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
	...

0800082c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000830:	4b17      	ldr	r3, [pc, #92]	; (8000890 <MX_CAN_Init+0x64>)
 8000832:	4a18      	ldr	r2, [pc, #96]	; (8000894 <MX_CAN_Init+0x68>)
 8000834:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 32;
 8000836:	4b16      	ldr	r3, [pc, #88]	; (8000890 <MX_CAN_Init+0x64>)
 8000838:	2220      	movs	r2, #32
 800083a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <MX_CAN_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000842:	4b13      	ldr	r3, [pc, #76]	; (8000890 <MX_CAN_Init+0x64>)
 8000844:	2200      	movs	r2, #0
 8000846:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_16TQ;
 8000848:	4b11      	ldr	r3, [pc, #68]	; (8000890 <MX_CAN_Init+0x64>)
 800084a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 800084e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <MX_CAN_Init+0x64>)
 8000852:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8000856:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000858:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <MX_CAN_Init+0x64>)
 800085a:	2200      	movs	r2, #0
 800085c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <MX_CAN_Init+0x64>)
 8000860:	2200      	movs	r2, #0
 8000862:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000864:	4b0a      	ldr	r3, [pc, #40]	; (8000890 <MX_CAN_Init+0x64>)
 8000866:	2200      	movs	r2, #0
 8000868:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <MX_CAN_Init+0x64>)
 800086c:	2201      	movs	r2, #1
 800086e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = ENABLE;
 8000870:	4b07      	ldr	r3, [pc, #28]	; (8000890 <MX_CAN_Init+0x64>)
 8000872:	2201      	movs	r2, #1
 8000874:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <MX_CAN_Init+0x64>)
 8000878:	2200      	movs	r2, #0
 800087a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800087c:	4804      	ldr	r0, [pc, #16]	; (8000890 <MX_CAN_Init+0x64>)
 800087e:	f000 fa7b 	bl	8000d78 <HAL_CAN_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000888:	f000 f8c0 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}
 8000890:	2000006c 	.word	0x2000006c
 8000894:	40006400 	.word	0x40006400

08000898 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b088      	sub	sp, #32
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a0:	f107 0310 	add.w	r3, r7, #16
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a1c      	ldr	r2, [pc, #112]	; (8000924 <HAL_CAN_MspInit+0x8c>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d131      	bne.n	800091c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008b8:	4b1b      	ldr	r3, [pc, #108]	; (8000928 <HAL_CAN_MspInit+0x90>)
 80008ba:	69db      	ldr	r3, [r3, #28]
 80008bc:	4a1a      	ldr	r2, [pc, #104]	; (8000928 <HAL_CAN_MspInit+0x90>)
 80008be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008c2:	61d3      	str	r3, [r2, #28]
 80008c4:	4b18      	ldr	r3, [pc, #96]	; (8000928 <HAL_CAN_MspInit+0x90>)
 80008c6:	69db      	ldr	r3, [r3, #28]
 80008c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d0:	4b15      	ldr	r3, [pc, #84]	; (8000928 <HAL_CAN_MspInit+0x90>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	4a14      	ldr	r2, [pc, #80]	; (8000928 <HAL_CAN_MspInit+0x90>)
 80008d6:	f043 0304 	orr.w	r3, r3, #4
 80008da:	6193      	str	r3, [r2, #24]
 80008dc:	4b12      	ldr	r3, [pc, #72]	; (8000928 <HAL_CAN_MspInit+0x90>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	f003 0304 	and.w	r3, r3, #4
 80008e4:	60bb      	str	r3, [r7, #8]
 80008e6:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80008e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80008ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f6:	f107 0310 	add.w	r3, r7, #16
 80008fa:	4619      	mov	r1, r3
 80008fc:	480b      	ldr	r0, [pc, #44]	; (800092c <HAL_CAN_MspInit+0x94>)
 80008fe:	f001 f8e5 	bl	8001acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000902:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000906:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000908:	2302      	movs	r3, #2
 800090a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800090c:	2303      	movs	r3, #3
 800090e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000910:	f107 0310 	add.w	r3, r7, #16
 8000914:	4619      	mov	r1, r3
 8000916:	4805      	ldr	r0, [pc, #20]	; (800092c <HAL_CAN_MspInit+0x94>)
 8000918:	f001 f8d8 	bl	8001acc <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800091c:	bf00      	nop
 800091e:	3720      	adds	r7, #32
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40006400 	.word	0x40006400
 8000928:	40021000 	.word	0x40021000
 800092c:	40010800 	.word	0x40010800

08000930 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <MX_GPIO_Init+0x40>)
 8000938:	699b      	ldr	r3, [r3, #24]
 800093a:	4a0d      	ldr	r2, [pc, #52]	; (8000970 <MX_GPIO_Init+0x40>)
 800093c:	f043 0320 	orr.w	r3, r3, #32
 8000940:	6193      	str	r3, [r2, #24]
 8000942:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <MX_GPIO_Init+0x40>)
 8000944:	699b      	ldr	r3, [r3, #24]
 8000946:	f003 0320 	and.w	r3, r3, #32
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	4b08      	ldr	r3, [pc, #32]	; (8000970 <MX_GPIO_Init+0x40>)
 8000950:	699b      	ldr	r3, [r3, #24]
 8000952:	4a07      	ldr	r2, [pc, #28]	; (8000970 <MX_GPIO_Init+0x40>)
 8000954:	f043 0304 	orr.w	r3, r3, #4
 8000958:	6193      	str	r3, [r2, #24]
 800095a:	4b05      	ldr	r3, [pc, #20]	; (8000970 <MX_GPIO_Init+0x40>)
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	f003 0304 	and.w	r3, r3, #4
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]

}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr
 8000970:	40021000 	.word	0x40021000

08000974 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000978:	f000 f99c 	bl	8000cb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800097c:	f000 f80b 	bl	8000996 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000980:	f7ff ffd6 	bl	8000930 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000984:	f000 f898 	bl	8000ab8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000988:	f000 f8c0 	bl	8000b0c <MX_USART2_UART_Init>
  MX_CAN_Init();
 800098c:	f7ff ff4e 	bl	800082c <MX_CAN_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		BL_Fetch_Commend();
 8000990:	f7ff fbdc 	bl	800014c <BL_Fetch_Commend>
 8000994:	e7fc      	b.n	8000990 <main+0x1c>

08000996 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	b090      	sub	sp, #64	; 0x40
 800099a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800099c:	f107 0318 	add.w	r3, r7, #24
 80009a0:	2228      	movs	r2, #40	; 0x28
 80009a2:	2100      	movs	r1, #0
 80009a4:	4618      	mov	r0, r3
 80009a6:	f001 ff03 	bl	80027b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009b8:	2301      	movs	r3, #1
 80009ba:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009c0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009c2:	2300      	movs	r3, #0
 80009c4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c6:	f107 0318 	add.w	r3, r7, #24
 80009ca:	4618      	mov	r0, r3
 80009cc:	f001 fa02 	bl	8001dd4 <HAL_RCC_OscConfig>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <SystemClock_Config+0x44>
  {
    Error_Handler();
 80009d6:	f000 f819 	bl	8000a0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009da:	230f      	movs	r3, #15
 80009dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80009de:	2301      	movs	r3, #1
 80009e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	2100      	movs	r1, #0
 80009f4:	4618      	mov	r0, r3
 80009f6:	f001 fc6f 	bl	80022d8 <HAL_RCC_ClockConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000a00:	f000 f804 	bl	8000a0c <Error_Handler>
  }
}
 8000a04:	bf00      	nop
 8000a06:	3740      	adds	r7, #64	; 0x40
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a10:	b672      	cpsid	i
}
 8000a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <Error_Handler+0x8>
	...

08000a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <HAL_MspInit+0x40>)
 8000a20:	699b      	ldr	r3, [r3, #24]
 8000a22:	4a0d      	ldr	r2, [pc, #52]	; (8000a58 <HAL_MspInit+0x40>)
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	6193      	str	r3, [r2, #24]
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <HAL_MspInit+0x40>)
 8000a2c:	699b      	ldr	r3, [r3, #24]
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a36:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <HAL_MspInit+0x40>)
 8000a38:	69db      	ldr	r3, [r3, #28]
 8000a3a:	4a07      	ldr	r2, [pc, #28]	; (8000a58 <HAL_MspInit+0x40>)
 8000a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a40:	61d3      	str	r3, [r2, #28]
 8000a42:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <HAL_MspInit+0x40>)
 8000a44:	69db      	ldr	r3, [r3, #28]
 8000a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr
 8000a58:	40021000 	.word	0x40021000

08000a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <NMI_Handler+0x4>

08000a62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a66:	e7fe      	b.n	8000a66 <HardFault_Handler+0x4>

08000a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <MemManage_Handler+0x4>

08000a6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a72:	e7fe      	b.n	8000a72 <BusFault_Handler+0x4>

08000a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <UsageFault_Handler+0x4>

08000a7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bc80      	pop	{r7}
 8000a84:	4770      	bx	lr

08000a86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bc80      	pop	{r7}
 8000a90:	4770      	bx	lr

08000a92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bc80      	pop	{r7}
 8000a9c:	4770      	bx	lr

08000a9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa2:	f000 f94d 	bl	8000d40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr
	...

08000ab8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000abc:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_USART1_UART_Init+0x4c>)
 8000abe:	4a12      	ldr	r2, [pc, #72]	; (8000b08 <MX_USART1_UART_Init+0x50>)
 8000ac0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ac2:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <MX_USART1_UART_Init+0x4c>)
 8000ac4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_USART1_UART_Init+0x4c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MX_USART1_UART_Init+0x4c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <MX_USART1_UART_Init+0x4c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_USART1_UART_Init+0x4c>)
 8000ade:	220c      	movs	r2, #12
 8000ae0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <MX_USART1_UART_Init+0x4c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <MX_USART1_UART_Init+0x4c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000aee:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_USART1_UART_Init+0x4c>)
 8000af0:	f001 fd80 	bl	80025f4 <HAL_UART_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000afa:	f7ff ff87 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000094 	.word	0x20000094
 8000b08:	40013800 	.word	0x40013800

08000b0c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b10:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b12:	4a12      	ldr	r2, [pc, #72]	; (8000b5c <MX_USART2_UART_Init+0x50>)
 8000b14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b32:	220c      	movs	r2, #12
 8000b34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b36:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b42:	4805      	ldr	r0, [pc, #20]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b44:	f001 fd56 	bl	80025f4 <HAL_UART_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b4e:	f7ff ff5d 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	200000dc 	.word	0x200000dc
 8000b5c:	40004400 	.word	0x40004400

08000b60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	; 0x28
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 0318 	add.w	r3, r7, #24
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a37      	ldr	r2, [pc, #220]	; (8000c58 <HAL_UART_MspInit+0xf8>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d132      	bne.n	8000be6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b80:	4b36      	ldr	r3, [pc, #216]	; (8000c5c <HAL_UART_MspInit+0xfc>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	4a35      	ldr	r2, [pc, #212]	; (8000c5c <HAL_UART_MspInit+0xfc>)
 8000b86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b8a:	6193      	str	r3, [r2, #24]
 8000b8c:	4b33      	ldr	r3, [pc, #204]	; (8000c5c <HAL_UART_MspInit+0xfc>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b94:	617b      	str	r3, [r7, #20]
 8000b96:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b98:	4b30      	ldr	r3, [pc, #192]	; (8000c5c <HAL_UART_MspInit+0xfc>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	4a2f      	ldr	r2, [pc, #188]	; (8000c5c <HAL_UART_MspInit+0xfc>)
 8000b9e:	f043 0304 	orr.w	r3, r3, #4
 8000ba2:	6193      	str	r3, [r2, #24]
 8000ba4:	4b2d      	ldr	r3, [pc, #180]	; (8000c5c <HAL_UART_MspInit+0xfc>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	f003 0304 	and.w	r3, r3, #4
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000bb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbe:	f107 0318 	add.w	r3, r7, #24
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4826      	ldr	r0, [pc, #152]	; (8000c60 <HAL_UART_MspInit+0x100>)
 8000bc6:	f000 ff81 	bl	8001acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd8:	f107 0318 	add.w	r3, r7, #24
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4820      	ldr	r0, [pc, #128]	; (8000c60 <HAL_UART_MspInit+0x100>)
 8000be0:	f000 ff74 	bl	8001acc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000be4:	e034      	b.n	8000c50 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a1e      	ldr	r2, [pc, #120]	; (8000c64 <HAL_UART_MspInit+0x104>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d12f      	bne.n	8000c50 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bf0:	4b1a      	ldr	r3, [pc, #104]	; (8000c5c <HAL_UART_MspInit+0xfc>)
 8000bf2:	69db      	ldr	r3, [r3, #28]
 8000bf4:	4a19      	ldr	r2, [pc, #100]	; (8000c5c <HAL_UART_MspInit+0xfc>)
 8000bf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bfa:	61d3      	str	r3, [r2, #28]
 8000bfc:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <HAL_UART_MspInit+0xfc>)
 8000bfe:	69db      	ldr	r3, [r3, #28]
 8000c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c08:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <HAL_UART_MspInit+0xfc>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	4a13      	ldr	r2, [pc, #76]	; (8000c5c <HAL_UART_MspInit+0xfc>)
 8000c0e:	f043 0304 	orr.w	r3, r3, #4
 8000c12:	6193      	str	r3, [r2, #24]
 8000c14:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <HAL_UART_MspInit+0xfc>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	f003 0304 	and.w	r3, r3, #4
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c20:	2304      	movs	r3, #4
 8000c22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c24:	2302      	movs	r3, #2
 8000c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2c:	f107 0318 	add.w	r3, r7, #24
 8000c30:	4619      	mov	r1, r3
 8000c32:	480b      	ldr	r0, [pc, #44]	; (8000c60 <HAL_UART_MspInit+0x100>)
 8000c34:	f000 ff4a 	bl	8001acc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c38:	2308      	movs	r3, #8
 8000c3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c44:	f107 0318 	add.w	r3, r7, #24
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4805      	ldr	r0, [pc, #20]	; (8000c60 <HAL_UART_MspInit+0x100>)
 8000c4c:	f000 ff3e 	bl	8001acc <HAL_GPIO_Init>
}
 8000c50:	bf00      	nop
 8000c52:	3728      	adds	r7, #40	; 0x28
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40013800 	.word	0x40013800
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	40010800 	.word	0x40010800
 8000c64:	40004400 	.word	0x40004400

08000c68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c68:	f7ff ff1f 	bl	8000aaa <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c6c:	480b      	ldr	r0, [pc, #44]	; (8000c9c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c6e:	490c      	ldr	r1, [pc, #48]	; (8000ca0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c70:	4a0c      	ldr	r2, [pc, #48]	; (8000ca4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c74:	e002      	b.n	8000c7c <LoopCopyDataInit>

08000c76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7a:	3304      	adds	r3, #4

08000c7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c80:	d3f9      	bcc.n	8000c76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c82:	4a09      	ldr	r2, [pc, #36]	; (8000ca8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c84:	4c09      	ldr	r4, [pc, #36]	; (8000cac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c88:	e001      	b.n	8000c8e <LoopFillZerobss>

08000c8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c8c:	3204      	adds	r2, #4

08000c8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c90:	d3fb      	bcc.n	8000c8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c92:	f001 fd95 	bl	80027c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c96:	f7ff fe6d 	bl	8000974 <main>
  bx lr
 8000c9a:	4770      	bx	lr
  ldr r0, =_sdata
 8000c9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000ca4:	08002854 	.word	0x08002854
  ldr r2, =_sbss
 8000ca8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000cac:	20000148 	.word	0x20000148

08000cb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cb0:	e7fe      	b.n	8000cb0 <ADC1_2_IRQHandler>
	...

08000cb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb8:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <HAL_Init+0x28>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a07      	ldr	r2, [pc, #28]	; (8000cdc <HAL_Init+0x28>)
 8000cbe:	f043 0310 	orr.w	r3, r3, #16
 8000cc2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc4:	2003      	movs	r0, #3
 8000cc6:	f000 fc77 	bl	80015b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cca:	200f      	movs	r0, #15
 8000ccc:	f000 f808 	bl	8000ce0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd0:	f7ff fea2 	bl	8000a18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40022000 	.word	0x40022000

08000ce0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <HAL_InitTick+0x54>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <HAL_InitTick+0x58>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f000 fc85 	bl	800160e <HAL_SYSTICK_Config>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e00e      	b.n	8000d2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2b0f      	cmp	r3, #15
 8000d12:	d80a      	bhi.n	8000d2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d14:	2200      	movs	r2, #0
 8000d16:	6879      	ldr	r1, [r7, #4]
 8000d18:	f04f 30ff 	mov.w	r0, #4294967295
 8000d1c:	f000 fc57 	bl	80015ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d20:	4a06      	ldr	r2, [pc, #24]	; (8000d3c <HAL_InitTick+0x5c>)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d26:	2300      	movs	r3, #0
 8000d28:	e000      	b.n	8000d2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000008 	.word	0x20000008
 8000d38:	20000010 	.word	0x20000010
 8000d3c:	2000000c 	.word	0x2000000c

08000d40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d44:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <HAL_IncTick+0x1c>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <HAL_IncTick+0x20>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4413      	add	r3, r2
 8000d50:	4a03      	ldr	r2, [pc, #12]	; (8000d60 <HAL_IncTick+0x20>)
 8000d52:	6013      	str	r3, [r2, #0]
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr
 8000d5c:	20000010 	.word	0x20000010
 8000d60:	20000124 	.word	0x20000124

08000d64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return uwTick;
 8000d68:	4b02      	ldr	r3, [pc, #8]	; (8000d74 <HAL_GetTick+0x10>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr
 8000d74:	20000124 	.word	0x20000124

08000d78 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d101      	bne.n	8000d8a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e0ed      	b.n	8000f66 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d102      	bne.n	8000d9c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f7ff fd7e 	bl	8000898 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f042 0201 	orr.w	r2, r2, #1
 8000daa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dac:	f7ff ffda 	bl	8000d64 <HAL_GetTick>
 8000db0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000db2:	e012      	b.n	8000dda <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000db4:	f7ff ffd6 	bl	8000d64 <HAL_GetTick>
 8000db8:	4602      	mov	r2, r0
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	2b0a      	cmp	r3, #10
 8000dc0:	d90b      	bls.n	8000dda <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2205      	movs	r2, #5
 8000dd2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e0c5      	b.n	8000f66 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f003 0301 	and.w	r3, r3, #1
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d0e5      	beq.n	8000db4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f022 0202 	bic.w	r2, r2, #2
 8000df6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000df8:	f7ff ffb4 	bl	8000d64 <HAL_GetTick>
 8000dfc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000dfe:	e012      	b.n	8000e26 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e00:	f7ff ffb0 	bl	8000d64 <HAL_GetTick>
 8000e04:	4602      	mov	r2, r0
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	2b0a      	cmp	r3, #10
 8000e0c:	d90b      	bls.n	8000e26 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e12:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2205      	movs	r2, #5
 8000e1e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e09f      	b.n	8000f66 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f003 0302 	and.w	r3, r3, #2
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d1e5      	bne.n	8000e00 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	7e1b      	ldrb	r3, [r3, #24]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d108      	bne.n	8000e4e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	e007      	b.n	8000e5e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	7e5b      	ldrb	r3, [r3, #25]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d108      	bne.n	8000e78 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	e007      	b.n	8000e88 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e86:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	7e9b      	ldrb	r3, [r3, #26]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d108      	bne.n	8000ea2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f042 0220 	orr.w	r2, r2, #32
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	e007      	b.n	8000eb2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f022 0220 	bic.w	r2, r2, #32
 8000eb0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	7edb      	ldrb	r3, [r3, #27]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d108      	bne.n	8000ecc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f022 0210 	bic.w	r2, r2, #16
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	e007      	b.n	8000edc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f042 0210 	orr.w	r2, r2, #16
 8000eda:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	7f1b      	ldrb	r3, [r3, #28]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d108      	bne.n	8000ef6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f042 0208 	orr.w	r2, r2, #8
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	e007      	b.n	8000f06 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f022 0208 	bic.w	r2, r2, #8
 8000f04:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	7f5b      	ldrb	r3, [r3, #29]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d108      	bne.n	8000f20 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f042 0204 	orr.w	r2, r2, #4
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	e007      	b.n	8000f30 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f022 0204 	bic.w	r2, r2, #4
 8000f2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	689a      	ldr	r2, [r3, #8]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	431a      	orrs	r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	691b      	ldr	r3, [r3, #16]
 8000f3e:	431a      	orrs	r2, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	695b      	ldr	r3, [r3, #20]
 8000f44:	ea42 0103 	orr.w	r1, r2, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	1e5a      	subs	r2, r3, #1
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	430a      	orrs	r2, r1
 8000f54:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2201      	movs	r2, #1
 8000f60:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	b089      	sub	sp, #36	; 0x24
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	60f8      	str	r0, [r7, #12]
 8000f76:	60b9      	str	r1, [r7, #8]
 8000f78:	607a      	str	r2, [r7, #4]
 8000f7a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f82:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f8c:	7ffb      	ldrb	r3, [r7, #31]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d003      	beq.n	8000f9a <HAL_CAN_AddTxMessage+0x2c>
 8000f92:	7ffb      	ldrb	r3, [r7, #31]
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	f040 80ad 	bne.w	80010f4 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d10a      	bne.n	8000fba <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d105      	bne.n	8000fba <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	f000 8095 	beq.w	80010e4 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	0e1b      	lsrs	r3, r3, #24
 8000fbe:	f003 0303 	and.w	r3, r3, #3
 8000fc2:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	409a      	lsls	r2, r3
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d10d      	bne.n	8000ff2 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000fe0:	68f9      	ldr	r1, [r7, #12]
 8000fe2:	6809      	ldr	r1, [r1, #0]
 8000fe4:	431a      	orrs	r2, r3
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	3318      	adds	r3, #24
 8000fea:	011b      	lsls	r3, r3, #4
 8000fec:	440b      	add	r3, r1
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	e00f      	b.n	8001012 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ffc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001002:	68f9      	ldr	r1, [r7, #12]
 8001004:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001006:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	3318      	adds	r3, #24
 800100c:	011b      	lsls	r3, r3, #4
 800100e:	440b      	add	r3, r1
 8001010:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	6819      	ldr	r1, [r3, #0]
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	691a      	ldr	r2, [r3, #16]
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	3318      	adds	r3, #24
 800101e:	011b      	lsls	r3, r3, #4
 8001020:	440b      	add	r3, r1
 8001022:	3304      	adds	r3, #4
 8001024:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	7d1b      	ldrb	r3, [r3, #20]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d111      	bne.n	8001052 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	3318      	adds	r3, #24
 8001036:	011b      	lsls	r3, r3, #4
 8001038:	4413      	add	r3, r2
 800103a:	3304      	adds	r3, #4
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	68fa      	ldr	r2, [r7, #12]
 8001040:	6811      	ldr	r1, [r2, #0]
 8001042:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	3318      	adds	r3, #24
 800104a:	011b      	lsls	r3, r3, #4
 800104c:	440b      	add	r3, r1
 800104e:	3304      	adds	r3, #4
 8001050:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3307      	adds	r3, #7
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	061a      	lsls	r2, r3, #24
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	3306      	adds	r3, #6
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	041b      	lsls	r3, r3, #16
 8001062:	431a      	orrs	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3305      	adds	r3, #5
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	021b      	lsls	r3, r3, #8
 800106c:	4313      	orrs	r3, r2
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	3204      	adds	r2, #4
 8001072:	7812      	ldrb	r2, [r2, #0]
 8001074:	4610      	mov	r0, r2
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	6811      	ldr	r1, [r2, #0]
 800107a:	ea43 0200 	orr.w	r2, r3, r0
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	011b      	lsls	r3, r3, #4
 8001082:	440b      	add	r3, r1
 8001084:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001088:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3303      	adds	r3, #3
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	061a      	lsls	r2, r3, #24
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	3302      	adds	r3, #2
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	041b      	lsls	r3, r3, #16
 800109a:	431a      	orrs	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3301      	adds	r3, #1
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	021b      	lsls	r3, r3, #8
 80010a4:	4313      	orrs	r3, r2
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	7812      	ldrb	r2, [r2, #0]
 80010aa:	4610      	mov	r0, r2
 80010ac:	68fa      	ldr	r2, [r7, #12]
 80010ae:	6811      	ldr	r1, [r2, #0]
 80010b0:	ea43 0200 	orr.w	r2, r3, r0
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	011b      	lsls	r3, r3, #4
 80010b8:	440b      	add	r3, r1
 80010ba:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80010be:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	3318      	adds	r3, #24
 80010c8:	011b      	lsls	r3, r3, #4
 80010ca:	4413      	add	r3, r2
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	6811      	ldr	r1, [r2, #0]
 80010d2:	f043 0201 	orr.w	r2, r3, #1
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	3318      	adds	r3, #24
 80010da:	011b      	lsls	r3, r3, #4
 80010dc:	440b      	add	r3, r1
 80010de:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80010e0:	2300      	movs	r3, #0
 80010e2:	e00e      	b.n	8001102 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	e006      	b.n	8001102 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
  }
}
 8001102:	4618      	mov	r0, r3
 8001104:	3724      	adds	r7, #36	; 0x24
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr

0800110c <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001120:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8001122:	7afb      	ldrb	r3, [r7, #11]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d002      	beq.n	800112e <HAL_CAN_IsTxMessagePending+0x22>
 8001128:	7afb      	ldrb	r3, [r7, #11]
 800112a:	2b02      	cmp	r3, #2
 800112c:	d10b      	bne.n	8001146 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	689a      	ldr	r2, [r3, #8]
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	069b      	lsls	r3, r3, #26
 8001138:	401a      	ands	r2, r3
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	069b      	lsls	r3, r3, #26
 800113e:	429a      	cmp	r2, r3
 8001140:	d001      	beq.n	8001146 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8001142:	2301      	movs	r3, #1
 8001144:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8001146:	68fb      	ldr	r3, [r7, #12]
}
 8001148:	4618      	mov	r0, r3
 800114a:	3714      	adds	r7, #20
 800114c:	46bd      	mov	sp, r7
 800114e:	bc80      	pop	{r7}
 8001150:	4770      	bx	lr

08001152 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001152:	b480      	push	{r7}
 8001154:	b087      	sub	sp, #28
 8001156:	af00      	add	r7, sp, #0
 8001158:	60f8      	str	r0, [r7, #12]
 800115a:	60b9      	str	r1, [r7, #8]
 800115c:	607a      	str	r2, [r7, #4]
 800115e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001166:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001168:	7dfb      	ldrb	r3, [r7, #23]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d003      	beq.n	8001176 <HAL_CAN_GetRxMessage+0x24>
 800116e:	7dfb      	ldrb	r3, [r7, #23]
 8001170:	2b02      	cmp	r3, #2
 8001172:	f040 8103 	bne.w	800137c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d10e      	bne.n	800119a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	f003 0303 	and.w	r3, r3, #3
 8001186:	2b00      	cmp	r3, #0
 8001188:	d116      	bne.n	80011b8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e0f7      	b.n	800138a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	691b      	ldr	r3, [r3, #16]
 80011a0:	f003 0303 	and.w	r3, r3, #3
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d107      	bne.n	80011b8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e0e8      	b.n	800138a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	331b      	adds	r3, #27
 80011c0:	011b      	lsls	r3, r3, #4
 80011c2:	4413      	add	r3, r2
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0204 	and.w	r2, r3, #4
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d10c      	bne.n	80011f0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	331b      	adds	r3, #27
 80011de:	011b      	lsls	r3, r3, #4
 80011e0:	4413      	add	r3, r2
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	0d5b      	lsrs	r3, r3, #21
 80011e6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	e00b      	b.n	8001208 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	331b      	adds	r3, #27
 80011f8:	011b      	lsls	r3, r3, #4
 80011fa:	4413      	add	r3, r2
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	08db      	lsrs	r3, r3, #3
 8001200:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	331b      	adds	r3, #27
 8001210:	011b      	lsls	r3, r3, #4
 8001212:	4413      	add	r3, r2
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0202 	and.w	r2, r3, #2
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	331b      	adds	r3, #27
 8001226:	011b      	lsls	r3, r3, #4
 8001228:	4413      	add	r3, r2
 800122a:	3304      	adds	r3, #4
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0308 	and.w	r3, r3, #8
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2208      	movs	r2, #8
 800123a:	611a      	str	r2, [r3, #16]
 800123c:	e00b      	b.n	8001256 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	331b      	adds	r3, #27
 8001246:	011b      	lsls	r3, r3, #4
 8001248:	4413      	add	r3, r2
 800124a:	3304      	adds	r3, #4
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 020f 	and.w	r2, r3, #15
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	331b      	adds	r3, #27
 800125e:	011b      	lsls	r3, r3, #4
 8001260:	4413      	add	r3, r2
 8001262:	3304      	adds	r3, #4
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	0a1b      	lsrs	r3, r3, #8
 8001268:	b2da      	uxtb	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	331b      	adds	r3, #27
 8001276:	011b      	lsls	r3, r3, #4
 8001278:	4413      	add	r3, r2
 800127a:	3304      	adds	r3, #4
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	0c1b      	lsrs	r3, r3, #16
 8001280:	b29a      	uxth	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	011b      	lsls	r3, r3, #4
 800128e:	4413      	add	r3, r2
 8001290:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	b2da      	uxtb	r2, r3
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	011b      	lsls	r3, r3, #4
 80012a4:	4413      	add	r3, r2
 80012a6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	0a1a      	lsrs	r2, r3, #8
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	3301      	adds	r3, #1
 80012b2:	b2d2      	uxtb	r2, r2
 80012b4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	011b      	lsls	r3, r3, #4
 80012be:	4413      	add	r3, r2
 80012c0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	0c1a      	lsrs	r2, r3, #16
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	3302      	adds	r3, #2
 80012cc:	b2d2      	uxtb	r2, r2
 80012ce:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	011b      	lsls	r3, r3, #4
 80012d8:	4413      	add	r3, r2
 80012da:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	0e1a      	lsrs	r2, r3, #24
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	3303      	adds	r3, #3
 80012e6:	b2d2      	uxtb	r2, r2
 80012e8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	011b      	lsls	r3, r3, #4
 80012f2:	4413      	add	r3, r2
 80012f4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	3304      	adds	r3, #4
 80012fe:	b2d2      	uxtb	r2, r2
 8001300:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	011b      	lsls	r3, r3, #4
 800130a:	4413      	add	r3, r2
 800130c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	0a1a      	lsrs	r2, r3, #8
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	3305      	adds	r3, #5
 8001318:	b2d2      	uxtb	r2, r2
 800131a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	011b      	lsls	r3, r3, #4
 8001324:	4413      	add	r3, r2
 8001326:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	0c1a      	lsrs	r2, r3, #16
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	3306      	adds	r3, #6
 8001332:	b2d2      	uxtb	r2, r2
 8001334:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	011b      	lsls	r3, r3, #4
 800133e:	4413      	add	r3, r2
 8001340:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	0e1a      	lsrs	r2, r3, #24
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	3307      	adds	r3, #7
 800134c:	b2d2      	uxtb	r2, r2
 800134e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d108      	bne.n	8001368 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	68da      	ldr	r2, [r3, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f042 0220 	orr.w	r2, r2, #32
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	e007      	b.n	8001378 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	691a      	ldr	r2, [r3, #16]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f042 0220 	orr.w	r2, r2, #32
 8001376:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001378:	2300      	movs	r3, #0
 800137a:	e006      	b.n	800138a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001380:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
  }
}
 800138a:	4618      	mov	r0, r3
 800138c:	371c      	adds	r7, #28
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr

08001394 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013a8:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80013aa:	7afb      	ldrb	r3, [r7, #11]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d002      	beq.n	80013b6 <HAL_CAN_GetRxFifoFillLevel+0x22>
 80013b0:	7afb      	ldrb	r3, [r7, #11]
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d10f      	bne.n	80013d6 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d106      	bne.n	80013ca <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	f003 0303 	and.w	r3, r3, #3
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	e005      	b.n	80013d6 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	691b      	ldr	r3, [r3, #16]
 80013d0:	f003 0303 	and.w	r3, r3, #3
 80013d4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80013d6:	68fb      	ldr	r3, [r7, #12]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3714      	adds	r7, #20
 80013dc:	46bd      	mov	sp, r7
 80013de:	bc80      	pop	{r7}
 80013e0:	4770      	bx	lr

080013e2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b085      	sub	sp, #20
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
 80013ea:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013f2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80013f4:	7bfb      	ldrb	r3, [r7, #15]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d002      	beq.n	8001400 <HAL_CAN_ActivateNotification+0x1e>
 80013fa:	7bfb      	ldrb	r3, [r7, #15]
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d109      	bne.n	8001414 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6959      	ldr	r1, [r3, #20]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	683a      	ldr	r2, [r7, #0]
 800140c:	430a      	orrs	r2, r1
 800140e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001410:	2300      	movs	r3, #0
 8001412:	e006      	b.n	8001422 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001418:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
  }
}
 8001422:	4618      	mov	r0, r3
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr

0800142c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800143c:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <__NVIC_SetPriorityGrouping+0x44>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001442:	68ba      	ldr	r2, [r7, #8]
 8001444:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001448:	4013      	ands	r3, r2
 800144a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001454:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800145c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800145e:	4a04      	ldr	r2, [pc, #16]	; (8001470 <__NVIC_SetPriorityGrouping+0x44>)
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	60d3      	str	r3, [r2, #12]
}
 8001464:	bf00      	nop
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001478:	4b04      	ldr	r3, [pc, #16]	; (800148c <__NVIC_GetPriorityGrouping+0x18>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	0a1b      	lsrs	r3, r3, #8
 800147e:	f003 0307 	and.w	r3, r3, #7
}
 8001482:	4618      	mov	r0, r3
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	6039      	str	r1, [r7, #0]
 800149a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800149c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	db0a      	blt.n	80014ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	b2da      	uxtb	r2, r3
 80014a8:	490c      	ldr	r1, [pc, #48]	; (80014dc <__NVIC_SetPriority+0x4c>)
 80014aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ae:	0112      	lsls	r2, r2, #4
 80014b0:	b2d2      	uxtb	r2, r2
 80014b2:	440b      	add	r3, r1
 80014b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014b8:	e00a      	b.n	80014d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	4908      	ldr	r1, [pc, #32]	; (80014e0 <__NVIC_SetPriority+0x50>)
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	f003 030f 	and.w	r3, r3, #15
 80014c6:	3b04      	subs	r3, #4
 80014c8:	0112      	lsls	r2, r2, #4
 80014ca:	b2d2      	uxtb	r2, r2
 80014cc:	440b      	add	r3, r1
 80014ce:	761a      	strb	r2, [r3, #24]
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	e000e100 	.word	0xe000e100
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b089      	sub	sp, #36	; 0x24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	f1c3 0307 	rsb	r3, r3, #7
 80014fe:	2b04      	cmp	r3, #4
 8001500:	bf28      	it	cs
 8001502:	2304      	movcs	r3, #4
 8001504:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3304      	adds	r3, #4
 800150a:	2b06      	cmp	r3, #6
 800150c:	d902      	bls.n	8001514 <NVIC_EncodePriority+0x30>
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	3b03      	subs	r3, #3
 8001512:	e000      	b.n	8001516 <NVIC_EncodePriority+0x32>
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001518:	f04f 32ff 	mov.w	r2, #4294967295
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43da      	mvns	r2, r3
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	401a      	ands	r2, r3
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800152c:	f04f 31ff 	mov.w	r1, #4294967295
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	fa01 f303 	lsl.w	r3, r1, r3
 8001536:	43d9      	mvns	r1, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800153c:	4313      	orrs	r3, r2
         );
}
 800153e:	4618      	mov	r0, r3
 8001540:	3724      	adds	r7, #36	; 0x24
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr

08001548 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800154c:	f3bf 8f4f 	dsb	sy
}
 8001550:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <__NVIC_SystemReset+0x24>)
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800155a:	4904      	ldr	r1, [pc, #16]	; (800156c <__NVIC_SystemReset+0x24>)
 800155c:	4b04      	ldr	r3, [pc, #16]	; (8001570 <__NVIC_SystemReset+0x28>)
 800155e:	4313      	orrs	r3, r2
 8001560:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001562:	f3bf 8f4f 	dsb	sy
}
 8001566:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001568:	bf00      	nop
 800156a:	e7fd      	b.n	8001568 <__NVIC_SystemReset+0x20>
 800156c:	e000ed00 	.word	0xe000ed00
 8001570:	05fa0004 	.word	0x05fa0004

08001574 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3b01      	subs	r3, #1
 8001580:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001584:	d301      	bcc.n	800158a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001586:	2301      	movs	r3, #1
 8001588:	e00f      	b.n	80015aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800158a:	4a0a      	ldr	r2, [pc, #40]	; (80015b4 <SysTick_Config+0x40>)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3b01      	subs	r3, #1
 8001590:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001592:	210f      	movs	r1, #15
 8001594:	f04f 30ff 	mov.w	r0, #4294967295
 8001598:	f7ff ff7a 	bl	8001490 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800159c:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <SysTick_Config+0x40>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015a2:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <SysTick_Config+0x40>)
 80015a4:	2207      	movs	r2, #7
 80015a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	e000e010 	.word	0xe000e010

080015b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff ff33 	bl	800142c <__NVIC_SetPriorityGrouping>
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b086      	sub	sp, #24
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	4603      	mov	r3, r0
 80015d6:	60b9      	str	r1, [r7, #8]
 80015d8:	607a      	str	r2, [r7, #4]
 80015da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015e0:	f7ff ff48 	bl	8001474 <__NVIC_GetPriorityGrouping>
 80015e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	68b9      	ldr	r1, [r7, #8]
 80015ea:	6978      	ldr	r0, [r7, #20]
 80015ec:	f7ff ff7a 	bl	80014e4 <NVIC_EncodePriority>
 80015f0:	4602      	mov	r2, r0
 80015f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f6:	4611      	mov	r1, r2
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff ff49 	bl	8001490 <__NVIC_SetPriority>
}
 80015fe:	bf00      	nop
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800160a:	f7ff ff9d 	bl	8001548 <__NVIC_SystemReset>

0800160e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b082      	sub	sp, #8
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff ffac 	bl	8001574 <SysTick_Config>
 800161c:	4603      	mov	r3, r0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800162a:	b087      	sub	sp, #28
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800163e:	2300      	movs	r3, #0
 8001640:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001642:	4b2f      	ldr	r3, [pc, #188]	; (8001700 <HAL_FLASH_Program+0xd8>)
 8001644:	7e1b      	ldrb	r3, [r3, #24]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d101      	bne.n	800164e <HAL_FLASH_Program+0x26>
 800164a:	2302      	movs	r3, #2
 800164c:	e054      	b.n	80016f8 <HAL_FLASH_Program+0xd0>
 800164e:	4b2c      	ldr	r3, [pc, #176]	; (8001700 <HAL_FLASH_Program+0xd8>)
 8001650:	2201      	movs	r2, #1
 8001652:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001654:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001658:	f000 f8a8 	bl	80017ac <FLASH_WaitForLastOperation>
 800165c:	4603      	mov	r3, r0
 800165e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001660:	7dfb      	ldrb	r3, [r7, #23]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d144      	bne.n	80016f0 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d102      	bne.n	8001672 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800166c:	2301      	movs	r3, #1
 800166e:	757b      	strb	r3, [r7, #21]
 8001670:	e007      	b.n	8001682 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2b02      	cmp	r3, #2
 8001676:	d102      	bne.n	800167e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001678:	2302      	movs	r3, #2
 800167a:	757b      	strb	r3, [r7, #21]
 800167c:	e001      	b.n	8001682 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800167e:	2304      	movs	r3, #4
 8001680:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8001682:	2300      	movs	r3, #0
 8001684:	75bb      	strb	r3, [r7, #22]
 8001686:	e02d      	b.n	80016e4 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001688:	7dbb      	ldrb	r3, [r7, #22]
 800168a:	005a      	lsls	r2, r3, #1
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	eb02 0c03 	add.w	ip, r2, r3
 8001692:	7dbb      	ldrb	r3, [r7, #22]
 8001694:	0119      	lsls	r1, r3, #4
 8001696:	e9d7 2300 	ldrd	r2, r3, [r7]
 800169a:	f1c1 0620 	rsb	r6, r1, #32
 800169e:	f1a1 0020 	sub.w	r0, r1, #32
 80016a2:	fa22 f401 	lsr.w	r4, r2, r1
 80016a6:	fa03 f606 	lsl.w	r6, r3, r6
 80016aa:	4334      	orrs	r4, r6
 80016ac:	fa23 f000 	lsr.w	r0, r3, r0
 80016b0:	4304      	orrs	r4, r0
 80016b2:	fa23 f501 	lsr.w	r5, r3, r1
 80016b6:	b2a3      	uxth	r3, r4
 80016b8:	4619      	mov	r1, r3
 80016ba:	4660      	mov	r0, ip
 80016bc:	f000 f85a 	bl	8001774 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80016c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80016c4:	f000 f872 	bl	80017ac <FLASH_WaitForLastOperation>
 80016c8:	4603      	mov	r3, r0
 80016ca:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80016cc:	4b0d      	ldr	r3, [pc, #52]	; (8001704 <HAL_FLASH_Program+0xdc>)
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	4a0c      	ldr	r2, [pc, #48]	; (8001704 <HAL_FLASH_Program+0xdc>)
 80016d2:	f023 0301 	bic.w	r3, r3, #1
 80016d6:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80016d8:	7dfb      	ldrb	r3, [r7, #23]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d107      	bne.n	80016ee <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80016de:	7dbb      	ldrb	r3, [r7, #22]
 80016e0:	3301      	adds	r3, #1
 80016e2:	75bb      	strb	r3, [r7, #22]
 80016e4:	7dba      	ldrb	r2, [r7, #22]
 80016e6:	7d7b      	ldrb	r3, [r7, #21]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d3cd      	bcc.n	8001688 <HAL_FLASH_Program+0x60>
 80016ec:	e000      	b.n	80016f0 <HAL_FLASH_Program+0xc8>
      {
        break;
 80016ee:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80016f0:	4b03      	ldr	r3, [pc, #12]	; (8001700 <HAL_FLASH_Program+0xd8>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	761a      	strb	r2, [r3, #24]

  return status;
 80016f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	371c      	adds	r7, #28
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001700:	20000128 	.word	0x20000128
 8001704:	40022000 	.word	0x40022000

08001708 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800170e:	2300      	movs	r3, #0
 8001710:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001712:	4b0d      	ldr	r3, [pc, #52]	; (8001748 <HAL_FLASH_Unlock+0x40>)
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800171a:	2b00      	cmp	r3, #0
 800171c:	d00d      	beq.n	800173a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800171e:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <HAL_FLASH_Unlock+0x40>)
 8001720:	4a0a      	ldr	r2, [pc, #40]	; (800174c <HAL_FLASH_Unlock+0x44>)
 8001722:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001724:	4b08      	ldr	r3, [pc, #32]	; (8001748 <HAL_FLASH_Unlock+0x40>)
 8001726:	4a0a      	ldr	r2, [pc, #40]	; (8001750 <HAL_FLASH_Unlock+0x48>)
 8001728:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800172a:	4b07      	ldr	r3, [pc, #28]	; (8001748 <HAL_FLASH_Unlock+0x40>)
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800173a:	79fb      	ldrb	r3, [r7, #7]
}
 800173c:	4618      	mov	r0, r3
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	40022000 	.word	0x40022000
 800174c:	45670123 	.word	0x45670123
 8001750:	cdef89ab 	.word	0xcdef89ab

08001754 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001758:	4b05      	ldr	r3, [pc, #20]	; (8001770 <HAL_FLASH_Lock+0x1c>)
 800175a:	691b      	ldr	r3, [r3, #16]
 800175c:	4a04      	ldr	r2, [pc, #16]	; (8001770 <HAL_FLASH_Lock+0x1c>)
 800175e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001762:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	40022000 	.word	0x40022000

08001774 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	460b      	mov	r3, r1
 800177e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001780:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <FLASH_Program_HalfWord+0x30>)
 8001782:	2200      	movs	r2, #0
 8001784:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001786:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <FLASH_Program_HalfWord+0x34>)
 8001788:	691b      	ldr	r3, [r3, #16]
 800178a:	4a07      	ldr	r2, [pc, #28]	; (80017a8 <FLASH_Program_HalfWord+0x34>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	887a      	ldrh	r2, [r7, #2]
 8001796:	801a      	strh	r2, [r3, #0]
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	20000128 	.word	0x20000128
 80017a8:	40022000 	.word	0x40022000

080017ac <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80017b4:	f7ff fad6 	bl	8000d64 <HAL_GetTick>
 80017b8:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80017ba:	e010      	b.n	80017de <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017c2:	d00c      	beq.n	80017de <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d007      	beq.n	80017da <FLASH_WaitForLastOperation+0x2e>
 80017ca:	f7ff facb 	bl	8000d64 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d201      	bcs.n	80017de <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e025      	b.n	800182a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <FLASH_WaitForLastOperation+0x88>)
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1e8      	bne.n	80017bc <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80017ea:	4b12      	ldr	r3, [pc, #72]	; (8001834 <FLASH_WaitForLastOperation+0x88>)
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	f003 0320 	and.w	r3, r3, #32
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d002      	beq.n	80017fc <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80017f6:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <FLASH_WaitForLastOperation+0x88>)
 80017f8:	2220      	movs	r2, #32
 80017fa:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80017fc:	4b0d      	ldr	r3, [pc, #52]	; (8001834 <FLASH_WaitForLastOperation+0x88>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	f003 0310 	and.w	r3, r3, #16
 8001804:	2b00      	cmp	r3, #0
 8001806:	d10b      	bne.n	8001820 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001808:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <FLASH_WaitForLastOperation+0x88>)
 800180a:	69db      	ldr	r3, [r3, #28]
 800180c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001810:	2b00      	cmp	r3, #0
 8001812:	d105      	bne.n	8001820 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001814:	4b07      	ldr	r3, [pc, #28]	; (8001834 <FLASH_WaitForLastOperation+0x88>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800181c:	2b00      	cmp	r3, #0
 800181e:	d003      	beq.n	8001828 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001820:	f000 f80a 	bl	8001838 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e000      	b.n	800182a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40022000 	.word	0x40022000

08001838 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800183e:	2300      	movs	r3, #0
 8001840:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001842:	4b23      	ldr	r3, [pc, #140]	; (80018d0 <FLASH_SetErrorCode+0x98>)
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	f003 0310 	and.w	r3, r3, #16
 800184a:	2b00      	cmp	r3, #0
 800184c:	d009      	beq.n	8001862 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800184e:	4b21      	ldr	r3, [pc, #132]	; (80018d4 <FLASH_SetErrorCode+0x9c>)
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	f043 0302 	orr.w	r3, r3, #2
 8001856:	4a1f      	ldr	r2, [pc, #124]	; (80018d4 <FLASH_SetErrorCode+0x9c>)
 8001858:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f043 0310 	orr.w	r3, r3, #16
 8001860:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001862:	4b1b      	ldr	r3, [pc, #108]	; (80018d0 <FLASH_SetErrorCode+0x98>)
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	f003 0304 	and.w	r3, r3, #4
 800186a:	2b00      	cmp	r3, #0
 800186c:	d009      	beq.n	8001882 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800186e:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <FLASH_SetErrorCode+0x9c>)
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	4a17      	ldr	r2, [pc, #92]	; (80018d4 <FLASH_SetErrorCode+0x9c>)
 8001878:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f043 0304 	orr.w	r3, r3, #4
 8001880:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001882:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <FLASH_SetErrorCode+0x98>)
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	2b00      	cmp	r3, #0
 800188c:	d00b      	beq.n	80018a6 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800188e:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <FLASH_SetErrorCode+0x9c>)
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	f043 0304 	orr.w	r3, r3, #4
 8001896:	4a0f      	ldr	r2, [pc, #60]	; (80018d4 <FLASH_SetErrorCode+0x9c>)
 8001898:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800189a:	4b0d      	ldr	r3, [pc, #52]	; (80018d0 <FLASH_SetErrorCode+0x98>)
 800189c:	69db      	ldr	r3, [r3, #28]
 800189e:	4a0c      	ldr	r2, [pc, #48]	; (80018d0 <FLASH_SetErrorCode+0x98>)
 80018a0:	f023 0301 	bic.w	r3, r3, #1
 80018a4:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f240 1201 	movw	r2, #257	; 0x101
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d106      	bne.n	80018be <FLASH_SetErrorCode+0x86>
 80018b0:	4b07      	ldr	r3, [pc, #28]	; (80018d0 <FLASH_SetErrorCode+0x98>)
 80018b2:	69db      	ldr	r3, [r3, #28]
 80018b4:	4a06      	ldr	r2, [pc, #24]	; (80018d0 <FLASH_SetErrorCode+0x98>)
 80018b6:	f023 0301 	bic.w	r3, r3, #1
 80018ba:	61d3      	str	r3, [r2, #28]
}  
 80018bc:	e002      	b.n	80018c4 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80018be:	4a04      	ldr	r2, [pc, #16]	; (80018d0 <FLASH_SetErrorCode+0x98>)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	60d3      	str	r3, [r2, #12]
}  
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	40022000 	.word	0x40022000
 80018d4:	20000128 	.word	0x20000128

080018d8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80018ea:	4b2f      	ldr	r3, [pc, #188]	; (80019a8 <HAL_FLASHEx_Erase+0xd0>)
 80018ec:	7e1b      	ldrb	r3, [r3, #24]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d101      	bne.n	80018f6 <HAL_FLASHEx_Erase+0x1e>
 80018f2:	2302      	movs	r3, #2
 80018f4:	e053      	b.n	800199e <HAL_FLASHEx_Erase+0xc6>
 80018f6:	4b2c      	ldr	r3, [pc, #176]	; (80019a8 <HAL_FLASHEx_Erase+0xd0>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2b02      	cmp	r3, #2
 8001902:	d116      	bne.n	8001932 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001904:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001908:	f7ff ff50 	bl	80017ac <FLASH_WaitForLastOperation>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d141      	bne.n	8001996 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8001912:	2001      	movs	r0, #1
 8001914:	f000 f868 	bl	80019e8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001918:	f24c 3050 	movw	r0, #50000	; 0xc350
 800191c:	f7ff ff46 	bl	80017ac <FLASH_WaitForLastOperation>
 8001920:	4603      	mov	r3, r0
 8001922:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001924:	4b21      	ldr	r3, [pc, #132]	; (80019ac <HAL_FLASHEx_Erase+0xd4>)
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	4a20      	ldr	r2, [pc, #128]	; (80019ac <HAL_FLASHEx_Erase+0xd4>)
 800192a:	f023 0304 	bic.w	r3, r3, #4
 800192e:	6113      	str	r3, [r2, #16]
 8001930:	e031      	b.n	8001996 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001932:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001936:	f7ff ff39 	bl	80017ac <FLASH_WaitForLastOperation>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d12a      	bne.n	8001996 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	f04f 32ff 	mov.w	r2, #4294967295
 8001946:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	e019      	b.n	8001984 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001950:	68b8      	ldr	r0, [r7, #8]
 8001952:	f000 f89b 	bl	8001a8c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001956:	f24c 3050 	movw	r0, #50000	; 0xc350
 800195a:	f7ff ff27 	bl	80017ac <FLASH_WaitForLastOperation>
 800195e:	4603      	mov	r3, r0
 8001960:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001962:	4b12      	ldr	r3, [pc, #72]	; (80019ac <HAL_FLASHEx_Erase+0xd4>)
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	4a11      	ldr	r2, [pc, #68]	; (80019ac <HAL_FLASHEx_Erase+0xd4>)
 8001968:	f023 0302 	bic.w	r3, r3, #2
 800196c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800196e:	7bfb      	ldrb	r3, [r7, #15]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d003      	beq.n	800197c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	601a      	str	r2, [r3, #0]
            break;
 800197a:	e00c      	b.n	8001996 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001982:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	029a      	lsls	r2, r3, #10
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	4413      	add	r3, r2
 8001990:	68ba      	ldr	r2, [r7, #8]
 8001992:	429a      	cmp	r2, r3
 8001994:	d3dc      	bcc.n	8001950 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001996:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <HAL_FLASHEx_Erase+0xd0>)
 8001998:	2200      	movs	r2, #0
 800199a:	761a      	strb	r2, [r3, #24]

  return status;
 800199c:	7bfb      	ldrb	r3, [r7, #15]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000128 	.word	0x20000128
 80019ac:	40022000 	.word	0x40022000

080019b0 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2207      	movs	r2, #7
 80019bc:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPPage = FLASH_OB_GetWRP();
 80019be:	f000 f82f 	bl	8001a20 <FLASH_OB_GetWRP>
 80019c2:	4602      	mov	r2, r0
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 80019c8:	f000 f834 	bl	8001a34 <FLASH_OB_GetRDP>
 80019cc:	4603      	mov	r3, r0
 80019ce:	b2da      	uxtb	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	741a      	strb	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = FLASH_OB_GetUser();
 80019d4:	f000 f84a 	bl	8001a6c <FLASH_OB_GetUser>
 80019d8:	4603      	mov	r3, r0
 80019da:	461a      	mov	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	745a      	strb	r2, [r3, #17]
}
 80019e0:	bf00      	nop
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80019f0:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <FLASH_MassErase+0x30>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80019f6:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <FLASH_MassErase+0x34>)
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	4a08      	ldr	r2, [pc, #32]	; (8001a1c <FLASH_MassErase+0x34>)
 80019fc:	f043 0304 	orr.w	r3, r3, #4
 8001a00:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001a02:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <FLASH_MassErase+0x34>)
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	4a05      	ldr	r2, [pc, #20]	; (8001a1c <FLASH_MassErase+0x34>)
 8001a08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a0c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr
 8001a18:	20000128 	.word	0x20000128
 8001a1c:	40022000 	.word	0x40022000

08001a20 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval The FLASH Write Protection Option Bytes value
  */
static uint32_t FLASH_OB_GetWRP(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (uint32_t)(READ_REG(FLASH->WRPR));
 8001a24:	4b02      	ldr	r3, [pc, #8]	; (8001a30 <FLASH_OB_GetWRP+0x10>)
 8001a26:	6a1b      	ldr	r3, [r3, #32]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr
 8001a30:	40022000 	.word	0x40022000

08001a34 <FLASH_OB_GetRDP>:
  *         This parameter can be one of the following values:
  *            @arg @ref OB_RDP_LEVEL_0 No protection
  *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
  uint32_t readstatus = OB_RDP_LEVEL_0;
 8001a3a:	23a5      	movs	r3, #165	; 0xa5
 8001a3c:	607b      	str	r3, [r7, #4]
  uint32_t tmp_reg = 0U;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	603b      	str	r3, [r7, #0]
  
  /* Read RDP level bits */
  tmp_reg = READ_BIT(FLASH->OBR, FLASH_OBR_RDPRT);
 8001a42:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <FLASH_OB_GetRDP+0x34>)
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	603b      	str	r3, [r7, #0]

  if (tmp_reg == FLASH_OBR_RDPRT)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d102      	bne.n	8001a58 <FLASH_OB_GetRDP+0x24>
  {
    readstatus = OB_RDP_LEVEL_1;
 8001a52:	2300      	movs	r3, #0
 8001a54:	607b      	str	r3, [r7, #4]
 8001a56:	e001      	b.n	8001a5c <FLASH_OB_GetRDP+0x28>
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_0;
 8001a58:	23a5      	movs	r3, #165	; 0xa5
 8001a5a:	607b      	str	r3, [r7, #4]
  }

  return readstatus;
 8001a5c:	687b      	ldr	r3, [r7, #4]
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr
 8001a68:	40022000 	.word	0x40022000

08001a6c <FLASH_OB_GetUser>:
  * @retval The FLASH User Option Bytes values: FLASH_OBR_IWDG_SW(Bit2), 
  *         FLASH_OBR_nRST_STOP(Bit3),FLASH_OBR_nRST_STDBY(Bit4).
  *         And FLASH_OBR_BFB2(Bit5) for STM32F101xG and STM32F103xG . 
  */
static uint8_t FLASH_OB_GetUser(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return (uint8_t)((READ_REG(FLASH->OBR) & FLASH_OBR_USER) >> FLASH_POSITION_IWDGSW_BIT);
 8001a70:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <FLASH_OB_GetUser+0x1c>)
 8001a72:	69db      	ldr	r3, [r3, #28]
 8001a74:	089b      	lsrs	r3, r3, #2
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	f003 0307 	and.w	r3, r3, #7
 8001a7c:	b2db      	uxtb	r3, r3
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc80      	pop	{r7}
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	40022000 	.word	0x40022000

08001a8c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001a94:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <FLASH_PageErase+0x38>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001a9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <FLASH_PageErase+0x3c>)
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ac8 <FLASH_PageErase+0x3c>)
 8001aa0:	f043 0302 	orr.w	r3, r3, #2
 8001aa4:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001aa6:	4a08      	ldr	r2, [pc, #32]	; (8001ac8 <FLASH_PageErase+0x3c>)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <FLASH_PageErase+0x3c>)
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	4a05      	ldr	r2, [pc, #20]	; (8001ac8 <FLASH_PageErase+0x3c>)
 8001ab2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ab6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bc80      	pop	{r7}
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	20000128 	.word	0x20000128
 8001ac8:	40022000 	.word	0x40022000

08001acc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b08b      	sub	sp, #44	; 0x2c
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ada:	2300      	movs	r3, #0
 8001adc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ade:	e169      	b.n	8001db4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	69fa      	ldr	r2, [r7, #28]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	f040 8158 	bne.w	8001dae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	4a9a      	ldr	r2, [pc, #616]	; (8001d6c <HAL_GPIO_Init+0x2a0>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d05e      	beq.n	8001bc6 <HAL_GPIO_Init+0xfa>
 8001b08:	4a98      	ldr	r2, [pc, #608]	; (8001d6c <HAL_GPIO_Init+0x2a0>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d875      	bhi.n	8001bfa <HAL_GPIO_Init+0x12e>
 8001b0e:	4a98      	ldr	r2, [pc, #608]	; (8001d70 <HAL_GPIO_Init+0x2a4>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d058      	beq.n	8001bc6 <HAL_GPIO_Init+0xfa>
 8001b14:	4a96      	ldr	r2, [pc, #600]	; (8001d70 <HAL_GPIO_Init+0x2a4>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d86f      	bhi.n	8001bfa <HAL_GPIO_Init+0x12e>
 8001b1a:	4a96      	ldr	r2, [pc, #600]	; (8001d74 <HAL_GPIO_Init+0x2a8>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d052      	beq.n	8001bc6 <HAL_GPIO_Init+0xfa>
 8001b20:	4a94      	ldr	r2, [pc, #592]	; (8001d74 <HAL_GPIO_Init+0x2a8>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d869      	bhi.n	8001bfa <HAL_GPIO_Init+0x12e>
 8001b26:	4a94      	ldr	r2, [pc, #592]	; (8001d78 <HAL_GPIO_Init+0x2ac>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d04c      	beq.n	8001bc6 <HAL_GPIO_Init+0xfa>
 8001b2c:	4a92      	ldr	r2, [pc, #584]	; (8001d78 <HAL_GPIO_Init+0x2ac>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d863      	bhi.n	8001bfa <HAL_GPIO_Init+0x12e>
 8001b32:	4a92      	ldr	r2, [pc, #584]	; (8001d7c <HAL_GPIO_Init+0x2b0>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d046      	beq.n	8001bc6 <HAL_GPIO_Init+0xfa>
 8001b38:	4a90      	ldr	r2, [pc, #576]	; (8001d7c <HAL_GPIO_Init+0x2b0>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d85d      	bhi.n	8001bfa <HAL_GPIO_Init+0x12e>
 8001b3e:	2b12      	cmp	r3, #18
 8001b40:	d82a      	bhi.n	8001b98 <HAL_GPIO_Init+0xcc>
 8001b42:	2b12      	cmp	r3, #18
 8001b44:	d859      	bhi.n	8001bfa <HAL_GPIO_Init+0x12e>
 8001b46:	a201      	add	r2, pc, #4	; (adr r2, 8001b4c <HAL_GPIO_Init+0x80>)
 8001b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b4c:	08001bc7 	.word	0x08001bc7
 8001b50:	08001ba1 	.word	0x08001ba1
 8001b54:	08001bb3 	.word	0x08001bb3
 8001b58:	08001bf5 	.word	0x08001bf5
 8001b5c:	08001bfb 	.word	0x08001bfb
 8001b60:	08001bfb 	.word	0x08001bfb
 8001b64:	08001bfb 	.word	0x08001bfb
 8001b68:	08001bfb 	.word	0x08001bfb
 8001b6c:	08001bfb 	.word	0x08001bfb
 8001b70:	08001bfb 	.word	0x08001bfb
 8001b74:	08001bfb 	.word	0x08001bfb
 8001b78:	08001bfb 	.word	0x08001bfb
 8001b7c:	08001bfb 	.word	0x08001bfb
 8001b80:	08001bfb 	.word	0x08001bfb
 8001b84:	08001bfb 	.word	0x08001bfb
 8001b88:	08001bfb 	.word	0x08001bfb
 8001b8c:	08001bfb 	.word	0x08001bfb
 8001b90:	08001ba9 	.word	0x08001ba9
 8001b94:	08001bbd 	.word	0x08001bbd
 8001b98:	4a79      	ldr	r2, [pc, #484]	; (8001d80 <HAL_GPIO_Init+0x2b4>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d013      	beq.n	8001bc6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b9e:	e02c      	b.n	8001bfa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	623b      	str	r3, [r7, #32]
          break;
 8001ba6:	e029      	b.n	8001bfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	3304      	adds	r3, #4
 8001bae:	623b      	str	r3, [r7, #32]
          break;
 8001bb0:	e024      	b.n	8001bfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	3308      	adds	r3, #8
 8001bb8:	623b      	str	r3, [r7, #32]
          break;
 8001bba:	e01f      	b.n	8001bfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	330c      	adds	r3, #12
 8001bc2:	623b      	str	r3, [r7, #32]
          break;
 8001bc4:	e01a      	b.n	8001bfc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d102      	bne.n	8001bd4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bce:	2304      	movs	r3, #4
 8001bd0:	623b      	str	r3, [r7, #32]
          break;
 8001bd2:	e013      	b.n	8001bfc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d105      	bne.n	8001be8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bdc:	2308      	movs	r3, #8
 8001bde:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	69fa      	ldr	r2, [r7, #28]
 8001be4:	611a      	str	r2, [r3, #16]
          break;
 8001be6:	e009      	b.n	8001bfc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001be8:	2308      	movs	r3, #8
 8001bea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	69fa      	ldr	r2, [r7, #28]
 8001bf0:	615a      	str	r2, [r3, #20]
          break;
 8001bf2:	e003      	b.n	8001bfc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	623b      	str	r3, [r7, #32]
          break;
 8001bf8:	e000      	b.n	8001bfc <HAL_GPIO_Init+0x130>
          break;
 8001bfa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	2bff      	cmp	r3, #255	; 0xff
 8001c00:	d801      	bhi.n	8001c06 <HAL_GPIO_Init+0x13a>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	e001      	b.n	8001c0a <HAL_GPIO_Init+0x13e>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	3304      	adds	r3, #4
 8001c0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	2bff      	cmp	r3, #255	; 0xff
 8001c10:	d802      	bhi.n	8001c18 <HAL_GPIO_Init+0x14c>
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	e002      	b.n	8001c1e <HAL_GPIO_Init+0x152>
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	3b08      	subs	r3, #8
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	210f      	movs	r1, #15
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	401a      	ands	r2, r3
 8001c30:	6a39      	ldr	r1, [r7, #32]
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	fa01 f303 	lsl.w	r3, r1, r3
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f000 80b1 	beq.w	8001dae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c4c:	4b4d      	ldr	r3, [pc, #308]	; (8001d84 <HAL_GPIO_Init+0x2b8>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	4a4c      	ldr	r2, [pc, #304]	; (8001d84 <HAL_GPIO_Init+0x2b8>)
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	6193      	str	r3, [r2, #24]
 8001c58:	4b4a      	ldr	r3, [pc, #296]	; (8001d84 <HAL_GPIO_Init+0x2b8>)
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c64:	4a48      	ldr	r2, [pc, #288]	; (8001d88 <HAL_GPIO_Init+0x2bc>)
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	089b      	lsrs	r3, r3, #2
 8001c6a:	3302      	adds	r3, #2
 8001c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	f003 0303 	and.w	r3, r3, #3
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	220f      	movs	r2, #15
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	4013      	ands	r3, r2
 8001c86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a40      	ldr	r2, [pc, #256]	; (8001d8c <HAL_GPIO_Init+0x2c0>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d013      	beq.n	8001cb8 <HAL_GPIO_Init+0x1ec>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a3f      	ldr	r2, [pc, #252]	; (8001d90 <HAL_GPIO_Init+0x2c4>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d00d      	beq.n	8001cb4 <HAL_GPIO_Init+0x1e8>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a3e      	ldr	r2, [pc, #248]	; (8001d94 <HAL_GPIO_Init+0x2c8>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d007      	beq.n	8001cb0 <HAL_GPIO_Init+0x1e4>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a3d      	ldr	r2, [pc, #244]	; (8001d98 <HAL_GPIO_Init+0x2cc>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d101      	bne.n	8001cac <HAL_GPIO_Init+0x1e0>
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e006      	b.n	8001cba <HAL_GPIO_Init+0x1ee>
 8001cac:	2304      	movs	r3, #4
 8001cae:	e004      	b.n	8001cba <HAL_GPIO_Init+0x1ee>
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	e002      	b.n	8001cba <HAL_GPIO_Init+0x1ee>
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e000      	b.n	8001cba <HAL_GPIO_Init+0x1ee>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cbc:	f002 0203 	and.w	r2, r2, #3
 8001cc0:	0092      	lsls	r2, r2, #2
 8001cc2:	4093      	lsls	r3, r2
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cca:	492f      	ldr	r1, [pc, #188]	; (8001d88 <HAL_GPIO_Init+0x2bc>)
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	089b      	lsrs	r3, r3, #2
 8001cd0:	3302      	adds	r3, #2
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d006      	beq.n	8001cf2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ce4:	4b2d      	ldr	r3, [pc, #180]	; (8001d9c <HAL_GPIO_Init+0x2d0>)
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	492c      	ldr	r1, [pc, #176]	; (8001d9c <HAL_GPIO_Init+0x2d0>)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	608b      	str	r3, [r1, #8]
 8001cf0:	e006      	b.n	8001d00 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cf2:	4b2a      	ldr	r3, [pc, #168]	; (8001d9c <HAL_GPIO_Init+0x2d0>)
 8001cf4:	689a      	ldr	r2, [r3, #8]
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	4928      	ldr	r1, [pc, #160]	; (8001d9c <HAL_GPIO_Init+0x2d0>)
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d006      	beq.n	8001d1a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d0c:	4b23      	ldr	r3, [pc, #140]	; (8001d9c <HAL_GPIO_Init+0x2d0>)
 8001d0e:	68da      	ldr	r2, [r3, #12]
 8001d10:	4922      	ldr	r1, [pc, #136]	; (8001d9c <HAL_GPIO_Init+0x2d0>)
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	60cb      	str	r3, [r1, #12]
 8001d18:	e006      	b.n	8001d28 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d1a:	4b20      	ldr	r3, [pc, #128]	; (8001d9c <HAL_GPIO_Init+0x2d0>)
 8001d1c:	68da      	ldr	r2, [r3, #12]
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	43db      	mvns	r3, r3
 8001d22:	491e      	ldr	r1, [pc, #120]	; (8001d9c <HAL_GPIO_Init+0x2d0>)
 8001d24:	4013      	ands	r3, r2
 8001d26:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d006      	beq.n	8001d42 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d34:	4b19      	ldr	r3, [pc, #100]	; (8001d9c <HAL_GPIO_Init+0x2d0>)
 8001d36:	685a      	ldr	r2, [r3, #4]
 8001d38:	4918      	ldr	r1, [pc, #96]	; (8001d9c <HAL_GPIO_Init+0x2d0>)
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	604b      	str	r3, [r1, #4]
 8001d40:	e006      	b.n	8001d50 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d42:	4b16      	ldr	r3, [pc, #88]	; (8001d9c <HAL_GPIO_Init+0x2d0>)
 8001d44:	685a      	ldr	r2, [r3, #4]
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	4914      	ldr	r1, [pc, #80]	; (8001d9c <HAL_GPIO_Init+0x2d0>)
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d021      	beq.n	8001da0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d5c:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <HAL_GPIO_Init+0x2d0>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	490e      	ldr	r1, [pc, #56]	; (8001d9c <HAL_GPIO_Init+0x2d0>)
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	600b      	str	r3, [r1, #0]
 8001d68:	e021      	b.n	8001dae <HAL_GPIO_Init+0x2e2>
 8001d6a:	bf00      	nop
 8001d6c:	10320000 	.word	0x10320000
 8001d70:	10310000 	.word	0x10310000
 8001d74:	10220000 	.word	0x10220000
 8001d78:	10210000 	.word	0x10210000
 8001d7c:	10120000 	.word	0x10120000
 8001d80:	10110000 	.word	0x10110000
 8001d84:	40021000 	.word	0x40021000
 8001d88:	40010000 	.word	0x40010000
 8001d8c:	40010800 	.word	0x40010800
 8001d90:	40010c00 	.word	0x40010c00
 8001d94:	40011000 	.word	0x40011000
 8001d98:	40011400 	.word	0x40011400
 8001d9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001da0:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <HAL_GPIO_Init+0x304>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	43db      	mvns	r3, r3
 8001da8:	4909      	ldr	r1, [pc, #36]	; (8001dd0 <HAL_GPIO_Init+0x304>)
 8001daa:	4013      	ands	r3, r2
 8001dac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db0:	3301      	adds	r3, #1
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dba:	fa22 f303 	lsr.w	r3, r2, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f47f ae8e 	bne.w	8001ae0 <HAL_GPIO_Init+0x14>
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	bf00      	nop
 8001dc8:	372c      	adds	r7, #44	; 0x2c
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr
 8001dd0:	40010400 	.word	0x40010400

08001dd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e272      	b.n	80022cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f000 8087 	beq.w	8001f02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001df4:	4b92      	ldr	r3, [pc, #584]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 030c 	and.w	r3, r3, #12
 8001dfc:	2b04      	cmp	r3, #4
 8001dfe:	d00c      	beq.n	8001e1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e00:	4b8f      	ldr	r3, [pc, #572]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 030c 	and.w	r3, r3, #12
 8001e08:	2b08      	cmp	r3, #8
 8001e0a:	d112      	bne.n	8001e32 <HAL_RCC_OscConfig+0x5e>
 8001e0c:	4b8c      	ldr	r3, [pc, #560]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e18:	d10b      	bne.n	8001e32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e1a:	4b89      	ldr	r3, [pc, #548]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d06c      	beq.n	8001f00 <HAL_RCC_OscConfig+0x12c>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d168      	bne.n	8001f00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e24c      	b.n	80022cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e3a:	d106      	bne.n	8001e4a <HAL_RCC_OscConfig+0x76>
 8001e3c:	4b80      	ldr	r3, [pc, #512]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a7f      	ldr	r2, [pc, #508]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e46:	6013      	str	r3, [r2, #0]
 8001e48:	e02e      	b.n	8001ea8 <HAL_RCC_OscConfig+0xd4>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d10c      	bne.n	8001e6c <HAL_RCC_OscConfig+0x98>
 8001e52:	4b7b      	ldr	r3, [pc, #492]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a7a      	ldr	r2, [pc, #488]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e5c:	6013      	str	r3, [r2, #0]
 8001e5e:	4b78      	ldr	r3, [pc, #480]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a77      	ldr	r2, [pc, #476]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	e01d      	b.n	8001ea8 <HAL_RCC_OscConfig+0xd4>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e74:	d10c      	bne.n	8001e90 <HAL_RCC_OscConfig+0xbc>
 8001e76:	4b72      	ldr	r3, [pc, #456]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a71      	ldr	r2, [pc, #452]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	4b6f      	ldr	r3, [pc, #444]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a6e      	ldr	r2, [pc, #440]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e8c:	6013      	str	r3, [r2, #0]
 8001e8e:	e00b      	b.n	8001ea8 <HAL_RCC_OscConfig+0xd4>
 8001e90:	4b6b      	ldr	r3, [pc, #428]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a6a      	ldr	r2, [pc, #424]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e9a:	6013      	str	r3, [r2, #0]
 8001e9c:	4b68      	ldr	r3, [pc, #416]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a67      	ldr	r2, [pc, #412]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001ea2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ea6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d013      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb0:	f7fe ff58 	bl	8000d64 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eb8:	f7fe ff54 	bl	8000d64 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b64      	cmp	r3, #100	; 0x64
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e200      	b.n	80022cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eca:	4b5d      	ldr	r3, [pc, #372]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d0f0      	beq.n	8001eb8 <HAL_RCC_OscConfig+0xe4>
 8001ed6:	e014      	b.n	8001f02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed8:	f7fe ff44 	bl	8000d64 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ee0:	f7fe ff40 	bl	8000d64 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b64      	cmp	r3, #100	; 0x64
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e1ec      	b.n	80022cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ef2:	4b53      	ldr	r3, [pc, #332]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f0      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x10c>
 8001efe:	e000      	b.n	8001f02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d063      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f0e:	4b4c      	ldr	r3, [pc, #304]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f003 030c 	and.w	r3, r3, #12
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00b      	beq.n	8001f32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f1a:	4b49      	ldr	r3, [pc, #292]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f003 030c 	and.w	r3, r3, #12
 8001f22:	2b08      	cmp	r3, #8
 8001f24:	d11c      	bne.n	8001f60 <HAL_RCC_OscConfig+0x18c>
 8001f26:	4b46      	ldr	r3, [pc, #280]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d116      	bne.n	8001f60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f32:	4b43      	ldr	r3, [pc, #268]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d005      	beq.n	8001f4a <HAL_RCC_OscConfig+0x176>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d001      	beq.n	8001f4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e1c0      	b.n	80022cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f4a:	4b3d      	ldr	r3, [pc, #244]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4939      	ldr	r1, [pc, #228]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f5e:	e03a      	b.n	8001fd6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d020      	beq.n	8001faa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f68:	4b36      	ldr	r3, [pc, #216]	; (8002044 <HAL_RCC_OscConfig+0x270>)
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6e:	f7fe fef9 	bl	8000d64 <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f74:	e008      	b.n	8001f88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f76:	f7fe fef5 	bl	8000d64 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e1a1      	b.n	80022cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f88:	4b2d      	ldr	r3, [pc, #180]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d0f0      	beq.n	8001f76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f94:	4b2a      	ldr	r3, [pc, #168]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	695b      	ldr	r3, [r3, #20]
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	4927      	ldr	r1, [pc, #156]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	600b      	str	r3, [r1, #0]
 8001fa8:	e015      	b.n	8001fd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001faa:	4b26      	ldr	r3, [pc, #152]	; (8002044 <HAL_RCC_OscConfig+0x270>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb0:	f7fe fed8 	bl	8000d64 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fb8:	f7fe fed4 	bl	8000d64 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e180      	b.n	80022cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fca:	4b1d      	ldr	r3, [pc, #116]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f0      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d03a      	beq.n	8002058 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d019      	beq.n	800201e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fea:	4b17      	ldr	r3, [pc, #92]	; (8002048 <HAL_RCC_OscConfig+0x274>)
 8001fec:	2201      	movs	r2, #1
 8001fee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff0:	f7fe feb8 	bl	8000d64 <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ff8:	f7fe feb4 	bl	8000d64 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e160      	b.n	80022cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800200a:	4b0d      	ldr	r3, [pc, #52]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0f0      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002016:	2001      	movs	r0, #1
 8002018:	f000 face 	bl	80025b8 <RCC_Delay>
 800201c:	e01c      	b.n	8002058 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800201e:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <HAL_RCC_OscConfig+0x274>)
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002024:	f7fe fe9e 	bl	8000d64 <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800202a:	e00f      	b.n	800204c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800202c:	f7fe fe9a 	bl	8000d64 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d908      	bls.n	800204c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e146      	b.n	80022cc <HAL_RCC_OscConfig+0x4f8>
 800203e:	bf00      	nop
 8002040:	40021000 	.word	0x40021000
 8002044:	42420000 	.word	0x42420000
 8002048:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800204c:	4b92      	ldr	r3, [pc, #584]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 800204e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1e9      	bne.n	800202c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 80a6 	beq.w	80021b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002066:	2300      	movs	r3, #0
 8002068:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800206a:	4b8b      	ldr	r3, [pc, #556]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10d      	bne.n	8002092 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002076:	4b88      	ldr	r3, [pc, #544]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	4a87      	ldr	r2, [pc, #540]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 800207c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002080:	61d3      	str	r3, [r2, #28]
 8002082:	4b85      	ldr	r3, [pc, #532]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208a:	60bb      	str	r3, [r7, #8]
 800208c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800208e:	2301      	movs	r3, #1
 8002090:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002092:	4b82      	ldr	r3, [pc, #520]	; (800229c <HAL_RCC_OscConfig+0x4c8>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209a:	2b00      	cmp	r3, #0
 800209c:	d118      	bne.n	80020d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800209e:	4b7f      	ldr	r3, [pc, #508]	; (800229c <HAL_RCC_OscConfig+0x4c8>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a7e      	ldr	r2, [pc, #504]	; (800229c <HAL_RCC_OscConfig+0x4c8>)
 80020a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020aa:	f7fe fe5b 	bl	8000d64 <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020b2:	f7fe fe57 	bl	8000d64 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b64      	cmp	r3, #100	; 0x64
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e103      	b.n	80022cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c4:	4b75      	ldr	r3, [pc, #468]	; (800229c <HAL_RCC_OscConfig+0x4c8>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0f0      	beq.n	80020b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d106      	bne.n	80020e6 <HAL_RCC_OscConfig+0x312>
 80020d8:	4b6f      	ldr	r3, [pc, #444]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	4a6e      	ldr	r2, [pc, #440]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 80020de:	f043 0301 	orr.w	r3, r3, #1
 80020e2:	6213      	str	r3, [r2, #32]
 80020e4:	e02d      	b.n	8002142 <HAL_RCC_OscConfig+0x36e>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10c      	bne.n	8002108 <HAL_RCC_OscConfig+0x334>
 80020ee:	4b6a      	ldr	r3, [pc, #424]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	4a69      	ldr	r2, [pc, #420]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 80020f4:	f023 0301 	bic.w	r3, r3, #1
 80020f8:	6213      	str	r3, [r2, #32]
 80020fa:	4b67      	ldr	r3, [pc, #412]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 80020fc:	6a1b      	ldr	r3, [r3, #32]
 80020fe:	4a66      	ldr	r2, [pc, #408]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 8002100:	f023 0304 	bic.w	r3, r3, #4
 8002104:	6213      	str	r3, [r2, #32]
 8002106:	e01c      	b.n	8002142 <HAL_RCC_OscConfig+0x36e>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	2b05      	cmp	r3, #5
 800210e:	d10c      	bne.n	800212a <HAL_RCC_OscConfig+0x356>
 8002110:	4b61      	ldr	r3, [pc, #388]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	4a60      	ldr	r2, [pc, #384]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 8002116:	f043 0304 	orr.w	r3, r3, #4
 800211a:	6213      	str	r3, [r2, #32]
 800211c:	4b5e      	ldr	r3, [pc, #376]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 800211e:	6a1b      	ldr	r3, [r3, #32]
 8002120:	4a5d      	ldr	r2, [pc, #372]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 8002122:	f043 0301 	orr.w	r3, r3, #1
 8002126:	6213      	str	r3, [r2, #32]
 8002128:	e00b      	b.n	8002142 <HAL_RCC_OscConfig+0x36e>
 800212a:	4b5b      	ldr	r3, [pc, #364]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	4a5a      	ldr	r2, [pc, #360]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 8002130:	f023 0301 	bic.w	r3, r3, #1
 8002134:	6213      	str	r3, [r2, #32]
 8002136:	4b58      	ldr	r3, [pc, #352]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	4a57      	ldr	r2, [pc, #348]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 800213c:	f023 0304 	bic.w	r3, r3, #4
 8002140:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d015      	beq.n	8002176 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800214a:	f7fe fe0b 	bl	8000d64 <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002150:	e00a      	b.n	8002168 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002152:	f7fe fe07 	bl	8000d64 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002160:	4293      	cmp	r3, r2
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e0b1      	b.n	80022cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002168:	4b4b      	ldr	r3, [pc, #300]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d0ee      	beq.n	8002152 <HAL_RCC_OscConfig+0x37e>
 8002174:	e014      	b.n	80021a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002176:	f7fe fdf5 	bl	8000d64 <HAL_GetTick>
 800217a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800217c:	e00a      	b.n	8002194 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800217e:	f7fe fdf1 	bl	8000d64 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	f241 3288 	movw	r2, #5000	; 0x1388
 800218c:	4293      	cmp	r3, r2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e09b      	b.n	80022cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002194:	4b40      	ldr	r3, [pc, #256]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1ee      	bne.n	800217e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021a0:	7dfb      	ldrb	r3, [r7, #23]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d105      	bne.n	80021b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021a6:	4b3c      	ldr	r3, [pc, #240]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	4a3b      	ldr	r2, [pc, #236]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 80021ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f000 8087 	beq.w	80022ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021bc:	4b36      	ldr	r3, [pc, #216]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 030c 	and.w	r3, r3, #12
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	d061      	beq.n	800228c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	69db      	ldr	r3, [r3, #28]
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d146      	bne.n	800225e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d0:	4b33      	ldr	r3, [pc, #204]	; (80022a0 <HAL_RCC_OscConfig+0x4cc>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d6:	f7fe fdc5 	bl	8000d64 <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021dc:	e008      	b.n	80021f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021de:	f7fe fdc1 	bl	8000d64 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e06d      	b.n	80022cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021f0:	4b29      	ldr	r3, [pc, #164]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1f0      	bne.n	80021de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002204:	d108      	bne.n	8002218 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002206:	4b24      	ldr	r3, [pc, #144]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	4921      	ldr	r1, [pc, #132]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 8002214:	4313      	orrs	r3, r2
 8002216:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002218:	4b1f      	ldr	r3, [pc, #124]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a19      	ldr	r1, [r3, #32]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002228:	430b      	orrs	r3, r1
 800222a:	491b      	ldr	r1, [pc, #108]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 800222c:	4313      	orrs	r3, r2
 800222e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002230:	4b1b      	ldr	r3, [pc, #108]	; (80022a0 <HAL_RCC_OscConfig+0x4cc>)
 8002232:	2201      	movs	r2, #1
 8002234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002236:	f7fe fd95 	bl	8000d64 <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800223c:	e008      	b.n	8002250 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800223e:	f7fe fd91 	bl	8000d64 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e03d      	b.n	80022cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002250:	4b11      	ldr	r3, [pc, #68]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0f0      	beq.n	800223e <HAL_RCC_OscConfig+0x46a>
 800225c:	e035      	b.n	80022ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800225e:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <HAL_RCC_OscConfig+0x4cc>)
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002264:	f7fe fd7e 	bl	8000d64 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800226c:	f7fe fd7a 	bl	8000d64 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e026      	b.n	80022cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800227e:	4b06      	ldr	r3, [pc, #24]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1f0      	bne.n	800226c <HAL_RCC_OscConfig+0x498>
 800228a:	e01e      	b.n	80022ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	69db      	ldr	r3, [r3, #28]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d107      	bne.n	80022a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e019      	b.n	80022cc <HAL_RCC_OscConfig+0x4f8>
 8002298:	40021000 	.word	0x40021000
 800229c:	40007000 	.word	0x40007000
 80022a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022a4:	4b0b      	ldr	r3, [pc, #44]	; (80022d4 <HAL_RCC_OscConfig+0x500>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d106      	bne.n	80022c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d001      	beq.n	80022ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e000      	b.n	80022cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3718      	adds	r7, #24
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40021000 	.word	0x40021000

080022d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e0d0      	b.n	800248e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022ec:	4b6a      	ldr	r3, [pc, #424]	; (8002498 <HAL_RCC_ClockConfig+0x1c0>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0307 	and.w	r3, r3, #7
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d910      	bls.n	800231c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022fa:	4b67      	ldr	r3, [pc, #412]	; (8002498 <HAL_RCC_ClockConfig+0x1c0>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f023 0207 	bic.w	r2, r3, #7
 8002302:	4965      	ldr	r1, [pc, #404]	; (8002498 <HAL_RCC_ClockConfig+0x1c0>)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	4313      	orrs	r3, r2
 8002308:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800230a:	4b63      	ldr	r3, [pc, #396]	; (8002498 <HAL_RCC_ClockConfig+0x1c0>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	429a      	cmp	r2, r3
 8002316:	d001      	beq.n	800231c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e0b8      	b.n	800248e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d020      	beq.n	800236a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0304 	and.w	r3, r3, #4
 8002330:	2b00      	cmp	r3, #0
 8002332:	d005      	beq.n	8002340 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002334:	4b59      	ldr	r3, [pc, #356]	; (800249c <HAL_RCC_ClockConfig+0x1c4>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	4a58      	ldr	r2, [pc, #352]	; (800249c <HAL_RCC_ClockConfig+0x1c4>)
 800233a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800233e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0308 	and.w	r3, r3, #8
 8002348:	2b00      	cmp	r3, #0
 800234a:	d005      	beq.n	8002358 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800234c:	4b53      	ldr	r3, [pc, #332]	; (800249c <HAL_RCC_ClockConfig+0x1c4>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	4a52      	ldr	r2, [pc, #328]	; (800249c <HAL_RCC_ClockConfig+0x1c4>)
 8002352:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002356:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002358:	4b50      	ldr	r3, [pc, #320]	; (800249c <HAL_RCC_ClockConfig+0x1c4>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	494d      	ldr	r1, [pc, #308]	; (800249c <HAL_RCC_ClockConfig+0x1c4>)
 8002366:	4313      	orrs	r3, r2
 8002368:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	2b00      	cmp	r3, #0
 8002374:	d040      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d107      	bne.n	800238e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800237e:	4b47      	ldr	r3, [pc, #284]	; (800249c <HAL_RCC_ClockConfig+0x1c4>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d115      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e07f      	b.n	800248e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b02      	cmp	r3, #2
 8002394:	d107      	bne.n	80023a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002396:	4b41      	ldr	r3, [pc, #260]	; (800249c <HAL_RCC_ClockConfig+0x1c4>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d109      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e073      	b.n	800248e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a6:	4b3d      	ldr	r3, [pc, #244]	; (800249c <HAL_RCC_ClockConfig+0x1c4>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e06b      	b.n	800248e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023b6:	4b39      	ldr	r3, [pc, #228]	; (800249c <HAL_RCC_ClockConfig+0x1c4>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f023 0203 	bic.w	r2, r3, #3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	4936      	ldr	r1, [pc, #216]	; (800249c <HAL_RCC_ClockConfig+0x1c4>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023c8:	f7fe fccc 	bl	8000d64 <HAL_GetTick>
 80023cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ce:	e00a      	b.n	80023e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023d0:	f7fe fcc8 	bl	8000d64 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	f241 3288 	movw	r2, #5000	; 0x1388
 80023de:	4293      	cmp	r3, r2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e053      	b.n	800248e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e6:	4b2d      	ldr	r3, [pc, #180]	; (800249c <HAL_RCC_ClockConfig+0x1c4>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f003 020c 	and.w	r2, r3, #12
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d1eb      	bne.n	80023d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023f8:	4b27      	ldr	r3, [pc, #156]	; (8002498 <HAL_RCC_ClockConfig+0x1c0>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	429a      	cmp	r2, r3
 8002404:	d210      	bcs.n	8002428 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002406:	4b24      	ldr	r3, [pc, #144]	; (8002498 <HAL_RCC_ClockConfig+0x1c0>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f023 0207 	bic.w	r2, r3, #7
 800240e:	4922      	ldr	r1, [pc, #136]	; (8002498 <HAL_RCC_ClockConfig+0x1c0>)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	4313      	orrs	r3, r2
 8002414:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002416:	4b20      	ldr	r3, [pc, #128]	; (8002498 <HAL_RCC_ClockConfig+0x1c0>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	429a      	cmp	r2, r3
 8002422:	d001      	beq.n	8002428 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e032      	b.n	800248e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	2b00      	cmp	r3, #0
 8002432:	d008      	beq.n	8002446 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002434:	4b19      	ldr	r3, [pc, #100]	; (800249c <HAL_RCC_ClockConfig+0x1c4>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	4916      	ldr	r1, [pc, #88]	; (800249c <HAL_RCC_ClockConfig+0x1c4>)
 8002442:	4313      	orrs	r3, r2
 8002444:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0308 	and.w	r3, r3, #8
 800244e:	2b00      	cmp	r3, #0
 8002450:	d009      	beq.n	8002466 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002452:	4b12      	ldr	r3, [pc, #72]	; (800249c <HAL_RCC_ClockConfig+0x1c4>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	490e      	ldr	r1, [pc, #56]	; (800249c <HAL_RCC_ClockConfig+0x1c4>)
 8002462:	4313      	orrs	r3, r2
 8002464:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002466:	f000 f821 	bl	80024ac <HAL_RCC_GetSysClockFreq>
 800246a:	4602      	mov	r2, r0
 800246c:	4b0b      	ldr	r3, [pc, #44]	; (800249c <HAL_RCC_ClockConfig+0x1c4>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	091b      	lsrs	r3, r3, #4
 8002472:	f003 030f 	and.w	r3, r3, #15
 8002476:	490a      	ldr	r1, [pc, #40]	; (80024a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002478:	5ccb      	ldrb	r3, [r1, r3]
 800247a:	fa22 f303 	lsr.w	r3, r2, r3
 800247e:	4a09      	ldr	r2, [pc, #36]	; (80024a4 <HAL_RCC_ClockConfig+0x1cc>)
 8002480:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002482:	4b09      	ldr	r3, [pc, #36]	; (80024a8 <HAL_RCC_ClockConfig+0x1d0>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f7fe fc2a 	bl	8000ce0 <HAL_InitTick>

  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	40022000 	.word	0x40022000
 800249c:	40021000 	.word	0x40021000
 80024a0:	08002820 	.word	0x08002820
 80024a4:	20000008 	.word	0x20000008
 80024a8:	2000000c 	.word	0x2000000c

080024ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b087      	sub	sp, #28
 80024b0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024b2:	2300      	movs	r3, #0
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	2300      	movs	r3, #0
 80024b8:	60bb      	str	r3, [r7, #8]
 80024ba:	2300      	movs	r3, #0
 80024bc:	617b      	str	r3, [r7, #20]
 80024be:	2300      	movs	r3, #0
 80024c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024c2:	2300      	movs	r3, #0
 80024c4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024c6:	4b1e      	ldr	r3, [pc, #120]	; (8002540 <HAL_RCC_GetSysClockFreq+0x94>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f003 030c 	and.w	r3, r3, #12
 80024d2:	2b04      	cmp	r3, #4
 80024d4:	d002      	beq.n	80024dc <HAL_RCC_GetSysClockFreq+0x30>
 80024d6:	2b08      	cmp	r3, #8
 80024d8:	d003      	beq.n	80024e2 <HAL_RCC_GetSysClockFreq+0x36>
 80024da:	e027      	b.n	800252c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024dc:	4b19      	ldr	r3, [pc, #100]	; (8002544 <HAL_RCC_GetSysClockFreq+0x98>)
 80024de:	613b      	str	r3, [r7, #16]
      break;
 80024e0:	e027      	b.n	8002532 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	0c9b      	lsrs	r3, r3, #18
 80024e6:	f003 030f 	and.w	r3, r3, #15
 80024ea:	4a17      	ldr	r2, [pc, #92]	; (8002548 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024ec:	5cd3      	ldrb	r3, [r2, r3]
 80024ee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d010      	beq.n	800251c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024fa:	4b11      	ldr	r3, [pc, #68]	; (8002540 <HAL_RCC_GetSysClockFreq+0x94>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	0c5b      	lsrs	r3, r3, #17
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	4a11      	ldr	r2, [pc, #68]	; (800254c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002506:	5cd3      	ldrb	r3, [r2, r3]
 8002508:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a0d      	ldr	r2, [pc, #52]	; (8002544 <HAL_RCC_GetSysClockFreq+0x98>)
 800250e:	fb03 f202 	mul.w	r2, r3, r2
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	fbb2 f3f3 	udiv	r3, r2, r3
 8002518:	617b      	str	r3, [r7, #20]
 800251a:	e004      	b.n	8002526 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4a0c      	ldr	r2, [pc, #48]	; (8002550 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002520:	fb02 f303 	mul.w	r3, r2, r3
 8002524:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	613b      	str	r3, [r7, #16]
      break;
 800252a:	e002      	b.n	8002532 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800252c:	4b05      	ldr	r3, [pc, #20]	; (8002544 <HAL_RCC_GetSysClockFreq+0x98>)
 800252e:	613b      	str	r3, [r7, #16]
      break;
 8002530:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002532:	693b      	ldr	r3, [r7, #16]
}
 8002534:	4618      	mov	r0, r3
 8002536:	371c      	adds	r7, #28
 8002538:	46bd      	mov	sp, r7
 800253a:	bc80      	pop	{r7}
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	40021000 	.word	0x40021000
 8002544:	007a1200 	.word	0x007a1200
 8002548:	08002838 	.word	0x08002838
 800254c:	08002848 	.word	0x08002848
 8002550:	003d0900 	.word	0x003d0900

08002554 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002558:	4b02      	ldr	r3, [pc, #8]	; (8002564 <HAL_RCC_GetHCLKFreq+0x10>)
 800255a:	681b      	ldr	r3, [r3, #0]
}
 800255c:	4618      	mov	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr
 8002564:	20000008 	.word	0x20000008

08002568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800256c:	f7ff fff2 	bl	8002554 <HAL_RCC_GetHCLKFreq>
 8002570:	4602      	mov	r2, r0
 8002572:	4b05      	ldr	r3, [pc, #20]	; (8002588 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	0a1b      	lsrs	r3, r3, #8
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	4903      	ldr	r1, [pc, #12]	; (800258c <HAL_RCC_GetPCLK1Freq+0x24>)
 800257e:	5ccb      	ldrb	r3, [r1, r3]
 8002580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002584:	4618      	mov	r0, r3
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40021000 	.word	0x40021000
 800258c:	08002830 	.word	0x08002830

08002590 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002594:	f7ff ffde 	bl	8002554 <HAL_RCC_GetHCLKFreq>
 8002598:	4602      	mov	r2, r0
 800259a:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	0adb      	lsrs	r3, r3, #11
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	4903      	ldr	r1, [pc, #12]	; (80025b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025a6:	5ccb      	ldrb	r3, [r1, r3]
 80025a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40021000 	.word	0x40021000
 80025b4:	08002830 	.word	0x08002830

080025b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025c0:	4b0a      	ldr	r3, [pc, #40]	; (80025ec <RCC_Delay+0x34>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a0a      	ldr	r2, [pc, #40]	; (80025f0 <RCC_Delay+0x38>)
 80025c6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ca:	0a5b      	lsrs	r3, r3, #9
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	fb02 f303 	mul.w	r3, r2, r3
 80025d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025d4:	bf00      	nop
  }
  while (Delay --);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	1e5a      	subs	r2, r3, #1
 80025da:	60fa      	str	r2, [r7, #12]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1f9      	bne.n	80025d4 <RCC_Delay+0x1c>
}
 80025e0:	bf00      	nop
 80025e2:	bf00      	nop
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr
 80025ec:	20000008 	.word	0x20000008
 80025f0:	10624dd3 	.word	0x10624dd3

080025f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e042      	b.n	800268c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d106      	bne.n	8002620 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7fe faa0 	bl	8000b60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2224      	movs	r2, #36	; 0x24
 8002624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68da      	ldr	r2, [r3, #12]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002636:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 f82b 	bl	8002694 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	691a      	ldr	r2, [r3, #16]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800264c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	695a      	ldr	r2, [r3, #20]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800265c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68da      	ldr	r2, [r3, #12]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800266c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2220      	movs	r2, #32
 8002678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2220      	movs	r2, #32
 8002680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68da      	ldr	r2, [r3, #12]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	430a      	orrs	r2, r1
 80026b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	689a      	ldr	r2, [r3, #8]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	431a      	orrs	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80026ce:	f023 030c 	bic.w	r3, r3, #12
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6812      	ldr	r2, [r2, #0]
 80026d6:	68b9      	ldr	r1, [r7, #8]
 80026d8:	430b      	orrs	r3, r1
 80026da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699a      	ldr	r2, [r3, #24]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a2c      	ldr	r2, [pc, #176]	; (80027a8 <UART_SetConfig+0x114>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d103      	bne.n	8002704 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80026fc:	f7ff ff48 	bl	8002590 <HAL_RCC_GetPCLK2Freq>
 8002700:	60f8      	str	r0, [r7, #12]
 8002702:	e002      	b.n	800270a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002704:	f7ff ff30 	bl	8002568 <HAL_RCC_GetPCLK1Freq>
 8002708:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	4613      	mov	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4413      	add	r3, r2
 8002712:	009a      	lsls	r2, r3, #2
 8002714:	441a      	add	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002720:	4a22      	ldr	r2, [pc, #136]	; (80027ac <UART_SetConfig+0x118>)
 8002722:	fba2 2303 	umull	r2, r3, r2, r3
 8002726:	095b      	lsrs	r3, r3, #5
 8002728:	0119      	lsls	r1, r3, #4
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	4613      	mov	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	009a      	lsls	r2, r3, #2
 8002734:	441a      	add	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002740:	4b1a      	ldr	r3, [pc, #104]	; (80027ac <UART_SetConfig+0x118>)
 8002742:	fba3 0302 	umull	r0, r3, r3, r2
 8002746:	095b      	lsrs	r3, r3, #5
 8002748:	2064      	movs	r0, #100	; 0x64
 800274a:	fb00 f303 	mul.w	r3, r0, r3
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	011b      	lsls	r3, r3, #4
 8002752:	3332      	adds	r3, #50	; 0x32
 8002754:	4a15      	ldr	r2, [pc, #84]	; (80027ac <UART_SetConfig+0x118>)
 8002756:	fba2 2303 	umull	r2, r3, r2, r3
 800275a:	095b      	lsrs	r3, r3, #5
 800275c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002760:	4419      	add	r1, r3
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	4613      	mov	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	009a      	lsls	r2, r3, #2
 800276c:	441a      	add	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	fbb2 f2f3 	udiv	r2, r2, r3
 8002778:	4b0c      	ldr	r3, [pc, #48]	; (80027ac <UART_SetConfig+0x118>)
 800277a:	fba3 0302 	umull	r0, r3, r3, r2
 800277e:	095b      	lsrs	r3, r3, #5
 8002780:	2064      	movs	r0, #100	; 0x64
 8002782:	fb00 f303 	mul.w	r3, r0, r3
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	011b      	lsls	r3, r3, #4
 800278a:	3332      	adds	r3, #50	; 0x32
 800278c:	4a07      	ldr	r2, [pc, #28]	; (80027ac <UART_SetConfig+0x118>)
 800278e:	fba2 2303 	umull	r2, r3, r2, r3
 8002792:	095b      	lsrs	r3, r3, #5
 8002794:	f003 020f 	and.w	r2, r3, #15
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	440a      	add	r2, r1
 800279e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80027a0:	bf00      	nop
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40013800 	.word	0x40013800
 80027ac:	51eb851f 	.word	0x51eb851f

080027b0 <memset>:
 80027b0:	4603      	mov	r3, r0
 80027b2:	4402      	add	r2, r0
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d100      	bne.n	80027ba <memset+0xa>
 80027b8:	4770      	bx	lr
 80027ba:	f803 1b01 	strb.w	r1, [r3], #1
 80027be:	e7f9      	b.n	80027b4 <memset+0x4>

080027c0 <__libc_init_array>:
 80027c0:	b570      	push	{r4, r5, r6, lr}
 80027c2:	2600      	movs	r6, #0
 80027c4:	4d0c      	ldr	r5, [pc, #48]	; (80027f8 <__libc_init_array+0x38>)
 80027c6:	4c0d      	ldr	r4, [pc, #52]	; (80027fc <__libc_init_array+0x3c>)
 80027c8:	1b64      	subs	r4, r4, r5
 80027ca:	10a4      	asrs	r4, r4, #2
 80027cc:	42a6      	cmp	r6, r4
 80027ce:	d109      	bne.n	80027e4 <__libc_init_array+0x24>
 80027d0:	f000 f81a 	bl	8002808 <_init>
 80027d4:	2600      	movs	r6, #0
 80027d6:	4d0a      	ldr	r5, [pc, #40]	; (8002800 <__libc_init_array+0x40>)
 80027d8:	4c0a      	ldr	r4, [pc, #40]	; (8002804 <__libc_init_array+0x44>)
 80027da:	1b64      	subs	r4, r4, r5
 80027dc:	10a4      	asrs	r4, r4, #2
 80027de:	42a6      	cmp	r6, r4
 80027e0:	d105      	bne.n	80027ee <__libc_init_array+0x2e>
 80027e2:	bd70      	pop	{r4, r5, r6, pc}
 80027e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80027e8:	4798      	blx	r3
 80027ea:	3601      	adds	r6, #1
 80027ec:	e7ee      	b.n	80027cc <__libc_init_array+0xc>
 80027ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80027f2:	4798      	blx	r3
 80027f4:	3601      	adds	r6, #1
 80027f6:	e7f2      	b.n	80027de <__libc_init_array+0x1e>
 80027f8:	0800284c 	.word	0x0800284c
 80027fc:	0800284c 	.word	0x0800284c
 8002800:	0800284c 	.word	0x0800284c
 8002804:	08002850 	.word	0x08002850

08002808 <_init>:
 8002808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800280a:	bf00      	nop
 800280c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800280e:	bc08      	pop	{r3}
 8002810:	469e      	mov	lr, r3
 8002812:	4770      	bx	lr

08002814 <_fini>:
 8002814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002816:	bf00      	nop
 8002818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800281a:	bc08      	pop	{r3}
 800281c:	469e      	mov	lr, r3
 800281e:	4770      	bx	lr
