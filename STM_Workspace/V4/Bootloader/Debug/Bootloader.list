
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002aac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08002bb8  08002bb8  00012bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bf4  08002bf4  00030008  2**0
                  CONTENTS
  4 .ARM          00000000  08002bf4  08002bf4  00030008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bf4  08002bf4  00030008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bf4  08002bf4  00012bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bf8  08002bf8  00012bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08002bfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .APPLICATION1_SECTION 00000004  08010000  08010000  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .APPLICATION2_SECTION 00000004  08010004  08010004  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000001c0  20000040  20000040  00030040  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  20000200  20000200  00030040  2**0
                  ALLOC
 13 .ARM.attributes 00000029  00000000  00000000  00030008  2**0
                  CONTENTS, READONLY
 14 .comment      00000086  00000000  00000000  00030031  2**0
                  CONTENTS, READONLY
 15 .debug_info   000081bc  00000000  00000000  000300b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00001e5a  00000000  00000000  00038273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000880  00000000  00000000  0003a0d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000662  00000000  00000000  0003a950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00017ad6  00000000  00000000  0003afb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0000b64a  00000000  00000000  00052a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0008301c  00000000  00000000  0005e0d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00002014  00000000  00000000  000e10f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000007e  00000000  00000000  000e3104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000040 	.word	0x20000040
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ba0 	.word	0x08002ba0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000044 	.word	0x20000044
 8000148:	08002ba0 	.word	0x08002ba0

0800014c <BL_Fetch_Commend>:
		&Bootloader_Jump_To_Address,&Bootloader_Erase_Flash,&Bootloader_Memory_Write,&Bootloader_Enable_R_Protection,
		&Bootloader_SetApplication_Flag,&Bootloader_Enable_W_Protection} ;


/*======================== Software Interface Definations  ====================*/
BL_Status BL_Fetch_Commend(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	/* To detect the status of function */
	BL_Status Status = BL_NACK;
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]

	/* To detect the status of uart in transmitting and receiving data */
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 8000156:	2301      	movs	r3, #1
 8000158:	71bb      	strb	r3, [r7, #6]

	/* The data length that the host should be transmit at first */
	uint8_t Data_Length = RESET;
 800015a:	2300      	movs	r3, #0
 800015c:	717b      	strb	r3, [r7, #5]

	/* To check on flags status of applications in first iteration */
	Global_Calling++;
 800015e:	4b2b      	ldr	r3, [pc, #172]	; (800020c <BL_Fetch_Commend+0xc0>)
 8000160:	781b      	ldrb	r3, [r3, #0]
 8000162:	3301      	adds	r3, #1
 8000164:	b2da      	uxtb	r2, r3
 8000166:	4b29      	ldr	r3, [pc, #164]	; (800020c <BL_Fetch_Commend+0xc0>)
 8000168:	701a      	strb	r2, [r3, #0]

	/* To Check on applications flags in firsts iteration */
	if (Global_Calling == FIRST_ITERATION){
 800016a:	4b28      	ldr	r3, [pc, #160]	; (800020c <BL_Fetch_Commend+0xc0>)
 800016c:	781b      	ldrb	r3, [r3, #0]
 800016e:	2b01      	cmp	r3, #1
 8000170:	d10c      	bne.n	800018c <BL_Fetch_Commend+0x40>
		/* To check on application 1 at first because it's the highest priority */
		if ( APP1_Flag == TURN_ON ){
 8000172:	4b27      	ldr	r3, [pc, #156]	; (8000210 <BL_Fetch_Commend+0xc4>)
 8000174:	681b      	ldr	r3, [r3, #0]
 8000176:	2b01      	cmp	r3, #1
 8000178:	d102      	bne.n	8000180 <BL_Fetch_Commend+0x34>
			Bootloader_Jump_To_User_App1();
 800017a:	f000 f957 	bl	800042c <Bootloader_Jump_To_User_App1>
 800017e:	e005      	b.n	800018c <BL_Fetch_Commend+0x40>
		}
		/* To check on application 1 at first because it's the second priority */
		else if ( APP2_Flag == TURN_ON ){
 8000180:	4b24      	ldr	r3, [pc, #144]	; (8000214 <BL_Fetch_Commend+0xc8>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	2b01      	cmp	r3, #1
 8000186:	d101      	bne.n	800018c <BL_Fetch_Commend+0x40>
			Bootloader_Jump_To_User_App2();
 8000188:	f000 f96e 	bl	8000468 <Bootloader_Jump_To_User_App2>
		}
	}

	/* To clear buffer of RX and prevent carbadge messages of buffer */
	memset(BL_HostBuffer, RESET , BL_HOST_BUFFER_RX_LENGTH);
 800018c:	22c8      	movs	r2, #200	; 0xc8
 800018e:	2100      	movs	r1, #0
 8000190:	4821      	ldr	r0, [pc, #132]	; (8000218 <BL_Fetch_Commend+0xcc>)
 8000192:	f002 fcd9 	bl	8002b48 <memset>
	BL_PrintMassage("Bootloader started..\r\n");
#endif
	/* Host commend format :
	   => Commend Length  (1 byte = Data_Length )
	 */
	HAL_Status = HAL_UART_Receive(BL_HOST_COMMUNICATION_UART, BL_HostBuffer, 1,
 8000196:	f04f 33ff 	mov.w	r3, #4294967295
 800019a:	2201      	movs	r2, #1
 800019c:	491e      	ldr	r1, [pc, #120]	; (8000218 <BL_Fetch_Commend+0xcc>)
 800019e:	481f      	ldr	r0, [pc, #124]	; (800021c <BL_Fetch_Commend+0xd0>)
 80001a0:	f002 fb43 	bl	800282a <HAL_UART_Receive>
 80001a4:	4603      	mov	r3, r0
 80001a6:	71bb      	strb	r3, [r7, #6]
			HAL_MAX_DELAY);

	if (HAL_Status != HAL_OK){
 80001a8:	79bb      	ldrb	r3, [r7, #6]
 80001aa:	2b00      	cmp	r3, #0
 80001ac:	d002      	beq.n	80001b4 <BL_Fetch_Commend+0x68>
		Status = BL_NACK ;
 80001ae:	2300      	movs	r3, #0
 80001b0:	71fb      	strb	r3, [r7, #7]
 80001b2:	e025      	b.n	8000200 <BL_Fetch_Commend+0xb4>
		 Where :
		 => Commend Code is the order that Host want to do in code
		 => Delails explain what you transmit
		 => CRC is safety algorthim on code
		 */
		Data_Length = BL_HostBuffer[0];
 80001b4:	4b18      	ldr	r3, [pc, #96]	; (8000218 <BL_Fetch_Commend+0xcc>)
 80001b6:	781b      	ldrb	r3, [r3, #0]
 80001b8:	717b      	strb	r3, [r7, #5]

		/* we determine the number of recieving bytes next from the first number transmit in first
		   time (using buffer Data_Length and store them in BL_HostBuffer) */
		HAL_Status = HAL_UART_Receive(BL_HOST_COMMUNICATION_UART, &BL_HostBuffer[1],
 80001ba:	797b      	ldrb	r3, [r7, #5]
 80001bc:	b29a      	uxth	r2, r3
 80001be:	f04f 33ff 	mov.w	r3, #4294967295
 80001c2:	4917      	ldr	r1, [pc, #92]	; (8000220 <BL_Fetch_Commend+0xd4>)
 80001c4:	4815      	ldr	r0, [pc, #84]	; (800021c <BL_Fetch_Commend+0xd0>)
 80001c6:	f002 fb30 	bl	800282a <HAL_UART_Receive>
 80001ca:	4603      	mov	r3, r0
 80001cc:	71bb      	strb	r3, [r7, #6]
				Data_Length, HAL_MAX_DELAY);

		/* if it don't recieve correctly */
		if (HAL_Status != HAL_OK){
 80001ce:	79bb      	ldrb	r3, [r7, #6]
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d002      	beq.n	80001da <BL_Fetch_Commend+0x8e>
			Status = BL_NACK ;
 80001d4:	2300      	movs	r3, #0
 80001d6:	71fb      	strb	r3, [r7, #7]
 80001d8:	e012      	b.n	8000200 <BL_Fetch_Commend+0xb4>
		}
		else {
			/* To jump on the target function from the previous commend */
			if (BL_HostBuffer[1]>=FIRST_COMMEND &&BL_HostBuffer[1]<=LAST_COMMEND ){
 80001da:	4b0f      	ldr	r3, [pc, #60]	; (8000218 <BL_Fetch_Commend+0xcc>)
 80001dc:	785b      	ldrb	r3, [r3, #1]
 80001de:	2b0f      	cmp	r3, #15
 80001e0:	d90c      	bls.n	80001fc <BL_Fetch_Commend+0xb0>
 80001e2:	4b0d      	ldr	r3, [pc, #52]	; (8000218 <BL_Fetch_Commend+0xcc>)
 80001e4:	785b      	ldrb	r3, [r3, #1]
 80001e6:	2b19      	cmp	r3, #25
 80001e8:	d808      	bhi.n	80001fc <BL_Fetch_Commend+0xb0>
				Bootloader_Functions[BL_HostBuffer[1]-FIRST_COMMEND](BL_HostBuffer);
 80001ea:	4b0b      	ldr	r3, [pc, #44]	; (8000218 <BL_Fetch_Commend+0xcc>)
 80001ec:	785b      	ldrb	r3, [r3, #1]
 80001ee:	3b10      	subs	r3, #16
 80001f0:	4a0c      	ldr	r2, [pc, #48]	; (8000224 <BL_Fetch_Commend+0xd8>)
 80001f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001f6:	4808      	ldr	r0, [pc, #32]	; (8000218 <BL_Fetch_Commend+0xcc>)
 80001f8:	4798      	blx	r3
 80001fa:	e001      	b.n	8000200 <BL_Fetch_Commend+0xb4>
			else {
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
				BL_PrintMassage ("%d\n",BL_HostBuffer[1]);
				BL_PrintMassage ("Invalid commend code recieved from host !! \r\n");
#endif
				Status = BL_NACK ;
 80001fc:	2300      	movs	r3, #0
 80001fe:	71fb      	strb	r3, [r7, #7]
			}
		}
	}
	return Status;
 8000200:	79fb      	ldrb	r3, [r7, #7]
}
 8000202:	4618      	mov	r0, r3
 8000204:	3708      	adds	r7, #8
 8000206:	46bd      	mov	sp, r7
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	20000124 	.word	0x20000124
 8000210:	08010000 	.word	0x08010000
 8000214:	08010004 	.word	0x08010004
 8000218:	2000005c 	.word	0x2000005c
 800021c:	2000014c 	.word	0x2000014c
 8000220:	2000005d 	.word	0x2000005d
 8000224:	2000000c 	.word	0x2000000c

08000228 <Bootloader_Send_Data_To_Host>:
	Bootloader_Send_Data_To_Host(&NACK_Value, 1);
}
#endif

/* Function to communicate with host */
static void Bootloader_Send_Data_To_Host(uint8_t *Host_Buffer , uint32_t Data_Len){
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
 8000230:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(BL_HOST_COMMUNICATION_UART,(uint8_t*) Host_Buffer,(uint16_t) Data_Len, HAL_MAX_DELAY);
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	b29a      	uxth	r2, r3
 8000236:	f04f 33ff 	mov.w	r3, #4294967295
 800023a:	6879      	ldr	r1, [r7, #4]
 800023c:	4803      	ldr	r0, [pc, #12]	; (800024c <Bootloader_Send_Data_To_Host+0x24>)
 800023e:	f002 fa71 	bl	8002724 <HAL_UART_Transmit>
}
 8000242:	bf00      	nop
 8000244:	3708      	adds	r7, #8
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	2000014c 	.word	0x2000014c

08000250 <Bootloader_Get_Version>:
 your packet is
   1- 1 byte for data length = 0x05
   2- 1 byte for commend number = 0x10
   3- 4 bytes for CRC verifications if we used python code as host
 */
static void Bootloader_Get_Version (uint8_t *Host_Buffer){
 8000250:	b580      	push	{r7, lr}
 8000252:	b084      	sub	sp, #16
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
		/* Sending Acknowledge message and number of bytes which will be sent */
		Bootloader_Send_ACK(4);
#endif


		if(MASTERID == Host_Buffer[2])
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	3302      	adds	r3, #2
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d00c      	beq.n	800027c <Bootloader_Get_Version+0x2c>
#elif(ECU_CONFIG == SLAVE1)
			/*Send error frame*/
#endif

		}
		else if(SLAVE1 == Host_Buffer[2])
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	3302      	adds	r3, #2
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	2b01      	cmp	r3, #1
 800026a:	d107      	bne.n	800027c <Bootloader_Get_Version+0x2c>

			HAL_UART_Receive(&huart2, Version, 4, HAL_MAX_DELAY); //Receive version

			Bootloader_Send_Data_To_Host(Version, 4);
#elif(ECU_CONFIG == SLAVE1)
			uint8_t BL_Version[4] = { CBL_VENDOR_SLAVE_ID, CBL_SW_MAJOR_VERSION,
 800026c:	4b05      	ldr	r3, [pc, #20]	; (8000284 <Bootloader_Get_Version+0x34>)
 800026e:	60fb      	str	r3, [r7, #12]
					CBL_SW_MINOR_VERSION, CBL_SW_PATCH_VERSION};

			Bootloader_Send_Data_To_Host(BL_Version, 4);
 8000270:	f107 030c 	add.w	r3, r7, #12
 8000274:	2104      	movs	r1, #4
 8000276:	4618      	mov	r0, r3
 8000278:	f7ff ffd6 	bl	8000228 <Bootloader_Send_Data_To_Host>
		BL_PrintMassage("CRC is failed\r\n");
#endif
		Bootloader_Send_NACK();
	}
#endif
}
 800027c:	bf00      	nop
 800027e:	3710      	adds	r7, #16
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}
 8000284:	0101046f 	.word	0x0101046f

08000288 <Bootloader_Get_Help>:
 Your packet is :
   1- 1 byte data length = 0x05
   2- 1 byte commend number = 0x11
   3- 4 bytes for CRC verifications if we used python code as host
 */
static void Bootloader_Get_Help (uint8_t *Host_Buffer){
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
#endif
		/* Sending Acknowledge message and number of bytes which will be sent */
		Bootloader_Send_ACK(NumberOfCommends);
#endif
		/* Sending the list of commends to meet the target from commend */
		Bootloader_Send_Data_To_Host(Bootloader_Supported_CMDs,NumberOfCommends);
 8000290:	210a      	movs	r1, #10
 8000292:	4803      	ldr	r0, [pc, #12]	; (80002a0 <Bootloader_Get_Help+0x18>)
 8000294:	f7ff ffc8 	bl	8000228 <Bootloader_Send_Data_To_Host>
		BL_PrintMassage("CRC is failed\r\n");
#endif
		Bootloader_Send_NACK();
	}
#endif
}
 8000298:	bf00      	nop
 800029a:	3708      	adds	r7, #8
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	20000000 	.word	0x20000000

080002a4 <Bootloader_Get_chip_Identification_Number>:
 Your packet is :
   1- 1 byte for data length = 0x05
   2- 1 byte for commend number = 0x12
   3- 4 bytes for CRC verifications if we used python code as host
 */
static void Bootloader_Get_chip_Identification_Number (uint8_t *Host_Buffer){
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b084      	sub	sp, #16
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0 ;
	/* Used to get CRC data */
	uint32_t Host_CRC32 = 0 ;
#endif
	/* Identify the id of used MCU */
	uint16_t MCU_IdentificationNumber = RESET ;
 80002ac:	2300      	movs	r3, #0
 80002ae:	81fb      	strh	r3, [r7, #14]
		/* Report MCU chip identification number */
		Bootloader_Send_ACK(2);
#endif

		/* Get MCU chip identification number */
		MCU_IdentificationNumber = (uint16_t)((DBGMCU->IDCODE)&0x00000FFF);
 80002b0:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <Bootloader_Get_chip_Identification_Number+0x30>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	b29b      	uxth	r3, r3
 80002b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80002ba:	b29b      	uxth	r3, r3
 80002bc:	81fb      	strh	r3, [r7, #14]

		Bootloader_Send_Data_To_Host((uint8_t *)(&MCU_IdentificationNumber),2);
 80002be:	f107 030e 	add.w	r3, r7, #14
 80002c2:	2102      	movs	r1, #2
 80002c4:	4618      	mov	r0, r3
 80002c6:	f7ff ffaf 	bl	8000228 <Bootloader_Send_Data_To_Host>
		BL_PrintMassage("CRC is failed\r\n");
#endif
		Bootloader_Send_NACK();
	}
#endif
}
 80002ca:	bf00      	nop
 80002cc:	3710      	adds	r7, #16
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	e0042000 	.word	0xe0042000

080002d8 <CBL_STM32F103_GET_RDP_Level>:

/* Get level of protection to flash memory */
static uint8_t CBL_STM32F103_GET_RDP_Level (){
 80002d8:	b580      	push	{r7, lr}
 80002da:	b088      	sub	sp, #32
 80002dc:	af00      	add	r7, sp, #0
	/* paramter input for function that get level of memory */
	FLASH_OBProgramInitTypeDef FLASH_OBProgram ;
	/* Get level of memory */
	HAL_FLASHEx_OBGetConfig(&FLASH_OBProgram);
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	4618      	mov	r0, r3
 80002e2:	f001 f915 	bl	8001510 <HAL_FLASHEx_OBGetConfig>
	/* Assign protection level in parameter [in\out] */
	return (uint8_t)FLASH_OBProgram.RDPLevel ;
 80002e6:	7d3b      	ldrb	r3, [r7, #20]
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	3720      	adds	r7, #32
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}

080002f0 <CBL_STM32F103_GET_WDP_Level>:


/* Get level of protection to flash memory */
static uint8_t CBL_STM32F103_GET_WDP_Level (){
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b088      	sub	sp, #32
 80002f4:	af00      	add	r7, sp, #0
	/* paramter input for function that get level of memory */
	FLASH_OBProgramInitTypeDef FLASH_OBProgram ;
	/* Get level of memory */
	HAL_FLASHEx_OBGetConfig(&FLASH_OBProgram);
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	4618      	mov	r0, r3
 80002fa:	f001 f909 	bl	8001510 <HAL_FLASHEx_OBGetConfig>
	/* Assign protection level in parameter [in\out] */
	return (uint8_t)FLASH_OBProgram.WRPPage ; //Casting to uint8_t as I care only with first 32 pages as STM is low density(casting would change for higher densities)
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	b2db      	uxtb	r3, r3
}
 8000302:	4618      	mov	r0, r3
 8000304:	3720      	adds	r7, #32
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}

0800030a <Bootloader_Read_Protection_Level>:
 Your packet is :
   1- 1 byte data length = 0x05
   2- 1 byte commend number = 0x13
   3- 4 bytes for CRC verifications if we used python code as host
 */
static void Bootloader_Read_Protection_Level (uint8_t *Host_Buffer){
 800030a:	b580      	push	{r7, lr}
 800030c:	b084      	sub	sp, #16
 800030e:	af00      	add	r7, sp, #0
 8000310:	6078      	str	r0, [r7, #4]
		BL_PrintMassage("CRC is passed\r\n");
#endif
		/* Report acknowledge message*/
		Bootloader_Send_ACK(1);
#endif
		if(READ_RP == Host_Buffer[2])
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	3302      	adds	r3, #2
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	2b00      	cmp	r3, #0
 800031a:	d10a      	bne.n	8000332 <Bootloader_Read_Protection_Level+0x28>
		{
			uint8_t RDP_Level = CBL_STM32F103_GET_RDP_Level();
 800031c:	f7ff ffdc 	bl	80002d8 <CBL_STM32F103_GET_RDP_Level>
 8000320:	4603      	mov	r3, r0
 8000322:	73fb      	strb	r3, [r7, #15]

			/* Report level */
			Bootloader_Send_Data_To_Host((uint8_t *)(&RDP_Level),1);
 8000324:	f107 030f 	add.w	r3, r7, #15
 8000328:	2101      	movs	r1, #1
 800032a:	4618      	mov	r0, r3
 800032c:	f7ff ff7c 	bl	8000228 <Bootloader_Send_Data_To_Host>
		BL_PrintMassage("CRC is failed\r\n");
#endif
		Bootloader_Send_NACK();
	}
#endif
}
 8000330:	e013      	b.n	800035a <Bootloader_Read_Protection_Level+0x50>
		else if(READ_WP == Host_Buffer[2])
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	3302      	adds	r3, #2
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	2b01      	cmp	r3, #1
 800033a:	d10a      	bne.n	8000352 <Bootloader_Read_Protection_Level+0x48>
			uint8_t	WDP_Level = CBL_STM32F103_GET_WDP_Level();
 800033c:	f7ff ffd8 	bl	80002f0 <CBL_STM32F103_GET_WDP_Level>
 8000340:	4603      	mov	r3, r0
 8000342:	73bb      	strb	r3, [r7, #14]
			Bootloader_Send_Data_To_Host((uint8_t *)(&WDP_Level),1);
 8000344:	f107 030e 	add.w	r3, r7, #14
 8000348:	2101      	movs	r1, #1
 800034a:	4618      	mov	r0, r3
 800034c:	f7ff ff6c 	bl	8000228 <Bootloader_Send_Data_To_Host>
}
 8000350:	e003      	b.n	800035a <Bootloader_Read_Protection_Level+0x50>
			Bootloader_Send_Data_To_Host(0xEE, 1); //Sending any value other than OB_RDP_LEVEL_0, OB_RDP_LEVEL_1, 0x00, 0xFF is considered error frame in this case
 8000352:	2101      	movs	r1, #1
 8000354:	20ee      	movs	r0, #238	; 0xee
 8000356:	f7ff ff67 	bl	8000228 <Bootloader_Send_Data_To_Host>
}
 800035a:	bf00      	nop
 800035c:	3710      	adds	r7, #16
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
	...

08000364 <Host_Jump_Address_Verfication>:

/* Verify that the address given from host is valid */
static uint8_t Host_Jump_Address_Verfication (uint32_t Jump_Address){
 8000364:	b480      	push	{r7}
 8000366:	b085      	sub	sp, #20
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
	/* TO check on state of given address is in region or not */
	uint8_t Address_Verification_State = ADDRESS_IS_INVALID ;
 800036c:	2300      	movs	r3, #0
 800036e:	73fb      	strb	r3, [r7, #15]
	/* Check that it is at RAM memory */
	if (Jump_Address>= SRAM_BASE && Jump_Address <=STM32F103_SRAM_END){
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000376:	d306      	bcc.n	8000386 <Host_Jump_Address_Verfication+0x22>
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	4a0c      	ldr	r2, [pc, #48]	; (80003ac <Host_Jump_Address_Verfication+0x48>)
 800037c:	4293      	cmp	r3, r2
 800037e:	d802      	bhi.n	8000386 <Host_Jump_Address_Verfication+0x22>
		Address_Verification_State = ADDRESS_IS_VALID ;
 8000380:	2301      	movs	r3, #1
 8000382:	73fb      	strb	r3, [r7, #15]
 8000384:	e00c      	b.n	80003a0 <Host_Jump_Address_Verfication+0x3c>
	}
	/* Check that it is at Flash memory */
	else if(Jump_Address>= FLASH_BASE && Jump_Address <=STM32F103_FLASH_END){
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800038c:	d306      	bcc.n	800039c <Host_Jump_Address_Verfication+0x38>
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	4a07      	ldr	r2, [pc, #28]	; (80003b0 <Host_Jump_Address_Verfication+0x4c>)
 8000392:	4293      	cmp	r3, r2
 8000394:	d802      	bhi.n	800039c <Host_Jump_Address_Verfication+0x38>
		Address_Verification_State = ADDRESS_IS_VALID ;
 8000396:	2301      	movs	r3, #1
 8000398:	73fb      	strb	r3, [r7, #15]
 800039a:	e001      	b.n	80003a0 <Host_Jump_Address_Verfication+0x3c>
	}
	/* Invalid region */
	else {
		Address_Verification_State = ADDRESS_IS_INVALID ;
 800039c:	2300      	movs	r3, #0
 800039e:	73fb      	strb	r3, [r7, #15]
	}
	return Address_Verification_State ;
 80003a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80003a2:	4618      	mov	r0, r3
 80003a4:	3714      	adds	r7, #20
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bc80      	pop	{r7}
 80003aa:	4770      	bx	lr
 80003ac:	20005000 	.word	0x20005000
 80003b0:	08010000 	.word	0x08010000

080003b4 <Bootloader_Jump_To_Address>:
   1- 1 byte data length = 0x09
   2- 1 byte commend number = 0x14
   3- 4 bytes for address
   4- 4 bytes for CRC verifications if we used python code as host
 */
static void Bootloader_Jump_To_Address (uint8_t *Host_Buffer){
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b086      	sub	sp, #24
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
	/* Used to get CRC data */
	uint32_t Host_CRC32 = 0 ;
#endif

	/* Buffering address */
	uint32_t Host_Jump_Address = RESET ;
 80003bc:	2300      	movs	r3, #0
 80003be:	617b      	str	r3, [r7, #20]
	/* TO check on state of given address is in region or not */
	uint8_t Address_Verification_State = ADDRESS_IS_INVALID ;
 80003c0:	2300      	movs	r3, #0
 80003c2:	73fb      	strb	r3, [r7, #15]
		/* To get the content of Host_Buffer and variable"Host_Jump_Address" realizes that it is address
		 - &Host_Buffer[2] --> express the address of array of host
		 - (uint32_t *)    --> casting it to pointer of uint32
		 - *               --> De-reference it and get the content of buffer at this element
		 */
		Host_Jump_Address = *((uint32_t *) &(Host_Buffer[2])) ;
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80003ca:	617b      	str	r3, [r7, #20]

		/* To verify that the address in the region of memory */
		Address_Verification_State = Host_Jump_Address_Verfication(Host_Jump_Address);
 80003cc:	6978      	ldr	r0, [r7, #20]
 80003ce:	f7ff ffc9 	bl	8000364 <Host_Jump_Address_Verfication>
 80003d2:	4603      	mov	r3, r0
 80003d4:	73fb      	strb	r3, [r7, #15]

		if (Address_Verification_State == ADDRESS_IS_VALID ){
 80003d6:	7bfb      	ldrb	r3, [r7, #15]
 80003d8:	2b01      	cmp	r3, #1
 80003da:	d119      	bne.n	8000410 <Bootloader_Jump_To_Address+0x5c>
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
			BL_PrintMassage("Address verification sucessed\r\n");
#endif
			Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification_State, 1);
 80003dc:	f107 030f 	add.w	r3, r7, #15
 80003e0:	2101      	movs	r1, #1
 80003e2:	4618      	mov	r0, r3
 80003e4:	f7ff ff20 	bl	8000228 <Bootloader_Send_Data_To_Host>

			if (Host_Jump_Address == FLASH_PAGE_BASE_ADDRESS_APP1){
 80003e8:	697b      	ldr	r3, [r7, #20]
 80003ea:	4a0e      	ldr	r2, [pc, #56]	; (8000424 <Bootloader_Jump_To_Address+0x70>)
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d102      	bne.n	80003f6 <Bootloader_Jump_To_Address+0x42>
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
				BL_PrintMassage("Jump To Application\r\n");
#endif
				Bootloader_Jump_To_User_App1();
 80003f0:	f000 f81c 	bl	800042c <Bootloader_Jump_To_User_App1>
		BL_PrintMassage("CRC is failed\r\n");
#endif
		Bootloader_Send_NACK();
	}
#endif
}
 80003f4:	e012      	b.n	800041c <Bootloader_Jump_To_Address+0x68>
			else if (Host_Jump_Address == FLASH_PAGE_BASE_ADDRESS_APP2){
 80003f6:	697b      	ldr	r3, [r7, #20]
 80003f8:	4a0b      	ldr	r2, [pc, #44]	; (8000428 <Bootloader_Jump_To_Address+0x74>)
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d102      	bne.n	8000404 <Bootloader_Jump_To_Address+0x50>
				Bootloader_Jump_To_User_App2();
 80003fe:	f000 f833 	bl	8000468 <Bootloader_Jump_To_User_App2>
}
 8000402:	e00b      	b.n	800041c <Bootloader_Jump_To_Address+0x68>
				Jump_Ptr Jump_Address = (Jump_Ptr) (Host_Jump_Address + 1) ;
 8000404:	697b      	ldr	r3, [r7, #20]
 8000406:	3301      	adds	r3, #1
 8000408:	613b      	str	r3, [r7, #16]
				Jump_Address();
 800040a:	693b      	ldr	r3, [r7, #16]
 800040c:	4798      	blx	r3
}
 800040e:	e005      	b.n	800041c <Bootloader_Jump_To_Address+0x68>
			Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification_State, 1);
 8000410:	f107 030f 	add.w	r3, r7, #15
 8000414:	2101      	movs	r1, #1
 8000416:	4618      	mov	r0, r3
 8000418:	f7ff ff06 	bl	8000228 <Bootloader_Send_Data_To_Host>
}
 800041c:	bf00      	nop
 800041e:	3718      	adds	r7, #24
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	08005000 	.word	0x08005000
 8000428:	0800a000 	.word	0x0800a000

0800042c <Bootloader_Jump_To_User_App1>:
 Be sure that
   1- base address in application is updated in (Bootloader_Jump_To_User_App)
   2- update size of bootloader code with suitable size as 17k or 15k
   3- update origin address of application code in flash memory in linker script and size also
 */
static void Bootloader_Jump_To_User_App1 (){
 800042c:	b580      	push	{r7, lr}
 800042e:	b084      	sub	sp, #16
 8000430:	af00      	add	r7, sp, #0
	/* Value of the main stack pointer of our main application find at address 0 in IVT */
	uint32_t MSP_Value = *((volatile uint32_t*)FLASH_PAGE_BASE_ADDRESS_APP1);
 8000432:	4b0b      	ldr	r3, [pc, #44]	; (8000460 <Bootloader_Jump_To_User_App1+0x34>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	60fb      	str	r3, [r7, #12]
	/* Reset Handler defination function of our main application */
	uint32_t MainAppAddr = *((volatile uint32_t*)(FLASH_PAGE_BASE_ADDRESS_APP1+4));
 8000438:	4b0a      	ldr	r3, [pc, #40]	; (8000464 <Bootloader_Jump_To_User_App1+0x38>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	60bb      	str	r3, [r7, #8]
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
	BL_PrintMassage("Jump to application\r\n");
#endif

	/* Declare pointer to function contain the beginning address of reset function in user application */
	pFunc ResetHandler_Address = (pFunc)MainAppAddr;
 800043e:	68bb      	ldr	r3, [r7, #8]
 8000440:	607b      	str	r3, [r7, #4]

	/* Deinitionalization of modules that used in bootloader and work
	   the configurations of new application */
	HAL_RCC_DeInit(); /* Resets the RCC clock configuration to the default reset state. */
 8000442:	f001 fc75 	bl	8001d30 <HAL_RCC_DeInit>
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	f383 8808 	msr	MSP, r3
}
 8000450:	bf00      	nop

	/* Reset main stack pointer */
	__set_MSP(MSP_Value);

	/* Jump to Apllication Reset Handler */
	ResetHandler_Address();
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	4798      	blx	r3
}
 8000456:	bf00      	nop
 8000458:	3710      	adds	r7, #16
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	08005000 	.word	0x08005000
 8000464:	08005004 	.word	0x08005004

08000468 <Bootloader_Jump_To_User_App2>:
 Be sure that
   1- base address in application is updated in (Bootloader_Jump_To_User_App)
   2- update size of bootloader code with suitable size as 17k or 15k
   3- update origin address of application code in flash memory in linker script and size also
 */
static void Bootloader_Jump_To_User_App2 (){
 8000468:	b580      	push	{r7, lr}
 800046a:	b084      	sub	sp, #16
 800046c:	af00      	add	r7, sp, #0
	/* Value of the main stack pointer of our main application find at address 0 in IVT */
	uint32_t MSP_Value = *((volatile uint32_t*)FLASH_PAGE_BASE_ADDRESS_APP1);
 800046e:	4b0b      	ldr	r3, [pc, #44]	; (800049c <Bootloader_Jump_To_User_App2+0x34>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	60fb      	str	r3, [r7, #12]
	/* Reset Handler defination function of our main application */
	uint32_t MainAppAddr = *((volatile uint32_t*)(FLASH_PAGE_BASE_ADDRESS_APP2+4));
 8000474:	4b0a      	ldr	r3, [pc, #40]	; (80004a0 <Bootloader_Jump_To_User_App2+0x38>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	60bb      	str	r3, [r7, #8]
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
	BL_PrintMassage("Jump to application\r\n");
#endif

	/* Declare pointer to function contain the beginning address of reset function in user application */
	pFunc ResetHandler_Address = (pFunc)MainAppAddr;
 800047a:	68bb      	ldr	r3, [r7, #8]
 800047c:	607b      	str	r3, [r7, #4]

	/* Deinitionalization of modules that used in bootloader and work
	   the configurations of new application */
	HAL_RCC_DeInit(); /* Resets the RCC clock configuration to the default reset state. */
 800047e:	f001 fc57 	bl	8001d30 <HAL_RCC_DeInit>
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000486:	683b      	ldr	r3, [r7, #0]
 8000488:	f383 8808 	msr	MSP, r3
}
 800048c:	bf00      	nop

	/* Reset main stack pointer */
	__set_MSP(MSP_Value);

	/* Jump to Apllication Reset Handler */
	ResetHandler_Address();
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4798      	blx	r3
}
 8000492:	bf00      	nop
 8000494:	3710      	adds	r7, #16
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	08005000 	.word	0x08005000
 80004a0:	0800a004 	.word	0x0800a004

080004a4 <Perform_Flash_Erase>:

/* Get erasing flash actually */
static uint8_t Perform_Flash_Erase (uint32_t PageAddress, uint8_t Number_Of_Pages){
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b088      	sub	sp, #32
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
 80004ac:	460b      	mov	r3, r1
 80004ae:	70fb      	strb	r3, [r7, #3]
	/* To check that the sectors in not overflow the size of flash */
	uint8_t Page_validity_Status  = PAGE_INVALID_NUMBER ;
 80004b0:	2300      	movs	r3, #0
 80004b2:	77fb      	strb	r3, [r7, #31]
	/* Status of erasing flash */
	HAL_StatusTypeDef HAL_Status = HAL_ERROR ;
 80004b4:	2301      	movs	r3, #1
 80004b6:	77bb      	strb	r3, [r7, #30]
	/* Error sector status */
	uint32_t PageError = RESET ;
 80004b8:	2300      	movs	r3, #0
 80004ba:	61bb      	str	r3, [r7, #24]
	/* Define struct to configure parameters[in] */
	FLASH_EraseInitTypeDef pEraseInit ;
	/* Define the used bank in flash memory */
	pEraseInit.Banks = FLASH_BANK_1 ;
 80004bc:	2301      	movs	r3, #1
 80004be:	60fb      	str	r3, [r7, #12]

	/* another pages is agreed but check that is acess the number of pages in flash */
	if (Number_Of_Pages >= CBL_FLASH_MAX_PAGES_NUMBER && CBL_FLASH_MASS_ERASE != PageAddress){
 80004c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	da05      	bge.n	80004d4 <Perform_Flash_Erase+0x30>
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	2bff      	cmp	r3, #255	; 0xff
 80004cc:	d002      	beq.n	80004d4 <Perform_Flash_Erase+0x30>
		Page_validity_Status = PAGE_INVALID_NUMBER ;
 80004ce:	2300      	movs	r3, #0
 80004d0:	77fb      	strb	r3, [r7, #31]
 80004d2:	e030      	b.n	8000536 <Perform_Flash_Erase+0x92>
	/* erase all memory or specific page */
	else {
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
		BL_PrintMassage ("It is in range of flash memory \r\n");
#endif
		Page_validity_Status = PAGE_VALID_NUMBER ;
 80004d4:	2301      	movs	r3, #1
 80004d6:	77fb      	strb	r3, [r7, #31]
		pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 80004d8:	2300      	movs	r3, #0
 80004da:	60bb      	str	r3, [r7, #8]

		/* Check if he want to erase all memory flash */
		if ( CBL_FLASH_MASS_ERASE == PageAddress  ){
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	2bff      	cmp	r3, #255	; 0xff
 80004e0:	d104      	bne.n	80004ec <Perform_Flash_Erase+0x48>
			pEraseInit.PageAddress = FLASH_PAGE_BASE_ADDRESS_APP1;
 80004e2:	4b17      	ldr	r3, [pc, #92]	; (8000540 <Perform_Flash_Erase+0x9c>)
 80004e4:	613b      	str	r3, [r7, #16]
			pEraseInit.NbPages = APPLICATION_SIZE;
 80004e6:	2313      	movs	r3, #19
 80004e8:	617b      	str	r3, [r7, #20]
 80004ea:	e003      	b.n	80004f4 <Perform_Flash_Erase+0x50>
		/* erase specific page */
		else {
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
			BL_PrintMassage ("Page erase \r\n");
#endif
			pEraseInit.PageAddress = PageAddress;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	613b      	str	r3, [r7, #16]
			pEraseInit.NbPages = Number_Of_Pages;
 80004f0:	78fb      	ldrb	r3, [r7, #3]
 80004f2:	617b      	str	r3, [r7, #20]
		}

		/* To unlock flash memory */
		HAL_Status = HAL_FLASH_Unlock();
 80004f4:	f000 fdc8 	bl	8001088 <HAL_FLASH_Unlock>
 80004f8:	4603      	mov	r3, r0
 80004fa:	77bb      	strb	r3, [r7, #30]

		/* if it's opened correctly */
		if (HAL_Status == HAL_OK){
 80004fc:	7fbb      	ldrb	r3, [r7, #30]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d117      	bne.n	8000532 <Perform_Flash_Erase+0x8e>
			/* Perform a mass erase or erase the specified FLASH memory sectors */
			HAL_Status = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 8000502:	f107 0218 	add.w	r2, r7, #24
 8000506:	f107 0308 	add.w	r3, r7, #8
 800050a:	4611      	mov	r1, r2
 800050c:	4618      	mov	r0, r3
 800050e:	f000 fed5 	bl	80012bc <HAL_FLASHEx_Erase>
 8000512:	4603      	mov	r3, r0
 8000514:	77bb      	strb	r3, [r7, #30]

			/* To check that the flash memory is erased sucessfully */
			if (HAL_SUCESSFUL_ERASE == PageError){
 8000516:	69bb      	ldr	r3, [r7, #24]
 8000518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800051c:	d102      	bne.n	8000524 <Perform_Flash_Erase+0x80>
				Page_validity_Status = SUCESSFUL_ERASE ;
 800051e:	2303      	movs	r3, #3
 8000520:	77fb      	strb	r3, [r7, #31]
 8000522:	e001      	b.n	8000528 <Perform_Flash_Erase+0x84>
			}
			/* Didn't erase*/
			else {
				Page_validity_Status = UNSUCESSFUL_ERASE ;
 8000524:	2302      	movs	r3, #2
 8000526:	77fb      	strb	r3, [r7, #31]
			}

			HAL_Status = HAL_FLASH_Lock();
 8000528:	f000 fdd4 	bl	80010d4 <HAL_FLASH_Lock>
 800052c:	4603      	mov	r3, r0
 800052e:	77bb      	strb	r3, [r7, #30]
 8000530:	e001      	b.n	8000536 <Perform_Flash_Erase+0x92>
		}
		/* Not opened */
		else {
			Page_validity_Status = UNSUCESSFUL_ERASE ;
 8000532:	2302      	movs	r3, #2
 8000534:	77fb      	strb	r3, [r7, #31]
		}
	}
	return Page_validity_Status ;
 8000536:	7ffb      	ldrb	r3, [r7, #31]
}
 8000538:	4618      	mov	r0, r3
 800053a:	3720      	adds	r7, #32
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	08005000 	.word	0x08005000

08000544 <Bootloader_Erase_Flash>:
   2- 1 byte commend number = 0x15
   3- 4 bytes for page address
   4- 1 byte for number of pages
   5- 4 bytes for CRC verifications if we used python code as host
 */
static void Bootloader_Erase_Flash (uint8_t *Host_Buffer){
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0 ;
	/* Used to get CRC data */
	uint32_t Host_CRC32 = 0 ;
#endif
	/* To check on Erase state */
	uint8_t Erase_Status = UNSUCESSFUL_ERASE ;
 800054c:	2302      	movs	r3, #2
 800054e:	73fb      	strb	r3, [r7, #15]
		/* Send acknowledge to host */
		Bootloader_Send_ACK(1);
#endif

		/* Perform Mass erase or sector erase of the user flash */
		if (Host_Buffer[6] == MASTERID )
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	3306      	adds	r3, #6
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d108      	bne.n	800056c <Bootloader_Erase_Flash+0x28>
			Erase_Status = Perform_Flash_Erase ( *( (uint32_t*)&Host_Buffer[2] ),Host_Buffer[7]);
			/* Report the erase state */
			Bootloader_Send_Data_To_Host((uint8_t *)(&Erase_Status),1);

#elif(ECU_CONFIG == SLAVE1)
			Erase_Status = UNSUCESSFUL_ERASE ;
 800055a:	2302      	movs	r3, #2
 800055c:	73fb      	strb	r3, [r7, #15]
			Bootloader_Send_Data_To_Host((uint8_t *)(&Erase_Status),1);
 800055e:	f107 030f 	add.w	r3, r7, #15
 8000562:	2101      	movs	r1, #1
 8000564:	4618      	mov	r0, r3
 8000566:	f7ff fe5f 	bl	8000228 <Bootloader_Send_Data_To_Host>
 800056a:	e01f      	b.n	80005ac <Bootloader_Erase_Flash+0x68>
#endif
		}
		else if(Host_Buffer[6] == SLAVE1 )
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	3306      	adds	r3, #6
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	2b01      	cmp	r3, #1
 8000574:	d112      	bne.n	800059c <Bootloader_Erase_Flash+0x58>
			HAL_UART_Receive(&huart2, (uint8_t *)&Erase_Status, 1, HAL_MAX_DELAY); //Receive Error status

			/*Sending Ack to ESP*/
			Bootloader_Send_Data_To_Host((uint8_t *)&Erase_Status, 1);
#elif(ECU_CONFIG == SLAVE1)
			Erase_Status = Perform_Flash_Erase ( *( (uint32_t*)&Host_Buffer[2] ),Host_Buffer[7]);
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	3302      	adds	r3, #2
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	3307      	adds	r3, #7
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	4619      	mov	r1, r3
 8000584:	4610      	mov	r0, r2
 8000586:	f7ff ff8d 	bl	80004a4 <Perform_Flash_Erase>
 800058a:	4603      	mov	r3, r0
 800058c:	73fb      	strb	r3, [r7, #15]
			/* Report the erase state */
			Bootloader_Send_Data_To_Host((uint8_t *)(&Erase_Status),1);
 800058e:	f107 030f 	add.w	r3, r7, #15
 8000592:	2101      	movs	r1, #1
 8000594:	4618      	mov	r0, r3
 8000596:	f7ff fe47 	bl	8000228 <Bootloader_Send_Data_To_Host>
 800059a:	e007      	b.n	80005ac <Bootloader_Erase_Flash+0x68>
#endif

		}
		else
		{
			Erase_Status = UNSUCESSFUL_ERASE ;
 800059c:	2302      	movs	r3, #2
 800059e:	73fb      	strb	r3, [r7, #15]
			Bootloader_Send_Data_To_Host((uint8_t *)(&Erase_Status),1);
 80005a0:	f107 030f 	add.w	r3, r7, #15
 80005a4:	2101      	movs	r1, #1
 80005a6:	4618      	mov	r0, r3
 80005a8:	f7ff fe3e 	bl	8000228 <Bootloader_Send_Data_To_Host>
		BL_PrintMassage("CRC is failed\r\n");
#endif
		Bootloader_Send_NACK();
	}
#endif
}
 80005ac:	bf00      	nop
 80005ae:	3710      	adds	r7, #16
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <Flash_Memory_Write_Payload>:


/* Write actually in flash memory */
static uint8_t Flash_Memory_Write_Payload(uint8_t *Host_PayLoad,
		uint32_t Payload_Start_Address, uint8_t Payload_Len) {
 80005b4:	b5b0      	push	{r4, r5, r7, lr}
 80005b6:	b088      	sub	sp, #32
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	4613      	mov	r3, r2
 80005c0:	71fb      	strb	r3, [r7, #7]
	/* The status in dealing HAL functions */
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 80005c2:	2301      	movs	r3, #1
 80005c4:	77fb      	strb	r3, [r7, #31]
	/* Status writing in flash memory */
	uint8_t Status = FLASH_PAYLOAD_WRITING_FAILED;
 80005c6:	2300      	movs	r3, #0
 80005c8:	77bb      	strb	r3, [r7, #30]
	/* The number of words in data appliction sections */
	uint8_t PayLoad_Counter = RESET ;
 80005ca:	2300      	movs	r3, #0
 80005cc:	777b      	strb	r3, [r7, #29]
	/* buffering half word */
	uint16_t Payload_Buffer = RESET ;
 80005ce:	2300      	movs	r3, #0
 80005d0:	837b      	strh	r3, [r7, #26]
	/* address of current writing half word */
	uint32_t Address = RESET ;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]

	/* Writing steps */
	/* Open flash memory */
	HAL_Status = HAL_FLASH_Unlock();
 80005d6:	f000 fd57 	bl	8001088 <HAL_FLASH_Unlock>
 80005da:	4603      	mov	r3, r0
 80005dc:	77fb      	strb	r3, [r7, #31]

	/* If it opened */
	if (HAL_Status == HAL_OK) {
 80005de:	7ffb      	ldrb	r3, [r7, #31]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d134      	bne.n	800064e <Flash_Memory_Write_Payload+0x9a>
		/* Transfer the data sections half word by half word */
		while (Payload_Len !=0 && Status == HAL_OK ){
 80005e4:	e024      	b.n	8000630 <Flash_Memory_Write_Payload+0x7c>
			Payload_Buffer = (uint16_t) Host_PayLoad[PayLoad_Counter]
 80005e6:	7f7b      	ldrb	r3, [r7, #29]
 80005e8:	68fa      	ldr	r2, [r7, #12]
 80005ea:	4413      	add	r3, r2
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	b21a      	sxth	r2, r3
													 |( (uint16_t)Host_PayLoad[PayLoad_Counter+1] << TWO_BYTES );
 80005f0:	7f7b      	ldrb	r3, [r7, #29]
 80005f2:	3301      	adds	r3, #1
 80005f4:	68f9      	ldr	r1, [r7, #12]
 80005f6:	440b      	add	r3, r1
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	021b      	lsls	r3, r3, #8
 80005fc:	b21b      	sxth	r3, r3
 80005fe:	4313      	orrs	r3, r2
 8000600:	b21b      	sxth	r3, r3
			Payload_Buffer = (uint16_t) Host_PayLoad[PayLoad_Counter]
 8000602:	837b      	strh	r3, [r7, #26]

			/*update the flash address each itration */
			Address = Payload_Start_Address + PayLoad_Counter ;
 8000604:	7f7b      	ldrb	r3, [r7, #29]
 8000606:	68ba      	ldr	r2, [r7, #8]
 8000608:	4413      	add	r3, r2
 800060a:	617b      	str	r3, [r7, #20]

			/*Writing the Date in the flash Halfword by Halfword */
			HAL_Status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 800060c:	8b7b      	ldrh	r3, [r7, #26]
 800060e:	2200      	movs	r2, #0
 8000610:	461c      	mov	r4, r3
 8000612:	4615      	mov	r5, r2
 8000614:	4622      	mov	r2, r4
 8000616:	462b      	mov	r3, r5
 8000618:	6979      	ldr	r1, [r7, #20]
 800061a:	2001      	movs	r0, #1
 800061c:	f000 fcc4 	bl	8000fa8 <HAL_FLASH_Program>
 8000620:	4603      	mov	r3, r0
 8000622:	77fb      	strb	r3, [r7, #31]
					Address, (uint64_t)Payload_Buffer);

			/*To increment PayLoad_Counter and stopped on new half word in host packet frame
			  To decrement Payload_Len to be sure that all of host packet frame is written
			 */
			Payload_Len-=2;
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	3b02      	subs	r3, #2
 8000628:	71fb      	strb	r3, [r7, #7]
			PayLoad_Counter+=2;
 800062a:	7f7b      	ldrb	r3, [r7, #29]
 800062c:	3302      	adds	r3, #2
 800062e:	777b      	strb	r3, [r7, #29]
		while (Payload_Len !=0 && Status == HAL_OK ){
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d002      	beq.n	800063c <Flash_Memory_Write_Payload+0x88>
 8000636:	7fbb      	ldrb	r3, [r7, #30]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d0d4      	beq.n	80005e6 <Flash_Memory_Write_Payload+0x32>
		}

		/* if function can't write on memory Status be failed */
		if (HAL_Status != HAL_OK) {
 800063c:	7ffb      	ldrb	r3, [r7, #31]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d002      	beq.n	8000648 <Flash_Memory_Write_Payload+0x94>
			Status = FLASH_PAYLOAD_WRITING_FAILED;
 8000642:	2300      	movs	r3, #0
 8000644:	77bb      	strb	r3, [r7, #30]
 8000646:	e004      	b.n	8000652 <Flash_Memory_Write_Payload+0x9e>
		} else {
			/* All iterations, It can write on memory make status passed */
			Status = FLASH_PAYLOAD_WRITING_PASSED;
 8000648:	2301      	movs	r3, #1
 800064a:	77bb      	strb	r3, [r7, #30]
 800064c:	e001      	b.n	8000652 <Flash_Memory_Write_Payload+0x9e>
		}
	}
	else {
		/* If it can't open memory make status failed */
		Status = FLASH_PAYLOAD_WRITING_FAILED;
 800064e:	2300      	movs	r3, #0
 8000650:	77bb      	strb	r3, [r7, #30]
	}

	/* If all status is OK so It will lock memory */
	if (Status == FLASH_PAYLOAD_WRITING_PASSED && HAL_Status == HAL_OK) {
 8000652:	7fbb      	ldrb	r3, [r7, #30]
 8000654:	2b01      	cmp	r3, #1
 8000656:	d10f      	bne.n	8000678 <Flash_Memory_Write_Payload+0xc4>
 8000658:	7ffb      	ldrb	r3, [r7, #31]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d10c      	bne.n	8000678 <Flash_Memory_Write_Payload+0xc4>
		HAL_Status = HAL_FLASH_Lock();
 800065e:	f000 fd39 	bl	80010d4 <HAL_FLASH_Lock>
 8000662:	4603      	mov	r3, r0
 8000664:	77fb      	strb	r3, [r7, #31]

		/* Check if it locked it true or not */
		if (HAL_Status != HAL_OK) {
 8000666:	7ffb      	ldrb	r3, [r7, #31]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d002      	beq.n	8000672 <Flash_Memory_Write_Payload+0xbe>
			Status = FLASH_PAYLOAD_WRITING_FAILED;
 800066c:	2300      	movs	r3, #0
 800066e:	77bb      	strb	r3, [r7, #30]
		if (HAL_Status != HAL_OK) {
 8000670:	e004      	b.n	800067c <Flash_Memory_Write_Payload+0xc8>
		} else {
			Status = FLASH_PAYLOAD_WRITING_PASSED;
 8000672:	2301      	movs	r3, #1
 8000674:	77bb      	strb	r3, [r7, #30]
		if (HAL_Status != HAL_OK) {
 8000676:	e001      	b.n	800067c <Flash_Memory_Write_Payload+0xc8>
		}
	} else {
		/* If one of status is not OK so It will make returned status with failed */
		Status = FLASH_PAYLOAD_WRITING_FAILED;
 8000678:	2300      	movs	r3, #0
 800067a:	77bb      	strb	r3, [r7, #30]
	}
	return Status;
 800067c:	7fbb      	ldrb	r3, [r7, #30]
}
 800067e:	4618      	mov	r0, r3
 8000680:	3720      	adds	r7, #32
 8000682:	46bd      	mov	sp, r7
 8000684:	bdb0      	pop	{r4, r5, r7, pc}

08000686 <Bootloader_Memory_Write>:
   4- 1 byte for size of writing data
   5- N bytes of data info
   6- 4 bytes for CRC verifications if we used python code as host
 */

static void Bootloader_Memory_Write (uint8_t *Host_Buffer){
 8000686:	b580      	push	{r7, lr}
 8000688:	b084      	sub	sp, #16
 800068a:	af00      	add	r7, sp, #0
 800068c:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
	/* Used to get CRC data */
	uint32_t Host_CRC32 = 0;
#endif
	/* Base address that you will write on */
	uint32_t HOST_Address = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	60fb      	str	r3, [r7, #12]
	/* Number of bytes that will be sent */
	uint8_t Payload_Len = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	72fb      	strb	r3, [r7, #11]
	/* The status of input address from the host */
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 8000696:	2300      	movs	r3, #0
 8000698:	72bb      	strb	r3, [r7, #10]
	/* Status writing in flash memory */
	uint8_t Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITING_FAILED;
 800069a:	2300      	movs	r3, #0
 800069c:	727b      	strb	r3, [r7, #9]
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
		BL_PrintMassage("CRC is passed\r\n");
#endif

		/* Extract the start address from the Host packet */
		HOST_Address = *((uint32_t *)(&Host_Buffer[2]));
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80006a4:	60fb      	str	r3, [r7, #12]
		/* Extract the payload length from the Host packet */
		Payload_Len = Host_Buffer[8];
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	7a1b      	ldrb	r3, [r3, #8]
 80006aa:	72fb      	strb	r3, [r7, #11]

		/* Verify the Extracted address to be valid address */
		Address_Verification = Host_Jump_Address_Verfication(HOST_Address);
 80006ac:	68f8      	ldr	r0, [r7, #12]
 80006ae:	f7ff fe59 	bl	8000364 <Host_Jump_Address_Verfication>
 80006b2:	4603      	mov	r3, r0
 80006b4:	72bb      	strb	r3, [r7, #10]

		if(ADDRESS_IS_VALID == Address_Verification)
 80006b6:	7abb      	ldrb	r3, [r7, #10]
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d12b      	bne.n	8000714 <Bootloader_Memory_Write+0x8e>
		{
			if (Host_Buffer[6] == MASTERID){
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	3306      	adds	r3, #6
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d108      	bne.n	80006d8 <Bootloader_Memory_Write+0x52>

				/* Report payload writing state */
				Bootloader_Send_Data_To_Host((uint8_t *)&Flash_Payload_Write_Status, 1);

#elif(ECU_CONFIG == SLAVE1)
				Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITING_FAILED;
 80006c6:	2300      	movs	r3, #0
 80006c8:	727b      	strb	r3, [r7, #9]
				Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification, 1); //send error frame
 80006ca:	f107 030a 	add.w	r3, r7, #10
 80006ce:	2101      	movs	r1, #1
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff fda9 	bl	8000228 <Bootloader_Send_Data_To_Host>
		/* Send Not acknowledge to the HOST */
		Bootloader_Send_NACK();
	}
#endif

}
 80006d6:	e025      	b.n	8000724 <Bootloader_Memory_Write+0x9e>
			else if(Host_Buffer[6] == SLAVE1) {
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	3306      	adds	r3, #6
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d10f      	bne.n	8000702 <Bootloader_Memory_Write+0x7c>
				Flash_Payload_Write_Status = Flash_Memory_Write_Payload((uint8_t *)&Host_Buffer[9], HOST_Address, Payload_Len);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	3309      	adds	r3, #9
 80006e6:	7afa      	ldrb	r2, [r7, #11]
 80006e8:	68f9      	ldr	r1, [r7, #12]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ff62 	bl	80005b4 <Flash_Memory_Write_Payload>
 80006f0:	4603      	mov	r3, r0
 80006f2:	727b      	strb	r3, [r7, #9]
				Bootloader_Send_Data_To_Host((uint8_t *)&Flash_Payload_Write_Status, 1);
 80006f4:	f107 0309 	add.w	r3, r7, #9
 80006f8:	2101      	movs	r1, #1
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff fd94 	bl	8000228 <Bootloader_Send_Data_To_Host>
}
 8000700:	e010      	b.n	8000724 <Bootloader_Memory_Write+0x9e>
				Address_Verification = ADDRESS_IS_INVALID;
 8000702:	2300      	movs	r3, #0
 8000704:	72bb      	strb	r3, [r7, #10]
				Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification, 1);
 8000706:	f107 030a 	add.w	r3, r7, #10
 800070a:	2101      	movs	r1, #1
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff fd8b 	bl	8000228 <Bootloader_Send_Data_To_Host>
}
 8000712:	e007      	b.n	8000724 <Bootloader_Memory_Write+0x9e>
			Address_Verification = ADDRESS_IS_INVALID;
 8000714:	2300      	movs	r3, #0
 8000716:	72bb      	strb	r3, [r7, #10]
			Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification, 1);
 8000718:	f107 030a 	add.w	r3, r7, #10
 800071c:	2101      	movs	r1, #1
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff fd82 	bl	8000228 <Bootloader_Send_Data_To_Host>
}
 8000724:	bf00      	nop
 8000726:	3710      	adds	r7, #16
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <Bootloader_Enable_R_Protection>:

static void Bootloader_Enable_R_Protection(uint8_t *Host_Buffer){
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
	 * 5. Lock option byte. 		HAL_FLASH_OB_Lock
	 * 6. Reset.					HAL_FLASH_OB_Launch
	 *
	 *
	 * */
	uint8_t Host_ROP_Level = Host_Buffer[2] ;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	789b      	ldrb	r3, [r3, #2]
 8000738:	73fb      	strb	r3, [r7, #15]
	uint8_t ROP_Level_Status = ROP_LEVEL_CHANGE_INVALID;
 800073a:	2300      	movs	r3, #0
 800073c:	73bb      	strb	r3, [r7, #14]

	if (CBL_ROP_LEVEL_0 == Host_ROP_Level){
 800073e:	7bfb      	ldrb	r3, [r7, #15]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d11f      	bne.n	8000784 <Bootloader_Enable_R_Protection+0x58>

		Bootloader_Send_Data_To_Host("Level 0", 8);
 8000744:	2108      	movs	r1, #8
 8000746:	481e      	ldr	r0, [pc, #120]	; (80007c0 <Bootloader_Enable_R_Protection+0x94>)
 8000748:	f7ff fd6e 	bl	8000228 <Bootloader_Send_Data_To_Host>

		pOBInit.OptionType = OPTIONBYTE_RDP;
 800074c:	4b1d      	ldr	r3, [pc, #116]	; (80007c4 <Bootloader_Enable_R_Protection+0x98>)
 800074e:	2202      	movs	r2, #2
 8000750:	601a      	str	r2, [r3, #0]
		pOBInit.RDPLevel = OB_RDP_LEVEL_0;
 8000752:	4b1c      	ldr	r3, [pc, #112]	; (80007c4 <Bootloader_Enable_R_Protection+0x98>)
 8000754:	22a5      	movs	r2, #165	; 0xa5
 8000756:	741a      	strb	r2, [r3, #16]

		HAL_FLASH_Unlock();
 8000758:	f000 fc96 	bl	8001088 <HAL_FLASH_Unlock>
		HAL_FLASH_OB_Unlock();
 800075c:	f000 fcca 	bl	80010f4 <HAL_FLASH_OB_Unlock>
		HAL_FLASHEx_OBProgram(&pOBInit);
 8000760:	4818      	ldr	r0, [pc, #96]	; (80007c4 <Bootloader_Enable_R_Protection+0x98>)
 8000762:	f000 fe59 	bl	8001418 <HAL_FLASHEx_OBProgram>
		HAL_FLASH_Lock();
 8000766:	f000 fcb5 	bl	80010d4 <HAL_FLASH_Lock>
		HAL_FLASH_OB_Lock();
 800076a:	f000 fcdf 	bl	800112c <HAL_FLASH_OB_Lock>
		HAL_FLASH_OB_Launch();
 800076e:	f000 fced 	bl	800114c <HAL_FLASH_OB_Launch>

		ROP_Level_Status = ROP_LEVEL_CHANGE_VALID;
 8000772:	2301      	movs	r3, #1
 8000774:	73bb      	strb	r3, [r7, #14]
		Bootloader_Send_Data_To_Host((uint8_t *)&ROP_Level_Status, 1);
 8000776:	f107 030e 	add.w	r3, r7, #14
 800077a:	2101      	movs	r1, #1
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff fd53 	bl	8000228 <Bootloader_Send_Data_To_Host>
		HAL_FLASHEx_OBProgram(&pOBInit);
		HAL_FLASH_Lock();
		HAL_FLASH_OB_Lock();
		HAL_FLASH_OB_Launch();
	}
}
 8000782:	e019      	b.n	80007b8 <Bootloader_Enable_R_Protection+0x8c>
	else if (CBL_ROP_LEVEL_1 == Host_ROP_Level) {
 8000784:	7bfb      	ldrb	r3, [r7, #15]
 8000786:	2b01      	cmp	r3, #1
 8000788:	d116      	bne.n	80007b8 <Bootloader_Enable_R_Protection+0x8c>
		Bootloader_Send_Data_To_Host("Level 1", 8);
 800078a:	2108      	movs	r1, #8
 800078c:	480e      	ldr	r0, [pc, #56]	; (80007c8 <Bootloader_Enable_R_Protection+0x9c>)
 800078e:	f7ff fd4b 	bl	8000228 <Bootloader_Send_Data_To_Host>
		pOBInit.OptionType = OPTIONBYTE_RDP;
 8000792:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <Bootloader_Enable_R_Protection+0x98>)
 8000794:	2202      	movs	r2, #2
 8000796:	601a      	str	r2, [r3, #0]
		pOBInit.RDPLevel = OB_RDP_LEVEL_1;
 8000798:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <Bootloader_Enable_R_Protection+0x98>)
 800079a:	2200      	movs	r2, #0
 800079c:	741a      	strb	r2, [r3, #16]
		HAL_FLASH_Unlock();
 800079e:	f000 fc73 	bl	8001088 <HAL_FLASH_Unlock>
		HAL_FLASH_OB_Unlock();
 80007a2:	f000 fca7 	bl	80010f4 <HAL_FLASH_OB_Unlock>
		HAL_FLASHEx_OBProgram(&pOBInit);
 80007a6:	4807      	ldr	r0, [pc, #28]	; (80007c4 <Bootloader_Enable_R_Protection+0x98>)
 80007a8:	f000 fe36 	bl	8001418 <HAL_FLASHEx_OBProgram>
		HAL_FLASH_Lock();
 80007ac:	f000 fc92 	bl	80010d4 <HAL_FLASH_Lock>
		HAL_FLASH_OB_Lock();
 80007b0:	f000 fcbc 	bl	800112c <HAL_FLASH_OB_Lock>
		HAL_FLASH_OB_Launch();
 80007b4:	f000 fcca 	bl	800114c <HAL_FLASH_OB_Launch>
}
 80007b8:	bf00      	nop
 80007ba:	3710      	adds	r7, #16
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	08002bb8 	.word	0x08002bb8
 80007c4:	20000128 	.word	0x20000128
 80007c8:	08002bc0 	.word	0x08002bc0

080007cc <Bootloader_Enable_W_Protection>:

static void Bootloader_Enable_W_Protection(uint8_t *Host_Buffer){
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
	 * 5. Lock option byte. 		HAL_FLASH_OB_Lock
	 * 6. Reset.					HAL_FLASH_OB_Launch
	 *
	 *
	 * */
	uint8_t WP_Level_Status = ROP_LEVEL_CHANGE_INVALID;
 80007d4:	2300      	movs	r3, #0
 80007d6:	73fb      	strb	r3, [r7, #15]
	uint8_t Host_WP_Level = Host_Buffer[2];
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	789b      	ldrb	r3, [r3, #2]
 80007dc:	73bb      	strb	r3, [r7, #14]


	if (OB_WRPSTATE_ENABLE == Host_WP_Level) {
 80007de:	7bbb      	ldrb	r3, [r7, #14]
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	d11a      	bne.n	800081a <Bootloader_Enable_W_Protection+0x4e>

		Bootloader_Send_Data_To_Host("Level 1", 8);
 80007e4:	2108      	movs	r1, #8
 80007e6:	481d      	ldr	r0, [pc, #116]	; (800085c <Bootloader_Enable_W_Protection+0x90>)
 80007e8:	f7ff fd1e 	bl	8000228 <Bootloader_Send_Data_To_Host>

		pOBInit.OptionType = OPTIONBYTE_WRP;
 80007ec:	4b1c      	ldr	r3, [pc, #112]	; (8000860 <Bootloader_Enable_W_Protection+0x94>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	601a      	str	r2, [r3, #0]
		pOBInit.WRPState = OB_WRPSTATE_ENABLE;
 80007f2:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <Bootloader_Enable_W_Protection+0x94>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	605a      	str	r2, [r3, #4]
		pOBInit.WRPPage = OB_WRP_PAGES0TO3 | OB_WRP_PAGES4TO7 | OB_WRP_PAGES8TO11 | OB_WRP_PAGES12TO15 | OB_WRP_PAGES16TO19 | OB_WRP_PAGES20TO23 | OB_WRP_PAGES24TO27 | OB_WRP_PAGES28TO31;//We make ORing operations to enable write protect to all pages
 80007f8:	4b19      	ldr	r3, [pc, #100]	; (8000860 <Bootloader_Enable_W_Protection+0x94>)
 80007fa:	22ff      	movs	r2, #255	; 0xff
 80007fc:	609a      	str	r2, [r3, #8]

		HAL_FLASH_Unlock();
 80007fe:	f000 fc43 	bl	8001088 <HAL_FLASH_Unlock>
		HAL_FLASH_OB_Unlock();
 8000802:	f000 fc77 	bl	80010f4 <HAL_FLASH_OB_Unlock>
		HAL_FLASHEx_OBProgram(&pOBInit);
 8000806:	4816      	ldr	r0, [pc, #88]	; (8000860 <Bootloader_Enable_W_Protection+0x94>)
 8000808:	f000 fe06 	bl	8001418 <HAL_FLASHEx_OBProgram>
		HAL_FLASH_Lock();
 800080c:	f000 fc62 	bl	80010d4 <HAL_FLASH_Lock>
		HAL_FLASH_OB_Lock();
 8000810:	f000 fc8c 	bl	800112c <HAL_FLASH_OB_Lock>
		HAL_FLASH_OB_Launch();
 8000814:	f000 fc9a 	bl	800114c <HAL_FLASH_OB_Launch>
		HAL_FLASH_OB_Launch();

	} else {
		//DO NOTHING
	}
}
 8000818:	e01c      	b.n	8000854 <Bootloader_Enable_W_Protection+0x88>
	} else if (OB_WRPSTATE_DISABLE == Host_WP_Level) {
 800081a:	7bbb      	ldrb	r3, [r7, #14]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d119      	bne.n	8000854 <Bootloader_Enable_W_Protection+0x88>
		Bootloader_Send_Data_To_Host("Level 0", 8);
 8000820:	2108      	movs	r1, #8
 8000822:	4810      	ldr	r0, [pc, #64]	; (8000864 <Bootloader_Enable_W_Protection+0x98>)
 8000824:	f7ff fd00 	bl	8000228 <Bootloader_Send_Data_To_Host>
		pOBInit.OptionType = OPTIONBYTE_WRP;
 8000828:	4b0d      	ldr	r3, [pc, #52]	; (8000860 <Bootloader_Enable_W_Protection+0x94>)
 800082a:	2201      	movs	r2, #1
 800082c:	601a      	str	r2, [r3, #0]
		pOBInit.WRPState = OB_WRPSTATE_DISABLE;
 800082e:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <Bootloader_Enable_W_Protection+0x94>)
 8000830:	2200      	movs	r2, #0
 8000832:	605a      	str	r2, [r3, #4]
		pOBInit.WRPPage = OB_WRP_PAGES0TO3 | OB_WRP_PAGES4TO7 | OB_WRP_PAGES8TO11 | OB_WRP_PAGES12TO15 | OB_WRP_PAGES16TO19 | OB_WRP_PAGES20TO23 | OB_WRP_PAGES24TO27 | OB_WRP_PAGES28TO31;//We make ORing operation to disable write protect to all pages(you should increase OR operation for higher densities STM)
 8000834:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <Bootloader_Enable_W_Protection+0x94>)
 8000836:	22ff      	movs	r2, #255	; 0xff
 8000838:	609a      	str	r2, [r3, #8]
		HAL_FLASH_Unlock();
 800083a:	f000 fc25 	bl	8001088 <HAL_FLASH_Unlock>
		HAL_FLASH_OB_Unlock();
 800083e:	f000 fc59 	bl	80010f4 <HAL_FLASH_OB_Unlock>
		HAL_FLASHEx_OBProgram(&pOBInit);
 8000842:	4807      	ldr	r0, [pc, #28]	; (8000860 <Bootloader_Enable_W_Protection+0x94>)
 8000844:	f000 fde8 	bl	8001418 <HAL_FLASHEx_OBProgram>
		HAL_FLASH_Lock();
 8000848:	f000 fc44 	bl	80010d4 <HAL_FLASH_Lock>
		HAL_FLASH_OB_Lock();
 800084c:	f000 fc6e 	bl	800112c <HAL_FLASH_OB_Lock>
		HAL_FLASH_OB_Launch();
 8000850:	f000 fc7c 	bl	800114c <HAL_FLASH_OB_Launch>
}
 8000854:	bf00      	nop
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	08002bc0 	.word	0x08002bc0
 8000860:	20000128 	.word	0x20000128
 8000864:	08002bb8 	.word	0x08002bb8

08000868 <Bootloader_SetApplication_Flag>:
 Host_Buffer[0]=
 Host_Buffer[1]=0x18
 Host_Buffer[2]=Node Number
 Host_Buffer[3]=Application Number
 */
static void    Bootloader_SetApplication_Flag(uint8_t *Host_Buffer){
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	/* To set application number */
	uint8_t ECU = Host_Buffer[2];
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	789b      	ldrb	r3, [r3, #2]
 8000874:	73fb      	strb	r3, [r7, #15]
	uint8_t APP = Host_Buffer[3] ;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	78db      	ldrb	r3, [r3, #3]
 800087a:	73bb      	strb	r3, [r7, #14]

	if (ECU == MASTERID){
 800087c:	7bfb      	ldrb	r3, [r7, #15]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d116      	bne.n	80008b0 <Bootloader_SetApplication_Flag+0x48>
		/* To edit the application flag */
		if (APP == APPLICATION1){
 8000882:	7bbb      	ldrb	r3, [r7, #14]
 8000884:	2b01      	cmp	r3, #1
 8000886:	d108      	bne.n	800089a <Bootloader_SetApplication_Flag+0x32>
			APP1_Flag = TURN_ON;
 8000888:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <Bootloader_SetApplication_Flag+0x50>)
 800088a:	2201      	movs	r2, #1
 800088c:	601a      	str	r2, [r3, #0]
			APP2_Flag = TURN_OFF;
 800088e:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <Bootloader_SetApplication_Flag+0x54>)
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
			HAL_NVIC_SystemReset();
 8000894:	f000 fb5b 	bl	8000f4e <HAL_NVIC_SystemReset>
		/* Send to slave node */
	}
	else {
		/* warning for ESP */
	}
}
 8000898:	e00a      	b.n	80008b0 <Bootloader_SetApplication_Flag+0x48>
		else if (APP == APPLICATION2){
 800089a:	7bbb      	ldrb	r3, [r7, #14]
 800089c:	2b02      	cmp	r3, #2
 800089e:	d107      	bne.n	80008b0 <Bootloader_SetApplication_Flag+0x48>
			APP2_Flag = TURN_ON;
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <Bootloader_SetApplication_Flag+0x54>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	601a      	str	r2, [r3, #0]
			APP1_Flag = TURN_OFF;
 80008a6:	4b04      	ldr	r3, [pc, #16]	; (80008b8 <Bootloader_SetApplication_Flag+0x50>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
			HAL_NVIC_SystemReset();
 80008ac:	f000 fb4f 	bl	8000f4e <HAL_NVIC_SystemReset>
}
 80008b0:	bf00      	nop
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	08010000 	.word	0x08010000
 80008bc:	08010004 	.word	0x08010004

080008c0 <MX_CRC_Init>:
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_CRC_Init+0x20>)
 80008c6:	4a07      	ldr	r2, [pc, #28]	; (80008e4 <MX_CRC_Init+0x24>)
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_CRC_Init+0x20>)
 80008cc:	f000 fb4f 	bl	8000f6e <HAL_CRC_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_CRC_Init+0x1a>
 80008d6:	f000 f898 	bl	8000a0a <Error_Handler>
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000144 	.word	0x20000144
 80008e4:	40023000 	.word	0x40023000

080008e8 <HAL_CRC_MspInit>:
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a09      	ldr	r2, [pc, #36]	; (800091c <HAL_CRC_MspInit+0x34>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d10b      	bne.n	8000912 <HAL_CRC_MspInit+0x2a>
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <HAL_CRC_MspInit+0x38>)
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	4a08      	ldr	r2, [pc, #32]	; (8000920 <HAL_CRC_MspInit+0x38>)
 8000900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000904:	6153      	str	r3, [r2, #20]
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <HAL_CRC_MspInit+0x38>)
 8000908:	695b      	ldr	r3, [r3, #20]
 800090a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	bf00      	nop
 8000914:	3714      	adds	r7, #20
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr
 800091c:	40023000 	.word	0x40023000
 8000920:	40021000 	.word	0x40021000

08000924 <MX_GPIO_Init>:
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_GPIO_Init+0x40>)
 800092c:	699b      	ldr	r3, [r3, #24]
 800092e:	4a0d      	ldr	r2, [pc, #52]	; (8000964 <MX_GPIO_Init+0x40>)
 8000930:	f043 0320 	orr.w	r3, r3, #32
 8000934:	6193      	str	r3, [r2, #24]
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <MX_GPIO_Init+0x40>)
 8000938:	699b      	ldr	r3, [r3, #24]
 800093a:	f003 0320 	and.w	r3, r3, #32
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <MX_GPIO_Init+0x40>)
 8000944:	699b      	ldr	r3, [r3, #24]
 8000946:	4a07      	ldr	r2, [pc, #28]	; (8000964 <MX_GPIO_Init+0x40>)
 8000948:	f043 0304 	orr.w	r3, r3, #4
 800094c:	6193      	str	r3, [r2, #24]
 800094e:	4b05      	ldr	r3, [pc, #20]	; (8000964 <MX_GPIO_Init+0x40>)
 8000950:	699b      	ldr	r3, [r3, #24]
 8000952:	f003 0304 	and.w	r3, r3, #4
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr
 8000964:	40021000 	.word	0x40021000

08000968 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800096c:	f000 f9a0 	bl	8000cb0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000970:	f000 f80b 	bl	800098a <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000974:	f7ff ffd6 	bl	8000924 <MX_GPIO_Init>
	MX_CRC_Init();
 8000978:	f7ff ffa2 	bl	80008c0 <MX_CRC_Init>
	MX_USART2_UART_Init();
 800097c:	f000 f8c4 	bl	8000b08 <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 8000980:	f000 f898 	bl	8000ab4 <MX_USART1_UART_Init>
		/* USER CODE END WHILE */



		/* USER CODE BEGIN 3 */
		BL_Fetch_Commend();
 8000984:	f7ff fbe2 	bl	800014c <BL_Fetch_Commend>
 8000988:	e7fc      	b.n	8000984 <main+0x1c>

0800098a <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	b090      	sub	sp, #64	; 0x40
 800098e:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000990:	f107 0318 	add.w	r3, r7, #24
 8000994:	2228      	movs	r2, #40	; 0x28
 8000996:	2100      	movs	r1, #0
 8000998:	4618      	mov	r0, r3
 800099a:	f002 f8d5 	bl	8002b48 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009ac:	2302      	movs	r3, #2
 80009ae:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009b0:	2301      	movs	r3, #1
 80009b2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009b4:	2310      	movs	r3, #16
 80009b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b8:	2302      	movs	r3, #2
 80009ba:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80009bc:	2300      	movs	r3, #0
 80009be:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80009c0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80009c4:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c6:	f107 0318 	add.w	r3, r7, #24
 80009ca:	4618      	mov	r0, r3
 80009cc:	f001 fa4a 	bl	8001e64 <HAL_RCC_OscConfig>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <SystemClock_Config+0x50>
	{
		Error_Handler();
 80009d6:	f000 f818 	bl	8000a0a <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009da:	230f      	movs	r3, #15
 80009dc:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009de:	2302      	movs	r3, #2
 80009e0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009e6:	2300      	movs	r3, #0
 80009e8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ea:	2300      	movs	r3, #0
 80009ec:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	2100      	movs	r1, #0
 80009f2:	4618      	mov	r0, r3
 80009f4:	f001 fcb8 	bl	8002368 <HAL_RCC_ClockConfig>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <SystemClock_Config+0x78>
	{
		Error_Handler();
 80009fe:	f000 f804 	bl	8000a0a <Error_Handler>
	}
}
 8000a02:	bf00      	nop
 8000a04:	3740      	adds	r7, #64	; 0x40
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000a0e:	b672      	cpsid	i
}
 8000a10:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a12:	e7fe      	b.n	8000a12 <Error_Handler+0x8>

08000a14 <HAL_MspInit>:
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <HAL_MspInit+0x40>)
 8000a1c:	699b      	ldr	r3, [r3, #24]
 8000a1e:	4a0d      	ldr	r2, [pc, #52]	; (8000a54 <HAL_MspInit+0x40>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6193      	str	r3, [r2, #24]
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <HAL_MspInit+0x40>)
 8000a28:	699b      	ldr	r3, [r3, #24]
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <HAL_MspInit+0x40>)
 8000a34:	69db      	ldr	r3, [r3, #28]
 8000a36:	4a07      	ldr	r2, [pc, #28]	; (8000a54 <HAL_MspInit+0x40>)
 8000a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a3c:	61d3      	str	r3, [r2, #28]
 8000a3e:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <HAL_MspInit+0x40>)
 8000a40:	69db      	ldr	r3, [r3, #28]
 8000a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr
 8000a54:	40021000 	.word	0x40021000

08000a58 <NMI_Handler>:
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	e7fe      	b.n	8000a5c <NMI_Handler+0x4>

08000a5e <HardFault_Handler>:
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	e7fe      	b.n	8000a62 <HardFault_Handler+0x4>

08000a64 <MemManage_Handler>:
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	e7fe      	b.n	8000a68 <MemManage_Handler+0x4>

08000a6a <BusFault_Handler>:
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	e7fe      	b.n	8000a6e <BusFault_Handler+0x4>

08000a70 <UsageFault_Handler>:
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	e7fe      	b.n	8000a74 <UsageFault_Handler+0x4>

08000a76 <SVC_Handler>:
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr

08000a82 <DebugMon_Handler>:
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc80      	pop	{r7}
 8000a8c:	4770      	bx	lr

08000a8e <PendSV_Handler>:
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr

08000a9a <SysTick_Handler>:
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	f000 f94d 	bl	8000d3c <HAL_IncTick>
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <SystemInit>:
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bc80      	pop	{r7}
 8000ab0:	4770      	bx	lr
	...

08000ab4 <MX_USART1_UART_Init>:
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <MX_USART1_UART_Init+0x4c>)
 8000aba:	4a12      	ldr	r2, [pc, #72]	; (8000b04 <MX_USART1_UART_Init+0x50>)
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <MX_USART1_UART_Init+0x4c>)
 8000ac0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <MX_USART1_UART_Init+0x4c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <MX_USART1_UART_Init+0x4c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <MX_USART1_UART_Init+0x4c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	611a      	str	r2, [r3, #16]
 8000ad8:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <MX_USART1_UART_Init+0x4c>)
 8000ada:	220c      	movs	r2, #12
 8000adc:	615a      	str	r2, [r3, #20]
 8000ade:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <MX_USART1_UART_Init+0x4c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <MX_USART1_UART_Init+0x4c>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]
 8000aea:	4805      	ldr	r0, [pc, #20]	; (8000b00 <MX_USART1_UART_Init+0x4c>)
 8000aec:	f001 fdca 	bl	8002684 <HAL_UART_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_USART1_UART_Init+0x46>
 8000af6:	f7ff ff88 	bl	8000a0a <Error_Handler>
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	2000014c 	.word	0x2000014c
 8000b04:	40013800 	.word	0x40013800

08000b08 <MX_USART2_UART_Init>:
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b0e:	4a12      	ldr	r2, [pc, #72]	; (8000b58 <MX_USART2_UART_Init+0x50>)
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	611a      	str	r2, [r3, #16]
 8000b2c:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b2e:	220c      	movs	r2, #12
 8000b30:	615a      	str	r2, [r3, #20]
 8000b32:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	619a      	str	r2, [r3, #24]
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	61da      	str	r2, [r3, #28]
 8000b3e:	4805      	ldr	r0, [pc, #20]	; (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b40:	f001 fda0 	bl	8002684 <HAL_UART_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_USART2_UART_Init+0x46>
 8000b4a:	f7ff ff5e 	bl	8000a0a <Error_Handler>
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000194 	.word	0x20000194
 8000b58:	40004400 	.word	0x40004400

08000b5c <HAL_UART_MspInit>:
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	; 0x28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	f107 0318 	add.w	r3, r7, #24
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a37      	ldr	r2, [pc, #220]	; (8000c54 <HAL_UART_MspInit+0xf8>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d132      	bne.n	8000be2 <HAL_UART_MspInit+0x86>
 8000b7c:	4b36      	ldr	r3, [pc, #216]	; (8000c58 <HAL_UART_MspInit+0xfc>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	4a35      	ldr	r2, [pc, #212]	; (8000c58 <HAL_UART_MspInit+0xfc>)
 8000b82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b86:	6193      	str	r3, [r2, #24]
 8000b88:	4b33      	ldr	r3, [pc, #204]	; (8000c58 <HAL_UART_MspInit+0xfc>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b90:	617b      	str	r3, [r7, #20]
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	4b30      	ldr	r3, [pc, #192]	; (8000c58 <HAL_UART_MspInit+0xfc>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	4a2f      	ldr	r2, [pc, #188]	; (8000c58 <HAL_UART_MspInit+0xfc>)
 8000b9a:	f043 0304 	orr.w	r3, r3, #4
 8000b9e:	6193      	str	r3, [r2, #24]
 8000ba0:	4b2d      	ldr	r3, [pc, #180]	; (8000c58 <HAL_UART_MspInit+0xfc>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	f003 0304 	and.w	r3, r3, #4
 8000ba8:	613b      	str	r3, [r7, #16]
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bb0:	61bb      	str	r3, [r7, #24]
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	61fb      	str	r3, [r7, #28]
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8000bba:	f107 0318 	add.w	r3, r7, #24
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4826      	ldr	r0, [pc, #152]	; (8000c5c <HAL_UART_MspInit+0x100>)
 8000bc2:	f000 ff31 	bl	8001a28 <HAL_GPIO_Init>
 8000bc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61fb      	str	r3, [r7, #28]
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	623b      	str	r3, [r7, #32]
 8000bd4:	f107 0318 	add.w	r3, r7, #24
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4820      	ldr	r0, [pc, #128]	; (8000c5c <HAL_UART_MspInit+0x100>)
 8000bdc:	f000 ff24 	bl	8001a28 <HAL_GPIO_Init>
 8000be0:	e034      	b.n	8000c4c <HAL_UART_MspInit+0xf0>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a1e      	ldr	r2, [pc, #120]	; (8000c60 <HAL_UART_MspInit+0x104>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d12f      	bne.n	8000c4c <HAL_UART_MspInit+0xf0>
 8000bec:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <HAL_UART_MspInit+0xfc>)
 8000bee:	69db      	ldr	r3, [r3, #28]
 8000bf0:	4a19      	ldr	r2, [pc, #100]	; (8000c58 <HAL_UART_MspInit+0xfc>)
 8000bf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf6:	61d3      	str	r3, [r2, #28]
 8000bf8:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <HAL_UART_MspInit+0xfc>)
 8000bfa:	69db      	ldr	r3, [r3, #28]
 8000bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <HAL_UART_MspInit+0xfc>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	4a13      	ldr	r2, [pc, #76]	; (8000c58 <HAL_UART_MspInit+0xfc>)
 8000c0a:	f043 0304 	orr.w	r3, r3, #4
 8000c0e:	6193      	str	r3, [r2, #24]
 8000c10:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <HAL_UART_MspInit+0xfc>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	f003 0304 	and.w	r3, r3, #4
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	2304      	movs	r3, #4
 8000c1e:	61bb      	str	r3, [r7, #24]
 8000c20:	2302      	movs	r3, #2
 8000c22:	61fb      	str	r3, [r7, #28]
 8000c24:	2303      	movs	r3, #3
 8000c26:	627b      	str	r3, [r7, #36]	; 0x24
 8000c28:	f107 0318 	add.w	r3, r7, #24
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	480b      	ldr	r0, [pc, #44]	; (8000c5c <HAL_UART_MspInit+0x100>)
 8000c30:	f000 fefa 	bl	8001a28 <HAL_GPIO_Init>
 8000c34:	2308      	movs	r3, #8
 8000c36:	61bb      	str	r3, [r7, #24]
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61fb      	str	r3, [r7, #28]
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	623b      	str	r3, [r7, #32]
 8000c40:	f107 0318 	add.w	r3, r7, #24
 8000c44:	4619      	mov	r1, r3
 8000c46:	4805      	ldr	r0, [pc, #20]	; (8000c5c <HAL_UART_MspInit+0x100>)
 8000c48:	f000 feee 	bl	8001a28 <HAL_GPIO_Init>
 8000c4c:	bf00      	nop
 8000c4e:	3728      	adds	r7, #40	; 0x28
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40013800 	.word	0x40013800
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	40010800 	.word	0x40010800
 8000c60:	40004400 	.word	0x40004400

08000c64 <Reset_Handler>:
 8000c64:	f7ff ff1f 	bl	8000aa6 <SystemInit>
 8000c68:	480b      	ldr	r0, [pc, #44]	; (8000c98 <LoopFillZerobss+0xe>)
 8000c6a:	490c      	ldr	r1, [pc, #48]	; (8000c9c <LoopFillZerobss+0x12>)
 8000c6c:	4a0c      	ldr	r2, [pc, #48]	; (8000ca0 <LoopFillZerobss+0x16>)
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e002      	b.n	8000c78 <LoopCopyDataInit>

08000c72 <CopyDataInit>:
 8000c72:	58d4      	ldr	r4, [r2, r3]
 8000c74:	50c4      	str	r4, [r0, r3]
 8000c76:	3304      	adds	r3, #4

08000c78 <LoopCopyDataInit>:
 8000c78:	18c4      	adds	r4, r0, r3
 8000c7a:	428c      	cmp	r4, r1
 8000c7c:	d3f9      	bcc.n	8000c72 <CopyDataInit>
 8000c7e:	4a09      	ldr	r2, [pc, #36]	; (8000ca4 <LoopFillZerobss+0x1a>)
 8000c80:	4c09      	ldr	r4, [pc, #36]	; (8000ca8 <LoopFillZerobss+0x1e>)
 8000c82:	2300      	movs	r3, #0
 8000c84:	e001      	b.n	8000c8a <LoopFillZerobss>

08000c86 <FillZerobss>:
 8000c86:	6013      	str	r3, [r2, #0]
 8000c88:	3204      	adds	r2, #4

08000c8a <LoopFillZerobss>:
 8000c8a:	42a2      	cmp	r2, r4
 8000c8c:	d3fb      	bcc.n	8000c86 <FillZerobss>
 8000c8e:	f001 ff63 	bl	8002b58 <__libc_init_array>
 8000c92:	f7ff fe69 	bl	8000968 <main>
 8000c96:	4770      	bx	lr
 8000c98:	20000000 	.word	0x20000000
 8000c9c:	20000040 	.word	0x20000040
 8000ca0:	08002bfc 	.word	0x08002bfc
 8000ca4:	20000040 	.word	0x20000040
 8000ca8:	20000200 	.word	0x20000200

08000cac <ADC1_2_IRQHandler>:
 8000cac:	e7fe      	b.n	8000cac <ADC1_2_IRQHandler>
	...

08000cb0 <HAL_Init>:
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <HAL_Init+0x28>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a07      	ldr	r2, [pc, #28]	; (8000cd8 <HAL_Init+0x28>)
 8000cba:	f043 0310 	orr.w	r3, r3, #16
 8000cbe:	6013      	str	r3, [r2, #0]
 8000cc0:	2003      	movs	r0, #3
 8000cc2:	f000 f91d 	bl	8000f00 <HAL_NVIC_SetPriorityGrouping>
 8000cc6:	200f      	movs	r0, #15
 8000cc8:	f000 f808 	bl	8000cdc <HAL_InitTick>
 8000ccc:	f7ff fea2 	bl	8000a14 <HAL_MspInit>
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40022000 	.word	0x40022000

08000cdc <HAL_InitTick>:
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <HAL_InitTick+0x54>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <HAL_InitTick+0x58>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	4619      	mov	r1, r3
 8000cee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 f92b 	bl	8000f56 <HAL_SYSTICK_Config>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <HAL_InitTick+0x2e>
 8000d06:	2301      	movs	r3, #1
 8000d08:	e00e      	b.n	8000d28 <HAL_InitTick+0x4c>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b0f      	cmp	r3, #15
 8000d0e:	d80a      	bhi.n	8000d26 <HAL_InitTick+0x4a>
 8000d10:	2200      	movs	r2, #0
 8000d12:	6879      	ldr	r1, [r7, #4]
 8000d14:	f04f 30ff 	mov.w	r0, #4294967295
 8000d18:	f000 f8fd 	bl	8000f16 <HAL_NVIC_SetPriority>
 8000d1c:	4a06      	ldr	r2, [pc, #24]	; (8000d38 <HAL_InitTick+0x5c>)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6013      	str	r3, [r2, #0]
 8000d22:	2300      	movs	r3, #0
 8000d24:	e000      	b.n	8000d28 <HAL_InitTick+0x4c>
 8000d26:	2301      	movs	r3, #1
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000034 	.word	0x20000034
 8000d34:	2000003c 	.word	0x2000003c
 8000d38:	20000038 	.word	0x20000038

08000d3c <HAL_IncTick>:
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <HAL_IncTick+0x1c>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <HAL_IncTick+0x20>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	4a03      	ldr	r2, [pc, #12]	; (8000d5c <HAL_IncTick+0x20>)
 8000d4e:	6013      	str	r3, [r2, #0]
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr
 8000d58:	2000003c 	.word	0x2000003c
 8000d5c:	200001dc 	.word	0x200001dc

08000d60 <HAL_GetTick>:
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	4b02      	ldr	r3, [pc, #8]	; (8000d70 <HAL_GetTick+0x10>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr
 8000d70:	200001dc 	.word	0x200001dc

08000d74 <__NVIC_SetPriorityGrouping>:
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	68ba      	ldr	r2, [r7, #8]
 8000d8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d90:	4013      	ands	r3, r2
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	021a      	lsls	r2, r3, #8
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	4a04      	ldr	r2, [pc, #16]	; (8000db8 <__NVIC_SetPriorityGrouping+0x44>)
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	60d3      	str	r3, [r2, #12]
 8000dac:	bf00      	nop
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <__NVIC_GetPriorityGrouping>:
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	0a1b      	lsrs	r3, r3, #8
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	4618      	mov	r0, r3
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bc80      	pop	{r7}
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <__NVIC_SetPriority>:
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	6039      	str	r1, [r7, #0]
 8000de2:	71fb      	strb	r3, [r7, #7]
 8000de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	db0a      	blt.n	8000e02 <__NVIC_SetPriority+0x2a>
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	490c      	ldr	r1, [pc, #48]	; (8000e24 <__NVIC_SetPriority+0x4c>)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	0112      	lsls	r2, r2, #4
 8000df8:	b2d2      	uxtb	r2, r2
 8000dfa:	440b      	add	r3, r1
 8000dfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8000e00:	e00a      	b.n	8000e18 <__NVIC_SetPriority+0x40>
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	4908      	ldr	r1, [pc, #32]	; (8000e28 <__NVIC_SetPriority+0x50>)
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	f003 030f 	and.w	r3, r3, #15
 8000e0e:	3b04      	subs	r3, #4
 8000e10:	0112      	lsls	r2, r2, #4
 8000e12:	b2d2      	uxtb	r2, r2
 8000e14:	440b      	add	r3, r1
 8000e16:	761a      	strb	r2, [r3, #24]
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bc80      	pop	{r7}
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000e100 	.word	0xe000e100
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <NVIC_EncodePriority>:
 8000e2c:	b480      	push	{r7}
 8000e2e:	b089      	sub	sp, #36	; 0x24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	61fb      	str	r3, [r7, #28]
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	f1c3 0307 	rsb	r3, r3, #7
 8000e46:	2b04      	cmp	r3, #4
 8000e48:	bf28      	it	cs
 8000e4a:	2304      	movcs	r3, #4
 8000e4c:	61bb      	str	r3, [r7, #24]
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3304      	adds	r3, #4
 8000e52:	2b06      	cmp	r3, #6
 8000e54:	d902      	bls.n	8000e5c <NVIC_EncodePriority+0x30>
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3b03      	subs	r3, #3
 8000e5a:	e000      	b.n	8000e5e <NVIC_EncodePriority+0x32>
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
 8000e60:	f04f 32ff 	mov.w	r2, #4294967295
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43da      	mvns	r2, r3
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	401a      	ands	r2, r3
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	409a      	lsls	r2, r3
 8000e74:	f04f 31ff 	mov.w	r1, #4294967295
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7e:	43d9      	mvns	r1, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	400b      	ands	r3, r1
 8000e84:	4313      	orrs	r3, r2
 8000e86:	4618      	mov	r0, r3
 8000e88:	3724      	adds	r7, #36	; 0x24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr

08000e90 <__NVIC_SystemReset>:
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	f3bf 8f4f 	dsb	sy
 8000e98:	bf00      	nop
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <__NVIC_SystemReset+0x24>)
 8000e9c:	68db      	ldr	r3, [r3, #12]
 8000e9e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000ea2:	4904      	ldr	r1, [pc, #16]	; (8000eb4 <__NVIC_SystemReset+0x24>)
 8000ea4:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <__NVIC_SystemReset+0x28>)
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	60cb      	str	r3, [r1, #12]
 8000eaa:	f3bf 8f4f 	dsb	sy
 8000eae:	bf00      	nop
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <__NVIC_SystemReset+0x20>
 8000eb4:	e000ed00 	.word	0xe000ed00
 8000eb8:	05fa0004 	.word	0x05fa0004

08000ebc <SysTick_Config>:
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ecc:	d301      	bcc.n	8000ed2 <SysTick_Config+0x16>
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e00f      	b.n	8000ef2 <SysTick_Config+0x36>
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	; (8000efc <SysTick_Config+0x40>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	6053      	str	r3, [r2, #4]
 8000eda:	210f      	movs	r1, #15
 8000edc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee0:	f7ff ff7a 	bl	8000dd8 <__NVIC_SetPriority>
 8000ee4:	4b05      	ldr	r3, [pc, #20]	; (8000efc <SysTick_Config+0x40>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	4b04      	ldr	r3, [pc, #16]	; (8000efc <SysTick_Config+0x40>)
 8000eec:	2207      	movs	r2, #7
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	e000e010 	.word	0xe000e010

08000f00 <HAL_NVIC_SetPriorityGrouping>:
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f7ff ff33 	bl	8000d74 <__NVIC_SetPriorityGrouping>
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_NVIC_SetPriority>:
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b086      	sub	sp, #24
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	60b9      	str	r1, [r7, #8]
 8000f20:	607a      	str	r2, [r7, #4]
 8000f22:	73fb      	strb	r3, [r7, #15]
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]
 8000f28:	f7ff ff48 	bl	8000dbc <__NVIC_GetPriorityGrouping>
 8000f2c:	6178      	str	r0, [r7, #20]
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	68b9      	ldr	r1, [r7, #8]
 8000f32:	6978      	ldr	r0, [r7, #20]
 8000f34:	f7ff ff7a 	bl	8000e2c <NVIC_EncodePriority>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f3e:	4611      	mov	r1, r2
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff ff49 	bl	8000dd8 <__NVIC_SetPriority>
 8000f46:	bf00      	nop
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_NVIC_SystemReset>:
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	f7ff ff9d 	bl	8000e90 <__NVIC_SystemReset>

08000f56 <HAL_SYSTICK_Config>:
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f7ff ffac 	bl	8000ebc <SysTick_Config>
 8000f64:	4603      	mov	r3, r0
 8000f66:	4618      	mov	r0, r3
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_CRC_Init>:
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d101      	bne.n	8000f80 <HAL_CRC_Init+0x12>
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	e00e      	b.n	8000f9e <HAL_CRC_Init+0x30>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	795b      	ldrb	r3, [r3, #5]
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d105      	bne.n	8000f96 <HAL_CRC_Init+0x28>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	711a      	strb	r2, [r3, #4]
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff fca9 	bl	80008e8 <HAL_CRC_MspInit>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2201      	movs	r2, #1
 8000f9a:	715a      	strb	r2, [r3, #5]
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <HAL_FLASH_Program>:
 8000fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000faa:	b087      	sub	sp, #28
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	e9c7 2300 	strd	r2, r3, [r7]
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	75fb      	strb	r3, [r7, #23]
 8000fba:	2300      	movs	r3, #0
 8000fbc:	75bb      	strb	r3, [r7, #22]
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	757b      	strb	r3, [r7, #21]
 8000fc2:	4b2f      	ldr	r3, [pc, #188]	; (8001080 <HAL_FLASH_Program+0xd8>)
 8000fc4:	7e1b      	ldrb	r3, [r3, #24]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d101      	bne.n	8000fce <HAL_FLASH_Program+0x26>
 8000fca:	2302      	movs	r3, #2
 8000fcc:	e054      	b.n	8001078 <HAL_FLASH_Program+0xd0>
 8000fce:	4b2c      	ldr	r3, [pc, #176]	; (8001080 <HAL_FLASH_Program+0xd8>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	761a      	strb	r2, [r3, #24]
 8000fd4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000fd8:	f000 f8da 	bl	8001190 <FLASH_WaitForLastOperation>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	75fb      	strb	r3, [r7, #23]
 8000fe0:	7dfb      	ldrb	r3, [r7, #23]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d144      	bne.n	8001070 <HAL_FLASH_Program+0xc8>
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d102      	bne.n	8000ff2 <HAL_FLASH_Program+0x4a>
 8000fec:	2301      	movs	r3, #1
 8000fee:	757b      	strb	r3, [r7, #21]
 8000ff0:	e007      	b.n	8001002 <HAL_FLASH_Program+0x5a>
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d102      	bne.n	8000ffe <HAL_FLASH_Program+0x56>
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	757b      	strb	r3, [r7, #21]
 8000ffc:	e001      	b.n	8001002 <HAL_FLASH_Program+0x5a>
 8000ffe:	2304      	movs	r3, #4
 8001000:	757b      	strb	r3, [r7, #21]
 8001002:	2300      	movs	r3, #0
 8001004:	75bb      	strb	r3, [r7, #22]
 8001006:	e02d      	b.n	8001064 <HAL_FLASH_Program+0xbc>
 8001008:	7dbb      	ldrb	r3, [r7, #22]
 800100a:	005a      	lsls	r2, r3, #1
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	eb02 0c03 	add.w	ip, r2, r3
 8001012:	7dbb      	ldrb	r3, [r7, #22]
 8001014:	0119      	lsls	r1, r3, #4
 8001016:	e9d7 2300 	ldrd	r2, r3, [r7]
 800101a:	f1c1 0620 	rsb	r6, r1, #32
 800101e:	f1a1 0020 	sub.w	r0, r1, #32
 8001022:	fa22 f401 	lsr.w	r4, r2, r1
 8001026:	fa03 f606 	lsl.w	r6, r3, r6
 800102a:	4334      	orrs	r4, r6
 800102c:	fa23 f000 	lsr.w	r0, r3, r0
 8001030:	4304      	orrs	r4, r0
 8001032:	fa23 f501 	lsr.w	r5, r3, r1
 8001036:	b2a3      	uxth	r3, r4
 8001038:	4619      	mov	r1, r3
 800103a:	4660      	mov	r0, ip
 800103c:	f000 f88c 	bl	8001158 <FLASH_Program_HalfWord>
 8001040:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001044:	f000 f8a4 	bl	8001190 <FLASH_WaitForLastOperation>
 8001048:	4603      	mov	r3, r0
 800104a:	75fb      	strb	r3, [r7, #23]
 800104c:	4b0d      	ldr	r3, [pc, #52]	; (8001084 <HAL_FLASH_Program+0xdc>)
 800104e:	691b      	ldr	r3, [r3, #16]
 8001050:	4a0c      	ldr	r2, [pc, #48]	; (8001084 <HAL_FLASH_Program+0xdc>)
 8001052:	f023 0301 	bic.w	r3, r3, #1
 8001056:	6113      	str	r3, [r2, #16]
 8001058:	7dfb      	ldrb	r3, [r7, #23]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d107      	bne.n	800106e <HAL_FLASH_Program+0xc6>
 800105e:	7dbb      	ldrb	r3, [r7, #22]
 8001060:	3301      	adds	r3, #1
 8001062:	75bb      	strb	r3, [r7, #22]
 8001064:	7dba      	ldrb	r2, [r7, #22]
 8001066:	7d7b      	ldrb	r3, [r7, #21]
 8001068:	429a      	cmp	r2, r3
 800106a:	d3cd      	bcc.n	8001008 <HAL_FLASH_Program+0x60>
 800106c:	e000      	b.n	8001070 <HAL_FLASH_Program+0xc8>
 800106e:	bf00      	nop
 8001070:	4b03      	ldr	r3, [pc, #12]	; (8001080 <HAL_FLASH_Program+0xd8>)
 8001072:	2200      	movs	r2, #0
 8001074:	761a      	strb	r2, [r3, #24]
 8001076:	7dfb      	ldrb	r3, [r7, #23]
 8001078:	4618      	mov	r0, r3
 800107a:	371c      	adds	r7, #28
 800107c:	46bd      	mov	sp, r7
 800107e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001080:	200001e0 	.word	0x200001e0
 8001084:	40022000 	.word	0x40022000

08001088 <HAL_FLASH_Unlock>:
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	2300      	movs	r3, #0
 8001090:	71fb      	strb	r3, [r7, #7]
 8001092:	4b0d      	ldr	r3, [pc, #52]	; (80010c8 <HAL_FLASH_Unlock+0x40>)
 8001094:	691b      	ldr	r3, [r3, #16]
 8001096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800109a:	2b00      	cmp	r3, #0
 800109c:	d00d      	beq.n	80010ba <HAL_FLASH_Unlock+0x32>
 800109e:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <HAL_FLASH_Unlock+0x40>)
 80010a0:	4a0a      	ldr	r2, [pc, #40]	; (80010cc <HAL_FLASH_Unlock+0x44>)
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <HAL_FLASH_Unlock+0x40>)
 80010a6:	4a0a      	ldr	r2, [pc, #40]	; (80010d0 <HAL_FLASH_Unlock+0x48>)
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <HAL_FLASH_Unlock+0x40>)
 80010ac:	691b      	ldr	r3, [r3, #16]
 80010ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <HAL_FLASH_Unlock+0x32>
 80010b6:	2301      	movs	r3, #1
 80010b8:	71fb      	strb	r3, [r7, #7]
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	4618      	mov	r0, r3
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bc80      	pop	{r7}
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	40022000 	.word	0x40022000
 80010cc:	45670123 	.word	0x45670123
 80010d0:	cdef89ab 	.word	0xcdef89ab

080010d4 <HAL_FLASH_Lock>:
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <HAL_FLASH_Lock+0x1c>)
 80010da:	691b      	ldr	r3, [r3, #16]
 80010dc:	4a04      	ldr	r2, [pc, #16]	; (80010f0 <HAL_FLASH_Lock+0x1c>)
 80010de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010e2:	6113      	str	r3, [r2, #16]
 80010e4:	2300      	movs	r3, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	40022000 	.word	0x40022000

080010f4 <HAL_FLASH_OB_Unlock>:
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4b09      	ldr	r3, [pc, #36]	; (8001120 <HAL_FLASH_OB_Unlock+0x2c>)
 80010fa:	691b      	ldr	r3, [r3, #16]
 80010fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001100:	2b00      	cmp	r3, #0
 8001102:	d107      	bne.n	8001114 <HAL_FLASH_OB_Unlock+0x20>
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <HAL_FLASH_OB_Unlock+0x2c>)
 8001106:	4a07      	ldr	r2, [pc, #28]	; (8001124 <HAL_FLASH_OB_Unlock+0x30>)
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	4b05      	ldr	r3, [pc, #20]	; (8001120 <HAL_FLASH_OB_Unlock+0x2c>)
 800110c:	4a06      	ldr	r2, [pc, #24]	; (8001128 <HAL_FLASH_OB_Unlock+0x34>)
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	2300      	movs	r3, #0
 8001112:	e000      	b.n	8001116 <HAL_FLASH_OB_Unlock+0x22>
 8001114:	2301      	movs	r3, #1
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	40022000 	.word	0x40022000
 8001124:	45670123 	.word	0x45670123
 8001128:	cdef89ab 	.word	0xcdef89ab

0800112c <HAL_FLASH_OB_Lock>:
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <HAL_FLASH_OB_Lock+0x1c>)
 8001132:	691b      	ldr	r3, [r3, #16]
 8001134:	4a04      	ldr	r2, [pc, #16]	; (8001148 <HAL_FLASH_OB_Lock+0x1c>)
 8001136:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800113a:	6113      	str	r3, [r2, #16]
 800113c:	2300      	movs	r3, #0
 800113e:	4618      	mov	r0, r3
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	40022000 	.word	0x40022000

0800114c <HAL_FLASH_OB_Launch>:
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
 8001150:	f7ff fefd 	bl	8000f4e <HAL_NVIC_SystemReset>
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}

08001158 <FLASH_Program_HalfWord>:
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	807b      	strh	r3, [r7, #2]
 8001164:	4b08      	ldr	r3, [pc, #32]	; (8001188 <FLASH_Program_HalfWord+0x30>)
 8001166:	2200      	movs	r2, #0
 8001168:	61da      	str	r2, [r3, #28]
 800116a:	4b08      	ldr	r3, [pc, #32]	; (800118c <FLASH_Program_HalfWord+0x34>)
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	4a07      	ldr	r2, [pc, #28]	; (800118c <FLASH_Program_HalfWord+0x34>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6113      	str	r3, [r2, #16]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	887a      	ldrh	r2, [r7, #2]
 800117a:	801a      	strh	r2, [r3, #0]
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	bc80      	pop	{r7}
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	200001e0 	.word	0x200001e0
 800118c:	40022000 	.word	0x40022000

08001190 <FLASH_WaitForLastOperation>:
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	f7ff fde2 	bl	8000d60 <HAL_GetTick>
 800119c:	60f8      	str	r0, [r7, #12]
 800119e:	e010      	b.n	80011c2 <FLASH_WaitForLastOperation+0x32>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a6:	d00c      	beq.n	80011c2 <FLASH_WaitForLastOperation+0x32>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d007      	beq.n	80011be <FLASH_WaitForLastOperation+0x2e>
 80011ae:	f7ff fdd7 	bl	8000d60 <HAL_GetTick>
 80011b2:	4602      	mov	r2, r0
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d201      	bcs.n	80011c2 <FLASH_WaitForLastOperation+0x32>
 80011be:	2303      	movs	r3, #3
 80011c0:	e025      	b.n	800120e <FLASH_WaitForLastOperation+0x7e>
 80011c2:	4b15      	ldr	r3, [pc, #84]	; (8001218 <FLASH_WaitForLastOperation+0x88>)
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d1e8      	bne.n	80011a0 <FLASH_WaitForLastOperation+0x10>
 80011ce:	4b12      	ldr	r3, [pc, #72]	; (8001218 <FLASH_WaitForLastOperation+0x88>)
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	f003 0320 	and.w	r3, r3, #32
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d002      	beq.n	80011e0 <FLASH_WaitForLastOperation+0x50>
 80011da:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <FLASH_WaitForLastOperation+0x88>)
 80011dc:	2220      	movs	r2, #32
 80011de:	60da      	str	r2, [r3, #12]
 80011e0:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <FLASH_WaitForLastOperation+0x88>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	f003 0310 	and.w	r3, r3, #16
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d10b      	bne.n	8001204 <FLASH_WaitForLastOperation+0x74>
 80011ec:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <FLASH_WaitForLastOperation+0x88>)
 80011ee:	69db      	ldr	r3, [r3, #28]
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d105      	bne.n	8001204 <FLASH_WaitForLastOperation+0x74>
 80011f8:	4b07      	ldr	r3, [pc, #28]	; (8001218 <FLASH_WaitForLastOperation+0x88>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	f003 0304 	and.w	r3, r3, #4
 8001200:	2b00      	cmp	r3, #0
 8001202:	d003      	beq.n	800120c <FLASH_WaitForLastOperation+0x7c>
 8001204:	f000 f80a 	bl	800121c <FLASH_SetErrorCode>
 8001208:	2301      	movs	r3, #1
 800120a:	e000      	b.n	800120e <FLASH_WaitForLastOperation+0x7e>
 800120c:	2300      	movs	r3, #0
 800120e:	4618      	mov	r0, r3
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40022000 	.word	0x40022000

0800121c <FLASH_SetErrorCode>:
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	4b23      	ldr	r3, [pc, #140]	; (80012b4 <FLASH_SetErrorCode+0x98>)
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	f003 0310 	and.w	r3, r3, #16
 800122e:	2b00      	cmp	r3, #0
 8001230:	d009      	beq.n	8001246 <FLASH_SetErrorCode+0x2a>
 8001232:	4b21      	ldr	r3, [pc, #132]	; (80012b8 <FLASH_SetErrorCode+0x9c>)
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	f043 0302 	orr.w	r3, r3, #2
 800123a:	4a1f      	ldr	r2, [pc, #124]	; (80012b8 <FLASH_SetErrorCode+0x9c>)
 800123c:	61d3      	str	r3, [r2, #28]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f043 0310 	orr.w	r3, r3, #16
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <FLASH_SetErrorCode+0x98>)
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	f003 0304 	and.w	r3, r3, #4
 800124e:	2b00      	cmp	r3, #0
 8001250:	d009      	beq.n	8001266 <FLASH_SetErrorCode+0x4a>
 8001252:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <FLASH_SetErrorCode+0x9c>)
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	f043 0301 	orr.w	r3, r3, #1
 800125a:	4a17      	ldr	r2, [pc, #92]	; (80012b8 <FLASH_SetErrorCode+0x9c>)
 800125c:	61d3      	str	r3, [r2, #28]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f043 0304 	orr.w	r3, r3, #4
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <FLASH_SetErrorCode+0x98>)
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	2b00      	cmp	r3, #0
 8001270:	d00b      	beq.n	800128a <FLASH_SetErrorCode+0x6e>
 8001272:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <FLASH_SetErrorCode+0x9c>)
 8001274:	69db      	ldr	r3, [r3, #28]
 8001276:	f043 0304 	orr.w	r3, r3, #4
 800127a:	4a0f      	ldr	r2, [pc, #60]	; (80012b8 <FLASH_SetErrorCode+0x9c>)
 800127c:	61d3      	str	r3, [r2, #28]
 800127e:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <FLASH_SetErrorCode+0x98>)
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	4a0c      	ldr	r2, [pc, #48]	; (80012b4 <FLASH_SetErrorCode+0x98>)
 8001284:	f023 0301 	bic.w	r3, r3, #1
 8001288:	61d3      	str	r3, [r2, #28]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f240 1201 	movw	r2, #257	; 0x101
 8001290:	4293      	cmp	r3, r2
 8001292:	d106      	bne.n	80012a2 <FLASH_SetErrorCode+0x86>
 8001294:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <FLASH_SetErrorCode+0x98>)
 8001296:	69db      	ldr	r3, [r3, #28]
 8001298:	4a06      	ldr	r2, [pc, #24]	; (80012b4 <FLASH_SetErrorCode+0x98>)
 800129a:	f023 0301 	bic.w	r3, r3, #1
 800129e:	61d3      	str	r3, [r2, #28]
 80012a0:	e002      	b.n	80012a8 <FLASH_SetErrorCode+0x8c>
 80012a2:	4a04      	ldr	r2, [pc, #16]	; (80012b4 <FLASH_SetErrorCode+0x98>)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	60d3      	str	r3, [r2, #12]
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	40022000 	.word	0x40022000
 80012b8:	200001e0 	.word	0x200001e0

080012bc <HAL_FLASHEx_Erase>:
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
 80012c6:	2301      	movs	r3, #1
 80012c8:	73fb      	strb	r3, [r7, #15]
 80012ca:	2300      	movs	r3, #0
 80012cc:	60bb      	str	r3, [r7, #8]
 80012ce:	4b2f      	ldr	r3, [pc, #188]	; (800138c <HAL_FLASHEx_Erase+0xd0>)
 80012d0:	7e1b      	ldrb	r3, [r3, #24]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d101      	bne.n	80012da <HAL_FLASHEx_Erase+0x1e>
 80012d6:	2302      	movs	r3, #2
 80012d8:	e053      	b.n	8001382 <HAL_FLASHEx_Erase+0xc6>
 80012da:	4b2c      	ldr	r3, [pc, #176]	; (800138c <HAL_FLASHEx_Erase+0xd0>)
 80012dc:	2201      	movs	r2, #1
 80012de:	761a      	strb	r2, [r3, #24]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d116      	bne.n	8001316 <HAL_FLASHEx_Erase+0x5a>
 80012e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012ec:	f7ff ff50 	bl	8001190 <FLASH_WaitForLastOperation>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d141      	bne.n	800137a <HAL_FLASHEx_Erase+0xbe>
 80012f6:	2001      	movs	r0, #1
 80012f8:	f000 f926 	bl	8001548 <FLASH_MassErase>
 80012fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001300:	f7ff ff46 	bl	8001190 <FLASH_WaitForLastOperation>
 8001304:	4603      	mov	r3, r0
 8001306:	73fb      	strb	r3, [r7, #15]
 8001308:	4b21      	ldr	r3, [pc, #132]	; (8001390 <HAL_FLASHEx_Erase+0xd4>)
 800130a:	691b      	ldr	r3, [r3, #16]
 800130c:	4a20      	ldr	r2, [pc, #128]	; (8001390 <HAL_FLASHEx_Erase+0xd4>)
 800130e:	f023 0304 	bic.w	r3, r3, #4
 8001312:	6113      	str	r3, [r2, #16]
 8001314:	e031      	b.n	800137a <HAL_FLASHEx_Erase+0xbe>
 8001316:	f24c 3050 	movw	r0, #50000	; 0xc350
 800131a:	f7ff ff39 	bl	8001190 <FLASH_WaitForLastOperation>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d12a      	bne.n	800137a <HAL_FLASHEx_Erase+0xbe>
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	f04f 32ff 	mov.w	r2, #4294967295
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	e019      	b.n	8001368 <HAL_FLASHEx_Erase+0xac>
 8001334:	68b8      	ldr	r0, [r7, #8]
 8001336:	f000 fb57 	bl	80019e8 <FLASH_PageErase>
 800133a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800133e:	f7ff ff27 	bl	8001190 <FLASH_WaitForLastOperation>
 8001342:	4603      	mov	r3, r0
 8001344:	73fb      	strb	r3, [r7, #15]
 8001346:	4b12      	ldr	r3, [pc, #72]	; (8001390 <HAL_FLASHEx_Erase+0xd4>)
 8001348:	691b      	ldr	r3, [r3, #16]
 800134a:	4a11      	ldr	r2, [pc, #68]	; (8001390 <HAL_FLASHEx_Erase+0xd4>)
 800134c:	f023 0302 	bic.w	r3, r3, #2
 8001350:	6113      	str	r3, [r2, #16]
 8001352:	7bfb      	ldrb	r3, [r7, #15]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d003      	beq.n	8001360 <HAL_FLASHEx_Erase+0xa4>
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	e00c      	b.n	800137a <HAL_FLASHEx_Erase+0xbe>
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001366:	60bb      	str	r3, [r7, #8]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	029a      	lsls	r2, r3, #10
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	4413      	add	r3, r2
 8001374:	68ba      	ldr	r2, [r7, #8]
 8001376:	429a      	cmp	r2, r3
 8001378:	d3dc      	bcc.n	8001334 <HAL_FLASHEx_Erase+0x78>
 800137a:	4b04      	ldr	r3, [pc, #16]	; (800138c <HAL_FLASHEx_Erase+0xd0>)
 800137c:	2200      	movs	r2, #0
 800137e:	761a      	strb	r2, [r3, #24]
 8001380:	7bfb      	ldrb	r3, [r7, #15]
 8001382:	4618      	mov	r0, r3
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	200001e0 	.word	0x200001e0
 8001390:	40022000 	.word	0x40022000

08001394 <HAL_FLASHEx_OBErase>:
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	23a5      	movs	r3, #165	; 0xa5
 800139c:	71bb      	strb	r3, [r7, #6]
 800139e:	2301      	movs	r3, #1
 80013a0:	71fb      	strb	r3, [r7, #7]
 80013a2:	f000 faf5 	bl	8001990 <FLASH_OB_GetRDP>
 80013a6:	4603      	mov	r3, r0
 80013a8:	71bb      	strb	r3, [r7, #6]
 80013aa:	f24c 3050 	movw	r0, #50000	; 0xc350
 80013ae:	f7ff feef 	bl	8001190 <FLASH_WaitForLastOperation>
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d123      	bne.n	8001404 <HAL_FLASHEx_OBErase+0x70>
 80013bc:	4b14      	ldr	r3, [pc, #80]	; (8001410 <HAL_FLASHEx_OBErase+0x7c>)
 80013be:	2200      	movs	r2, #0
 80013c0:	61da      	str	r2, [r3, #28]
 80013c2:	4b14      	ldr	r3, [pc, #80]	; (8001414 <HAL_FLASHEx_OBErase+0x80>)
 80013c4:	691b      	ldr	r3, [r3, #16]
 80013c6:	4a13      	ldr	r2, [pc, #76]	; (8001414 <HAL_FLASHEx_OBErase+0x80>)
 80013c8:	f043 0320 	orr.w	r3, r3, #32
 80013cc:	6113      	str	r3, [r2, #16]
 80013ce:	4b11      	ldr	r3, [pc, #68]	; (8001414 <HAL_FLASHEx_OBErase+0x80>)
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	4a10      	ldr	r2, [pc, #64]	; (8001414 <HAL_FLASHEx_OBErase+0x80>)
 80013d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013d8:	6113      	str	r3, [r2, #16]
 80013da:	f24c 3050 	movw	r0, #50000	; 0xc350
 80013de:	f7ff fed7 	bl	8001190 <FLASH_WaitForLastOperation>
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
 80013e6:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <HAL_FLASHEx_OBErase+0x80>)
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <HAL_FLASHEx_OBErase+0x80>)
 80013ec:	f023 0320 	bic.w	r3, r3, #32
 80013f0:	6113      	str	r3, [r2, #16]
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d105      	bne.n	8001404 <HAL_FLASHEx_OBErase+0x70>
 80013f8:	79bb      	ldrb	r3, [r7, #6]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f000 fa02 	bl	8001804 <FLASH_OB_RDP_LevelConfig>
 8001400:	4603      	mov	r3, r0
 8001402:	71fb      	strb	r3, [r7, #7]
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	200001e0 	.word	0x200001e0
 8001414:	40022000 	.word	0x40022000

08001418 <HAL_FLASHEx_OBProgram>:
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	2301      	movs	r3, #1
 8001422:	73fb      	strb	r3, [r7, #15]
 8001424:	4b39      	ldr	r3, [pc, #228]	; (800150c <HAL_FLASHEx_OBProgram+0xf4>)
 8001426:	7e1b      	ldrb	r3, [r3, #24]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d101      	bne.n	8001430 <HAL_FLASHEx_OBProgram+0x18>
 800142c:	2302      	movs	r3, #2
 800142e:	e069      	b.n	8001504 <HAL_FLASHEx_OBProgram+0xec>
 8001430:	4b36      	ldr	r3, [pc, #216]	; (800150c <HAL_FLASHEx_OBProgram+0xf4>)
 8001432:	2201      	movs	r2, #1
 8001434:	761a      	strb	r2, [r3, #24]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	2b00      	cmp	r3, #0
 8001440:	d01a      	beq.n	8001478 <HAL_FLASHEx_OBProgram+0x60>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d107      	bne.n	800145a <HAL_FLASHEx_OBProgram+0x42>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	4618      	mov	r0, r3
 8001450:	f000 f896 	bl	8001580 <FLASH_OB_EnableWRP>
 8001454:	4603      	mov	r3, r0
 8001456:	73fb      	strb	r3, [r7, #15]
 8001458:	e006      	b.n	8001468 <HAL_FLASHEx_OBProgram+0x50>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	4618      	mov	r0, r3
 8001460:	f000 f930 	bl	80016c4 <FLASH_OB_DisableWRP>
 8001464:	4603      	mov	r3, r0
 8001466:	73fb      	strb	r3, [r7, #15]
 8001468:	7bfb      	ldrb	r3, [r7, #15]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d004      	beq.n	8001478 <HAL_FLASHEx_OBProgram+0x60>
 800146e:	4b27      	ldr	r3, [pc, #156]	; (800150c <HAL_FLASHEx_OBProgram+0xf4>)
 8001470:	2200      	movs	r2, #0
 8001472:	761a      	strb	r2, [r3, #24]
 8001474:	7bfb      	ldrb	r3, [r7, #15]
 8001476:	e045      	b.n	8001504 <HAL_FLASHEx_OBProgram+0xec>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d00e      	beq.n	80014a2 <HAL_FLASHEx_OBProgram+0x8a>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	7c1b      	ldrb	r3, [r3, #16]
 8001488:	4618      	mov	r0, r3
 800148a:	f000 f9bb 	bl	8001804 <FLASH_OB_RDP_LevelConfig>
 800148e:	4603      	mov	r3, r0
 8001490:	73fb      	strb	r3, [r7, #15]
 8001492:	7bfb      	ldrb	r3, [r7, #15]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d004      	beq.n	80014a2 <HAL_FLASHEx_OBProgram+0x8a>
 8001498:	4b1c      	ldr	r3, [pc, #112]	; (800150c <HAL_FLASHEx_OBProgram+0xf4>)
 800149a:	2200      	movs	r2, #0
 800149c:	761a      	strb	r2, [r3, #24]
 800149e:	7bfb      	ldrb	r3, [r7, #15]
 80014a0:	e030      	b.n	8001504 <HAL_FLASHEx_OBProgram+0xec>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0304 	and.w	r3, r3, #4
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d00e      	beq.n	80014cc <HAL_FLASHEx_OBProgram+0xb4>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	7c5b      	ldrb	r3, [r3, #17]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f000 f9f6 	bl	80018a4 <FLASH_OB_UserConfig>
 80014b8:	4603      	mov	r3, r0
 80014ba:	73fb      	strb	r3, [r7, #15]
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d004      	beq.n	80014cc <HAL_FLASHEx_OBProgram+0xb4>
 80014c2:	4b12      	ldr	r3, [pc, #72]	; (800150c <HAL_FLASHEx_OBProgram+0xf4>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	761a      	strb	r2, [r3, #24]
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
 80014ca:	e01b      	b.n	8001504 <HAL_FLASHEx_OBProgram+0xec>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0308 	and.w	r3, r3, #8
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d011      	beq.n	80014fc <HAL_FLASHEx_OBProgram+0xe4>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	695a      	ldr	r2, [r3, #20]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	7e1b      	ldrb	r3, [r3, #24]
 80014e0:	4619      	mov	r1, r3
 80014e2:	4610      	mov	r0, r2
 80014e4:	f000 fa16 	bl	8001914 <FLASH_OB_ProgramData>
 80014e8:	4603      	mov	r3, r0
 80014ea:	73fb      	strb	r3, [r7, #15]
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d004      	beq.n	80014fc <HAL_FLASHEx_OBProgram+0xe4>
 80014f2:	4b06      	ldr	r3, [pc, #24]	; (800150c <HAL_FLASHEx_OBProgram+0xf4>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	761a      	strb	r2, [r3, #24]
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	e003      	b.n	8001504 <HAL_FLASHEx_OBProgram+0xec>
 80014fc:	4b03      	ldr	r3, [pc, #12]	; (800150c <HAL_FLASHEx_OBProgram+0xf4>)
 80014fe:	2200      	movs	r2, #0
 8001500:	761a      	strb	r2, [r3, #24]
 8001502:	7bfb      	ldrb	r3, [r7, #15]
 8001504:	4618      	mov	r0, r3
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	200001e0 	.word	0x200001e0

08001510 <HAL_FLASHEx_OBGetConfig>:
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2207      	movs	r2, #7
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	f000 fa2d 	bl	800197c <FLASH_OB_GetWRP>
 8001522:	4602      	mov	r2, r0
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	f000 fa32 	bl	8001990 <FLASH_OB_GetRDP>
 800152c:	4603      	mov	r3, r0
 800152e:	b2da      	uxtb	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	741a      	strb	r2, [r3, #16]
 8001534:	f000 fa48 	bl	80019c8 <FLASH_OB_GetUser>
 8001538:	4603      	mov	r3, r0
 800153a:	461a      	mov	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	745a      	strb	r2, [r3, #17]
 8001540:	bf00      	nop
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <FLASH_MassErase>:
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	4b09      	ldr	r3, [pc, #36]	; (8001578 <FLASH_MassErase+0x30>)
 8001552:	2200      	movs	r2, #0
 8001554:	61da      	str	r2, [r3, #28]
 8001556:	4b09      	ldr	r3, [pc, #36]	; (800157c <FLASH_MassErase+0x34>)
 8001558:	691b      	ldr	r3, [r3, #16]
 800155a:	4a08      	ldr	r2, [pc, #32]	; (800157c <FLASH_MassErase+0x34>)
 800155c:	f043 0304 	orr.w	r3, r3, #4
 8001560:	6113      	str	r3, [r2, #16]
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <FLASH_MassErase+0x34>)
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	4a05      	ldr	r2, [pc, #20]	; (800157c <FLASH_MassErase+0x34>)
 8001568:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800156c:	6113      	str	r3, [r2, #16]
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr
 8001578:	200001e0 	.word	0x200001e0
 800157c:	40022000 	.word	0x40022000

08001580 <FLASH_OB_EnableWRP>:
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	2300      	movs	r3, #0
 800158a:	75fb      	strb	r3, [r7, #23]
 800158c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001590:	82bb      	strh	r3, [r7, #20]
 8001592:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001596:	827b      	strh	r3, [r7, #18]
 8001598:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800159c:	823b      	strh	r3, [r7, #16]
 800159e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015a2:	81fb      	strh	r3, [r7, #14]
 80015a4:	f000 f9ea 	bl	800197c <FLASH_OB_GetWRP>
 80015a8:	4602      	mov	r2, r0
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	43db      	mvns	r3, r3
 80015ae:	4013      	ands	r3, r2
 80015b0:	607b      	str	r3, [r7, #4]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	82bb      	strh	r3, [r7, #20]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	0a1b      	lsrs	r3, r3, #8
 80015be:	b29b      	uxth	r3, r3
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	827b      	strh	r3, [r7, #18]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	0c1b      	lsrs	r3, r3, #16
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	823b      	strh	r3, [r7, #16]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	0e1b      	lsrs	r3, r3, #24
 80015d2:	81fb      	strh	r3, [r7, #14]
 80015d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80015d8:	f7ff fdda 	bl	8001190 <FLASH_WaitForLastOperation>
 80015dc:	4603      	mov	r3, r0
 80015de:	75fb      	strb	r3, [r7, #23]
 80015e0:	7dfb      	ldrb	r3, [r7, #23]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d162      	bne.n	80016ac <FLASH_OB_EnableWRP+0x12c>
 80015e6:	4b34      	ldr	r3, [pc, #208]	; (80016b8 <FLASH_OB_EnableWRP+0x138>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	61da      	str	r2, [r3, #28]
 80015ec:	f7ff fed2 	bl	8001394 <HAL_FLASHEx_OBErase>
 80015f0:	4603      	mov	r3, r0
 80015f2:	75fb      	strb	r3, [r7, #23]
 80015f4:	7dfb      	ldrb	r3, [r7, #23]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d158      	bne.n	80016ac <FLASH_OB_EnableWRP+0x12c>
 80015fa:	4b30      	ldr	r3, [pc, #192]	; (80016bc <FLASH_OB_EnableWRP+0x13c>)
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	4a2f      	ldr	r2, [pc, #188]	; (80016bc <FLASH_OB_EnableWRP+0x13c>)
 8001600:	f043 0310 	orr.w	r3, r3, #16
 8001604:	6113      	str	r3, [r2, #16]
 8001606:	8abb      	ldrh	r3, [r7, #20]
 8001608:	2bff      	cmp	r3, #255	; 0xff
 800160a:	d00d      	beq.n	8001628 <FLASH_OB_EnableWRP+0xa8>
 800160c:	4b2c      	ldr	r3, [pc, #176]	; (80016c0 <FLASH_OB_EnableWRP+0x140>)
 800160e:	891b      	ldrh	r3, [r3, #8]
 8001610:	b29a      	uxth	r2, r3
 8001612:	492b      	ldr	r1, [pc, #172]	; (80016c0 <FLASH_OB_EnableWRP+0x140>)
 8001614:	8abb      	ldrh	r3, [r7, #20]
 8001616:	4013      	ands	r3, r2
 8001618:	b29b      	uxth	r3, r3
 800161a:	810b      	strh	r3, [r1, #8]
 800161c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001620:	f7ff fdb6 	bl	8001190 <FLASH_WaitForLastOperation>
 8001624:	4603      	mov	r3, r0
 8001626:	75fb      	strb	r3, [r7, #23]
 8001628:	7dfb      	ldrb	r3, [r7, #23]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d110      	bne.n	8001650 <FLASH_OB_EnableWRP+0xd0>
 800162e:	8a7b      	ldrh	r3, [r7, #18]
 8001630:	2bff      	cmp	r3, #255	; 0xff
 8001632:	d00d      	beq.n	8001650 <FLASH_OB_EnableWRP+0xd0>
 8001634:	4b22      	ldr	r3, [pc, #136]	; (80016c0 <FLASH_OB_EnableWRP+0x140>)
 8001636:	895b      	ldrh	r3, [r3, #10]
 8001638:	b29a      	uxth	r2, r3
 800163a:	4921      	ldr	r1, [pc, #132]	; (80016c0 <FLASH_OB_EnableWRP+0x140>)
 800163c:	8a7b      	ldrh	r3, [r7, #18]
 800163e:	4013      	ands	r3, r2
 8001640:	b29b      	uxth	r3, r3
 8001642:	814b      	strh	r3, [r1, #10]
 8001644:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001648:	f7ff fda2 	bl	8001190 <FLASH_WaitForLastOperation>
 800164c:	4603      	mov	r3, r0
 800164e:	75fb      	strb	r3, [r7, #23]
 8001650:	7dfb      	ldrb	r3, [r7, #23]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d110      	bne.n	8001678 <FLASH_OB_EnableWRP+0xf8>
 8001656:	8a3b      	ldrh	r3, [r7, #16]
 8001658:	2bff      	cmp	r3, #255	; 0xff
 800165a:	d00d      	beq.n	8001678 <FLASH_OB_EnableWRP+0xf8>
 800165c:	4b18      	ldr	r3, [pc, #96]	; (80016c0 <FLASH_OB_EnableWRP+0x140>)
 800165e:	899b      	ldrh	r3, [r3, #12]
 8001660:	b29a      	uxth	r2, r3
 8001662:	4917      	ldr	r1, [pc, #92]	; (80016c0 <FLASH_OB_EnableWRP+0x140>)
 8001664:	8a3b      	ldrh	r3, [r7, #16]
 8001666:	4013      	ands	r3, r2
 8001668:	b29b      	uxth	r3, r3
 800166a:	818b      	strh	r3, [r1, #12]
 800166c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001670:	f7ff fd8e 	bl	8001190 <FLASH_WaitForLastOperation>
 8001674:	4603      	mov	r3, r0
 8001676:	75fb      	strb	r3, [r7, #23]
 8001678:	7dfb      	ldrb	r3, [r7, #23]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d110      	bne.n	80016a0 <FLASH_OB_EnableWRP+0x120>
 800167e:	89fb      	ldrh	r3, [r7, #14]
 8001680:	2bff      	cmp	r3, #255	; 0xff
 8001682:	d00d      	beq.n	80016a0 <FLASH_OB_EnableWRP+0x120>
 8001684:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <FLASH_OB_EnableWRP+0x140>)
 8001686:	89db      	ldrh	r3, [r3, #14]
 8001688:	b29a      	uxth	r2, r3
 800168a:	490d      	ldr	r1, [pc, #52]	; (80016c0 <FLASH_OB_EnableWRP+0x140>)
 800168c:	89fb      	ldrh	r3, [r7, #14]
 800168e:	4013      	ands	r3, r2
 8001690:	b29b      	uxth	r3, r3
 8001692:	81cb      	strh	r3, [r1, #14]
 8001694:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001698:	f7ff fd7a 	bl	8001190 <FLASH_WaitForLastOperation>
 800169c:	4603      	mov	r3, r0
 800169e:	75fb      	strb	r3, [r7, #23]
 80016a0:	4b06      	ldr	r3, [pc, #24]	; (80016bc <FLASH_OB_EnableWRP+0x13c>)
 80016a2:	691b      	ldr	r3, [r3, #16]
 80016a4:	4a05      	ldr	r2, [pc, #20]	; (80016bc <FLASH_OB_EnableWRP+0x13c>)
 80016a6:	f023 0310 	bic.w	r3, r3, #16
 80016aa:	6113      	str	r3, [r2, #16]
 80016ac:	7dfb      	ldrb	r3, [r7, #23]
 80016ae:	4618      	mov	r0, r3
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	200001e0 	.word	0x200001e0
 80016bc:	40022000 	.word	0x40022000
 80016c0:	1ffff800 	.word	0x1ffff800

080016c4 <FLASH_OB_DisableWRP>:
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	2300      	movs	r3, #0
 80016ce:	75fb      	strb	r3, [r7, #23]
 80016d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016d4:	82bb      	strh	r3, [r7, #20]
 80016d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016da:	827b      	strh	r3, [r7, #18]
 80016dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016e0:	823b      	strh	r3, [r7, #16]
 80016e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016e6:	81fb      	strh	r3, [r7, #14]
 80016e8:	f000 f948 	bl	800197c <FLASH_OB_GetWRP>
 80016ec:	4602      	mov	r2, r0
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	607b      	str	r3, [r7, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	82bb      	strh	r3, [r7, #20]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	0a1b      	lsrs	r3, r3, #8
 8001700:	b29b      	uxth	r3, r3
 8001702:	b2db      	uxtb	r3, r3
 8001704:	827b      	strh	r3, [r7, #18]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	0c1b      	lsrs	r3, r3, #16
 800170a:	b29b      	uxth	r3, r3
 800170c:	b2db      	uxtb	r3, r3
 800170e:	823b      	strh	r3, [r7, #16]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	0e1b      	lsrs	r3, r3, #24
 8001714:	81fb      	strh	r3, [r7, #14]
 8001716:	f24c 3050 	movw	r0, #50000	; 0xc350
 800171a:	f7ff fd39 	bl	8001190 <FLASH_WaitForLastOperation>
 800171e:	4603      	mov	r3, r0
 8001720:	75fb      	strb	r3, [r7, #23]
 8001722:	7dfb      	ldrb	r3, [r7, #23]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d162      	bne.n	80017ee <FLASH_OB_DisableWRP+0x12a>
 8001728:	4b33      	ldr	r3, [pc, #204]	; (80017f8 <FLASH_OB_DisableWRP+0x134>)
 800172a:	2200      	movs	r2, #0
 800172c:	61da      	str	r2, [r3, #28]
 800172e:	f7ff fe31 	bl	8001394 <HAL_FLASHEx_OBErase>
 8001732:	4603      	mov	r3, r0
 8001734:	75fb      	strb	r3, [r7, #23]
 8001736:	7dfb      	ldrb	r3, [r7, #23]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d158      	bne.n	80017ee <FLASH_OB_DisableWRP+0x12a>
 800173c:	4b2f      	ldr	r3, [pc, #188]	; (80017fc <FLASH_OB_DisableWRP+0x138>)
 800173e:	691b      	ldr	r3, [r3, #16]
 8001740:	4a2e      	ldr	r2, [pc, #184]	; (80017fc <FLASH_OB_DisableWRP+0x138>)
 8001742:	f043 0310 	orr.w	r3, r3, #16
 8001746:	6113      	str	r3, [r2, #16]
 8001748:	8abb      	ldrh	r3, [r7, #20]
 800174a:	2bff      	cmp	r3, #255	; 0xff
 800174c:	d00d      	beq.n	800176a <FLASH_OB_DisableWRP+0xa6>
 800174e:	4b2c      	ldr	r3, [pc, #176]	; (8001800 <FLASH_OB_DisableWRP+0x13c>)
 8001750:	891b      	ldrh	r3, [r3, #8]
 8001752:	b29a      	uxth	r2, r3
 8001754:	492a      	ldr	r1, [pc, #168]	; (8001800 <FLASH_OB_DisableWRP+0x13c>)
 8001756:	8abb      	ldrh	r3, [r7, #20]
 8001758:	4313      	orrs	r3, r2
 800175a:	b29b      	uxth	r3, r3
 800175c:	810b      	strh	r3, [r1, #8]
 800175e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001762:	f7ff fd15 	bl	8001190 <FLASH_WaitForLastOperation>
 8001766:	4603      	mov	r3, r0
 8001768:	75fb      	strb	r3, [r7, #23]
 800176a:	7dfb      	ldrb	r3, [r7, #23]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d110      	bne.n	8001792 <FLASH_OB_DisableWRP+0xce>
 8001770:	8a7b      	ldrh	r3, [r7, #18]
 8001772:	2bff      	cmp	r3, #255	; 0xff
 8001774:	d00d      	beq.n	8001792 <FLASH_OB_DisableWRP+0xce>
 8001776:	4b22      	ldr	r3, [pc, #136]	; (8001800 <FLASH_OB_DisableWRP+0x13c>)
 8001778:	895b      	ldrh	r3, [r3, #10]
 800177a:	b29a      	uxth	r2, r3
 800177c:	4920      	ldr	r1, [pc, #128]	; (8001800 <FLASH_OB_DisableWRP+0x13c>)
 800177e:	8a7b      	ldrh	r3, [r7, #18]
 8001780:	4313      	orrs	r3, r2
 8001782:	b29b      	uxth	r3, r3
 8001784:	814b      	strh	r3, [r1, #10]
 8001786:	f24c 3050 	movw	r0, #50000	; 0xc350
 800178a:	f7ff fd01 	bl	8001190 <FLASH_WaitForLastOperation>
 800178e:	4603      	mov	r3, r0
 8001790:	75fb      	strb	r3, [r7, #23]
 8001792:	7dfb      	ldrb	r3, [r7, #23]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d110      	bne.n	80017ba <FLASH_OB_DisableWRP+0xf6>
 8001798:	8a3b      	ldrh	r3, [r7, #16]
 800179a:	2bff      	cmp	r3, #255	; 0xff
 800179c:	d00d      	beq.n	80017ba <FLASH_OB_DisableWRP+0xf6>
 800179e:	4b18      	ldr	r3, [pc, #96]	; (8001800 <FLASH_OB_DisableWRP+0x13c>)
 80017a0:	899b      	ldrh	r3, [r3, #12]
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	4916      	ldr	r1, [pc, #88]	; (8001800 <FLASH_OB_DisableWRP+0x13c>)
 80017a6:	8a3b      	ldrh	r3, [r7, #16]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	818b      	strh	r3, [r1, #12]
 80017ae:	f24c 3050 	movw	r0, #50000	; 0xc350
 80017b2:	f7ff fced 	bl	8001190 <FLASH_WaitForLastOperation>
 80017b6:	4603      	mov	r3, r0
 80017b8:	75fb      	strb	r3, [r7, #23]
 80017ba:	7dfb      	ldrb	r3, [r7, #23]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d110      	bne.n	80017e2 <FLASH_OB_DisableWRP+0x11e>
 80017c0:	89fb      	ldrh	r3, [r7, #14]
 80017c2:	2bff      	cmp	r3, #255	; 0xff
 80017c4:	d00d      	beq.n	80017e2 <FLASH_OB_DisableWRP+0x11e>
 80017c6:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <FLASH_OB_DisableWRP+0x13c>)
 80017c8:	89db      	ldrh	r3, [r3, #14]
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	490c      	ldr	r1, [pc, #48]	; (8001800 <FLASH_OB_DisableWRP+0x13c>)
 80017ce:	89fb      	ldrh	r3, [r7, #14]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	81cb      	strh	r3, [r1, #14]
 80017d6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80017da:	f7ff fcd9 	bl	8001190 <FLASH_WaitForLastOperation>
 80017de:	4603      	mov	r3, r0
 80017e0:	75fb      	strb	r3, [r7, #23]
 80017e2:	4b06      	ldr	r3, [pc, #24]	; (80017fc <FLASH_OB_DisableWRP+0x138>)
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	4a05      	ldr	r2, [pc, #20]	; (80017fc <FLASH_OB_DisableWRP+0x138>)
 80017e8:	f023 0310 	bic.w	r3, r3, #16
 80017ec:	6113      	str	r3, [r2, #16]
 80017ee:	7dfb      	ldrb	r3, [r7, #23]
 80017f0:	4618      	mov	r0, r3
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	200001e0 	.word	0x200001e0
 80017fc:	40022000 	.word	0x40022000
 8001800:	1ffff800 	.word	0x1ffff800

08001804 <FLASH_OB_RDP_LevelConfig>:
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	71fb      	strb	r3, [r7, #7]
 800180e:	2300      	movs	r3, #0
 8001810:	73fb      	strb	r3, [r7, #15]
 8001812:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001816:	f7ff fcbb 	bl	8001190 <FLASH_WaitForLastOperation>
 800181a:	4603      	mov	r3, r0
 800181c:	73fb      	strb	r3, [r7, #15]
 800181e:	7bfb      	ldrb	r3, [r7, #15]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d133      	bne.n	800188c <FLASH_OB_RDP_LevelConfig+0x88>
 8001824:	4b1c      	ldr	r3, [pc, #112]	; (8001898 <FLASH_OB_RDP_LevelConfig+0x94>)
 8001826:	2200      	movs	r2, #0
 8001828:	61da      	str	r2, [r3, #28]
 800182a:	4b1c      	ldr	r3, [pc, #112]	; (800189c <FLASH_OB_RDP_LevelConfig+0x98>)
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	4a1b      	ldr	r2, [pc, #108]	; (800189c <FLASH_OB_RDP_LevelConfig+0x98>)
 8001830:	f043 0320 	orr.w	r3, r3, #32
 8001834:	6113      	str	r3, [r2, #16]
 8001836:	4b19      	ldr	r3, [pc, #100]	; (800189c <FLASH_OB_RDP_LevelConfig+0x98>)
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	4a18      	ldr	r2, [pc, #96]	; (800189c <FLASH_OB_RDP_LevelConfig+0x98>)
 800183c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001840:	6113      	str	r3, [r2, #16]
 8001842:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001846:	f7ff fca3 	bl	8001190 <FLASH_WaitForLastOperation>
 800184a:	4603      	mov	r3, r0
 800184c:	73fb      	strb	r3, [r7, #15]
 800184e:	4b13      	ldr	r3, [pc, #76]	; (800189c <FLASH_OB_RDP_LevelConfig+0x98>)
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	4a12      	ldr	r2, [pc, #72]	; (800189c <FLASH_OB_RDP_LevelConfig+0x98>)
 8001854:	f023 0320 	bic.w	r3, r3, #32
 8001858:	6113      	str	r3, [r2, #16]
 800185a:	7bfb      	ldrb	r3, [r7, #15]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d115      	bne.n	800188c <FLASH_OB_RDP_LevelConfig+0x88>
 8001860:	4b0e      	ldr	r3, [pc, #56]	; (800189c <FLASH_OB_RDP_LevelConfig+0x98>)
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	4a0d      	ldr	r2, [pc, #52]	; (800189c <FLASH_OB_RDP_LevelConfig+0x98>)
 8001866:	f043 0310 	orr.w	r3, r3, #16
 800186a:	6113      	str	r3, [r2, #16]
 800186c:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <FLASH_OB_RDP_LevelConfig+0x9c>)
 800186e:	79fa      	ldrb	r2, [r7, #7]
 8001870:	b292      	uxth	r2, r2
 8001872:	801a      	strh	r2, [r3, #0]
 8001874:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001878:	f7ff fc8a 	bl	8001190 <FLASH_WaitForLastOperation>
 800187c:	4603      	mov	r3, r0
 800187e:	73fb      	strb	r3, [r7, #15]
 8001880:	4b06      	ldr	r3, [pc, #24]	; (800189c <FLASH_OB_RDP_LevelConfig+0x98>)
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	4a05      	ldr	r2, [pc, #20]	; (800189c <FLASH_OB_RDP_LevelConfig+0x98>)
 8001886:	f023 0310 	bic.w	r3, r3, #16
 800188a:	6113      	str	r3, [r2, #16]
 800188c:	7bfb      	ldrb	r3, [r7, #15]
 800188e:	4618      	mov	r0, r3
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	200001e0 	.word	0x200001e0
 800189c:	40022000 	.word	0x40022000
 80018a0:	1ffff800 	.word	0x1ffff800

080018a4 <FLASH_OB_UserConfig>:
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	71fb      	strb	r3, [r7, #7]
 80018ae:	2300      	movs	r3, #0
 80018b0:	73fb      	strb	r3, [r7, #15]
 80018b2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80018b6:	f7ff fc6b 	bl	8001190 <FLASH_WaitForLastOperation>
 80018ba:	4603      	mov	r3, r0
 80018bc:	73fb      	strb	r3, [r7, #15]
 80018be:	7bfb      	ldrb	r3, [r7, #15]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d11b      	bne.n	80018fc <FLASH_OB_UserConfig+0x58>
 80018c4:	4b10      	ldr	r3, [pc, #64]	; (8001908 <FLASH_OB_UserConfig+0x64>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	61da      	str	r2, [r3, #28]
 80018ca:	4b10      	ldr	r3, [pc, #64]	; (800190c <FLASH_OB_UserConfig+0x68>)
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	4a0f      	ldr	r2, [pc, #60]	; (800190c <FLASH_OB_UserConfig+0x68>)
 80018d0:	f043 0310 	orr.w	r3, r3, #16
 80018d4:	6113      	str	r3, [r2, #16]
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	f063 0377 	orn	r3, r3, #119	; 0x77
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <FLASH_OB_UserConfig+0x6c>)
 80018e0:	b292      	uxth	r2, r2
 80018e2:	805a      	strh	r2, [r3, #2]
 80018e4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80018e8:	f7ff fc52 	bl	8001190 <FLASH_WaitForLastOperation>
 80018ec:	4603      	mov	r3, r0
 80018ee:	73fb      	strb	r3, [r7, #15]
 80018f0:	4b06      	ldr	r3, [pc, #24]	; (800190c <FLASH_OB_UserConfig+0x68>)
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	4a05      	ldr	r2, [pc, #20]	; (800190c <FLASH_OB_UserConfig+0x68>)
 80018f6:	f023 0310 	bic.w	r3, r3, #16
 80018fa:	6113      	str	r3, [r2, #16]
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	200001e0 	.word	0x200001e0
 800190c:	40022000 	.word	0x40022000
 8001910:	1ffff800 	.word	0x1ffff800

08001914 <FLASH_OB_ProgramData>:
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	460b      	mov	r3, r1
 800191e:	70fb      	strb	r3, [r7, #3]
 8001920:	2301      	movs	r3, #1
 8001922:	73fb      	strb	r3, [r7, #15]
 8001924:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001928:	f7ff fc32 	bl	8001190 <FLASH_WaitForLastOperation>
 800192c:	4603      	mov	r3, r0
 800192e:	73fb      	strb	r3, [r7, #15]
 8001930:	7bfb      	ldrb	r3, [r7, #15]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d118      	bne.n	8001968 <FLASH_OB_ProgramData+0x54>
 8001936:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <FLASH_OB_ProgramData+0x60>)
 8001938:	2200      	movs	r2, #0
 800193a:	61da      	str	r2, [r3, #28]
 800193c:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <FLASH_OB_ProgramData+0x64>)
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	4a0d      	ldr	r2, [pc, #52]	; (8001978 <FLASH_OB_ProgramData+0x64>)
 8001942:	f043 0310 	orr.w	r3, r3, #16
 8001946:	6113      	str	r3, [r2, #16]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	78fa      	ldrb	r2, [r7, #3]
 800194c:	b292      	uxth	r2, r2
 800194e:	801a      	strh	r2, [r3, #0]
 8001950:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001954:	f7ff fc1c 	bl	8001190 <FLASH_WaitForLastOperation>
 8001958:	4603      	mov	r3, r0
 800195a:	73fb      	strb	r3, [r7, #15]
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <FLASH_OB_ProgramData+0x64>)
 800195e:	691b      	ldr	r3, [r3, #16]
 8001960:	4a05      	ldr	r2, [pc, #20]	; (8001978 <FLASH_OB_ProgramData+0x64>)
 8001962:	f023 0310 	bic.w	r3, r3, #16
 8001966:	6113      	str	r3, [r2, #16]
 8001968:	7bfb      	ldrb	r3, [r7, #15]
 800196a:	4618      	mov	r0, r3
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	200001e0 	.word	0x200001e0
 8001978:	40022000 	.word	0x40022000

0800197c <FLASH_OB_GetWRP>:
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
 8001980:	4b02      	ldr	r3, [pc, #8]	; (800198c <FLASH_OB_GetWRP+0x10>)
 8001982:	6a1b      	ldr	r3, [r3, #32]
 8001984:	4618      	mov	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr
 800198c:	40022000 	.word	0x40022000

08001990 <FLASH_OB_GetRDP>:
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	23a5      	movs	r3, #165	; 0xa5
 8001998:	607b      	str	r3, [r7, #4]
 800199a:	2300      	movs	r3, #0
 800199c:	603b      	str	r3, [r7, #0]
 800199e:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <FLASH_OB_GetRDP+0x34>)
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	603b      	str	r3, [r7, #0]
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d102      	bne.n	80019b4 <FLASH_OB_GetRDP+0x24>
 80019ae:	2300      	movs	r3, #0
 80019b0:	607b      	str	r3, [r7, #4]
 80019b2:	e001      	b.n	80019b8 <FLASH_OB_GetRDP+0x28>
 80019b4:	23a5      	movs	r3, #165	; 0xa5
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4618      	mov	r0, r3
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr
 80019c4:	40022000 	.word	0x40022000

080019c8 <FLASH_OB_GetUser>:
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <FLASH_OB_GetUser+0x1c>)
 80019ce:	69db      	ldr	r3, [r3, #28]
 80019d0:	089b      	lsrs	r3, r3, #2
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	f003 0307 	and.w	r3, r3, #7
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	4618      	mov	r0, r3
 80019dc:	46bd      	mov	sp, r7
 80019de:	bc80      	pop	{r7}
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	40022000 	.word	0x40022000

080019e8 <FLASH_PageErase>:
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <FLASH_PageErase+0x38>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	61da      	str	r2, [r3, #28]
 80019f6:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <FLASH_PageErase+0x3c>)
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	4a0a      	ldr	r2, [pc, #40]	; (8001a24 <FLASH_PageErase+0x3c>)
 80019fc:	f043 0302 	orr.w	r3, r3, #2
 8001a00:	6113      	str	r3, [r2, #16]
 8001a02:	4a08      	ldr	r2, [pc, #32]	; (8001a24 <FLASH_PageErase+0x3c>)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6153      	str	r3, [r2, #20]
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <FLASH_PageErase+0x3c>)
 8001a0a:	691b      	ldr	r3, [r3, #16]
 8001a0c:	4a05      	ldr	r2, [pc, #20]	; (8001a24 <FLASH_PageErase+0x3c>)
 8001a0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a12:	6113      	str	r3, [r2, #16]
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	200001e0 	.word	0x200001e0
 8001a24:	40022000 	.word	0x40022000

08001a28 <HAL_GPIO_Init>:
 8001a28:	b480      	push	{r7}
 8001a2a:	b08b      	sub	sp, #44	; 0x2c
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
 8001a32:	2300      	movs	r3, #0
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
 8001a36:	2300      	movs	r3, #0
 8001a38:	623b      	str	r3, [r7, #32]
 8001a3a:	e169      	b.n	8001d10 <HAL_GPIO_Init+0x2e8>
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	61fb      	str	r3, [r7, #28]
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	69fa      	ldr	r2, [r7, #28]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	f040 8158 	bne.w	8001d0a <HAL_GPIO_Init+0x2e2>
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	4a9a      	ldr	r2, [pc, #616]	; (8001cc8 <HAL_GPIO_Init+0x2a0>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d05e      	beq.n	8001b22 <HAL_GPIO_Init+0xfa>
 8001a64:	4a98      	ldr	r2, [pc, #608]	; (8001cc8 <HAL_GPIO_Init+0x2a0>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d875      	bhi.n	8001b56 <HAL_GPIO_Init+0x12e>
 8001a6a:	4a98      	ldr	r2, [pc, #608]	; (8001ccc <HAL_GPIO_Init+0x2a4>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d058      	beq.n	8001b22 <HAL_GPIO_Init+0xfa>
 8001a70:	4a96      	ldr	r2, [pc, #600]	; (8001ccc <HAL_GPIO_Init+0x2a4>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d86f      	bhi.n	8001b56 <HAL_GPIO_Init+0x12e>
 8001a76:	4a96      	ldr	r2, [pc, #600]	; (8001cd0 <HAL_GPIO_Init+0x2a8>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d052      	beq.n	8001b22 <HAL_GPIO_Init+0xfa>
 8001a7c:	4a94      	ldr	r2, [pc, #592]	; (8001cd0 <HAL_GPIO_Init+0x2a8>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d869      	bhi.n	8001b56 <HAL_GPIO_Init+0x12e>
 8001a82:	4a94      	ldr	r2, [pc, #592]	; (8001cd4 <HAL_GPIO_Init+0x2ac>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d04c      	beq.n	8001b22 <HAL_GPIO_Init+0xfa>
 8001a88:	4a92      	ldr	r2, [pc, #584]	; (8001cd4 <HAL_GPIO_Init+0x2ac>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d863      	bhi.n	8001b56 <HAL_GPIO_Init+0x12e>
 8001a8e:	4a92      	ldr	r2, [pc, #584]	; (8001cd8 <HAL_GPIO_Init+0x2b0>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d046      	beq.n	8001b22 <HAL_GPIO_Init+0xfa>
 8001a94:	4a90      	ldr	r2, [pc, #576]	; (8001cd8 <HAL_GPIO_Init+0x2b0>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d85d      	bhi.n	8001b56 <HAL_GPIO_Init+0x12e>
 8001a9a:	2b12      	cmp	r3, #18
 8001a9c:	d82a      	bhi.n	8001af4 <HAL_GPIO_Init+0xcc>
 8001a9e:	2b12      	cmp	r3, #18
 8001aa0:	d859      	bhi.n	8001b56 <HAL_GPIO_Init+0x12e>
 8001aa2:	a201      	add	r2, pc, #4	; (adr r2, 8001aa8 <HAL_GPIO_Init+0x80>)
 8001aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aa8:	08001b23 	.word	0x08001b23
 8001aac:	08001afd 	.word	0x08001afd
 8001ab0:	08001b0f 	.word	0x08001b0f
 8001ab4:	08001b51 	.word	0x08001b51
 8001ab8:	08001b57 	.word	0x08001b57
 8001abc:	08001b57 	.word	0x08001b57
 8001ac0:	08001b57 	.word	0x08001b57
 8001ac4:	08001b57 	.word	0x08001b57
 8001ac8:	08001b57 	.word	0x08001b57
 8001acc:	08001b57 	.word	0x08001b57
 8001ad0:	08001b57 	.word	0x08001b57
 8001ad4:	08001b57 	.word	0x08001b57
 8001ad8:	08001b57 	.word	0x08001b57
 8001adc:	08001b57 	.word	0x08001b57
 8001ae0:	08001b57 	.word	0x08001b57
 8001ae4:	08001b57 	.word	0x08001b57
 8001ae8:	08001b57 	.word	0x08001b57
 8001aec:	08001b05 	.word	0x08001b05
 8001af0:	08001b19 	.word	0x08001b19
 8001af4:	4a79      	ldr	r2, [pc, #484]	; (8001cdc <HAL_GPIO_Init+0x2b4>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d013      	beq.n	8001b22 <HAL_GPIO_Init+0xfa>
 8001afa:	e02c      	b.n	8001b56 <HAL_GPIO_Init+0x12e>
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	623b      	str	r3, [r7, #32]
 8001b02:	e029      	b.n	8001b58 <HAL_GPIO_Init+0x130>
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	3304      	adds	r3, #4
 8001b0a:	623b      	str	r3, [r7, #32]
 8001b0c:	e024      	b.n	8001b58 <HAL_GPIO_Init+0x130>
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	3308      	adds	r3, #8
 8001b14:	623b      	str	r3, [r7, #32]
 8001b16:	e01f      	b.n	8001b58 <HAL_GPIO_Init+0x130>
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	330c      	adds	r3, #12
 8001b1e:	623b      	str	r3, [r7, #32]
 8001b20:	e01a      	b.n	8001b58 <HAL_GPIO_Init+0x130>
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d102      	bne.n	8001b30 <HAL_GPIO_Init+0x108>
 8001b2a:	2304      	movs	r3, #4
 8001b2c:	623b      	str	r3, [r7, #32]
 8001b2e:	e013      	b.n	8001b58 <HAL_GPIO_Init+0x130>
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d105      	bne.n	8001b44 <HAL_GPIO_Init+0x11c>
 8001b38:	2308      	movs	r3, #8
 8001b3a:	623b      	str	r3, [r7, #32]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	69fa      	ldr	r2, [r7, #28]
 8001b40:	611a      	str	r2, [r3, #16]
 8001b42:	e009      	b.n	8001b58 <HAL_GPIO_Init+0x130>
 8001b44:	2308      	movs	r3, #8
 8001b46:	623b      	str	r3, [r7, #32]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	69fa      	ldr	r2, [r7, #28]
 8001b4c:	615a      	str	r2, [r3, #20]
 8001b4e:	e003      	b.n	8001b58 <HAL_GPIO_Init+0x130>
 8001b50:	2300      	movs	r3, #0
 8001b52:	623b      	str	r3, [r7, #32]
 8001b54:	e000      	b.n	8001b58 <HAL_GPIO_Init+0x130>
 8001b56:	bf00      	nop
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	2bff      	cmp	r3, #255	; 0xff
 8001b5c:	d801      	bhi.n	8001b62 <HAL_GPIO_Init+0x13a>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	e001      	b.n	8001b66 <HAL_GPIO_Init+0x13e>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3304      	adds	r3, #4
 8001b66:	617b      	str	r3, [r7, #20]
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	2bff      	cmp	r3, #255	; 0xff
 8001b6c:	d802      	bhi.n	8001b74 <HAL_GPIO_Init+0x14c>
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	e002      	b.n	8001b7a <HAL_GPIO_Init+0x152>
 8001b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b76:	3b08      	subs	r3, #8
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	613b      	str	r3, [r7, #16]
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	210f      	movs	r1, #15
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	fa01 f303 	lsl.w	r3, r1, r3
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	401a      	ands	r2, r3
 8001b8c:	6a39      	ldr	r1, [r7, #32]
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	fa01 f303 	lsl.w	r3, r1, r3
 8001b94:	431a      	orrs	r2, r3
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 80b1 	beq.w	8001d0a <HAL_GPIO_Init+0x2e2>
 8001ba8:	4b4d      	ldr	r3, [pc, #308]	; (8001ce0 <HAL_GPIO_Init+0x2b8>)
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	4a4c      	ldr	r2, [pc, #304]	; (8001ce0 <HAL_GPIO_Init+0x2b8>)
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	6193      	str	r3, [r2, #24]
 8001bb4:	4b4a      	ldr	r3, [pc, #296]	; (8001ce0 <HAL_GPIO_Init+0x2b8>)
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	60bb      	str	r3, [r7, #8]
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	4a48      	ldr	r2, [pc, #288]	; (8001ce4 <HAL_GPIO_Init+0x2bc>)
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc4:	089b      	lsrs	r3, r3, #2
 8001bc6:	3302      	adds	r3, #2
 8001bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd0:	f003 0303 	and.w	r3, r3, #3
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	220f      	movs	r2, #15
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	4013      	ands	r3, r2
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a40      	ldr	r2, [pc, #256]	; (8001ce8 <HAL_GPIO_Init+0x2c0>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d013      	beq.n	8001c14 <HAL_GPIO_Init+0x1ec>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a3f      	ldr	r2, [pc, #252]	; (8001cec <HAL_GPIO_Init+0x2c4>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d00d      	beq.n	8001c10 <HAL_GPIO_Init+0x1e8>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a3e      	ldr	r2, [pc, #248]	; (8001cf0 <HAL_GPIO_Init+0x2c8>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d007      	beq.n	8001c0c <HAL_GPIO_Init+0x1e4>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a3d      	ldr	r2, [pc, #244]	; (8001cf4 <HAL_GPIO_Init+0x2cc>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d101      	bne.n	8001c08 <HAL_GPIO_Init+0x1e0>
 8001c04:	2303      	movs	r3, #3
 8001c06:	e006      	b.n	8001c16 <HAL_GPIO_Init+0x1ee>
 8001c08:	2304      	movs	r3, #4
 8001c0a:	e004      	b.n	8001c16 <HAL_GPIO_Init+0x1ee>
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	e002      	b.n	8001c16 <HAL_GPIO_Init+0x1ee>
 8001c10:	2301      	movs	r3, #1
 8001c12:	e000      	b.n	8001c16 <HAL_GPIO_Init+0x1ee>
 8001c14:	2300      	movs	r3, #0
 8001c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c18:	f002 0203 	and.w	r2, r2, #3
 8001c1c:	0092      	lsls	r2, r2, #2
 8001c1e:	4093      	lsls	r3, r2
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	492f      	ldr	r1, [pc, #188]	; (8001ce4 <HAL_GPIO_Init+0x2bc>)
 8001c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2a:	089b      	lsrs	r3, r3, #2
 8001c2c:	3302      	adds	r3, #2
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d006      	beq.n	8001c4e <HAL_GPIO_Init+0x226>
 8001c40:	4b2d      	ldr	r3, [pc, #180]	; (8001cf8 <HAL_GPIO_Init+0x2d0>)
 8001c42:	689a      	ldr	r2, [r3, #8]
 8001c44:	492c      	ldr	r1, [pc, #176]	; (8001cf8 <HAL_GPIO_Init+0x2d0>)
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	608b      	str	r3, [r1, #8]
 8001c4c:	e006      	b.n	8001c5c <HAL_GPIO_Init+0x234>
 8001c4e:	4b2a      	ldr	r3, [pc, #168]	; (8001cf8 <HAL_GPIO_Init+0x2d0>)
 8001c50:	689a      	ldr	r2, [r3, #8]
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	43db      	mvns	r3, r3
 8001c56:	4928      	ldr	r1, [pc, #160]	; (8001cf8 <HAL_GPIO_Init+0x2d0>)
 8001c58:	4013      	ands	r3, r2
 8001c5a:	608b      	str	r3, [r1, #8]
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d006      	beq.n	8001c76 <HAL_GPIO_Init+0x24e>
 8001c68:	4b23      	ldr	r3, [pc, #140]	; (8001cf8 <HAL_GPIO_Init+0x2d0>)
 8001c6a:	68da      	ldr	r2, [r3, #12]
 8001c6c:	4922      	ldr	r1, [pc, #136]	; (8001cf8 <HAL_GPIO_Init+0x2d0>)
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	60cb      	str	r3, [r1, #12]
 8001c74:	e006      	b.n	8001c84 <HAL_GPIO_Init+0x25c>
 8001c76:	4b20      	ldr	r3, [pc, #128]	; (8001cf8 <HAL_GPIO_Init+0x2d0>)
 8001c78:	68da      	ldr	r2, [r3, #12]
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	491e      	ldr	r1, [pc, #120]	; (8001cf8 <HAL_GPIO_Init+0x2d0>)
 8001c80:	4013      	ands	r3, r2
 8001c82:	60cb      	str	r3, [r1, #12]
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d006      	beq.n	8001c9e <HAL_GPIO_Init+0x276>
 8001c90:	4b19      	ldr	r3, [pc, #100]	; (8001cf8 <HAL_GPIO_Init+0x2d0>)
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	4918      	ldr	r1, [pc, #96]	; (8001cf8 <HAL_GPIO_Init+0x2d0>)
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	604b      	str	r3, [r1, #4]
 8001c9c:	e006      	b.n	8001cac <HAL_GPIO_Init+0x284>
 8001c9e:	4b16      	ldr	r3, [pc, #88]	; (8001cf8 <HAL_GPIO_Init+0x2d0>)
 8001ca0:	685a      	ldr	r2, [r3, #4]
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	4914      	ldr	r1, [pc, #80]	; (8001cf8 <HAL_GPIO_Init+0x2d0>)
 8001ca8:	4013      	ands	r3, r2
 8001caa:	604b      	str	r3, [r1, #4]
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d021      	beq.n	8001cfc <HAL_GPIO_Init+0x2d4>
 8001cb8:	4b0f      	ldr	r3, [pc, #60]	; (8001cf8 <HAL_GPIO_Init+0x2d0>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	490e      	ldr	r1, [pc, #56]	; (8001cf8 <HAL_GPIO_Init+0x2d0>)
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	600b      	str	r3, [r1, #0]
 8001cc4:	e021      	b.n	8001d0a <HAL_GPIO_Init+0x2e2>
 8001cc6:	bf00      	nop
 8001cc8:	10320000 	.word	0x10320000
 8001ccc:	10310000 	.word	0x10310000
 8001cd0:	10220000 	.word	0x10220000
 8001cd4:	10210000 	.word	0x10210000
 8001cd8:	10120000 	.word	0x10120000
 8001cdc:	10110000 	.word	0x10110000
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	40010000 	.word	0x40010000
 8001ce8:	40010800 	.word	0x40010800
 8001cec:	40010c00 	.word	0x40010c00
 8001cf0:	40011000 	.word	0x40011000
 8001cf4:	40011400 	.word	0x40011400
 8001cf8:	40010400 	.word	0x40010400
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <HAL_GPIO_Init+0x304>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	43db      	mvns	r3, r3
 8001d04:	4909      	ldr	r1, [pc, #36]	; (8001d2c <HAL_GPIO_Init+0x304>)
 8001d06:	4013      	ands	r3, r2
 8001d08:	600b      	str	r3, [r1, #0]
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d16:	fa22 f303 	lsr.w	r3, r2, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f47f ae8e 	bne.w	8001a3c <HAL_GPIO_Init+0x14>
 8001d20:	bf00      	nop
 8001d22:	bf00      	nop
 8001d24:	372c      	adds	r7, #44	; 0x2c
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr
 8001d2c:	40010400 	.word	0x40010400

08001d30 <HAL_RCC_DeInit>:
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	f7ff f813 	bl	8000d60 <HAL_GetTick>
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	4b45      	ldr	r3, [pc, #276]	; (8001e54 <HAL_RCC_DeInit+0x124>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a44      	ldr	r2, [pc, #272]	; (8001e54 <HAL_RCC_DeInit+0x124>)
 8001d42:	f043 0301 	orr.w	r3, r3, #1
 8001d46:	6013      	str	r3, [r2, #0]
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_DeInit+0x2c>
 8001d4a:	f7ff f809 	bl	8000d60 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_DeInit+0x2c>
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e077      	b.n	8001e4c <HAL_RCC_DeInit+0x11c>
 8001d5c:	4b3d      	ldr	r3, [pc, #244]	; (8001e54 <HAL_RCC_DeInit+0x124>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0f0      	beq.n	8001d4a <HAL_RCC_DeInit+0x1a>
 8001d68:	4b3a      	ldr	r3, [pc, #232]	; (8001e54 <HAL_RCC_DeInit+0x124>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001d70:	4a38      	ldr	r2, [pc, #224]	; (8001e54 <HAL_RCC_DeInit+0x124>)
 8001d72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d76:	6013      	str	r3, [r2, #0]
 8001d78:	f7fe fff2 	bl	8000d60 <HAL_GetTick>
 8001d7c:	6078      	str	r0, [r7, #4]
 8001d7e:	4b35      	ldr	r3, [pc, #212]	; (8001e54 <HAL_RCC_DeInit+0x124>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	605a      	str	r2, [r3, #4]
 8001d84:	e00a      	b.n	8001d9c <HAL_RCC_DeInit+0x6c>
 8001d86:	f7fe ffeb 	bl	8000d60 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_DeInit+0x6c>
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e057      	b.n	8001e4c <HAL_RCC_DeInit+0x11c>
 8001d9c:	4b2d      	ldr	r3, [pc, #180]	; (8001e54 <HAL_RCC_DeInit+0x124>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 030c 	and.w	r3, r3, #12
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1ee      	bne.n	8001d86 <HAL_RCC_DeInit+0x56>
 8001da8:	4b2b      	ldr	r3, [pc, #172]	; (8001e58 <HAL_RCC_DeInit+0x128>)
 8001daa:	4a2c      	ldr	r2, [pc, #176]	; (8001e5c <HAL_RCC_DeInit+0x12c>)
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	4b2c      	ldr	r3, [pc, #176]	; (8001e60 <HAL_RCC_DeInit+0x130>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe ff92 	bl	8000cdc <HAL_InitTick>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <HAL_RCC_DeInit+0x92>
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e044      	b.n	8001e4c <HAL_RCC_DeInit+0x11c>
 8001dc2:	f7fe ffcd 	bl	8000d60 <HAL_GetTick>
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	4b22      	ldr	r3, [pc, #136]	; (8001e54 <HAL_RCC_DeInit+0x124>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a21      	ldr	r2, [pc, #132]	; (8001e54 <HAL_RCC_DeInit+0x124>)
 8001dce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dd2:	6013      	str	r3, [r2, #0]
 8001dd4:	e008      	b.n	8001de8 <HAL_RCC_DeInit+0xb8>
 8001dd6:	f7fe ffc3 	bl	8000d60 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_DeInit+0xb8>
 8001de4:	2303      	movs	r3, #3
 8001de6:	e031      	b.n	8001e4c <HAL_RCC_DeInit+0x11c>
 8001de8:	4b1a      	ldr	r3, [pc, #104]	; (8001e54 <HAL_RCC_DeInit+0x124>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1f0      	bne.n	8001dd6 <HAL_RCC_DeInit+0xa6>
 8001df4:	4b17      	ldr	r3, [pc, #92]	; (8001e54 <HAL_RCC_DeInit+0x124>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	f7fe ffb1 	bl	8000d60 <HAL_GetTick>
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	4b14      	ldr	r3, [pc, #80]	; (8001e54 <HAL_RCC_DeInit+0x124>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a13      	ldr	r2, [pc, #76]	; (8001e54 <HAL_RCC_DeInit+0x124>)
 8001e06:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001e0a:	6013      	str	r3, [r2, #0]
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_DeInit+0xf0>
 8001e0e:	f7fe ffa7 	bl	8000d60 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b64      	cmp	r3, #100	; 0x64
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_DeInit+0xf0>
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e015      	b.n	8001e4c <HAL_RCC_DeInit+0x11c>
 8001e20:	4b0c      	ldr	r3, [pc, #48]	; (8001e54 <HAL_RCC_DeInit+0x124>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1f0      	bne.n	8001e0e <HAL_RCC_DeInit+0xde>
 8001e2c:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <HAL_RCC_DeInit+0x124>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a08      	ldr	r2, [pc, #32]	; (8001e54 <HAL_RCC_DeInit+0x124>)
 8001e32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e36:	6013      	str	r3, [r2, #0]
 8001e38:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <HAL_RCC_DeInit+0x124>)
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3c:	4a05      	ldr	r2, [pc, #20]	; (8001e54 <HAL_RCC_DeInit+0x124>)
 8001e3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e42:	6253      	str	r3, [r2, #36]	; 0x24
 8001e44:	4b03      	ldr	r3, [pc, #12]	; (8001e54 <HAL_RCC_DeInit+0x124>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	609a      	str	r2, [r3, #8]
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40021000 	.word	0x40021000
 8001e58:	20000034 	.word	0x20000034
 8001e5c:	007a1200 	.word	0x007a1200
 8001e60:	20000038 	.word	0x20000038

08001e64 <HAL_RCC_OscConfig>:
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_RCC_OscConfig+0x12>
 8001e72:	2301      	movs	r3, #1
 8001e74:	e272      	b.n	800235c <HAL_RCC_OscConfig+0x4f8>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f000 8087 	beq.w	8001f92 <HAL_RCC_OscConfig+0x12e>
 8001e84:	4b92      	ldr	r3, [pc, #584]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 030c 	and.w	r3, r3, #12
 8001e8c:	2b04      	cmp	r3, #4
 8001e8e:	d00c      	beq.n	8001eaa <HAL_RCC_OscConfig+0x46>
 8001e90:	4b8f      	ldr	r3, [pc, #572]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f003 030c 	and.w	r3, r3, #12
 8001e98:	2b08      	cmp	r3, #8
 8001e9a:	d112      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x5e>
 8001e9c:	4b8c      	ldr	r3, [pc, #560]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ea8:	d10b      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x5e>
 8001eaa:	4b89      	ldr	r3, [pc, #548]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d06c      	beq.n	8001f90 <HAL_RCC_OscConfig+0x12c>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d168      	bne.n	8001f90 <HAL_RCC_OscConfig+0x12c>
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e24c      	b.n	800235c <HAL_RCC_OscConfig+0x4f8>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eca:	d106      	bne.n	8001eda <HAL_RCC_OscConfig+0x76>
 8001ecc:	4b80      	ldr	r3, [pc, #512]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a7f      	ldr	r2, [pc, #508]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001ed2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed6:	6013      	str	r3, [r2, #0]
 8001ed8:	e02e      	b.n	8001f38 <HAL_RCC_OscConfig+0xd4>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10c      	bne.n	8001efc <HAL_RCC_OscConfig+0x98>
 8001ee2:	4b7b      	ldr	r3, [pc, #492]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a7a      	ldr	r2, [pc, #488]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	4b78      	ldr	r3, [pc, #480]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a77      	ldr	r2, [pc, #476]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ef8:	6013      	str	r3, [r2, #0]
 8001efa:	e01d      	b.n	8001f38 <HAL_RCC_OscConfig+0xd4>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f04:	d10c      	bne.n	8001f20 <HAL_RCC_OscConfig+0xbc>
 8001f06:	4b72      	ldr	r3, [pc, #456]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a71      	ldr	r2, [pc, #452]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	4b6f      	ldr	r3, [pc, #444]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a6e      	ldr	r2, [pc, #440]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f1c:	6013      	str	r3, [r2, #0]
 8001f1e:	e00b      	b.n	8001f38 <HAL_RCC_OscConfig+0xd4>
 8001f20:	4b6b      	ldr	r3, [pc, #428]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a6a      	ldr	r2, [pc, #424]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001f26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f2a:	6013      	str	r3, [r2, #0]
 8001f2c:	4b68      	ldr	r3, [pc, #416]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a67      	ldr	r2, [pc, #412]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001f32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f36:	6013      	str	r3, [r2, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d013      	beq.n	8001f68 <HAL_RCC_OscConfig+0x104>
 8001f40:	f7fe ff0e 	bl	8000d60 <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0xf6>
 8001f48:	f7fe ff0a 	bl	8000d60 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b64      	cmp	r3, #100	; 0x64
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0xf6>
 8001f56:	2303      	movs	r3, #3
 8001f58:	e200      	b.n	800235c <HAL_RCC_OscConfig+0x4f8>
 8001f5a:	4b5d      	ldr	r3, [pc, #372]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0f0      	beq.n	8001f48 <HAL_RCC_OscConfig+0xe4>
 8001f66:	e014      	b.n	8001f92 <HAL_RCC_OscConfig+0x12e>
 8001f68:	f7fe fefa 	bl	8000d60 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x11e>
 8001f70:	f7fe fef6 	bl	8000d60 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b64      	cmp	r3, #100	; 0x64
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x11e>
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e1ec      	b.n	800235c <HAL_RCC_OscConfig+0x4f8>
 8001f82:	4b53      	ldr	r3, [pc, #332]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f0      	bne.n	8001f70 <HAL_RCC_OscConfig+0x10c>
 8001f8e:	e000      	b.n	8001f92 <HAL_RCC_OscConfig+0x12e>
 8001f90:	bf00      	nop
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d063      	beq.n	8002066 <HAL_RCC_OscConfig+0x202>
 8001f9e:	4b4c      	ldr	r3, [pc, #304]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f003 030c 	and.w	r3, r3, #12
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00b      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x15e>
 8001faa:	4b49      	ldr	r3, [pc, #292]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f003 030c 	and.w	r3, r3, #12
 8001fb2:	2b08      	cmp	r3, #8
 8001fb4:	d11c      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x18c>
 8001fb6:	4b46      	ldr	r3, [pc, #280]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d116      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x18c>
 8001fc2:	4b43      	ldr	r3, [pc, #268]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d005      	beq.n	8001fda <HAL_RCC_OscConfig+0x176>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d001      	beq.n	8001fda <HAL_RCC_OscConfig+0x176>
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e1c0      	b.n	800235c <HAL_RCC_OscConfig+0x4f8>
 8001fda:	4b3d      	ldr	r3, [pc, #244]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	4939      	ldr	r1, [pc, #228]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	600b      	str	r3, [r1, #0]
 8001fee:	e03a      	b.n	8002066 <HAL_RCC_OscConfig+0x202>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d020      	beq.n	800203a <HAL_RCC_OscConfig+0x1d6>
 8001ff8:	4b36      	ldr	r3, [pc, #216]	; (80020d4 <HAL_RCC_OscConfig+0x270>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	f7fe feaf 	bl	8000d60 <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]
 8002004:	e008      	b.n	8002018 <HAL_RCC_OscConfig+0x1b4>
 8002006:	f7fe feab 	bl	8000d60 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x1b4>
 8002014:	2303      	movs	r3, #3
 8002016:	e1a1      	b.n	800235c <HAL_RCC_OscConfig+0x4f8>
 8002018:	4b2d      	ldr	r3, [pc, #180]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0f0      	beq.n	8002006 <HAL_RCC_OscConfig+0x1a2>
 8002024:	4b2a      	ldr	r3, [pc, #168]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	695b      	ldr	r3, [r3, #20]
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	4927      	ldr	r1, [pc, #156]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8002034:	4313      	orrs	r3, r2
 8002036:	600b      	str	r3, [r1, #0]
 8002038:	e015      	b.n	8002066 <HAL_RCC_OscConfig+0x202>
 800203a:	4b26      	ldr	r3, [pc, #152]	; (80020d4 <HAL_RCC_OscConfig+0x270>)
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	f7fe fe8e 	bl	8000d60 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x1f6>
 8002048:	f7fe fe8a 	bl	8000d60 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x1f6>
 8002056:	2303      	movs	r3, #3
 8002058:	e180      	b.n	800235c <HAL_RCC_OscConfig+0x4f8>
 800205a:	4b1d      	ldr	r3, [pc, #116]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f0      	bne.n	8002048 <HAL_RCC_OscConfig+0x1e4>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0308 	and.w	r3, r3, #8
 800206e:	2b00      	cmp	r3, #0
 8002070:	d03a      	beq.n	80020e8 <HAL_RCC_OscConfig+0x284>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d019      	beq.n	80020ae <HAL_RCC_OscConfig+0x24a>
 800207a:	4b17      	ldr	r3, [pc, #92]	; (80020d8 <HAL_RCC_OscConfig+0x274>)
 800207c:	2201      	movs	r2, #1
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	f7fe fe6e 	bl	8000d60 <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x236>
 8002088:	f7fe fe6a 	bl	8000d60 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x236>
 8002096:	2303      	movs	r3, #3
 8002098:	e160      	b.n	800235c <HAL_RCC_OscConfig+0x4f8>
 800209a:	4b0d      	ldr	r3, [pc, #52]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d0f0      	beq.n	8002088 <HAL_RCC_OscConfig+0x224>
 80020a6:	2001      	movs	r0, #1
 80020a8:	f000 face 	bl	8002648 <RCC_Delay>
 80020ac:	e01c      	b.n	80020e8 <HAL_RCC_OscConfig+0x284>
 80020ae:	4b0a      	ldr	r3, [pc, #40]	; (80020d8 <HAL_RCC_OscConfig+0x274>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	f7fe fe54 	bl	8000d60 <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]
 80020ba:	e00f      	b.n	80020dc <HAL_RCC_OscConfig+0x278>
 80020bc:	f7fe fe50 	bl	8000d60 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d908      	bls.n	80020dc <HAL_RCC_OscConfig+0x278>
 80020ca:	2303      	movs	r3, #3
 80020cc:	e146      	b.n	800235c <HAL_RCC_OscConfig+0x4f8>
 80020ce:	bf00      	nop
 80020d0:	40021000 	.word	0x40021000
 80020d4:	42420000 	.word	0x42420000
 80020d8:	42420480 	.word	0x42420480
 80020dc:	4b92      	ldr	r3, [pc, #584]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1e9      	bne.n	80020bc <HAL_RCC_OscConfig+0x258>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0304 	and.w	r3, r3, #4
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 80a6 	beq.w	8002242 <HAL_RCC_OscConfig+0x3de>
 80020f6:	2300      	movs	r3, #0
 80020f8:	75fb      	strb	r3, [r7, #23]
 80020fa:	4b8b      	ldr	r3, [pc, #556]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d10d      	bne.n	8002122 <HAL_RCC_OscConfig+0x2be>
 8002106:	4b88      	ldr	r3, [pc, #544]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	4a87      	ldr	r2, [pc, #540]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 800210c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002110:	61d3      	str	r3, [r2, #28]
 8002112:	4b85      	ldr	r3, [pc, #532]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211a:	60bb      	str	r3, [r7, #8]
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	2301      	movs	r3, #1
 8002120:	75fb      	strb	r3, [r7, #23]
 8002122:	4b82      	ldr	r3, [pc, #520]	; (800232c <HAL_RCC_OscConfig+0x4c8>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212a:	2b00      	cmp	r3, #0
 800212c:	d118      	bne.n	8002160 <HAL_RCC_OscConfig+0x2fc>
 800212e:	4b7f      	ldr	r3, [pc, #508]	; (800232c <HAL_RCC_OscConfig+0x4c8>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a7e      	ldr	r2, [pc, #504]	; (800232c <HAL_RCC_OscConfig+0x4c8>)
 8002134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002138:	6013      	str	r3, [r2, #0]
 800213a:	f7fe fe11 	bl	8000d60 <HAL_GetTick>
 800213e:	6138      	str	r0, [r7, #16]
 8002140:	e008      	b.n	8002154 <HAL_RCC_OscConfig+0x2f0>
 8002142:	f7fe fe0d 	bl	8000d60 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b64      	cmp	r3, #100	; 0x64
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0x2f0>
 8002150:	2303      	movs	r3, #3
 8002152:	e103      	b.n	800235c <HAL_RCC_OscConfig+0x4f8>
 8002154:	4b75      	ldr	r3, [pc, #468]	; (800232c <HAL_RCC_OscConfig+0x4c8>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215c:	2b00      	cmp	r3, #0
 800215e:	d0f0      	beq.n	8002142 <HAL_RCC_OscConfig+0x2de>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d106      	bne.n	8002176 <HAL_RCC_OscConfig+0x312>
 8002168:	4b6f      	ldr	r3, [pc, #444]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	4a6e      	ldr	r2, [pc, #440]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 800216e:	f043 0301 	orr.w	r3, r3, #1
 8002172:	6213      	str	r3, [r2, #32]
 8002174:	e02d      	b.n	80021d2 <HAL_RCC_OscConfig+0x36e>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10c      	bne.n	8002198 <HAL_RCC_OscConfig+0x334>
 800217e:	4b6a      	ldr	r3, [pc, #424]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	4a69      	ldr	r2, [pc, #420]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 8002184:	f023 0301 	bic.w	r3, r3, #1
 8002188:	6213      	str	r3, [r2, #32]
 800218a:	4b67      	ldr	r3, [pc, #412]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 800218c:	6a1b      	ldr	r3, [r3, #32]
 800218e:	4a66      	ldr	r2, [pc, #408]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 8002190:	f023 0304 	bic.w	r3, r3, #4
 8002194:	6213      	str	r3, [r2, #32]
 8002196:	e01c      	b.n	80021d2 <HAL_RCC_OscConfig+0x36e>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	2b05      	cmp	r3, #5
 800219e:	d10c      	bne.n	80021ba <HAL_RCC_OscConfig+0x356>
 80021a0:	4b61      	ldr	r3, [pc, #388]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 80021a2:	6a1b      	ldr	r3, [r3, #32]
 80021a4:	4a60      	ldr	r2, [pc, #384]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 80021a6:	f043 0304 	orr.w	r3, r3, #4
 80021aa:	6213      	str	r3, [r2, #32]
 80021ac:	4b5e      	ldr	r3, [pc, #376]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	4a5d      	ldr	r2, [pc, #372]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	6213      	str	r3, [r2, #32]
 80021b8:	e00b      	b.n	80021d2 <HAL_RCC_OscConfig+0x36e>
 80021ba:	4b5b      	ldr	r3, [pc, #364]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	4a5a      	ldr	r2, [pc, #360]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 80021c0:	f023 0301 	bic.w	r3, r3, #1
 80021c4:	6213      	str	r3, [r2, #32]
 80021c6:	4b58      	ldr	r3, [pc, #352]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	4a57      	ldr	r2, [pc, #348]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 80021cc:	f023 0304 	bic.w	r3, r3, #4
 80021d0:	6213      	str	r3, [r2, #32]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d015      	beq.n	8002206 <HAL_RCC_OscConfig+0x3a2>
 80021da:	f7fe fdc1 	bl	8000d60 <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]
 80021e0:	e00a      	b.n	80021f8 <HAL_RCC_OscConfig+0x394>
 80021e2:	f7fe fdbd 	bl	8000d60 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x394>
 80021f4:	2303      	movs	r3, #3
 80021f6:	e0b1      	b.n	800235c <HAL_RCC_OscConfig+0x4f8>
 80021f8:	4b4b      	ldr	r3, [pc, #300]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0ee      	beq.n	80021e2 <HAL_RCC_OscConfig+0x37e>
 8002204:	e014      	b.n	8002230 <HAL_RCC_OscConfig+0x3cc>
 8002206:	f7fe fdab 	bl	8000d60 <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]
 800220c:	e00a      	b.n	8002224 <HAL_RCC_OscConfig+0x3c0>
 800220e:	f7fe fda7 	bl	8000d60 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	f241 3288 	movw	r2, #5000	; 0x1388
 800221c:	4293      	cmp	r3, r2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x3c0>
 8002220:	2303      	movs	r3, #3
 8002222:	e09b      	b.n	800235c <HAL_RCC_OscConfig+0x4f8>
 8002224:	4b40      	ldr	r3, [pc, #256]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1ee      	bne.n	800220e <HAL_RCC_OscConfig+0x3aa>
 8002230:	7dfb      	ldrb	r3, [r7, #23]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d105      	bne.n	8002242 <HAL_RCC_OscConfig+0x3de>
 8002236:	4b3c      	ldr	r3, [pc, #240]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	4a3b      	ldr	r2, [pc, #236]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 800223c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002240:	61d3      	str	r3, [r2, #28]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	2b00      	cmp	r3, #0
 8002248:	f000 8087 	beq.w	800235a <HAL_RCC_OscConfig+0x4f6>
 800224c:	4b36      	ldr	r3, [pc, #216]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 030c 	and.w	r3, r3, #12
 8002254:	2b08      	cmp	r3, #8
 8002256:	d061      	beq.n	800231c <HAL_RCC_OscConfig+0x4b8>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	69db      	ldr	r3, [r3, #28]
 800225c:	2b02      	cmp	r3, #2
 800225e:	d146      	bne.n	80022ee <HAL_RCC_OscConfig+0x48a>
 8002260:	4b33      	ldr	r3, [pc, #204]	; (8002330 <HAL_RCC_OscConfig+0x4cc>)
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	f7fe fd7b 	bl	8000d60 <HAL_GetTick>
 800226a:	6138      	str	r0, [r7, #16]
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x41c>
 800226e:	f7fe fd77 	bl	8000d60 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x41c>
 800227c:	2303      	movs	r3, #3
 800227e:	e06d      	b.n	800235c <HAL_RCC_OscConfig+0x4f8>
 8002280:	4b29      	ldr	r3, [pc, #164]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1f0      	bne.n	800226e <HAL_RCC_OscConfig+0x40a>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002294:	d108      	bne.n	80022a8 <HAL_RCC_OscConfig+0x444>
 8002296:	4b24      	ldr	r3, [pc, #144]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	4921      	ldr	r1, [pc, #132]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	604b      	str	r3, [r1, #4]
 80022a8:	4b1f      	ldr	r3, [pc, #124]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a19      	ldr	r1, [r3, #32]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b8:	430b      	orrs	r3, r1
 80022ba:	491b      	ldr	r1, [pc, #108]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	604b      	str	r3, [r1, #4]
 80022c0:	4b1b      	ldr	r3, [pc, #108]	; (8002330 <HAL_RCC_OscConfig+0x4cc>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	f7fe fd4b 	bl	8000d60 <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x47c>
 80022ce:	f7fe fd47 	bl	8000d60 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x47c>
 80022dc:	2303      	movs	r3, #3
 80022de:	e03d      	b.n	800235c <HAL_RCC_OscConfig+0x4f8>
 80022e0:	4b11      	ldr	r3, [pc, #68]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f0      	beq.n	80022ce <HAL_RCC_OscConfig+0x46a>
 80022ec:	e035      	b.n	800235a <HAL_RCC_OscConfig+0x4f6>
 80022ee:	4b10      	ldr	r3, [pc, #64]	; (8002330 <HAL_RCC_OscConfig+0x4cc>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	f7fe fd34 	bl	8000d60 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x4aa>
 80022fc:	f7fe fd30 	bl	8000d60 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x4aa>
 800230a:	2303      	movs	r3, #3
 800230c:	e026      	b.n	800235c <HAL_RCC_OscConfig+0x4f8>
 800230e:	4b06      	ldr	r3, [pc, #24]	; (8002328 <HAL_RCC_OscConfig+0x4c4>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f0      	bne.n	80022fc <HAL_RCC_OscConfig+0x498>
 800231a:	e01e      	b.n	800235a <HAL_RCC_OscConfig+0x4f6>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	69db      	ldr	r3, [r3, #28]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d107      	bne.n	8002334 <HAL_RCC_OscConfig+0x4d0>
 8002324:	2301      	movs	r3, #1
 8002326:	e019      	b.n	800235c <HAL_RCC_OscConfig+0x4f8>
 8002328:	40021000 	.word	0x40021000
 800232c:	40007000 	.word	0x40007000
 8002330:	42420060 	.word	0x42420060
 8002334:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <HAL_RCC_OscConfig+0x500>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	429a      	cmp	r2, r3
 8002346:	d106      	bne.n	8002356 <HAL_RCC_OscConfig+0x4f2>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002352:	429a      	cmp	r2, r3
 8002354:	d001      	beq.n	800235a <HAL_RCC_OscConfig+0x4f6>
 8002356:	2301      	movs	r3, #1
 8002358:	e000      	b.n	800235c <HAL_RCC_OscConfig+0x4f8>
 800235a:	2300      	movs	r3, #0
 800235c:	4618      	mov	r0, r3
 800235e:	3718      	adds	r7, #24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40021000 	.word	0x40021000

08002368 <HAL_RCC_ClockConfig>:
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_RCC_ClockConfig+0x14>
 8002378:	2301      	movs	r3, #1
 800237a:	e0d0      	b.n	800251e <HAL_RCC_ClockConfig+0x1b6>
 800237c:	4b6a      	ldr	r3, [pc, #424]	; (8002528 <HAL_RCC_ClockConfig+0x1c0>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	429a      	cmp	r2, r3
 8002388:	d910      	bls.n	80023ac <HAL_RCC_ClockConfig+0x44>
 800238a:	4b67      	ldr	r3, [pc, #412]	; (8002528 <HAL_RCC_ClockConfig+0x1c0>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f023 0207 	bic.w	r2, r3, #7
 8002392:	4965      	ldr	r1, [pc, #404]	; (8002528 <HAL_RCC_ClockConfig+0x1c0>)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	4313      	orrs	r3, r2
 8002398:	600b      	str	r3, [r1, #0]
 800239a:	4b63      	ldr	r3, [pc, #396]	; (8002528 <HAL_RCC_ClockConfig+0x1c0>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d001      	beq.n	80023ac <HAL_RCC_ClockConfig+0x44>
 80023a8:	2301      	movs	r3, #1
 80023aa:	e0b8      	b.n	800251e <HAL_RCC_ClockConfig+0x1b6>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d020      	beq.n	80023fa <HAL_RCC_ClockConfig+0x92>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d005      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x68>
 80023c4:	4b59      	ldr	r3, [pc, #356]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	4a58      	ldr	r2, [pc, #352]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 80023ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023ce:	6053      	str	r3, [r2, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0308 	and.w	r3, r3, #8
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x80>
 80023dc:	4b53      	ldr	r3, [pc, #332]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	4a52      	ldr	r2, [pc, #328]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 80023e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023e6:	6053      	str	r3, [r2, #4]
 80023e8:	4b50      	ldr	r3, [pc, #320]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	494d      	ldr	r1, [pc, #308]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	604b      	str	r3, [r1, #4]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d040      	beq.n	8002488 <HAL_RCC_ClockConfig+0x120>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d107      	bne.n	800241e <HAL_RCC_ClockConfig+0xb6>
 800240e:	4b47      	ldr	r3, [pc, #284]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d115      	bne.n	8002446 <HAL_RCC_ClockConfig+0xde>
 800241a:	2301      	movs	r3, #1
 800241c:	e07f      	b.n	800251e <HAL_RCC_ClockConfig+0x1b6>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b02      	cmp	r3, #2
 8002424:	d107      	bne.n	8002436 <HAL_RCC_ClockConfig+0xce>
 8002426:	4b41      	ldr	r3, [pc, #260]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d109      	bne.n	8002446 <HAL_RCC_ClockConfig+0xde>
 8002432:	2301      	movs	r3, #1
 8002434:	e073      	b.n	800251e <HAL_RCC_ClockConfig+0x1b6>
 8002436:	4b3d      	ldr	r3, [pc, #244]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_RCC_ClockConfig+0xde>
 8002442:	2301      	movs	r3, #1
 8002444:	e06b      	b.n	800251e <HAL_RCC_ClockConfig+0x1b6>
 8002446:	4b39      	ldr	r3, [pc, #228]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f023 0203 	bic.w	r2, r3, #3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	4936      	ldr	r1, [pc, #216]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 8002454:	4313      	orrs	r3, r2
 8002456:	604b      	str	r3, [r1, #4]
 8002458:	f7fe fc82 	bl	8000d60 <HAL_GetTick>
 800245c:	60f8      	str	r0, [r7, #12]
 800245e:	e00a      	b.n	8002476 <HAL_RCC_ClockConfig+0x10e>
 8002460:	f7fe fc7e 	bl	8000d60 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	f241 3288 	movw	r2, #5000	; 0x1388
 800246e:	4293      	cmp	r3, r2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_ClockConfig+0x10e>
 8002472:	2303      	movs	r3, #3
 8002474:	e053      	b.n	800251e <HAL_RCC_ClockConfig+0x1b6>
 8002476:	4b2d      	ldr	r3, [pc, #180]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f003 020c 	and.w	r2, r3, #12
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	429a      	cmp	r2, r3
 8002486:	d1eb      	bne.n	8002460 <HAL_RCC_ClockConfig+0xf8>
 8002488:	4b27      	ldr	r3, [pc, #156]	; (8002528 <HAL_RCC_ClockConfig+0x1c0>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0307 	and.w	r3, r3, #7
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	429a      	cmp	r2, r3
 8002494:	d210      	bcs.n	80024b8 <HAL_RCC_ClockConfig+0x150>
 8002496:	4b24      	ldr	r3, [pc, #144]	; (8002528 <HAL_RCC_ClockConfig+0x1c0>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f023 0207 	bic.w	r2, r3, #7
 800249e:	4922      	ldr	r1, [pc, #136]	; (8002528 <HAL_RCC_ClockConfig+0x1c0>)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	600b      	str	r3, [r1, #0]
 80024a6:	4b20      	ldr	r3, [pc, #128]	; (8002528 <HAL_RCC_ClockConfig+0x1c0>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d001      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x150>
 80024b4:	2301      	movs	r3, #1
 80024b6:	e032      	b.n	800251e <HAL_RCC_ClockConfig+0x1b6>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d008      	beq.n	80024d6 <HAL_RCC_ClockConfig+0x16e>
 80024c4:	4b19      	ldr	r3, [pc, #100]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	4916      	ldr	r1, [pc, #88]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	604b      	str	r3, [r1, #4]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0308 	and.w	r3, r3, #8
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d009      	beq.n	80024f6 <HAL_RCC_ClockConfig+0x18e>
 80024e2:	4b12      	ldr	r3, [pc, #72]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	490e      	ldr	r1, [pc, #56]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	604b      	str	r3, [r1, #4]
 80024f6:	f000 f821 	bl	800253c <HAL_RCC_GetSysClockFreq>
 80024fa:	4602      	mov	r2, r0
 80024fc:	4b0b      	ldr	r3, [pc, #44]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	091b      	lsrs	r3, r3, #4
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	490a      	ldr	r1, [pc, #40]	; (8002530 <HAL_RCC_ClockConfig+0x1c8>)
 8002508:	5ccb      	ldrb	r3, [r1, r3]
 800250a:	fa22 f303 	lsr.w	r3, r2, r3
 800250e:	4a09      	ldr	r2, [pc, #36]	; (8002534 <HAL_RCC_ClockConfig+0x1cc>)
 8002510:	6013      	str	r3, [r2, #0]
 8002512:	4b09      	ldr	r3, [pc, #36]	; (8002538 <HAL_RCC_ClockConfig+0x1d0>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f7fe fbe0 	bl	8000cdc <HAL_InitTick>
 800251c:	2300      	movs	r3, #0
 800251e:	4618      	mov	r0, r3
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40022000 	.word	0x40022000
 800252c:	40021000 	.word	0x40021000
 8002530:	08002bc8 	.word	0x08002bc8
 8002534:	20000034 	.word	0x20000034
 8002538:	20000038 	.word	0x20000038

0800253c <HAL_RCC_GetSysClockFreq>:
 800253c:	b480      	push	{r7}
 800253e:	b087      	sub	sp, #28
 8002540:	af00      	add	r7, sp, #0
 8002542:	2300      	movs	r3, #0
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	2300      	movs	r3, #0
 8002548:	60bb      	str	r3, [r7, #8]
 800254a:	2300      	movs	r3, #0
 800254c:	617b      	str	r3, [r7, #20]
 800254e:	2300      	movs	r3, #0
 8002550:	607b      	str	r3, [r7, #4]
 8002552:	2300      	movs	r3, #0
 8002554:	613b      	str	r3, [r7, #16]
 8002556:	4b1e      	ldr	r3, [pc, #120]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f003 030c 	and.w	r3, r3, #12
 8002562:	2b04      	cmp	r3, #4
 8002564:	d002      	beq.n	800256c <HAL_RCC_GetSysClockFreq+0x30>
 8002566:	2b08      	cmp	r3, #8
 8002568:	d003      	beq.n	8002572 <HAL_RCC_GetSysClockFreq+0x36>
 800256a:	e027      	b.n	80025bc <HAL_RCC_GetSysClockFreq+0x80>
 800256c:	4b19      	ldr	r3, [pc, #100]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800256e:	613b      	str	r3, [r7, #16]
 8002570:	e027      	b.n	80025c2 <HAL_RCC_GetSysClockFreq+0x86>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	0c9b      	lsrs	r3, r3, #18
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	4a17      	ldr	r2, [pc, #92]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800257c:	5cd3      	ldrb	r3, [r2, r3]
 800257e:	607b      	str	r3, [r7, #4]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d010      	beq.n	80025ac <HAL_RCC_GetSysClockFreq+0x70>
 800258a:	4b11      	ldr	r3, [pc, #68]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	0c5b      	lsrs	r3, r3, #17
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	4a11      	ldr	r2, [pc, #68]	; (80025dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002596:	5cd3      	ldrb	r3, [r2, r3]
 8002598:	60bb      	str	r3, [r7, #8]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a0d      	ldr	r2, [pc, #52]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800259e:	fb03 f202 	mul.w	r2, r3, r2
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a8:	617b      	str	r3, [r7, #20]
 80025aa:	e004      	b.n	80025b6 <HAL_RCC_GetSysClockFreq+0x7a>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a0c      	ldr	r2, [pc, #48]	; (80025e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80025b0:	fb02 f303 	mul.w	r3, r2, r3
 80025b4:	617b      	str	r3, [r7, #20]
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	613b      	str	r3, [r7, #16]
 80025ba:	e002      	b.n	80025c2 <HAL_RCC_GetSysClockFreq+0x86>
 80025bc:	4b05      	ldr	r3, [pc, #20]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80025be:	613b      	str	r3, [r7, #16]
 80025c0:	bf00      	nop
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	4618      	mov	r0, r3
 80025c6:	371c      	adds	r7, #28
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bc80      	pop	{r7}
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	40021000 	.word	0x40021000
 80025d4:	007a1200 	.word	0x007a1200
 80025d8:	08002be0 	.word	0x08002be0
 80025dc:	08002bf0 	.word	0x08002bf0
 80025e0:	003d0900 	.word	0x003d0900

080025e4 <HAL_RCC_GetHCLKFreq>:
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	4b02      	ldr	r3, [pc, #8]	; (80025f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr
 80025f4:	20000034 	.word	0x20000034

080025f8 <HAL_RCC_GetPCLK1Freq>:
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	f7ff fff2 	bl	80025e4 <HAL_RCC_GetHCLKFreq>
 8002600:	4602      	mov	r2, r0
 8002602:	4b05      	ldr	r3, [pc, #20]	; (8002618 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	0a1b      	lsrs	r3, r3, #8
 8002608:	f003 0307 	and.w	r3, r3, #7
 800260c:	4903      	ldr	r1, [pc, #12]	; (800261c <HAL_RCC_GetPCLK1Freq+0x24>)
 800260e:	5ccb      	ldrb	r3, [r1, r3]
 8002610:	fa22 f303 	lsr.w	r3, r2, r3
 8002614:	4618      	mov	r0, r3
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40021000 	.word	0x40021000
 800261c:	08002bd8 	.word	0x08002bd8

08002620 <HAL_RCC_GetPCLK2Freq>:
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
 8002624:	f7ff ffde 	bl	80025e4 <HAL_RCC_GetHCLKFreq>
 8002628:	4602      	mov	r2, r0
 800262a:	4b05      	ldr	r3, [pc, #20]	; (8002640 <HAL_RCC_GetPCLK2Freq+0x20>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	0adb      	lsrs	r3, r3, #11
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	4903      	ldr	r1, [pc, #12]	; (8002644 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002636:	5ccb      	ldrb	r3, [r1, r3]
 8002638:	fa22 f303 	lsr.w	r3, r2, r3
 800263c:	4618      	mov	r0, r3
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40021000 	.word	0x40021000
 8002644:	08002bd8 	.word	0x08002bd8

08002648 <RCC_Delay>:
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	4b0a      	ldr	r3, [pc, #40]	; (800267c <RCC_Delay+0x34>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a0a      	ldr	r2, [pc, #40]	; (8002680 <RCC_Delay+0x38>)
 8002656:	fba2 2303 	umull	r2, r3, r2, r3
 800265a:	0a5b      	lsrs	r3, r3, #9
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	fb02 f303 	mul.w	r3, r2, r3
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	bf00      	nop
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	1e5a      	subs	r2, r3, #1
 800266a:	60fa      	str	r2, [r7, #12]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1f9      	bne.n	8002664 <RCC_Delay+0x1c>
 8002670:	bf00      	nop
 8002672:	bf00      	nop
 8002674:	3714      	adds	r7, #20
 8002676:	46bd      	mov	sp, r7
 8002678:	bc80      	pop	{r7}
 800267a:	4770      	bx	lr
 800267c:	20000034 	.word	0x20000034
 8002680:	10624dd3 	.word	0x10624dd3

08002684 <HAL_UART_Init>:
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_UART_Init+0x12>
 8002692:	2301      	movs	r3, #1
 8002694:	e042      	b.n	800271c <HAL_UART_Init+0x98>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d106      	bne.n	80026b0 <HAL_UART_Init+0x2c>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f7fe fa56 	bl	8000b5c <HAL_UART_MspInit>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2224      	movs	r2, #36	; 0x24
 80026b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68da      	ldr	r2, [r3, #12]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026c6:	60da      	str	r2, [r3, #12]
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 f9af 	bl	8002a2c <UART_SetConfig>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	691a      	ldr	r2, [r3, #16]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026dc:	611a      	str	r2, [r3, #16]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	695a      	ldr	r2, [r3, #20]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026ec:	615a      	str	r2, [r3, #20]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68da      	ldr	r2, [r3, #12]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026fc:	60da      	str	r2, [r3, #12]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	645a      	str	r2, [r3, #68]	; 0x44
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2220      	movs	r2, #32
 8002708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2220      	movs	r2, #32
 8002710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	635a      	str	r2, [r3, #52]	; 0x34
 800271a:	2300      	movs	r3, #0
 800271c:	4618      	mov	r0, r3
 800271e:	3708      	adds	r7, #8
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <HAL_UART_Transmit>:
 8002724:	b580      	push	{r7, lr}
 8002726:	b08a      	sub	sp, #40	; 0x28
 8002728:	af02      	add	r7, sp, #8
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	603b      	str	r3, [r7, #0]
 8002730:	4613      	mov	r3, r2
 8002732:	80fb      	strh	r3, [r7, #6]
 8002734:	2300      	movs	r3, #0
 8002736:	617b      	str	r3, [r7, #20]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2b20      	cmp	r3, #32
 8002742:	d16d      	bne.n	8002820 <HAL_UART_Transmit+0xfc>
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d002      	beq.n	8002750 <HAL_UART_Transmit+0x2c>
 800274a:	88fb      	ldrh	r3, [r7, #6]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <HAL_UART_Transmit+0x30>
 8002750:	2301      	movs	r3, #1
 8002752:	e066      	b.n	8002822 <HAL_UART_Transmit+0xfe>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	645a      	str	r2, [r3, #68]	; 0x44
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2221      	movs	r2, #33	; 0x21
 800275e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002762:	f7fe fafd 	bl	8000d60 <HAL_GetTick>
 8002766:	6178      	str	r0, [r7, #20]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	88fa      	ldrh	r2, [r7, #6]
 800276c:	849a      	strh	r2, [r3, #36]	; 0x24
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	88fa      	ldrh	r2, [r7, #6]
 8002772:	84da      	strh	r2, [r3, #38]	; 0x26
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800277c:	d108      	bne.n	8002790 <HAL_UART_Transmit+0x6c>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d104      	bne.n	8002790 <HAL_UART_Transmit+0x6c>
 8002786:	2300      	movs	r3, #0
 8002788:	61fb      	str	r3, [r7, #28]
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	61bb      	str	r3, [r7, #24]
 800278e:	e003      	b.n	8002798 <HAL_UART_Transmit+0x74>
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	61fb      	str	r3, [r7, #28]
 8002794:	2300      	movs	r3, #0
 8002796:	61bb      	str	r3, [r7, #24]
 8002798:	e02a      	b.n	80027f0 <HAL_UART_Transmit+0xcc>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	9300      	str	r3, [sp, #0]
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	2200      	movs	r2, #0
 80027a2:	2180      	movs	r1, #128	; 0x80
 80027a4:	68f8      	ldr	r0, [r7, #12]
 80027a6:	f000 f8d2 	bl	800294e <UART_WaitOnFlagUntilTimeout>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <HAL_UART_Transmit+0x90>
 80027b0:	2303      	movs	r3, #3
 80027b2:	e036      	b.n	8002822 <HAL_UART_Transmit+0xfe>
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10b      	bne.n	80027d2 <HAL_UART_Transmit+0xae>
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	881b      	ldrh	r3, [r3, #0]
 80027be:	461a      	mov	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027c8:	605a      	str	r2, [r3, #4]
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	3302      	adds	r3, #2
 80027ce:	61bb      	str	r3, [r7, #24]
 80027d0:	e007      	b.n	80027e2 <HAL_UART_Transmit+0xbe>
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	781a      	ldrb	r2, [r3, #0]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	605a      	str	r2, [r3, #4]
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	3301      	adds	r3, #1
 80027e0:	61fb      	str	r3, [r7, #28]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	3b01      	subs	r3, #1
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	84da      	strh	r2, [r3, #38]	; 0x26
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1cf      	bne.n	800279a <HAL_UART_Transmit+0x76>
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	9300      	str	r3, [sp, #0]
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	2200      	movs	r2, #0
 8002802:	2140      	movs	r1, #64	; 0x40
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f000 f8a2 	bl	800294e <UART_WaitOnFlagUntilTimeout>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <HAL_UART_Transmit+0xf0>
 8002810:	2303      	movs	r3, #3
 8002812:	e006      	b.n	8002822 <HAL_UART_Transmit+0xfe>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2220      	movs	r2, #32
 8002818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800281c:	2300      	movs	r3, #0
 800281e:	e000      	b.n	8002822 <HAL_UART_Transmit+0xfe>
 8002820:	2302      	movs	r3, #2
 8002822:	4618      	mov	r0, r3
 8002824:	3720      	adds	r7, #32
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <HAL_UART_Receive>:
 800282a:	b580      	push	{r7, lr}
 800282c:	b08a      	sub	sp, #40	; 0x28
 800282e:	af02      	add	r7, sp, #8
 8002830:	60f8      	str	r0, [r7, #12]
 8002832:	60b9      	str	r1, [r7, #8]
 8002834:	603b      	str	r3, [r7, #0]
 8002836:	4613      	mov	r3, r2
 8002838:	80fb      	strh	r3, [r7, #6]
 800283a:	2300      	movs	r3, #0
 800283c:	617b      	str	r3, [r7, #20]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b20      	cmp	r3, #32
 8002848:	d17c      	bne.n	8002944 <HAL_UART_Receive+0x11a>
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d002      	beq.n	8002856 <HAL_UART_Receive+0x2c>
 8002850:	88fb      	ldrh	r3, [r7, #6]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_UART_Receive+0x30>
 8002856:	2301      	movs	r3, #1
 8002858:	e075      	b.n	8002946 <HAL_UART_Receive+0x11c>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	645a      	str	r2, [r3, #68]	; 0x44
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2222      	movs	r2, #34	; 0x22
 8002864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	631a      	str	r2, [r3, #48]	; 0x30
 800286e:	f7fe fa77 	bl	8000d60 <HAL_GetTick>
 8002872:	6178      	str	r0, [r7, #20]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	88fa      	ldrh	r2, [r7, #6]
 8002878:	859a      	strh	r2, [r3, #44]	; 0x2c
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	88fa      	ldrh	r2, [r7, #6]
 800287e:	85da      	strh	r2, [r3, #46]	; 0x2e
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002888:	d108      	bne.n	800289c <HAL_UART_Receive+0x72>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d104      	bne.n	800289c <HAL_UART_Receive+0x72>
 8002892:	2300      	movs	r3, #0
 8002894:	61fb      	str	r3, [r7, #28]
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	61bb      	str	r3, [r7, #24]
 800289a:	e003      	b.n	80028a4 <HAL_UART_Receive+0x7a>
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	61fb      	str	r3, [r7, #28]
 80028a0:	2300      	movs	r3, #0
 80028a2:	61bb      	str	r3, [r7, #24]
 80028a4:	e043      	b.n	800292e <HAL_UART_Receive+0x104>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	2200      	movs	r2, #0
 80028ae:	2120      	movs	r1, #32
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f000 f84c 	bl	800294e <UART_WaitOnFlagUntilTimeout>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <HAL_UART_Receive+0x96>
 80028bc:	2303      	movs	r3, #3
 80028be:	e042      	b.n	8002946 <HAL_UART_Receive+0x11c>
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10c      	bne.n	80028e0 <HAL_UART_Receive+0xb6>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	801a      	strh	r2, [r3, #0]
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	3302      	adds	r3, #2
 80028dc:	61bb      	str	r3, [r7, #24]
 80028de:	e01f      	b.n	8002920 <HAL_UART_Receive+0xf6>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028e8:	d007      	beq.n	80028fa <HAL_UART_Receive+0xd0>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10a      	bne.n	8002908 <HAL_UART_Receive+0xde>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d106      	bne.n	8002908 <HAL_UART_Receive+0xde>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	b2da      	uxtb	r2, r3
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	701a      	strb	r2, [r3, #0]
 8002906:	e008      	b.n	800291a <HAL_UART_Receive+0xf0>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	b2db      	uxtb	r3, r3
 8002910:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002914:	b2da      	uxtb	r2, r3
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	701a      	strb	r2, [r3, #0]
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	3301      	adds	r3, #1
 800291e:	61fb      	str	r3, [r7, #28]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002924:	b29b      	uxth	r3, r3
 8002926:	3b01      	subs	r3, #1
 8002928:	b29a      	uxth	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	85da      	strh	r2, [r3, #46]	; 0x2e
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002932:	b29b      	uxth	r3, r3
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1b6      	bne.n	80028a6 <HAL_UART_Receive+0x7c>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2220      	movs	r2, #32
 800293c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002940:	2300      	movs	r3, #0
 8002942:	e000      	b.n	8002946 <HAL_UART_Receive+0x11c>
 8002944:	2302      	movs	r3, #2
 8002946:	4618      	mov	r0, r3
 8002948:	3720      	adds	r7, #32
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <UART_WaitOnFlagUntilTimeout>:
 800294e:	b580      	push	{r7, lr}
 8002950:	b090      	sub	sp, #64	; 0x40
 8002952:	af00      	add	r7, sp, #0
 8002954:	60f8      	str	r0, [r7, #12]
 8002956:	60b9      	str	r1, [r7, #8]
 8002958:	603b      	str	r3, [r7, #0]
 800295a:	4613      	mov	r3, r2
 800295c:	71fb      	strb	r3, [r7, #7]
 800295e:	e050      	b.n	8002a02 <UART_WaitOnFlagUntilTimeout+0xb4>
 8002960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002966:	d04c      	beq.n	8002a02 <UART_WaitOnFlagUntilTimeout+0xb4>
 8002968:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800296a:	2b00      	cmp	r3, #0
 800296c:	d007      	beq.n	800297e <UART_WaitOnFlagUntilTimeout+0x30>
 800296e:	f7fe f9f7 	bl	8000d60 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800297a:	429a      	cmp	r2, r3
 800297c:	d241      	bcs.n	8002a02 <UART_WaitOnFlagUntilTimeout+0xb4>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	330c      	adds	r3, #12
 8002984:	62bb      	str	r3, [r7, #40]	; 0x28
 8002986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002988:	e853 3f00 	ldrex	r3, [r3]
 800298c:	627b      	str	r3, [r7, #36]	; 0x24
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002994:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	330c      	adds	r3, #12
 800299c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800299e:	637a      	str	r2, [r7, #52]	; 0x34
 80029a0:	633b      	str	r3, [r7, #48]	; 0x30
 80029a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80029a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029a6:	e841 2300 	strex	r3, r2, [r1]
 80029aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1e5      	bne.n	800297e <UART_WaitOnFlagUntilTimeout+0x30>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	3314      	adds	r3, #20
 80029b8:	617b      	str	r3, [r7, #20]
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	e853 3f00 	ldrex	r3, [r3]
 80029c0:	613b      	str	r3, [r7, #16]
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	f023 0301 	bic.w	r3, r3, #1
 80029c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	3314      	adds	r3, #20
 80029d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029d2:	623a      	str	r2, [r7, #32]
 80029d4:	61fb      	str	r3, [r7, #28]
 80029d6:	69f9      	ldr	r1, [r7, #28]
 80029d8:	6a3a      	ldr	r2, [r7, #32]
 80029da:	e841 2300 	strex	r3, r2, [r1]
 80029de:	61bb      	str	r3, [r7, #24]
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1e5      	bne.n	80029b2 <UART_WaitOnFlagUntilTimeout+0x64>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2220      	movs	r2, #32
 80029ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2220      	movs	r2, #32
 80029f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029fe:	2303      	movs	r3, #3
 8002a00:	e00f      	b.n	8002a22 <UART_WaitOnFlagUntilTimeout+0xd4>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	68ba      	ldr	r2, [r7, #8]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	bf0c      	ite	eq
 8002a12:	2301      	moveq	r3, #1
 8002a14:	2300      	movne	r3, #0
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	461a      	mov	r2, r3
 8002a1a:	79fb      	ldrb	r3, [r7, #7]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d09f      	beq.n	8002960 <UART_WaitOnFlagUntilTimeout+0x12>
 8002a20:	2300      	movs	r3, #0
 8002a22:	4618      	mov	r0, r3
 8002a24:	3740      	adds	r7, #64	; 0x40
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
	...

08002a2c <UART_SetConfig>:
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	68da      	ldr	r2, [r3, #12]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	611a      	str	r2, [r3, #16]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689a      	ldr	r2, [r3, #8]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	431a      	orrs	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	695b      	ldr	r3, [r3, #20]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	60bb      	str	r3, [r7, #8]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002a66:	f023 030c 	bic.w	r3, r3, #12
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	6812      	ldr	r2, [r2, #0]
 8002a6e:	68b9      	ldr	r1, [r7, #8]
 8002a70:	430b      	orrs	r3, r1
 8002a72:	60d3      	str	r3, [r2, #12]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	699a      	ldr	r2, [r3, #24]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	615a      	str	r2, [r3, #20]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a2c      	ldr	r2, [pc, #176]	; (8002b40 <UART_SetConfig+0x114>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d103      	bne.n	8002a9c <UART_SetConfig+0x70>
 8002a94:	f7ff fdc4 	bl	8002620 <HAL_RCC_GetPCLK2Freq>
 8002a98:	60f8      	str	r0, [r7, #12]
 8002a9a:	e002      	b.n	8002aa2 <UART_SetConfig+0x76>
 8002a9c:	f7ff fdac 	bl	80025f8 <HAL_RCC_GetPCLK1Freq>
 8002aa0:	60f8      	str	r0, [r7, #12]
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	009a      	lsls	r2, r3, #2
 8002aac:	441a      	add	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab8:	4a22      	ldr	r2, [pc, #136]	; (8002b44 <UART_SetConfig+0x118>)
 8002aba:	fba2 2303 	umull	r2, r3, r2, r3
 8002abe:	095b      	lsrs	r3, r3, #5
 8002ac0:	0119      	lsls	r1, r3, #4
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4413      	add	r3, r2
 8002aca:	009a      	lsls	r2, r3, #2
 8002acc:	441a      	add	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ad8:	4b1a      	ldr	r3, [pc, #104]	; (8002b44 <UART_SetConfig+0x118>)
 8002ada:	fba3 0302 	umull	r0, r3, r3, r2
 8002ade:	095b      	lsrs	r3, r3, #5
 8002ae0:	2064      	movs	r0, #100	; 0x64
 8002ae2:	fb00 f303 	mul.w	r3, r0, r3
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	011b      	lsls	r3, r3, #4
 8002aea:	3332      	adds	r3, #50	; 0x32
 8002aec:	4a15      	ldr	r2, [pc, #84]	; (8002b44 <UART_SetConfig+0x118>)
 8002aee:	fba2 2303 	umull	r2, r3, r2, r3
 8002af2:	095b      	lsrs	r3, r3, #5
 8002af4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002af8:	4419      	add	r1, r3
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	4613      	mov	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	009a      	lsls	r2, r3, #2
 8002b04:	441a      	add	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b10:	4b0c      	ldr	r3, [pc, #48]	; (8002b44 <UART_SetConfig+0x118>)
 8002b12:	fba3 0302 	umull	r0, r3, r3, r2
 8002b16:	095b      	lsrs	r3, r3, #5
 8002b18:	2064      	movs	r0, #100	; 0x64
 8002b1a:	fb00 f303 	mul.w	r3, r0, r3
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	011b      	lsls	r3, r3, #4
 8002b22:	3332      	adds	r3, #50	; 0x32
 8002b24:	4a07      	ldr	r2, [pc, #28]	; (8002b44 <UART_SetConfig+0x118>)
 8002b26:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2a:	095b      	lsrs	r3, r3, #5
 8002b2c:	f003 020f 	and.w	r2, r3, #15
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	440a      	add	r2, r1
 8002b36:	609a      	str	r2, [r3, #8]
 8002b38:	bf00      	nop
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40013800 	.word	0x40013800
 8002b44:	51eb851f 	.word	0x51eb851f

08002b48 <memset>:
 8002b48:	4603      	mov	r3, r0
 8002b4a:	4402      	add	r2, r0
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d100      	bne.n	8002b52 <memset+0xa>
 8002b50:	4770      	bx	lr
 8002b52:	f803 1b01 	strb.w	r1, [r3], #1
 8002b56:	e7f9      	b.n	8002b4c <memset+0x4>

08002b58 <__libc_init_array>:
 8002b58:	b570      	push	{r4, r5, r6, lr}
 8002b5a:	2600      	movs	r6, #0
 8002b5c:	4d0c      	ldr	r5, [pc, #48]	; (8002b90 <__libc_init_array+0x38>)
 8002b5e:	4c0d      	ldr	r4, [pc, #52]	; (8002b94 <__libc_init_array+0x3c>)
 8002b60:	1b64      	subs	r4, r4, r5
 8002b62:	10a4      	asrs	r4, r4, #2
 8002b64:	42a6      	cmp	r6, r4
 8002b66:	d109      	bne.n	8002b7c <__libc_init_array+0x24>
 8002b68:	f000 f81a 	bl	8002ba0 <_init>
 8002b6c:	2600      	movs	r6, #0
 8002b6e:	4d0a      	ldr	r5, [pc, #40]	; (8002b98 <__libc_init_array+0x40>)
 8002b70:	4c0a      	ldr	r4, [pc, #40]	; (8002b9c <__libc_init_array+0x44>)
 8002b72:	1b64      	subs	r4, r4, r5
 8002b74:	10a4      	asrs	r4, r4, #2
 8002b76:	42a6      	cmp	r6, r4
 8002b78:	d105      	bne.n	8002b86 <__libc_init_array+0x2e>
 8002b7a:	bd70      	pop	{r4, r5, r6, pc}
 8002b7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b80:	4798      	blx	r3
 8002b82:	3601      	adds	r6, #1
 8002b84:	e7ee      	b.n	8002b64 <__libc_init_array+0xc>
 8002b86:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b8a:	4798      	blx	r3
 8002b8c:	3601      	adds	r6, #1
 8002b8e:	e7f2      	b.n	8002b76 <__libc_init_array+0x1e>
 8002b90:	08002bf4 	.word	0x08002bf4
 8002b94:	08002bf4 	.word	0x08002bf4
 8002b98:	08002bf4 	.word	0x08002bf4
 8002b9c:	08002bf8 	.word	0x08002bf8

08002ba0 <_init>:
 8002ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ba2:	bf00      	nop
 8002ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ba6:	bc08      	pop	{r3}
 8002ba8:	469e      	mov	lr, r3
 8002baa:	4770      	bx	lr

08002bac <_fini>:
 8002bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bae:	bf00      	nop
 8002bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bb2:	bc08      	pop	{r3}
 8002bb4:	469e      	mov	lr, r3
 8002bb6:	4770      	bx	lr
