
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a8c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08002b98  08002b98  00012b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bd4  08002bd4  00030008  2**0
                  CONTENTS
  4 .ARM          00000000  08002bd4  08002bd4  00030008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bd4  08002bd4  00030008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bd4  08002bd4  00012bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bd8  08002bd8  00012bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08002bdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .APPLICATION1_SECTION 00000004  08010000  08010000  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .APPLICATION2_SECTION 00000004  08010004  08010004  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000001c0  20000040  20000040  00030040  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  20000200  20000200  00030040  2**0
                  ALLOC
 13 .ARM.attributes 00000029  00000000  00000000  00030008  2**0
                  CONTENTS, READONLY
 14 .comment      00000086  00000000  00000000  00030031  2**0
                  CONTENTS, READONLY
 15 .debug_info   000081d7  00000000  00000000  000300b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00001e5a  00000000  00000000  0003828e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000880  00000000  00000000  0003a0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000661  00000000  00000000  0003a968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00017ad6  00000000  00000000  0003afc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0000b620  00000000  00000000  00052a9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00082fcd  00000000  00000000  0005e0bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00002014  00000000  00000000  000e108c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000007e  00000000  00000000  000e30a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000040 	.word	0x20000040
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b80 	.word	0x08002b80

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000044 	.word	0x20000044
 8000148:	08002b80 	.word	0x08002b80

0800014c <BL_Fetch_Commend>:
		&Bootloader_Jump_To_Address,&Bootloader_Erase_Flash,&Bootloader_Memory_Write,&Bootloader_Enable_R_Protection,
		&Bootloader_SetApplication_Flag,&Bootloader_Enable_W_Protection} ;


/*======================== Software Interface Definations  ====================*/
BL_Status BL_Fetch_Commend(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	/* To detect the status of function */
	BL_Status Status = BL_NACK;
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]

	/* To detect the status of uart in transmitting and receiving data */
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 8000156:	2301      	movs	r3, #1
 8000158:	71bb      	strb	r3, [r7, #6]

	/* The data length that the host should be transmit at first */
	uint8_t Data_Length = RESET;
 800015a:	2300      	movs	r3, #0
 800015c:	717b      	strb	r3, [r7, #5]

	/* To check on flags status of applications in first iteration */
	Global_Calling++;
 800015e:	4b2b      	ldr	r3, [pc, #172]	; (800020c <BL_Fetch_Commend+0xc0>)
 8000160:	781b      	ldrb	r3, [r3, #0]
 8000162:	3301      	adds	r3, #1
 8000164:	b2da      	uxtb	r2, r3
 8000166:	4b29      	ldr	r3, [pc, #164]	; (800020c <BL_Fetch_Commend+0xc0>)
 8000168:	701a      	strb	r2, [r3, #0]

	/* To Check on applications flags in firsts iteration */
	if (Global_Calling == FIRST_ITERATION){
 800016a:	4b28      	ldr	r3, [pc, #160]	; (800020c <BL_Fetch_Commend+0xc0>)
 800016c:	781b      	ldrb	r3, [r3, #0]
 800016e:	2b01      	cmp	r3, #1
 8000170:	d10c      	bne.n	800018c <BL_Fetch_Commend+0x40>
		/* To check on application 1 at first because it's the highest priority */
		if ( APP1_Flag == TURN_ON ){
 8000172:	4b27      	ldr	r3, [pc, #156]	; (8000210 <BL_Fetch_Commend+0xc4>)
 8000174:	681b      	ldr	r3, [r3, #0]
 8000176:	2b01      	cmp	r3, #1
 8000178:	d102      	bne.n	8000180 <BL_Fetch_Commend+0x34>
			Bootloader_Jump_To_User_App1();
 800017a:	f000 f975 	bl	8000468 <Bootloader_Jump_To_User_App1>
 800017e:	e005      	b.n	800018c <BL_Fetch_Commend+0x40>
		}
		/* To check on application 1 at first because it's the second priority */
		else if ( APP2_Flag == TURN_ON ){
 8000180:	4b24      	ldr	r3, [pc, #144]	; (8000214 <BL_Fetch_Commend+0xc8>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	2b01      	cmp	r3, #1
 8000186:	d101      	bne.n	800018c <BL_Fetch_Commend+0x40>
			Bootloader_Jump_To_User_App2();
 8000188:	f000 f98c 	bl	80004a4 <Bootloader_Jump_To_User_App2>
		}
	}

	/* To clear buffer of RX and prevent carbadge messages of buffer */
	memset(BL_HostBuffer, RESET , BL_HOST_BUFFER_RX_LENGTH);
 800018c:	22c8      	movs	r2, #200	; 0xc8
 800018e:	2100      	movs	r1, #0
 8000190:	4821      	ldr	r0, [pc, #132]	; (8000218 <BL_Fetch_Commend+0xcc>)
 8000192:	f002 fcc9 	bl	8002b28 <memset>
	BL_PrintMassage("Bootloader started..\r\n");
#endif
	/* Host commend format :
	   => Commend Length  (1 byte = Data_Length )
	 */
	HAL_Status = HAL_UART_Receive(BL_HOST_COMMUNICATION_UART, BL_HostBuffer, 1,
 8000196:	f04f 33ff 	mov.w	r3, #4294967295
 800019a:	2201      	movs	r2, #1
 800019c:	491e      	ldr	r1, [pc, #120]	; (8000218 <BL_Fetch_Commend+0xcc>)
 800019e:	481f      	ldr	r0, [pc, #124]	; (800021c <BL_Fetch_Commend+0xd0>)
 80001a0:	f002 fb33 	bl	800280a <HAL_UART_Receive>
 80001a4:	4603      	mov	r3, r0
 80001a6:	71bb      	strb	r3, [r7, #6]
			HAL_MAX_DELAY);

	if (HAL_Status != HAL_OK){
 80001a8:	79bb      	ldrb	r3, [r7, #6]
 80001aa:	2b00      	cmp	r3, #0
 80001ac:	d002      	beq.n	80001b4 <BL_Fetch_Commend+0x68>
		Status = BL_NACK ;
 80001ae:	2300      	movs	r3, #0
 80001b0:	71fb      	strb	r3, [r7, #7]
 80001b2:	e025      	b.n	8000200 <BL_Fetch_Commend+0xb4>
		 Where :
		 => Commend Code is the order that Host want to do in code
		 => Delails explain what you transmit
		 => CRC is safety algorthim on code
		 */
		Data_Length = BL_HostBuffer[0];
 80001b4:	4b18      	ldr	r3, [pc, #96]	; (8000218 <BL_Fetch_Commend+0xcc>)
 80001b6:	781b      	ldrb	r3, [r3, #0]
 80001b8:	717b      	strb	r3, [r7, #5]

		/* we determine the number of recieving bytes next from the first number transmit in first
		   time (using buffer Data_Length and store them in BL_HostBuffer) */
		HAL_Status = HAL_UART_Receive(BL_HOST_COMMUNICATION_UART, &BL_HostBuffer[1],
 80001ba:	797b      	ldrb	r3, [r7, #5]
 80001bc:	b29a      	uxth	r2, r3
 80001be:	f04f 33ff 	mov.w	r3, #4294967295
 80001c2:	4917      	ldr	r1, [pc, #92]	; (8000220 <BL_Fetch_Commend+0xd4>)
 80001c4:	4815      	ldr	r0, [pc, #84]	; (800021c <BL_Fetch_Commend+0xd0>)
 80001c6:	f002 fb20 	bl	800280a <HAL_UART_Receive>
 80001ca:	4603      	mov	r3, r0
 80001cc:	71bb      	strb	r3, [r7, #6]
				Data_Length, HAL_MAX_DELAY);

		/* if it don't recieve correctly */
		if (HAL_Status != HAL_OK){
 80001ce:	79bb      	ldrb	r3, [r7, #6]
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d002      	beq.n	80001da <BL_Fetch_Commend+0x8e>
			Status = BL_NACK ;
 80001d4:	2300      	movs	r3, #0
 80001d6:	71fb      	strb	r3, [r7, #7]
 80001d8:	e012      	b.n	8000200 <BL_Fetch_Commend+0xb4>
		}
		else {
			/* To jump on the target function from the previous commend */
			if (BL_HostBuffer[1]>=FIRST_COMMEND &&BL_HostBuffer[1]<=LAST_COMMEND ){
 80001da:	4b0f      	ldr	r3, [pc, #60]	; (8000218 <BL_Fetch_Commend+0xcc>)
 80001dc:	785b      	ldrb	r3, [r3, #1]
 80001de:	2b0f      	cmp	r3, #15
 80001e0:	d90c      	bls.n	80001fc <BL_Fetch_Commend+0xb0>
 80001e2:	4b0d      	ldr	r3, [pc, #52]	; (8000218 <BL_Fetch_Commend+0xcc>)
 80001e4:	785b      	ldrb	r3, [r3, #1]
 80001e6:	2b19      	cmp	r3, #25
 80001e8:	d808      	bhi.n	80001fc <BL_Fetch_Commend+0xb0>
				Bootloader_Functions[BL_HostBuffer[1]-FIRST_COMMEND](BL_HostBuffer);
 80001ea:	4b0b      	ldr	r3, [pc, #44]	; (8000218 <BL_Fetch_Commend+0xcc>)
 80001ec:	785b      	ldrb	r3, [r3, #1]
 80001ee:	3b10      	subs	r3, #16
 80001f0:	4a0c      	ldr	r2, [pc, #48]	; (8000224 <BL_Fetch_Commend+0xd8>)
 80001f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001f6:	4808      	ldr	r0, [pc, #32]	; (8000218 <BL_Fetch_Commend+0xcc>)
 80001f8:	4798      	blx	r3
 80001fa:	e001      	b.n	8000200 <BL_Fetch_Commend+0xb4>
			else {
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
				BL_PrintMassage ("%d\n",BL_HostBuffer[1]);
				BL_PrintMassage ("Invalid commend code recieved from host !! \r\n");
#endif
				Status = BL_NACK ;
 80001fc:	2300      	movs	r3, #0
 80001fe:	71fb      	strb	r3, [r7, #7]
			}
		}
	}
	return Status;
 8000200:	79fb      	ldrb	r3, [r7, #7]
}
 8000202:	4618      	mov	r0, r3
 8000204:	3708      	adds	r7, #8
 8000206:	46bd      	mov	sp, r7
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	20000124 	.word	0x20000124
 8000210:	08010000 	.word	0x08010000
 8000214:	08010004 	.word	0x08010004
 8000218:	2000005c 	.word	0x2000005c
 800021c:	2000014c 	.word	0x2000014c
 8000220:	2000005d 	.word	0x2000005d
 8000224:	2000000c 	.word	0x2000000c

08000228 <Bootloader_Send_Data_To_Host>:
	Bootloader_Send_Data_To_Host(&NACK_Value, 1);
}
#endif

/* Function to communicate with host */
static void Bootloader_Send_Data_To_Host(uint8_t *Host_Buffer , uint32_t Data_Len){
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
 8000230:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(BL_HOST_COMMUNICATION_UART,(uint8_t*) Host_Buffer,(uint16_t) Data_Len, HAL_MAX_DELAY);
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	b29a      	uxth	r2, r3
 8000236:	f04f 33ff 	mov.w	r3, #4294967295
 800023a:	6879      	ldr	r1, [r7, #4]
 800023c:	4803      	ldr	r0, [pc, #12]	; (800024c <Bootloader_Send_Data_To_Host+0x24>)
 800023e:	f002 fa61 	bl	8002704 <HAL_UART_Transmit>
}
 8000242:	bf00      	nop
 8000244:	3708      	adds	r7, #8
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	2000014c 	.word	0x2000014c

08000250 <Bootloader_Get_Version>:
 your packet is
   1- 1 byte for data length = 0x05
   2- 1 byte for commend number = 0x10
   3- 4 bytes for CRC verifications if we used python code as host
 */
static void Bootloader_Get_Version (uint8_t *Host_Buffer){
 8000250:	b580      	push	{r7, lr}
 8000252:	b084      	sub	sp, #16
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
		/* Sending Acknowledge message and number of bytes which will be sent */
		Bootloader_Send_ACK(4);
#endif


		if(MASTERID == Host_Buffer[2])
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	3302      	adds	r3, #2
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d108      	bne.n	8000274 <Bootloader_Get_Version+0x24>
		{

#if(ECU_CONFIG == MASTERID)
			/* Sending the version and vendor id's to meet the target from command */
			uint8_t BL_Version[4] = { CBL_VENDOR_ID, CBL_SW_MAJOR_VERSION,
 8000262:	4b16      	ldr	r3, [pc, #88]	; (80002bc <Bootloader_Get_Version+0x6c>)
 8000264:	60fb      	str	r3, [r7, #12]
					CBL_SW_MINOR_VERSION, CBL_SW_PATCH_VERSION};

			Bootloader_Send_Data_To_Host(BL_Version,4);
 8000266:	f107 030c 	add.w	r3, r7, #12
 800026a:	2104      	movs	r1, #4
 800026c:	4618      	mov	r0, r3
 800026e:	f7ff ffdb 	bl	8000228 <Bootloader_Send_Data_To_Host>
		BL_PrintMassage("CRC is failed\r\n");
#endif
		Bootloader_Send_NACK();
	}
#endif
}
 8000272:	e01f      	b.n	80002b4 <Bootloader_Get_Version+0x64>
		else if(SLAVE1 == Host_Buffer[2])
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	3302      	adds	r3, #2
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	2b01      	cmp	r3, #1
 800027c:	d11a      	bne.n	80002b4 <Bootloader_Get_Version+0x64>
			HAL_UART_Transmit(&huart2, &Host_Buffer[0], 1, 5); //sending length first, The time must be 5 to avoid errors
 800027e:	2305      	movs	r3, #5
 8000280:	2201      	movs	r2, #1
 8000282:	6879      	ldr	r1, [r7, #4]
 8000284:	480e      	ldr	r0, [pc, #56]	; (80002c0 <Bootloader_Get_Version+0x70>)
 8000286:	f002 fa3d 	bl	8002704 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, &Host_Buffer[1], 2, 10); //sending remaining frame, The time must be 10 to avoid errors
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	1c59      	adds	r1, r3, #1
 800028e:	230a      	movs	r3, #10
 8000290:	2202      	movs	r2, #2
 8000292:	480b      	ldr	r0, [pc, #44]	; (80002c0 <Bootloader_Get_Version+0x70>)
 8000294:	f002 fa36 	bl	8002704 <HAL_UART_Transmit>
			HAL_UART_Receive(&huart2, Version, 4, HAL_MAX_DELAY); //Receive version
 8000298:	f107 0108 	add.w	r1, r7, #8
 800029c:	f04f 33ff 	mov.w	r3, #4294967295
 80002a0:	2204      	movs	r2, #4
 80002a2:	4807      	ldr	r0, [pc, #28]	; (80002c0 <Bootloader_Get_Version+0x70>)
 80002a4:	f002 fab1 	bl	800280a <HAL_UART_Receive>
			Bootloader_Send_Data_To_Host(Version, 4);
 80002a8:	f107 0308 	add.w	r3, r7, #8
 80002ac:	2104      	movs	r1, #4
 80002ae:	4618      	mov	r0, r3
 80002b0:	f7ff ffba 	bl	8000228 <Bootloader_Send_Data_To_Host>
}
 80002b4:	bf00      	nop
 80002b6:	3710      	adds	r7, #16
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	01010464 	.word	0x01010464
 80002c0:	20000194 	.word	0x20000194

080002c4 <Bootloader_Get_Help>:
 Your packet is :
   1- 1 byte data length = 0x05
   2- 1 byte commend number = 0x11
   3- 4 bytes for CRC verifications if we used python code as host
 */
static void Bootloader_Get_Help (uint8_t *Host_Buffer){
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
#endif
		/* Sending Acknowledge message and number of bytes which will be sent */
		Bootloader_Send_ACK(NumberOfCommends);
#endif
		/* Sending the list of commends to meet the target from commend */
		Bootloader_Send_Data_To_Host(Bootloader_Supported_CMDs,NumberOfCommends);
 80002cc:	210a      	movs	r1, #10
 80002ce:	4803      	ldr	r0, [pc, #12]	; (80002dc <Bootloader_Get_Help+0x18>)
 80002d0:	f7ff ffaa 	bl	8000228 <Bootloader_Send_Data_To_Host>
		BL_PrintMassage("CRC is failed\r\n");
#endif
		Bootloader_Send_NACK();
	}
#endif
}
 80002d4:	bf00      	nop
 80002d6:	3708      	adds	r7, #8
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	20000000 	.word	0x20000000

080002e0 <Bootloader_Get_chip_Identification_Number>:
 Your packet is :
   1- 1 byte for data length = 0x05
   2- 1 byte for commend number = 0x12
   3- 4 bytes for CRC verifications if we used python code as host
 */
static void Bootloader_Get_chip_Identification_Number (uint8_t *Host_Buffer){
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0 ;
	/* Used to get CRC data */
	uint32_t Host_CRC32 = 0 ;
#endif
	/* Identify the id of used MCU */
	uint16_t MCU_IdentificationNumber = RESET ;
 80002e8:	2300      	movs	r3, #0
 80002ea:	81fb      	strh	r3, [r7, #14]
		/* Report MCU chip identification number */
		Bootloader_Send_ACK(2);
#endif

		/* Get MCU chip identification number */
		MCU_IdentificationNumber = (uint16_t)((DBGMCU->IDCODE)&0x00000FFF);
 80002ec:	4b08      	ldr	r3, [pc, #32]	; (8000310 <Bootloader_Get_chip_Identification_Number+0x30>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	b29b      	uxth	r3, r3
 80002f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80002f6:	b29b      	uxth	r3, r3
 80002f8:	81fb      	strh	r3, [r7, #14]

		Bootloader_Send_Data_To_Host((uint8_t *)(&MCU_IdentificationNumber),2);
 80002fa:	f107 030e 	add.w	r3, r7, #14
 80002fe:	2102      	movs	r1, #2
 8000300:	4618      	mov	r0, r3
 8000302:	f7ff ff91 	bl	8000228 <Bootloader_Send_Data_To_Host>
		BL_PrintMassage("CRC is failed\r\n");
#endif
		Bootloader_Send_NACK();
	}
#endif
}
 8000306:	bf00      	nop
 8000308:	3710      	adds	r7, #16
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	e0042000 	.word	0xe0042000

08000314 <CBL_STM32F103_GET_RDP_Level>:

/* Get level of protection to flash memory */
static uint8_t CBL_STM32F103_GET_RDP_Level (){
 8000314:	b580      	push	{r7, lr}
 8000316:	b088      	sub	sp, #32
 8000318:	af00      	add	r7, sp, #0
	/* paramter input for function that get level of memory */
	FLASH_OBProgramInitTypeDef FLASH_OBProgram ;
	/* Get level of memory */
	HAL_FLASHEx_OBGetConfig(&FLASH_OBProgram);
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	4618      	mov	r0, r3
 800031e:	f001 f8e7 	bl	80014f0 <HAL_FLASHEx_OBGetConfig>
	/* Assign protection level in parameter [in\out] */
	return (uint8_t)FLASH_OBProgram.RDPLevel ;
 8000322:	7d3b      	ldrb	r3, [r7, #20]
}
 8000324:	4618      	mov	r0, r3
 8000326:	3720      	adds	r7, #32
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}

0800032c <CBL_STM32F103_GET_WDP_Level>:


/* Get level of protection to flash memory */
static uint8_t CBL_STM32F103_GET_WDP_Level (){
 800032c:	b580      	push	{r7, lr}
 800032e:	b088      	sub	sp, #32
 8000330:	af00      	add	r7, sp, #0
	/* paramter input for function that get level of memory */
	FLASH_OBProgramInitTypeDef FLASH_OBProgram ;
	/* Get level of memory */
	HAL_FLASHEx_OBGetConfig(&FLASH_OBProgram);
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	4618      	mov	r0, r3
 8000336:	f001 f8db 	bl	80014f0 <HAL_FLASHEx_OBGetConfig>
	/* Assign protection level in parameter [in\out] */
	return (uint8_t)FLASH_OBProgram.WRPPage ; //Casting to uint8_t as I care only with first 32 pages as STM is low density(casting would change for higher densities)
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	b2db      	uxtb	r3, r3
}
 800033e:	4618      	mov	r0, r3
 8000340:	3720      	adds	r7, #32
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}

08000346 <Bootloader_Read_Protection_Level>:
 Your packet is :
   1- 1 byte data length = 0x05
   2- 1 byte commend number = 0x13
   3- 4 bytes for CRC verifications if we used python code as host
 */
static void Bootloader_Read_Protection_Level (uint8_t *Host_Buffer){
 8000346:	b580      	push	{r7, lr}
 8000348:	b084      	sub	sp, #16
 800034a:	af00      	add	r7, sp, #0
 800034c:	6078      	str	r0, [r7, #4]
		BL_PrintMassage("CRC is passed\r\n");
#endif
		/* Report acknowledge message*/
		Bootloader_Send_ACK(1);
#endif
		if(READ_RP == Host_Buffer[2])
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	3302      	adds	r3, #2
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d10a      	bne.n	800036e <Bootloader_Read_Protection_Level+0x28>
		{
			uint8_t RDP_Level = CBL_STM32F103_GET_RDP_Level();
 8000358:	f7ff ffdc 	bl	8000314 <CBL_STM32F103_GET_RDP_Level>
 800035c:	4603      	mov	r3, r0
 800035e:	73fb      	strb	r3, [r7, #15]

			/* Report level */
			Bootloader_Send_Data_To_Host((uint8_t *)(&RDP_Level),1);
 8000360:	f107 030f 	add.w	r3, r7, #15
 8000364:	2101      	movs	r1, #1
 8000366:	4618      	mov	r0, r3
 8000368:	f7ff ff5e 	bl	8000228 <Bootloader_Send_Data_To_Host>
		BL_PrintMassage("CRC is failed\r\n");
#endif
		Bootloader_Send_NACK();
	}
#endif
}
 800036c:	e013      	b.n	8000396 <Bootloader_Read_Protection_Level+0x50>
		else if(READ_WP == Host_Buffer[2])
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	3302      	adds	r3, #2
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	2b01      	cmp	r3, #1
 8000376:	d10a      	bne.n	800038e <Bootloader_Read_Protection_Level+0x48>
			uint8_t	WDP_Level = CBL_STM32F103_GET_WDP_Level();
 8000378:	f7ff ffd8 	bl	800032c <CBL_STM32F103_GET_WDP_Level>
 800037c:	4603      	mov	r3, r0
 800037e:	73bb      	strb	r3, [r7, #14]
			Bootloader_Send_Data_To_Host((uint8_t *)(&WDP_Level),1);
 8000380:	f107 030e 	add.w	r3, r7, #14
 8000384:	2101      	movs	r1, #1
 8000386:	4618      	mov	r0, r3
 8000388:	f7ff ff4e 	bl	8000228 <Bootloader_Send_Data_To_Host>
}
 800038c:	e003      	b.n	8000396 <Bootloader_Read_Protection_Level+0x50>
			Bootloader_Send_Data_To_Host(0xEE, 1); //Sending any value other than OB_RDP_LEVEL_0, OB_RDP_LEVEL_1, 0x00, 0xFF is considered error frame in this case
 800038e:	2101      	movs	r1, #1
 8000390:	20ee      	movs	r0, #238	; 0xee
 8000392:	f7ff ff49 	bl	8000228 <Bootloader_Send_Data_To_Host>
}
 8000396:	bf00      	nop
 8000398:	3710      	adds	r7, #16
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
	...

080003a0 <Host_Jump_Address_Verfication>:

/* Verify that the address given from host is valid */
static uint8_t Host_Jump_Address_Verfication (uint32_t Jump_Address){
 80003a0:	b480      	push	{r7}
 80003a2:	b085      	sub	sp, #20
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
	/* TO check on state of given address is in region or not */
	uint8_t Address_Verification_State = ADDRESS_IS_INVALID ;
 80003a8:	2300      	movs	r3, #0
 80003aa:	73fb      	strb	r3, [r7, #15]
	/* Check that it is at RAM memory */
	if (Jump_Address>= SRAM_BASE && Jump_Address <=STM32F103_SRAM_END){
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003b2:	d306      	bcc.n	80003c2 <Host_Jump_Address_Verfication+0x22>
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	4a0c      	ldr	r2, [pc, #48]	; (80003e8 <Host_Jump_Address_Verfication+0x48>)
 80003b8:	4293      	cmp	r3, r2
 80003ba:	d802      	bhi.n	80003c2 <Host_Jump_Address_Verfication+0x22>
		Address_Verification_State = ADDRESS_IS_VALID ;
 80003bc:	2301      	movs	r3, #1
 80003be:	73fb      	strb	r3, [r7, #15]
 80003c0:	e00c      	b.n	80003dc <Host_Jump_Address_Verfication+0x3c>
	}
	/* Check that it is at Flash memory */
	else if(Jump_Address>= FLASH_BASE && Jump_Address <=STM32F103_FLASH_END){
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80003c8:	d306      	bcc.n	80003d8 <Host_Jump_Address_Verfication+0x38>
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	4a07      	ldr	r2, [pc, #28]	; (80003ec <Host_Jump_Address_Verfication+0x4c>)
 80003ce:	4293      	cmp	r3, r2
 80003d0:	d802      	bhi.n	80003d8 <Host_Jump_Address_Verfication+0x38>
		Address_Verification_State = ADDRESS_IS_VALID ;
 80003d2:	2301      	movs	r3, #1
 80003d4:	73fb      	strb	r3, [r7, #15]
 80003d6:	e001      	b.n	80003dc <Host_Jump_Address_Verfication+0x3c>
	}
	/* Invalid region */
	else {
		Address_Verification_State = ADDRESS_IS_INVALID ;
 80003d8:	2300      	movs	r3, #0
 80003da:	73fb      	strb	r3, [r7, #15]
	}
	return Address_Verification_State ;
 80003dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80003de:	4618      	mov	r0, r3
 80003e0:	3714      	adds	r7, #20
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bc80      	pop	{r7}
 80003e6:	4770      	bx	lr
 80003e8:	20005000 	.word	0x20005000
 80003ec:	08010000 	.word	0x08010000

080003f0 <Bootloader_Jump_To_Address>:
   1- 1 byte data length = 0x09
   2- 1 byte commend number = 0x14
   3- 4 bytes for address
   4- 4 bytes for CRC verifications if we used python code as host
 */
static void Bootloader_Jump_To_Address (uint8_t *Host_Buffer){
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b086      	sub	sp, #24
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
	/* Used to get CRC data */
	uint32_t Host_CRC32 = 0 ;
#endif

	/* Buffering address */
	uint32_t Host_Jump_Address = RESET ;
 80003f8:	2300      	movs	r3, #0
 80003fa:	617b      	str	r3, [r7, #20]
	/* TO check on state of given address is in region or not */
	uint8_t Address_Verification_State = ADDRESS_IS_INVALID ;
 80003fc:	2300      	movs	r3, #0
 80003fe:	73fb      	strb	r3, [r7, #15]
		/* To get the content of Host_Buffer and variable"Host_Jump_Address" realizes that it is address
		 - &Host_Buffer[2] --> express the address of array of host
		 - (uint32_t *)    --> casting it to pointer of uint32
		 - *               --> De-reference it and get the content of buffer at this element
		 */
		Host_Jump_Address = *((uint32_t *) &(Host_Buffer[2])) ;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000406:	617b      	str	r3, [r7, #20]

		/* To verify that the address in the region of memory */
		Address_Verification_State = Host_Jump_Address_Verfication(Host_Jump_Address);
 8000408:	6978      	ldr	r0, [r7, #20]
 800040a:	f7ff ffc9 	bl	80003a0 <Host_Jump_Address_Verfication>
 800040e:	4603      	mov	r3, r0
 8000410:	73fb      	strb	r3, [r7, #15]

		if (Address_Verification_State == ADDRESS_IS_VALID ){
 8000412:	7bfb      	ldrb	r3, [r7, #15]
 8000414:	2b01      	cmp	r3, #1
 8000416:	d119      	bne.n	800044c <Bootloader_Jump_To_Address+0x5c>
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
			BL_PrintMassage("Address verification sucessed\r\n");
#endif
			Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification_State, 1);
 8000418:	f107 030f 	add.w	r3, r7, #15
 800041c:	2101      	movs	r1, #1
 800041e:	4618      	mov	r0, r3
 8000420:	f7ff ff02 	bl	8000228 <Bootloader_Send_Data_To_Host>

			if (Host_Jump_Address == FLASH_PAGE_BASE_ADDRESS_APP1){
 8000424:	697b      	ldr	r3, [r7, #20]
 8000426:	4a0e      	ldr	r2, [pc, #56]	; (8000460 <Bootloader_Jump_To_Address+0x70>)
 8000428:	4293      	cmp	r3, r2
 800042a:	d102      	bne.n	8000432 <Bootloader_Jump_To_Address+0x42>
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
				BL_PrintMassage("Jump To Application\r\n");
#endif
				Bootloader_Jump_To_User_App1();
 800042c:	f000 f81c 	bl	8000468 <Bootloader_Jump_To_User_App1>
		BL_PrintMassage("CRC is failed\r\n");
#endif
		Bootloader_Send_NACK();
	}
#endif
}
 8000430:	e012      	b.n	8000458 <Bootloader_Jump_To_Address+0x68>
			else if (Host_Jump_Address == FLASH_PAGE_BASE_ADDRESS_APP2){
 8000432:	697b      	ldr	r3, [r7, #20]
 8000434:	4a0b      	ldr	r2, [pc, #44]	; (8000464 <Bootloader_Jump_To_Address+0x74>)
 8000436:	4293      	cmp	r3, r2
 8000438:	d102      	bne.n	8000440 <Bootloader_Jump_To_Address+0x50>
				Bootloader_Jump_To_User_App2();
 800043a:	f000 f833 	bl	80004a4 <Bootloader_Jump_To_User_App2>
}
 800043e:	e00b      	b.n	8000458 <Bootloader_Jump_To_Address+0x68>
				Jump_Ptr Jump_Address = (Jump_Ptr) (Host_Jump_Address + 1) ;
 8000440:	697b      	ldr	r3, [r7, #20]
 8000442:	3301      	adds	r3, #1
 8000444:	613b      	str	r3, [r7, #16]
				Jump_Address();
 8000446:	693b      	ldr	r3, [r7, #16]
 8000448:	4798      	blx	r3
}
 800044a:	e005      	b.n	8000458 <Bootloader_Jump_To_Address+0x68>
			Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification_State, 1);
 800044c:	f107 030f 	add.w	r3, r7, #15
 8000450:	2101      	movs	r1, #1
 8000452:	4618      	mov	r0, r3
 8000454:	f7ff fee8 	bl	8000228 <Bootloader_Send_Data_To_Host>
}
 8000458:	bf00      	nop
 800045a:	3718      	adds	r7, #24
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	08005000 	.word	0x08005000
 8000464:	0800a000 	.word	0x0800a000

08000468 <Bootloader_Jump_To_User_App1>:
 Be sure that
   1- base address in application is updated in (Bootloader_Jump_To_User_App)
   2- update size of bootloader code with suitable size as 17k or 15k
   3- update origin address of application code in flash memory in linker script and size also
 */
static void Bootloader_Jump_To_User_App1 (){
 8000468:	b580      	push	{r7, lr}
 800046a:	b084      	sub	sp, #16
 800046c:	af00      	add	r7, sp, #0
	/* Value of the main stack pointer of our main application find at address 0 in IVT */
	uint32_t MSP_Value = *((volatile uint32_t*)FLASH_PAGE_BASE_ADDRESS_APP1);
 800046e:	4b0b      	ldr	r3, [pc, #44]	; (800049c <Bootloader_Jump_To_User_App1+0x34>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	60fb      	str	r3, [r7, #12]
	/* Reset Handler defination function of our main application */
	uint32_t MainAppAddr = *((volatile uint32_t*)(FLASH_PAGE_BASE_ADDRESS_APP1+4));
 8000474:	4b0a      	ldr	r3, [pc, #40]	; (80004a0 <Bootloader_Jump_To_User_App1+0x38>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	60bb      	str	r3, [r7, #8]
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
	BL_PrintMassage("Jump to application\r\n");
#endif

	/* Declare pointer to function contain the beginning address of reset function in user application */
	pFunc ResetHandler_Address = (pFunc)MainAppAddr;
 800047a:	68bb      	ldr	r3, [r7, #8]
 800047c:	607b      	str	r3, [r7, #4]

	/* Deinitionalization of modules that used in bootloader and work
	   the configurations of new application */
	HAL_RCC_DeInit(); /* Resets the RCC clock configuration to the default reset state. */
 800047e:	f001 fc47 	bl	8001d10 <HAL_RCC_DeInit>
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000486:	683b      	ldr	r3, [r7, #0]
 8000488:	f383 8808 	msr	MSP, r3
}
 800048c:	bf00      	nop

	/* Reset main stack pointer */
	__set_MSP(MSP_Value);

	/* Jump to Apllication Reset Handler */
	ResetHandler_Address();
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4798      	blx	r3
}
 8000492:	bf00      	nop
 8000494:	3710      	adds	r7, #16
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	08005000 	.word	0x08005000
 80004a0:	08005004 	.word	0x08005004

080004a4 <Bootloader_Jump_To_User_App2>:
 Be sure that
   1- base address in application is updated in (Bootloader_Jump_To_User_App)
   2- update size of bootloader code with suitable size as 17k or 15k
   3- update origin address of application code in flash memory in linker script and size also
 */
static void Bootloader_Jump_To_User_App2 (){
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b084      	sub	sp, #16
 80004a8:	af00      	add	r7, sp, #0
	/* Value of the main stack pointer of our main application find at address 0 in IVT */
	uint32_t MSP_Value = *((volatile uint32_t*)FLASH_PAGE_BASE_ADDRESS_APP1);
 80004aa:	4b0b      	ldr	r3, [pc, #44]	; (80004d8 <Bootloader_Jump_To_User_App2+0x34>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	60fb      	str	r3, [r7, #12]
	/* Reset Handler defination function of our main application */
	uint32_t MainAppAddr = *((volatile uint32_t*)(FLASH_PAGE_BASE_ADDRESS_APP2+4));
 80004b0:	4b0a      	ldr	r3, [pc, #40]	; (80004dc <Bootloader_Jump_To_User_App2+0x38>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	60bb      	str	r3, [r7, #8]
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
	BL_PrintMassage("Jump to application\r\n");
#endif

	/* Declare pointer to function contain the beginning address of reset function in user application */
	pFunc ResetHandler_Address = (pFunc)MainAppAddr;
 80004b6:	68bb      	ldr	r3, [r7, #8]
 80004b8:	607b      	str	r3, [r7, #4]

	/* Deinitionalization of modules that used in bootloader and work
	   the configurations of new application */
	HAL_RCC_DeInit(); /* Resets the RCC clock configuration to the default reset state. */
 80004ba:	f001 fc29 	bl	8001d10 <HAL_RCC_DeInit>
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	f383 8808 	msr	MSP, r3
}
 80004c8:	bf00      	nop

	/* Reset main stack pointer */
	__set_MSP(MSP_Value);

	/* Jump to Apllication Reset Handler */
	ResetHandler_Address();
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4798      	blx	r3
}
 80004ce:	bf00      	nop
 80004d0:	3710      	adds	r7, #16
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	08005000 	.word	0x08005000
 80004dc:	0800a004 	.word	0x0800a004

080004e0 <Perform_Flash_Erase>:

/* Get erasing flash actually */
static uint8_t Perform_Flash_Erase (uint32_t PageAddress, uint8_t Number_Of_Pages){
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b088      	sub	sp, #32
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	460b      	mov	r3, r1
 80004ea:	70fb      	strb	r3, [r7, #3]
	/* To check that the sectors in not overflow the size of flash */
	uint8_t Page_validity_Status  = PAGE_INVALID_NUMBER ;
 80004ec:	2300      	movs	r3, #0
 80004ee:	77fb      	strb	r3, [r7, #31]
	/* Status of erasing flash */
	HAL_StatusTypeDef HAL_Status = HAL_ERROR ;
 80004f0:	2301      	movs	r3, #1
 80004f2:	77bb      	strb	r3, [r7, #30]
	/* Error sector status */
	uint32_t PageError = RESET ;
 80004f4:	2300      	movs	r3, #0
 80004f6:	61bb      	str	r3, [r7, #24]
	/* Define struct to configure parameters[in] */
	FLASH_EraseInitTypeDef pEraseInit ;
	/* Define the used bank in flash memory */
	pEraseInit.Banks = FLASH_BANK_1 ;
 80004f8:	2301      	movs	r3, #1
 80004fa:	60fb      	str	r3, [r7, #12]

	/* another pages is agreed but check that is acess the number of pages in flash */
	if (Number_Of_Pages >= CBL_FLASH_MAX_PAGES_NUMBER && CBL_FLASH_MASS_ERASE != PageAddress){
 80004fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000500:	2b00      	cmp	r3, #0
 8000502:	da05      	bge.n	8000510 <Perform_Flash_Erase+0x30>
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	2bff      	cmp	r3, #255	; 0xff
 8000508:	d002      	beq.n	8000510 <Perform_Flash_Erase+0x30>
		Page_validity_Status = PAGE_INVALID_NUMBER ;
 800050a:	2300      	movs	r3, #0
 800050c:	77fb      	strb	r3, [r7, #31]
 800050e:	e030      	b.n	8000572 <Perform_Flash_Erase+0x92>
	/* erase all memory or specific page */
	else {
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
		BL_PrintMassage ("It is in range of flash memory \r\n");
#endif
		Page_validity_Status = PAGE_VALID_NUMBER ;
 8000510:	2301      	movs	r3, #1
 8000512:	77fb      	strb	r3, [r7, #31]
		pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8000514:	2300      	movs	r3, #0
 8000516:	60bb      	str	r3, [r7, #8]

		/* Check if he want to erase all memory flash */
		if ( CBL_FLASH_MASS_ERASE == PageAddress  ){
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2bff      	cmp	r3, #255	; 0xff
 800051c:	d104      	bne.n	8000528 <Perform_Flash_Erase+0x48>
			pEraseInit.PageAddress = FLASH_PAGE_BASE_ADDRESS_APP1;
 800051e:	4b17      	ldr	r3, [pc, #92]	; (800057c <Perform_Flash_Erase+0x9c>)
 8000520:	613b      	str	r3, [r7, #16]
			pEraseInit.NbPages = APPLICATION_SIZE;
 8000522:	2313      	movs	r3, #19
 8000524:	617b      	str	r3, [r7, #20]
 8000526:	e003      	b.n	8000530 <Perform_Flash_Erase+0x50>
		/* erase specific page */
		else {
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
			BL_PrintMassage ("Page erase \r\n");
#endif
			pEraseInit.PageAddress = PageAddress;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	613b      	str	r3, [r7, #16]
			pEraseInit.NbPages = Number_Of_Pages;
 800052c:	78fb      	ldrb	r3, [r7, #3]
 800052e:	617b      	str	r3, [r7, #20]
		}

		/* To unlock flash memory */
		HAL_Status = HAL_FLASH_Unlock();
 8000530:	f000 fd9a 	bl	8001068 <HAL_FLASH_Unlock>
 8000534:	4603      	mov	r3, r0
 8000536:	77bb      	strb	r3, [r7, #30]

		/* if it's opened correctly */
		if (HAL_Status == HAL_OK){
 8000538:	7fbb      	ldrb	r3, [r7, #30]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d117      	bne.n	800056e <Perform_Flash_Erase+0x8e>
			/* Perform a mass erase or erase the specified FLASH memory sectors */
			HAL_Status = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 800053e:	f107 0218 	add.w	r2, r7, #24
 8000542:	f107 0308 	add.w	r3, r7, #8
 8000546:	4611      	mov	r1, r2
 8000548:	4618      	mov	r0, r3
 800054a:	f000 fea7 	bl	800129c <HAL_FLASHEx_Erase>
 800054e:	4603      	mov	r3, r0
 8000550:	77bb      	strb	r3, [r7, #30]

			/* To check that the flash memory is erased sucessfully */
			if (HAL_SUCESSFUL_ERASE == PageError){
 8000552:	69bb      	ldr	r3, [r7, #24]
 8000554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000558:	d102      	bne.n	8000560 <Perform_Flash_Erase+0x80>
				Page_validity_Status = SUCESSFUL_ERASE ;
 800055a:	2303      	movs	r3, #3
 800055c:	77fb      	strb	r3, [r7, #31]
 800055e:	e001      	b.n	8000564 <Perform_Flash_Erase+0x84>
			}
			/* Didn't erase*/
			else {
				Page_validity_Status = UNSUCESSFUL_ERASE ;
 8000560:	2302      	movs	r3, #2
 8000562:	77fb      	strb	r3, [r7, #31]
			}

			HAL_Status = HAL_FLASH_Lock();
 8000564:	f000 fda6 	bl	80010b4 <HAL_FLASH_Lock>
 8000568:	4603      	mov	r3, r0
 800056a:	77bb      	strb	r3, [r7, #30]
 800056c:	e001      	b.n	8000572 <Perform_Flash_Erase+0x92>
		}
		/* Not opened */
		else {
			Page_validity_Status = UNSUCESSFUL_ERASE ;
 800056e:	2302      	movs	r3, #2
 8000570:	77fb      	strb	r3, [r7, #31]
		}
	}
	return Page_validity_Status ;
 8000572:	7ffb      	ldrb	r3, [r7, #31]
}
 8000574:	4618      	mov	r0, r3
 8000576:	3720      	adds	r7, #32
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	08005000 	.word	0x08005000

08000580 <Bootloader_Erase_Flash>:
   2- 1 byte commend number = 0x15
   3- 4 bytes for page address
   4- 1 byte for number of pages
   5- 4 bytes for CRC verifications if we used python code as host
 */
static void Bootloader_Erase_Flash (uint8_t *Host_Buffer){
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0 ;
	/* Used to get CRC data */
	uint32_t Host_CRC32 = 0 ;
#endif
	/* To check on Erase state */
	uint8_t Erase_Status = UNSUCESSFUL_ERASE ;
 8000588:	2302      	movs	r3, #2
 800058a:	73fb      	strb	r3, [r7, #15]
		/* Send acknowledge to host */
		Bootloader_Send_ACK(1);
#endif

		/* Perform Mass erase or sector erase of the user flash */
		if (Host_Buffer[6] == MASTERID ){
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	3306      	adds	r3, #6
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d111      	bne.n	80005ba <Bootloader_Erase_Flash+0x3a>
			Erase_Status = Perform_Flash_Erase ( *( (uint32_t*)&Host_Buffer[2] ),Host_Buffer[7]);
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	3302      	adds	r3, #2
 800059a:	681a      	ldr	r2, [r3, #0]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	3307      	adds	r3, #7
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	4619      	mov	r1, r3
 80005a4:	4610      	mov	r0, r2
 80005a6:	f7ff ff9b 	bl	80004e0 <Perform_Flash_Erase>
 80005aa:	4603      	mov	r3, r0
 80005ac:	73fb      	strb	r3, [r7, #15]
			/* Report the erase state */
			Bootloader_Send_Data_To_Host((uint8_t *)(&Erase_Status),1);
 80005ae:	f107 030f 	add.w	r3, r7, #15
 80005b2:	2101      	movs	r1, #1
 80005b4:	4618      	mov	r0, r3
 80005b6:	f7ff fe37 	bl	8000228 <Bootloader_Send_Data_To_Host>
		BL_PrintMassage("CRC is failed\r\n");
#endif
		Bootloader_Send_NACK();
	}
#endif
}
 80005ba:	bf00      	nop
 80005bc:	3710      	adds	r7, #16
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}

080005c2 <Flash_Memory_Write_Payload>:


/* Write actually in flash memory */
static uint8_t Flash_Memory_Write_Payload(uint8_t *Host_PayLoad,
		uint32_t Payload_Start_Address, uint8_t Payload_Len) {
 80005c2:	b5b0      	push	{r4, r5, r7, lr}
 80005c4:	b088      	sub	sp, #32
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	60f8      	str	r0, [r7, #12]
 80005ca:	60b9      	str	r1, [r7, #8]
 80005cc:	4613      	mov	r3, r2
 80005ce:	71fb      	strb	r3, [r7, #7]
	/* The status in dealing HAL functions */
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 80005d0:	2301      	movs	r3, #1
 80005d2:	77fb      	strb	r3, [r7, #31]
	/* Status writing in flash memory */
	uint8_t Status = FLASH_PAYLOAD_WRITING_FAILED;
 80005d4:	2300      	movs	r3, #0
 80005d6:	77bb      	strb	r3, [r7, #30]
	/* The number of words in data appliction sections */
	uint8_t PayLoad_Counter = RESET ;
 80005d8:	2300      	movs	r3, #0
 80005da:	777b      	strb	r3, [r7, #29]
	/* buffering half word */
	uint16_t Payload_Buffer = RESET ;
 80005dc:	2300      	movs	r3, #0
 80005de:	837b      	strh	r3, [r7, #26]
	/* address of current writing half word */
	uint32_t Address = RESET ;
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]

	/* Writing steps */
	/* Open flash memory */
	HAL_Status = HAL_FLASH_Unlock();
 80005e4:	f000 fd40 	bl	8001068 <HAL_FLASH_Unlock>
 80005e8:	4603      	mov	r3, r0
 80005ea:	77fb      	strb	r3, [r7, #31]

	/* If it opened */
	if (HAL_Status == HAL_OK) {
 80005ec:	7ffb      	ldrb	r3, [r7, #31]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d134      	bne.n	800065c <Flash_Memory_Write_Payload+0x9a>
		/* Transfer the data sections half word by half word */
		while (Payload_Len !=0 && Status == HAL_OK ){
 80005f2:	e024      	b.n	800063e <Flash_Memory_Write_Payload+0x7c>
			Payload_Buffer = (uint16_t) Host_PayLoad[PayLoad_Counter]
 80005f4:	7f7b      	ldrb	r3, [r7, #29]
 80005f6:	68fa      	ldr	r2, [r7, #12]
 80005f8:	4413      	add	r3, r2
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	b21a      	sxth	r2, r3
													 |( (uint16_t)Host_PayLoad[PayLoad_Counter+1] << TWO_BYTES );
 80005fe:	7f7b      	ldrb	r3, [r7, #29]
 8000600:	3301      	adds	r3, #1
 8000602:	68f9      	ldr	r1, [r7, #12]
 8000604:	440b      	add	r3, r1
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	021b      	lsls	r3, r3, #8
 800060a:	b21b      	sxth	r3, r3
 800060c:	4313      	orrs	r3, r2
 800060e:	b21b      	sxth	r3, r3
			Payload_Buffer = (uint16_t) Host_PayLoad[PayLoad_Counter]
 8000610:	837b      	strh	r3, [r7, #26]

			/*update the flash address each itration */
			Address = Payload_Start_Address + PayLoad_Counter ;
 8000612:	7f7b      	ldrb	r3, [r7, #29]
 8000614:	68ba      	ldr	r2, [r7, #8]
 8000616:	4413      	add	r3, r2
 8000618:	617b      	str	r3, [r7, #20]

			/*Writing the Date in the flash Halfword by Halfword */
			HAL_Status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 800061a:	8b7b      	ldrh	r3, [r7, #26]
 800061c:	2200      	movs	r2, #0
 800061e:	461c      	mov	r4, r3
 8000620:	4615      	mov	r5, r2
 8000622:	4622      	mov	r2, r4
 8000624:	462b      	mov	r3, r5
 8000626:	6979      	ldr	r1, [r7, #20]
 8000628:	2001      	movs	r0, #1
 800062a:	f000 fcad 	bl	8000f88 <HAL_FLASH_Program>
 800062e:	4603      	mov	r3, r0
 8000630:	77fb      	strb	r3, [r7, #31]
					Address, (uint64_t)Payload_Buffer);

			/*To increment PayLoad_Counter and stopped on new half word in host packet frame
			  To decrement Payload_Len to be sure that all of host packet frame is written
			 */
			Payload_Len-=2;
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	3b02      	subs	r3, #2
 8000636:	71fb      	strb	r3, [r7, #7]
			PayLoad_Counter+=2;
 8000638:	7f7b      	ldrb	r3, [r7, #29]
 800063a:	3302      	adds	r3, #2
 800063c:	777b      	strb	r3, [r7, #29]
		while (Payload_Len !=0 && Status == HAL_OK ){
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d002      	beq.n	800064a <Flash_Memory_Write_Payload+0x88>
 8000644:	7fbb      	ldrb	r3, [r7, #30]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d0d4      	beq.n	80005f4 <Flash_Memory_Write_Payload+0x32>
		}

		/* if function can't write on memory Status be failed */
		if (HAL_Status != HAL_OK) {
 800064a:	7ffb      	ldrb	r3, [r7, #31]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d002      	beq.n	8000656 <Flash_Memory_Write_Payload+0x94>
			Status = FLASH_PAYLOAD_WRITING_FAILED;
 8000650:	2300      	movs	r3, #0
 8000652:	77bb      	strb	r3, [r7, #30]
 8000654:	e004      	b.n	8000660 <Flash_Memory_Write_Payload+0x9e>
		} else {
			/* All iterations, It can write on memory make status passed */
			Status = FLASH_PAYLOAD_WRITING_PASSED;
 8000656:	2301      	movs	r3, #1
 8000658:	77bb      	strb	r3, [r7, #30]
 800065a:	e001      	b.n	8000660 <Flash_Memory_Write_Payload+0x9e>
		}
	}
	else {
		/* If it can't open memory make status failed */
		Status = FLASH_PAYLOAD_WRITING_FAILED;
 800065c:	2300      	movs	r3, #0
 800065e:	77bb      	strb	r3, [r7, #30]
	}

	/* If all status is OK so It will lock memory */
	if (Status == FLASH_PAYLOAD_WRITING_PASSED && HAL_Status == HAL_OK) {
 8000660:	7fbb      	ldrb	r3, [r7, #30]
 8000662:	2b01      	cmp	r3, #1
 8000664:	d10f      	bne.n	8000686 <Flash_Memory_Write_Payload+0xc4>
 8000666:	7ffb      	ldrb	r3, [r7, #31]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d10c      	bne.n	8000686 <Flash_Memory_Write_Payload+0xc4>
		HAL_Status = HAL_FLASH_Lock();
 800066c:	f000 fd22 	bl	80010b4 <HAL_FLASH_Lock>
 8000670:	4603      	mov	r3, r0
 8000672:	77fb      	strb	r3, [r7, #31]

		/* Check if it locked it true or not */
		if (HAL_Status != HAL_OK) {
 8000674:	7ffb      	ldrb	r3, [r7, #31]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d002      	beq.n	8000680 <Flash_Memory_Write_Payload+0xbe>
			Status = FLASH_PAYLOAD_WRITING_FAILED;
 800067a:	2300      	movs	r3, #0
 800067c:	77bb      	strb	r3, [r7, #30]
		if (HAL_Status != HAL_OK) {
 800067e:	e004      	b.n	800068a <Flash_Memory_Write_Payload+0xc8>
		} else {
			Status = FLASH_PAYLOAD_WRITING_PASSED;
 8000680:	2301      	movs	r3, #1
 8000682:	77bb      	strb	r3, [r7, #30]
		if (HAL_Status != HAL_OK) {
 8000684:	e001      	b.n	800068a <Flash_Memory_Write_Payload+0xc8>
		}
	} else {
		/* If one of status is not OK so It will make returned status with failed */
		Status = FLASH_PAYLOAD_WRITING_FAILED;
 8000686:	2300      	movs	r3, #0
 8000688:	77bb      	strb	r3, [r7, #30]
	}
	return Status;
 800068a:	7fbb      	ldrb	r3, [r7, #30]
}
 800068c:	4618      	mov	r0, r3
 800068e:	3720      	adds	r7, #32
 8000690:	46bd      	mov	sp, r7
 8000692:	bdb0      	pop	{r4, r5, r7, pc}

08000694 <Bootloader_Memory_Write>:
   4- 1 byte for size of writing data
   5- N bytes of data info
   6- 4 bytes for CRC verifications if we used python code as host
 */

static void Bootloader_Memory_Write (uint8_t *Host_Buffer){
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
	/* Used to get CRC data */
	uint32_t Host_CRC32 = 0;
#endif
	/* Base address that you will write on */
	uint32_t HOST_Address = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
	/* Number of bytes that will be sent */
	uint8_t Payload_Len = 0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	72fb      	strb	r3, [r7, #11]
	/* The status of input address from the host */
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 80006a4:	2300      	movs	r3, #0
 80006a6:	72bb      	strb	r3, [r7, #10]
	/* Status writing in flash memory */
	uint8_t Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITING_FAILED;
 80006a8:	2300      	movs	r3, #0
 80006aa:	727b      	strb	r3, [r7, #9]
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
		BL_PrintMassage("CRC is passed\r\n");
#endif

		/* Extract the start address from the Host packet */
		HOST_Address = *((uint32_t *)(&Host_Buffer[2]));
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80006b2:	60fb      	str	r3, [r7, #12]
		/* Extract the payload length from the Host packet */
		Payload_Len = Host_Buffer[8];
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	7a1b      	ldrb	r3, [r3, #8]
 80006b8:	72fb      	strb	r3, [r7, #11]

		/* Verify the Extracted address to be valid address */
		Address_Verification = Host_Jump_Address_Verfication(HOST_Address);
 80006ba:	68f8      	ldr	r0, [r7, #12]
 80006bc:	f7ff fe70 	bl	80003a0 <Host_Jump_Address_Verfication>
 80006c0:	4603      	mov	r3, r0
 80006c2:	72bb      	strb	r3, [r7, #10]

		if(ADDRESS_IS_VALID == Address_Verification)
 80006c4:	7abb      	ldrb	r3, [r7, #10]
 80006c6:	2b01      	cmp	r3, #1
 80006c8:	d114      	bne.n	80006f4 <Bootloader_Memory_Write+0x60>
		{
			if (Host_Buffer[6] == MASTERID){
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	3306      	adds	r3, #6
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d117      	bne.n	8000704 <Bootloader_Memory_Write+0x70>
				/* Write the payload to the Flash memory */
				Flash_Payload_Write_Status = Flash_Memory_Write_Payload((uint8_t *)&Host_Buffer[9], HOST_Address, Payload_Len);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	3309      	adds	r3, #9
 80006d8:	7afa      	ldrb	r2, [r7, #11]
 80006da:	68f9      	ldr	r1, [r7, #12]
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff ff70 	bl	80005c2 <Flash_Memory_Write_Payload>
 80006e2:	4603      	mov	r3, r0
 80006e4:	727b      	strb	r3, [r7, #9]
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
				BL_PrintMassage ("Correct writing data into memory at %x \r\n",HOST_Address);
#endif

				/* Report payload writing state */
				Bootloader_Send_Data_To_Host((uint8_t *)&Flash_Payload_Write_Status, 1);
 80006e6:	f107 0309 	add.w	r3, r7, #9
 80006ea:	2101      	movs	r1, #1
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff fd9b 	bl	8000228 <Bootloader_Send_Data_To_Host>
		/* Send Not acknowledge to the HOST */
		Bootloader_Send_NACK();
	}
#endif

}
 80006f2:	e007      	b.n	8000704 <Bootloader_Memory_Write+0x70>
			Address_Verification = ADDRESS_IS_INVALID;
 80006f4:	2300      	movs	r3, #0
 80006f6:	72bb      	strb	r3, [r7, #10]
			Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification, 1);
 80006f8:	f107 030a 	add.w	r3, r7, #10
 80006fc:	2101      	movs	r1, #1
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff fd92 	bl	8000228 <Bootloader_Send_Data_To_Host>
}
 8000704:	bf00      	nop
 8000706:	3710      	adds	r7, #16
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <Bootloader_Enable_R_Protection>:

static void Bootloader_Enable_R_Protection(uint8_t *Host_Buffer){
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	 * 5. Lock option byte. 		HAL_FLASH_OB_Lock
	 * 6. Reset.					HAL_FLASH_OB_Launch
	 *
	 *
	 * */
	uint8_t Host_ROP_Level = Host_Buffer[2] ;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	789b      	ldrb	r3, [r3, #2]
 8000718:	73fb      	strb	r3, [r7, #15]
	uint8_t ROP_Level_Status = ROP_LEVEL_CHANGE_INVALID;
 800071a:	2300      	movs	r3, #0
 800071c:	73bb      	strb	r3, [r7, #14]

	if (CBL_ROP_LEVEL_0 == Host_ROP_Level){
 800071e:	7bfb      	ldrb	r3, [r7, #15]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d11f      	bne.n	8000764 <Bootloader_Enable_R_Protection+0x58>

		Bootloader_Send_Data_To_Host("Level 0", 8);
 8000724:	2108      	movs	r1, #8
 8000726:	481e      	ldr	r0, [pc, #120]	; (80007a0 <Bootloader_Enable_R_Protection+0x94>)
 8000728:	f7ff fd7e 	bl	8000228 <Bootloader_Send_Data_To_Host>

		pOBInit.OptionType = OPTIONBYTE_RDP;
 800072c:	4b1d      	ldr	r3, [pc, #116]	; (80007a4 <Bootloader_Enable_R_Protection+0x98>)
 800072e:	2202      	movs	r2, #2
 8000730:	601a      	str	r2, [r3, #0]
		pOBInit.RDPLevel = OB_RDP_LEVEL_0;
 8000732:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <Bootloader_Enable_R_Protection+0x98>)
 8000734:	22a5      	movs	r2, #165	; 0xa5
 8000736:	741a      	strb	r2, [r3, #16]

		HAL_FLASH_Unlock();
 8000738:	f000 fc96 	bl	8001068 <HAL_FLASH_Unlock>
		HAL_FLASH_OB_Unlock();
 800073c:	f000 fcca 	bl	80010d4 <HAL_FLASH_OB_Unlock>
		HAL_FLASHEx_OBProgram(&pOBInit);
 8000740:	4818      	ldr	r0, [pc, #96]	; (80007a4 <Bootloader_Enable_R_Protection+0x98>)
 8000742:	f000 fe59 	bl	80013f8 <HAL_FLASHEx_OBProgram>
		HAL_FLASH_Lock();
 8000746:	f000 fcb5 	bl	80010b4 <HAL_FLASH_Lock>
		HAL_FLASH_OB_Lock();
 800074a:	f000 fcdf 	bl	800110c <HAL_FLASH_OB_Lock>
		HAL_FLASH_OB_Launch();
 800074e:	f000 fced 	bl	800112c <HAL_FLASH_OB_Launch>

		ROP_Level_Status = ROP_LEVEL_CHANGE_VALID;
 8000752:	2301      	movs	r3, #1
 8000754:	73bb      	strb	r3, [r7, #14]
		Bootloader_Send_Data_To_Host((uint8_t *)&ROP_Level_Status, 1);
 8000756:	f107 030e 	add.w	r3, r7, #14
 800075a:	2101      	movs	r1, #1
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff fd63 	bl	8000228 <Bootloader_Send_Data_To_Host>
		HAL_FLASHEx_OBProgram(&pOBInit);
		HAL_FLASH_Lock();
		HAL_FLASH_OB_Lock();
		HAL_FLASH_OB_Launch();
	}
}
 8000762:	e019      	b.n	8000798 <Bootloader_Enable_R_Protection+0x8c>
	else if (CBL_ROP_LEVEL_1 == Host_ROP_Level) {
 8000764:	7bfb      	ldrb	r3, [r7, #15]
 8000766:	2b01      	cmp	r3, #1
 8000768:	d116      	bne.n	8000798 <Bootloader_Enable_R_Protection+0x8c>
		Bootloader_Send_Data_To_Host("Level 1", 8);
 800076a:	2108      	movs	r1, #8
 800076c:	480e      	ldr	r0, [pc, #56]	; (80007a8 <Bootloader_Enable_R_Protection+0x9c>)
 800076e:	f7ff fd5b 	bl	8000228 <Bootloader_Send_Data_To_Host>
		pOBInit.OptionType = OPTIONBYTE_RDP;
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <Bootloader_Enable_R_Protection+0x98>)
 8000774:	2202      	movs	r2, #2
 8000776:	601a      	str	r2, [r3, #0]
		pOBInit.RDPLevel = OB_RDP_LEVEL_1;
 8000778:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <Bootloader_Enable_R_Protection+0x98>)
 800077a:	2200      	movs	r2, #0
 800077c:	741a      	strb	r2, [r3, #16]
		HAL_FLASH_Unlock();
 800077e:	f000 fc73 	bl	8001068 <HAL_FLASH_Unlock>
		HAL_FLASH_OB_Unlock();
 8000782:	f000 fca7 	bl	80010d4 <HAL_FLASH_OB_Unlock>
		HAL_FLASHEx_OBProgram(&pOBInit);
 8000786:	4807      	ldr	r0, [pc, #28]	; (80007a4 <Bootloader_Enable_R_Protection+0x98>)
 8000788:	f000 fe36 	bl	80013f8 <HAL_FLASHEx_OBProgram>
		HAL_FLASH_Lock();
 800078c:	f000 fc92 	bl	80010b4 <HAL_FLASH_Lock>
		HAL_FLASH_OB_Lock();
 8000790:	f000 fcbc 	bl	800110c <HAL_FLASH_OB_Lock>
		HAL_FLASH_OB_Launch();
 8000794:	f000 fcca 	bl	800112c <HAL_FLASH_OB_Launch>
}
 8000798:	bf00      	nop
 800079a:	3710      	adds	r7, #16
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	08002b98 	.word	0x08002b98
 80007a4:	20000128 	.word	0x20000128
 80007a8:	08002ba0 	.word	0x08002ba0

080007ac <Bootloader_Enable_W_Protection>:

static void Bootloader_Enable_W_Protection(uint8_t *Host_Buffer){
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
	 * 5. Lock option byte. 		HAL_FLASH_OB_Lock
	 * 6. Reset.					HAL_FLASH_OB_Launch
	 *
	 *
	 * */
	uint8_t WP_Level_Status = ROP_LEVEL_CHANGE_INVALID;
 80007b4:	2300      	movs	r3, #0
 80007b6:	73fb      	strb	r3, [r7, #15]
	uint8_t Host_WP_Level = Host_Buffer[2];
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	789b      	ldrb	r3, [r3, #2]
 80007bc:	73bb      	strb	r3, [r7, #14]


	if (OB_WRPSTATE_ENABLE == Host_WP_Level) {
 80007be:	7bbb      	ldrb	r3, [r7, #14]
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d11a      	bne.n	80007fa <Bootloader_Enable_W_Protection+0x4e>

		Bootloader_Send_Data_To_Host("Level 1", 8);
 80007c4:	2108      	movs	r1, #8
 80007c6:	481d      	ldr	r0, [pc, #116]	; (800083c <Bootloader_Enable_W_Protection+0x90>)
 80007c8:	f7ff fd2e 	bl	8000228 <Bootloader_Send_Data_To_Host>

		pOBInit.OptionType = OPTIONBYTE_WRP;
 80007cc:	4b1c      	ldr	r3, [pc, #112]	; (8000840 <Bootloader_Enable_W_Protection+0x94>)
 80007ce:	2201      	movs	r2, #1
 80007d0:	601a      	str	r2, [r3, #0]
		pOBInit.WRPState = OB_WRPSTATE_ENABLE;
 80007d2:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <Bootloader_Enable_W_Protection+0x94>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	605a      	str	r2, [r3, #4]
		pOBInit.WRPPage = OB_WRP_PAGES0TO3 | OB_WRP_PAGES4TO7 | OB_WRP_PAGES8TO11 | OB_WRP_PAGES12TO15 | OB_WRP_PAGES16TO19 | OB_WRP_PAGES20TO23 | OB_WRP_PAGES24TO27 | OB_WRP_PAGES28TO31;//We make ORing operations to enable write protect to all pages
 80007d8:	4b19      	ldr	r3, [pc, #100]	; (8000840 <Bootloader_Enable_W_Protection+0x94>)
 80007da:	22ff      	movs	r2, #255	; 0xff
 80007dc:	609a      	str	r2, [r3, #8]

		HAL_FLASH_Unlock();
 80007de:	f000 fc43 	bl	8001068 <HAL_FLASH_Unlock>
		HAL_FLASH_OB_Unlock();
 80007e2:	f000 fc77 	bl	80010d4 <HAL_FLASH_OB_Unlock>
		HAL_FLASHEx_OBProgram(&pOBInit);
 80007e6:	4816      	ldr	r0, [pc, #88]	; (8000840 <Bootloader_Enable_W_Protection+0x94>)
 80007e8:	f000 fe06 	bl	80013f8 <HAL_FLASHEx_OBProgram>
		HAL_FLASH_Lock();
 80007ec:	f000 fc62 	bl	80010b4 <HAL_FLASH_Lock>
		HAL_FLASH_OB_Lock();
 80007f0:	f000 fc8c 	bl	800110c <HAL_FLASH_OB_Lock>
		HAL_FLASH_OB_Launch();
 80007f4:	f000 fc9a 	bl	800112c <HAL_FLASH_OB_Launch>
		HAL_FLASH_OB_Launch();

	} else {
		//DO NOTHING
	}
}
 80007f8:	e01c      	b.n	8000834 <Bootloader_Enable_W_Protection+0x88>
	} else if (OB_WRPSTATE_DISABLE == Host_WP_Level) {
 80007fa:	7bbb      	ldrb	r3, [r7, #14]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d119      	bne.n	8000834 <Bootloader_Enable_W_Protection+0x88>
		Bootloader_Send_Data_To_Host("Level 0", 8);
 8000800:	2108      	movs	r1, #8
 8000802:	4810      	ldr	r0, [pc, #64]	; (8000844 <Bootloader_Enable_W_Protection+0x98>)
 8000804:	f7ff fd10 	bl	8000228 <Bootloader_Send_Data_To_Host>
		pOBInit.OptionType = OPTIONBYTE_WRP;
 8000808:	4b0d      	ldr	r3, [pc, #52]	; (8000840 <Bootloader_Enable_W_Protection+0x94>)
 800080a:	2201      	movs	r2, #1
 800080c:	601a      	str	r2, [r3, #0]
		pOBInit.WRPState = OB_WRPSTATE_DISABLE;
 800080e:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <Bootloader_Enable_W_Protection+0x94>)
 8000810:	2200      	movs	r2, #0
 8000812:	605a      	str	r2, [r3, #4]
		pOBInit.WRPPage = OB_WRP_PAGES0TO3 | OB_WRP_PAGES4TO7 | OB_WRP_PAGES8TO11 | OB_WRP_PAGES12TO15 | OB_WRP_PAGES16TO19 | OB_WRP_PAGES20TO23 | OB_WRP_PAGES24TO27 | OB_WRP_PAGES28TO31;//We make ORing operation to disable write protect to all pages(you should increase OR operation for higher densities STM)
 8000814:	4b0a      	ldr	r3, [pc, #40]	; (8000840 <Bootloader_Enable_W_Protection+0x94>)
 8000816:	22ff      	movs	r2, #255	; 0xff
 8000818:	609a      	str	r2, [r3, #8]
		HAL_FLASH_Unlock();
 800081a:	f000 fc25 	bl	8001068 <HAL_FLASH_Unlock>
		HAL_FLASH_OB_Unlock();
 800081e:	f000 fc59 	bl	80010d4 <HAL_FLASH_OB_Unlock>
		HAL_FLASHEx_OBProgram(&pOBInit);
 8000822:	4807      	ldr	r0, [pc, #28]	; (8000840 <Bootloader_Enable_W_Protection+0x94>)
 8000824:	f000 fde8 	bl	80013f8 <HAL_FLASHEx_OBProgram>
		HAL_FLASH_Lock();
 8000828:	f000 fc44 	bl	80010b4 <HAL_FLASH_Lock>
		HAL_FLASH_OB_Lock();
 800082c:	f000 fc6e 	bl	800110c <HAL_FLASH_OB_Lock>
		HAL_FLASH_OB_Launch();
 8000830:	f000 fc7c 	bl	800112c <HAL_FLASH_OB_Launch>
}
 8000834:	bf00      	nop
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	08002ba0 	.word	0x08002ba0
 8000840:	20000128 	.word	0x20000128
 8000844:	08002b98 	.word	0x08002b98

08000848 <Bootloader_SetApplication_Flag>:
 Host_Buffer[0]=
 Host_Buffer[1]=0x18
 Host_Buffer[2]=Node Number
 Host_Buffer[3]=Application Number
 */
static void    Bootloader_SetApplication_Flag(uint8_t *Host_Buffer){
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	/* To set application number */
	uint8_t ECU = Host_Buffer[2];
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	789b      	ldrb	r3, [r3, #2]
 8000854:	73fb      	strb	r3, [r7, #15]
	uint8_t APP = Host_Buffer[3] ;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	78db      	ldrb	r3, [r3, #3]
 800085a:	73bb      	strb	r3, [r7, #14]

	if (ECU == MASTERID){
 800085c:	7bfb      	ldrb	r3, [r7, #15]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d116      	bne.n	8000890 <Bootloader_SetApplication_Flag+0x48>
		/* To edit the application flag */
		if (APP == APPLICATION1){
 8000862:	7bbb      	ldrb	r3, [r7, #14]
 8000864:	2b01      	cmp	r3, #1
 8000866:	d108      	bne.n	800087a <Bootloader_SetApplication_Flag+0x32>
			APP1_Flag = TURN_ON;
 8000868:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <Bootloader_SetApplication_Flag+0x50>)
 800086a:	2201      	movs	r2, #1
 800086c:	601a      	str	r2, [r3, #0]
			APP2_Flag = TURN_OFF;
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <Bootloader_SetApplication_Flag+0x54>)
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
			HAL_NVIC_SystemReset();
 8000874:	f000 fb5b 	bl	8000f2e <HAL_NVIC_SystemReset>
		/* Send to slave node */
	}
	else {
		/* warning for ESP */
	}
}
 8000878:	e00a      	b.n	8000890 <Bootloader_SetApplication_Flag+0x48>
		else if (APP == APPLICATION2){
 800087a:	7bbb      	ldrb	r3, [r7, #14]
 800087c:	2b02      	cmp	r3, #2
 800087e:	d107      	bne.n	8000890 <Bootloader_SetApplication_Flag+0x48>
			APP2_Flag = TURN_ON;
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <Bootloader_SetApplication_Flag+0x54>)
 8000882:	2201      	movs	r2, #1
 8000884:	601a      	str	r2, [r3, #0]
			APP1_Flag = TURN_OFF;
 8000886:	4b04      	ldr	r3, [pc, #16]	; (8000898 <Bootloader_SetApplication_Flag+0x50>)
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
			HAL_NVIC_SystemReset();
 800088c:	f000 fb4f 	bl	8000f2e <HAL_NVIC_SystemReset>
}
 8000890:	bf00      	nop
 8000892:	3710      	adds	r7, #16
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	08010000 	.word	0x08010000
 800089c:	08010004 	.word	0x08010004

080008a0 <MX_CRC_Init>:
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_CRC_Init+0x20>)
 80008a6:	4a07      	ldr	r2, [pc, #28]	; (80008c4 <MX_CRC_Init+0x24>)
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_CRC_Init+0x20>)
 80008ac:	f000 fb4f 	bl	8000f4e <HAL_CRC_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_CRC_Init+0x1a>
 80008b6:	f000 f898 	bl	80009ea <Error_Handler>
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000144 	.word	0x20000144
 80008c4:	40023000 	.word	0x40023000

080008c8 <HAL_CRC_MspInit>:
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a09      	ldr	r2, [pc, #36]	; (80008fc <HAL_CRC_MspInit+0x34>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d10b      	bne.n	80008f2 <HAL_CRC_MspInit+0x2a>
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <HAL_CRC_MspInit+0x38>)
 80008dc:	695b      	ldr	r3, [r3, #20]
 80008de:	4a08      	ldr	r2, [pc, #32]	; (8000900 <HAL_CRC_MspInit+0x38>)
 80008e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008e4:	6153      	str	r3, [r2, #20]
 80008e6:	4b06      	ldr	r3, [pc, #24]	; (8000900 <HAL_CRC_MspInit+0x38>)
 80008e8:	695b      	ldr	r3, [r3, #20]
 80008ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	bf00      	nop
 80008f4:	3714      	adds	r7, #20
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr
 80008fc:	40023000 	.word	0x40023000
 8000900:	40021000 	.word	0x40021000

08000904 <MX_GPIO_Init>:
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_GPIO_Init+0x40>)
 800090c:	699b      	ldr	r3, [r3, #24]
 800090e:	4a0d      	ldr	r2, [pc, #52]	; (8000944 <MX_GPIO_Init+0x40>)
 8000910:	f043 0320 	orr.w	r3, r3, #32
 8000914:	6193      	str	r3, [r2, #24]
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <MX_GPIO_Init+0x40>)
 8000918:	699b      	ldr	r3, [r3, #24]
 800091a:	f003 0320 	and.w	r3, r3, #32
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <MX_GPIO_Init+0x40>)
 8000924:	699b      	ldr	r3, [r3, #24]
 8000926:	4a07      	ldr	r2, [pc, #28]	; (8000944 <MX_GPIO_Init+0x40>)
 8000928:	f043 0304 	orr.w	r3, r3, #4
 800092c:	6193      	str	r3, [r2, #24]
 800092e:	4b05      	ldr	r3, [pc, #20]	; (8000944 <MX_GPIO_Init+0x40>)
 8000930:	699b      	ldr	r3, [r3, #24]
 8000932:	f003 0304 	and.w	r3, r3, #4
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr
 8000944:	40021000 	.word	0x40021000

08000948 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800094c:	f000 f9a0 	bl	8000c90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000950:	f000 f80b 	bl	800096a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000954:	f7ff ffd6 	bl	8000904 <MX_GPIO_Init>
  MX_CRC_Init();
 8000958:	f7ff ffa2 	bl	80008a0 <MX_CRC_Init>
  MX_USART2_UART_Init();
 800095c:	f000 f8c4 	bl	8000ae8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000960:	f000 f898 	bl	8000a94 <MX_USART1_UART_Init>
    /* USER CODE END WHILE */



    /* USER CODE BEGIN 3 */
	  BL_Fetch_Commend();
 8000964:	f7ff fbf2 	bl	800014c <BL_Fetch_Commend>
 8000968:	e7fc      	b.n	8000964 <main+0x1c>

0800096a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800096a:	b580      	push	{r7, lr}
 800096c:	b090      	sub	sp, #64	; 0x40
 800096e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000970:	f107 0318 	add.w	r3, r7, #24
 8000974:	2228      	movs	r2, #40	; 0x28
 8000976:	2100      	movs	r1, #0
 8000978:	4618      	mov	r0, r3
 800097a:	f002 f8d5 	bl	8002b28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800098c:	2302      	movs	r3, #2
 800098e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000990:	2301      	movs	r3, #1
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000994:	2310      	movs	r3, #16
 8000996:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000998:	2302      	movs	r3, #2
 800099a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800099c:	2300      	movs	r3, #0
 800099e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80009a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80009a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a6:	f107 0318 	add.w	r3, r7, #24
 80009aa:	4618      	mov	r0, r3
 80009ac:	f001 fa4a 	bl	8001e44 <HAL_RCC_OscConfig>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <SystemClock_Config+0x50>
  {
    Error_Handler();
 80009b6:	f000 f818 	bl	80009ea <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ba:	230f      	movs	r3, #15
 80009bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009be:	2302      	movs	r3, #2
 80009c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ca:	2300      	movs	r3, #0
 80009cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	2100      	movs	r1, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f001 fcb8 	bl	8002348 <HAL_RCC_ClockConfig>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80009de:	f000 f804 	bl	80009ea <Error_Handler>
  }
}
 80009e2:	bf00      	nop
 80009e4:	3740      	adds	r7, #64	; 0x40
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80009ee:	b672      	cpsid	i
}
 80009f0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f2:	e7fe      	b.n	80009f2 <Error_Handler+0x8>

080009f4 <HAL_MspInit>:
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <HAL_MspInit+0x40>)
 80009fc:	699b      	ldr	r3, [r3, #24]
 80009fe:	4a0d      	ldr	r2, [pc, #52]	; (8000a34 <HAL_MspInit+0x40>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	6193      	str	r3, [r2, #24]
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <HAL_MspInit+0x40>)
 8000a08:	699b      	ldr	r3, [r3, #24]
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <HAL_MspInit+0x40>)
 8000a14:	69db      	ldr	r3, [r3, #28]
 8000a16:	4a07      	ldr	r2, [pc, #28]	; (8000a34 <HAL_MspInit+0x40>)
 8000a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a1c:	61d3      	str	r3, [r2, #28]
 8000a1e:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <HAL_MspInit+0x40>)
 8000a20:	69db      	ldr	r3, [r3, #28]
 8000a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	bf00      	nop
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr
 8000a34:	40021000 	.word	0x40021000

08000a38 <NMI_Handler>:
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	e7fe      	b.n	8000a3c <NMI_Handler+0x4>

08000a3e <HardFault_Handler>:
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	e7fe      	b.n	8000a42 <HardFault_Handler+0x4>

08000a44 <MemManage_Handler>:
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	e7fe      	b.n	8000a48 <MemManage_Handler+0x4>

08000a4a <BusFault_Handler>:
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	e7fe      	b.n	8000a4e <BusFault_Handler+0x4>

08000a50 <UsageFault_Handler>:
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	e7fe      	b.n	8000a54 <UsageFault_Handler+0x4>

08000a56 <SVC_Handler>:
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	bf00      	nop
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bc80      	pop	{r7}
 8000a60:	4770      	bx	lr

08000a62 <DebugMon_Handler>:
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bc80      	pop	{r7}
 8000a6c:	4770      	bx	lr

08000a6e <PendSV_Handler>:
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc80      	pop	{r7}
 8000a78:	4770      	bx	lr

08000a7a <SysTick_Handler>:
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	f000 f94d 	bl	8000d1c <HAL_IncTick>
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <SystemInit>:
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	bf00      	nop
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bc80      	pop	{r7}
 8000a90:	4770      	bx	lr
	...

08000a94 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <MX_USART1_UART_Init+0x4c>)
 8000a9a:	4a12      	ldr	r2, [pc, #72]	; (8000ae4 <MX_USART1_UART_Init+0x50>)
 8000a9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <MX_USART1_UART_Init+0x4c>)
 8000aa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <MX_USART1_UART_Init+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <MX_USART1_UART_Init+0x4c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <MX_USART1_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ab8:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <MX_USART1_UART_Init+0x4c>)
 8000aba:	220c      	movs	r2, #12
 8000abc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000abe:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <MX_USART1_UART_Init+0x4c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <MX_USART1_UART_Init+0x4c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000aca:	4805      	ldr	r0, [pc, #20]	; (8000ae0 <MX_USART1_UART_Init+0x4c>)
 8000acc:	f001 fdca 	bl	8002664 <HAL_UART_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ad6:	f7ff ff88 	bl	80009ea <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	2000014c 	.word	0x2000014c
 8000ae4:	40013800 	.word	0x40013800

08000ae8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aec:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000aee:	4a12      	ldr	r2, [pc, #72]	; (8000b38 <MX_USART2_UART_Init+0x50>)
 8000af0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000af2:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000af4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000af8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b06:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b0c:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000b0e:	220c      	movs	r2, #12
 8000b10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b12:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b1e:	4805      	ldr	r0, [pc, #20]	; (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000b20:	f001 fda0 	bl	8002664 <HAL_UART_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b2a:	f7ff ff5e 	bl	80009ea <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000194 	.word	0x20000194
 8000b38:	40004400 	.word	0x40004400

08000b3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	; 0x28
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 0318 	add.w	r3, r7, #24
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a37      	ldr	r2, [pc, #220]	; (8000c34 <HAL_UART_MspInit+0xf8>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d132      	bne.n	8000bc2 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b5c:	4b36      	ldr	r3, [pc, #216]	; (8000c38 <HAL_UART_MspInit+0xfc>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	4a35      	ldr	r2, [pc, #212]	; (8000c38 <HAL_UART_MspInit+0xfc>)
 8000b62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b66:	6193      	str	r3, [r2, #24]
 8000b68:	4b33      	ldr	r3, [pc, #204]	; (8000c38 <HAL_UART_MspInit+0xfc>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b70:	617b      	str	r3, [r7, #20]
 8000b72:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b74:	4b30      	ldr	r3, [pc, #192]	; (8000c38 <HAL_UART_MspInit+0xfc>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	4a2f      	ldr	r2, [pc, #188]	; (8000c38 <HAL_UART_MspInit+0xfc>)
 8000b7a:	f043 0304 	orr.w	r3, r3, #4
 8000b7e:	6193      	str	r3, [r2, #24]
 8000b80:	4b2d      	ldr	r3, [pc, #180]	; (8000c38 <HAL_UART_MspInit+0xfc>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	f003 0304 	and.w	r3, r3, #4
 8000b88:	613b      	str	r3, [r7, #16]
 8000b8a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	2302      	movs	r3, #2
 8000b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b96:	2303      	movs	r3, #3
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9a:	f107 0318 	add.w	r3, r7, #24
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4826      	ldr	r0, [pc, #152]	; (8000c3c <HAL_UART_MspInit+0x100>)
 8000ba2:	f000 ff31 	bl	8001a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb4:	f107 0318 	add.w	r3, r7, #24
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4820      	ldr	r0, [pc, #128]	; (8000c3c <HAL_UART_MspInit+0x100>)
 8000bbc:	f000 ff24 	bl	8001a08 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000bc0:	e034      	b.n	8000c2c <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a1e      	ldr	r2, [pc, #120]	; (8000c40 <HAL_UART_MspInit+0x104>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d12f      	bne.n	8000c2c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bcc:	4b1a      	ldr	r3, [pc, #104]	; (8000c38 <HAL_UART_MspInit+0xfc>)
 8000bce:	69db      	ldr	r3, [r3, #28]
 8000bd0:	4a19      	ldr	r2, [pc, #100]	; (8000c38 <HAL_UART_MspInit+0xfc>)
 8000bd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd6:	61d3      	str	r3, [r2, #28]
 8000bd8:	4b17      	ldr	r3, [pc, #92]	; (8000c38 <HAL_UART_MspInit+0xfc>)
 8000bda:	69db      	ldr	r3, [r3, #28]
 8000bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be4:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <HAL_UART_MspInit+0xfc>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	4a13      	ldr	r2, [pc, #76]	; (8000c38 <HAL_UART_MspInit+0xfc>)
 8000bea:	f043 0304 	orr.w	r3, r3, #4
 8000bee:	6193      	str	r3, [r2, #24]
 8000bf0:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <HAL_UART_MspInit+0xfc>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	f003 0304 	and.w	r3, r3, #4
 8000bf8:	60bb      	str	r3, [r7, #8]
 8000bfa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bfc:	2304      	movs	r3, #4
 8000bfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c00:	2302      	movs	r3, #2
 8000c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c04:	2303      	movs	r3, #3
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c08:	f107 0318 	add.w	r3, r7, #24
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	480b      	ldr	r0, [pc, #44]	; (8000c3c <HAL_UART_MspInit+0x100>)
 8000c10:	f000 fefa 	bl	8001a08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c14:	2308      	movs	r3, #8
 8000c16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c20:	f107 0318 	add.w	r3, r7, #24
 8000c24:	4619      	mov	r1, r3
 8000c26:	4805      	ldr	r0, [pc, #20]	; (8000c3c <HAL_UART_MspInit+0x100>)
 8000c28:	f000 feee 	bl	8001a08 <HAL_GPIO_Init>
}
 8000c2c:	bf00      	nop
 8000c2e:	3728      	adds	r7, #40	; 0x28
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40013800 	.word	0x40013800
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	40010800 	.word	0x40010800
 8000c40:	40004400 	.word	0x40004400

08000c44 <Reset_Handler>:
 8000c44:	f7ff ff1f 	bl	8000a86 <SystemInit>
 8000c48:	480b      	ldr	r0, [pc, #44]	; (8000c78 <LoopFillZerobss+0xe>)
 8000c4a:	490c      	ldr	r1, [pc, #48]	; (8000c7c <LoopFillZerobss+0x12>)
 8000c4c:	4a0c      	ldr	r2, [pc, #48]	; (8000c80 <LoopFillZerobss+0x16>)
 8000c4e:	2300      	movs	r3, #0
 8000c50:	e002      	b.n	8000c58 <LoopCopyDataInit>

08000c52 <CopyDataInit>:
 8000c52:	58d4      	ldr	r4, [r2, r3]
 8000c54:	50c4      	str	r4, [r0, r3]
 8000c56:	3304      	adds	r3, #4

08000c58 <LoopCopyDataInit>:
 8000c58:	18c4      	adds	r4, r0, r3
 8000c5a:	428c      	cmp	r4, r1
 8000c5c:	d3f9      	bcc.n	8000c52 <CopyDataInit>
 8000c5e:	4a09      	ldr	r2, [pc, #36]	; (8000c84 <LoopFillZerobss+0x1a>)
 8000c60:	4c09      	ldr	r4, [pc, #36]	; (8000c88 <LoopFillZerobss+0x1e>)
 8000c62:	2300      	movs	r3, #0
 8000c64:	e001      	b.n	8000c6a <LoopFillZerobss>

08000c66 <FillZerobss>:
 8000c66:	6013      	str	r3, [r2, #0]
 8000c68:	3204      	adds	r2, #4

08000c6a <LoopFillZerobss>:
 8000c6a:	42a2      	cmp	r2, r4
 8000c6c:	d3fb      	bcc.n	8000c66 <FillZerobss>
 8000c6e:	f001 ff63 	bl	8002b38 <__libc_init_array>
 8000c72:	f7ff fe69 	bl	8000948 <main>
 8000c76:	4770      	bx	lr
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	20000040 	.word	0x20000040
 8000c80:	08002bdc 	.word	0x08002bdc
 8000c84:	20000040 	.word	0x20000040
 8000c88:	20000200 	.word	0x20000200

08000c8c <ADC1_2_IRQHandler>:
 8000c8c:	e7fe      	b.n	8000c8c <ADC1_2_IRQHandler>
	...

08000c90 <HAL_Init>:
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <HAL_Init+0x28>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a07      	ldr	r2, [pc, #28]	; (8000cb8 <HAL_Init+0x28>)
 8000c9a:	f043 0310 	orr.w	r3, r3, #16
 8000c9e:	6013      	str	r3, [r2, #0]
 8000ca0:	2003      	movs	r0, #3
 8000ca2:	f000 f91d 	bl	8000ee0 <HAL_NVIC_SetPriorityGrouping>
 8000ca6:	200f      	movs	r0, #15
 8000ca8:	f000 f808 	bl	8000cbc <HAL_InitTick>
 8000cac:	f7ff fea2 	bl	80009f4 <HAL_MspInit>
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40022000 	.word	0x40022000

08000cbc <HAL_InitTick>:
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <HAL_InitTick+0x54>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <HAL_InitTick+0x58>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	4619      	mov	r1, r3
 8000cce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 f92b 	bl	8000f36 <HAL_SYSTICK_Config>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <HAL_InitTick+0x2e>
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e00e      	b.n	8000d08 <HAL_InitTick+0x4c>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2b0f      	cmp	r3, #15
 8000cee:	d80a      	bhi.n	8000d06 <HAL_InitTick+0x4a>
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	6879      	ldr	r1, [r7, #4]
 8000cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf8:	f000 f8fd 	bl	8000ef6 <HAL_NVIC_SetPriority>
 8000cfc:	4a06      	ldr	r2, [pc, #24]	; (8000d18 <HAL_InitTick+0x5c>)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6013      	str	r3, [r2, #0]
 8000d02:	2300      	movs	r3, #0
 8000d04:	e000      	b.n	8000d08 <HAL_InitTick+0x4c>
 8000d06:	2301      	movs	r3, #1
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000034 	.word	0x20000034
 8000d14:	2000003c 	.word	0x2000003c
 8000d18:	20000038 	.word	0x20000038

08000d1c <HAL_IncTick>:
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	4b05      	ldr	r3, [pc, #20]	; (8000d38 <HAL_IncTick+0x1c>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	461a      	mov	r2, r3
 8000d26:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <HAL_IncTick+0x20>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	4a03      	ldr	r2, [pc, #12]	; (8000d3c <HAL_IncTick+0x20>)
 8000d2e:	6013      	str	r3, [r2, #0]
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr
 8000d38:	2000003c 	.word	0x2000003c
 8000d3c:	200001dc 	.word	0x200001dc

08000d40 <HAL_GetTick>:
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	4b02      	ldr	r3, [pc, #8]	; (8000d50 <HAL_GetTick+0x10>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr
 8000d50:	200001dc 	.word	0x200001dc

08000d54 <__NVIC_SetPriorityGrouping>:
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <__NVIC_SetPriorityGrouping+0x44>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	60bb      	str	r3, [r7, #8]
 8000d6a:	68ba      	ldr	r2, [r7, #8]
 8000d6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d70:	4013      	ands	r3, r2
 8000d72:	60bb      	str	r3, [r7, #8]
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	021a      	lsls	r2, r3, #8
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	4a04      	ldr	r2, [pc, #16]	; (8000d98 <__NVIC_SetPriorityGrouping+0x44>)
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	60d3      	str	r3, [r2, #12]
 8000d8c:	bf00      	nop
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bc80      	pop	{r7}
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <__NVIC_GetPriorityGrouping>:
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <__NVIC_GetPriorityGrouping+0x18>)
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	0a1b      	lsrs	r3, r3, #8
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	4618      	mov	r0, r3
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bc80      	pop	{r7}
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <__NVIC_SetPriority>:
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	6039      	str	r1, [r7, #0]
 8000dc2:	71fb      	strb	r3, [r7, #7]
 8000dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	db0a      	blt.n	8000de2 <__NVIC_SetPriority+0x2a>
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	490c      	ldr	r1, [pc, #48]	; (8000e04 <__NVIC_SetPriority+0x4c>)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	0112      	lsls	r2, r2, #4
 8000dd8:	b2d2      	uxtb	r2, r2
 8000dda:	440b      	add	r3, r1
 8000ddc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8000de0:	e00a      	b.n	8000df8 <__NVIC_SetPriority+0x40>
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	4908      	ldr	r1, [pc, #32]	; (8000e08 <__NVIC_SetPriority+0x50>)
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	f003 030f 	and.w	r3, r3, #15
 8000dee:	3b04      	subs	r3, #4
 8000df0:	0112      	lsls	r2, r2, #4
 8000df2:	b2d2      	uxtb	r2, r2
 8000df4:	440b      	add	r3, r1
 8000df6:	761a      	strb	r2, [r3, #24]
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bc80      	pop	{r7}
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	e000e100 	.word	0xe000e100
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <NVIC_EncodePriority>:
 8000e0c:	b480      	push	{r7}
 8000e0e:	b089      	sub	sp, #36	; 0x24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	61fb      	str	r3, [r7, #28]
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	f1c3 0307 	rsb	r3, r3, #7
 8000e26:	2b04      	cmp	r3, #4
 8000e28:	bf28      	it	cs
 8000e2a:	2304      	movcs	r3, #4
 8000e2c:	61bb      	str	r3, [r7, #24]
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3304      	adds	r3, #4
 8000e32:	2b06      	cmp	r3, #6
 8000e34:	d902      	bls.n	8000e3c <NVIC_EncodePriority+0x30>
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3b03      	subs	r3, #3
 8000e3a:	e000      	b.n	8000e3e <NVIC_EncodePriority+0x32>
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	f04f 32ff 	mov.w	r2, #4294967295
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	43da      	mvns	r2, r3
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	401a      	ands	r2, r3
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	409a      	lsls	r2, r3
 8000e54:	f04f 31ff 	mov.w	r1, #4294967295
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5e:	43d9      	mvns	r1, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	400b      	ands	r3, r1
 8000e64:	4313      	orrs	r3, r2
 8000e66:	4618      	mov	r0, r3
 8000e68:	3724      	adds	r7, #36	; 0x24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr

08000e70 <__NVIC_SystemReset>:
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	f3bf 8f4f 	dsb	sy
 8000e78:	bf00      	nop
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <__NVIC_SystemReset+0x24>)
 8000e7c:	68db      	ldr	r3, [r3, #12]
 8000e7e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000e82:	4904      	ldr	r1, [pc, #16]	; (8000e94 <__NVIC_SystemReset+0x24>)
 8000e84:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <__NVIC_SystemReset+0x28>)
 8000e86:	4313      	orrs	r3, r2
 8000e88:	60cb      	str	r3, [r1, #12]
 8000e8a:	f3bf 8f4f 	dsb	sy
 8000e8e:	bf00      	nop
 8000e90:	bf00      	nop
 8000e92:	e7fd      	b.n	8000e90 <__NVIC_SystemReset+0x20>
 8000e94:	e000ed00 	.word	0xe000ed00
 8000e98:	05fa0004 	.word	0x05fa0004

08000e9c <SysTick_Config>:
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eac:	d301      	bcc.n	8000eb2 <SysTick_Config+0x16>
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e00f      	b.n	8000ed2 <SysTick_Config+0x36>
 8000eb2:	4a0a      	ldr	r2, [pc, #40]	; (8000edc <SysTick_Config+0x40>)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	6053      	str	r3, [r2, #4]
 8000eba:	210f      	movs	r1, #15
 8000ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec0:	f7ff ff7a 	bl	8000db8 <__NVIC_SetPriority>
 8000ec4:	4b05      	ldr	r3, [pc, #20]	; (8000edc <SysTick_Config+0x40>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
 8000eca:	4b04      	ldr	r3, [pc, #16]	; (8000edc <SysTick_Config+0x40>)
 8000ecc:	2207      	movs	r2, #7
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	e000e010 	.word	0xe000e010

08000ee0 <HAL_NVIC_SetPriorityGrouping>:
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f7ff ff33 	bl	8000d54 <__NVIC_SetPriorityGrouping>
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_NVIC_SetPriority>:
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b086      	sub	sp, #24
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	4603      	mov	r3, r0
 8000efe:	60b9      	str	r1, [r7, #8]
 8000f00:	607a      	str	r2, [r7, #4]
 8000f02:	73fb      	strb	r3, [r7, #15]
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
 8000f08:	f7ff ff48 	bl	8000d9c <__NVIC_GetPriorityGrouping>
 8000f0c:	6178      	str	r0, [r7, #20]
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	68b9      	ldr	r1, [r7, #8]
 8000f12:	6978      	ldr	r0, [r7, #20]
 8000f14:	f7ff ff7a 	bl	8000e0c <NVIC_EncodePriority>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ff49 	bl	8000db8 <__NVIC_SetPriority>
 8000f26:	bf00      	nop
 8000f28:	3718      	adds	r7, #24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_NVIC_SystemReset>:
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	f7ff ff9d 	bl	8000e70 <__NVIC_SystemReset>

08000f36 <HAL_SYSTICK_Config>:
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b082      	sub	sp, #8
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f7ff ffac 	bl	8000e9c <SysTick_Config>
 8000f44:	4603      	mov	r3, r0
 8000f46:	4618      	mov	r0, r3
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_CRC_Init>:
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d101      	bne.n	8000f60 <HAL_CRC_Init+0x12>
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e00e      	b.n	8000f7e <HAL_CRC_Init+0x30>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	795b      	ldrb	r3, [r3, #5]
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d105      	bne.n	8000f76 <HAL_CRC_Init+0x28>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	711a      	strb	r2, [r3, #4]
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f7ff fca9 	bl	80008c8 <HAL_CRC_MspInit>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2201      	movs	r2, #1
 8000f7a:	715a      	strb	r2, [r3, #5]
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <HAL_FLASH_Program>:
 8000f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f8a:	b087      	sub	sp, #28
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	e9c7 2300 	strd	r2, r3, [r7]
 8000f96:	2301      	movs	r3, #1
 8000f98:	75fb      	strb	r3, [r7, #23]
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	75bb      	strb	r3, [r7, #22]
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	757b      	strb	r3, [r7, #21]
 8000fa2:	4b2f      	ldr	r3, [pc, #188]	; (8001060 <HAL_FLASH_Program+0xd8>)
 8000fa4:	7e1b      	ldrb	r3, [r3, #24]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d101      	bne.n	8000fae <HAL_FLASH_Program+0x26>
 8000faa:	2302      	movs	r3, #2
 8000fac:	e054      	b.n	8001058 <HAL_FLASH_Program+0xd0>
 8000fae:	4b2c      	ldr	r3, [pc, #176]	; (8001060 <HAL_FLASH_Program+0xd8>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	761a      	strb	r2, [r3, #24]
 8000fb4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000fb8:	f000 f8da 	bl	8001170 <FLASH_WaitForLastOperation>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	75fb      	strb	r3, [r7, #23]
 8000fc0:	7dfb      	ldrb	r3, [r7, #23]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d144      	bne.n	8001050 <HAL_FLASH_Program+0xc8>
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d102      	bne.n	8000fd2 <HAL_FLASH_Program+0x4a>
 8000fcc:	2301      	movs	r3, #1
 8000fce:	757b      	strb	r3, [r7, #21]
 8000fd0:	e007      	b.n	8000fe2 <HAL_FLASH_Program+0x5a>
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d102      	bne.n	8000fde <HAL_FLASH_Program+0x56>
 8000fd8:	2302      	movs	r3, #2
 8000fda:	757b      	strb	r3, [r7, #21]
 8000fdc:	e001      	b.n	8000fe2 <HAL_FLASH_Program+0x5a>
 8000fde:	2304      	movs	r3, #4
 8000fe0:	757b      	strb	r3, [r7, #21]
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	75bb      	strb	r3, [r7, #22]
 8000fe6:	e02d      	b.n	8001044 <HAL_FLASH_Program+0xbc>
 8000fe8:	7dbb      	ldrb	r3, [r7, #22]
 8000fea:	005a      	lsls	r2, r3, #1
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	eb02 0c03 	add.w	ip, r2, r3
 8000ff2:	7dbb      	ldrb	r3, [r7, #22]
 8000ff4:	0119      	lsls	r1, r3, #4
 8000ff6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ffa:	f1c1 0620 	rsb	r6, r1, #32
 8000ffe:	f1a1 0020 	sub.w	r0, r1, #32
 8001002:	fa22 f401 	lsr.w	r4, r2, r1
 8001006:	fa03 f606 	lsl.w	r6, r3, r6
 800100a:	4334      	orrs	r4, r6
 800100c:	fa23 f000 	lsr.w	r0, r3, r0
 8001010:	4304      	orrs	r4, r0
 8001012:	fa23 f501 	lsr.w	r5, r3, r1
 8001016:	b2a3      	uxth	r3, r4
 8001018:	4619      	mov	r1, r3
 800101a:	4660      	mov	r0, ip
 800101c:	f000 f88c 	bl	8001138 <FLASH_Program_HalfWord>
 8001020:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001024:	f000 f8a4 	bl	8001170 <FLASH_WaitForLastOperation>
 8001028:	4603      	mov	r3, r0
 800102a:	75fb      	strb	r3, [r7, #23]
 800102c:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <HAL_FLASH_Program+0xdc>)
 800102e:	691b      	ldr	r3, [r3, #16]
 8001030:	4a0c      	ldr	r2, [pc, #48]	; (8001064 <HAL_FLASH_Program+0xdc>)
 8001032:	f023 0301 	bic.w	r3, r3, #1
 8001036:	6113      	str	r3, [r2, #16]
 8001038:	7dfb      	ldrb	r3, [r7, #23]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d107      	bne.n	800104e <HAL_FLASH_Program+0xc6>
 800103e:	7dbb      	ldrb	r3, [r7, #22]
 8001040:	3301      	adds	r3, #1
 8001042:	75bb      	strb	r3, [r7, #22]
 8001044:	7dba      	ldrb	r2, [r7, #22]
 8001046:	7d7b      	ldrb	r3, [r7, #21]
 8001048:	429a      	cmp	r2, r3
 800104a:	d3cd      	bcc.n	8000fe8 <HAL_FLASH_Program+0x60>
 800104c:	e000      	b.n	8001050 <HAL_FLASH_Program+0xc8>
 800104e:	bf00      	nop
 8001050:	4b03      	ldr	r3, [pc, #12]	; (8001060 <HAL_FLASH_Program+0xd8>)
 8001052:	2200      	movs	r2, #0
 8001054:	761a      	strb	r2, [r3, #24]
 8001056:	7dfb      	ldrb	r3, [r7, #23]
 8001058:	4618      	mov	r0, r3
 800105a:	371c      	adds	r7, #28
 800105c:	46bd      	mov	sp, r7
 800105e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001060:	200001e0 	.word	0x200001e0
 8001064:	40022000 	.word	0x40022000

08001068 <HAL_FLASH_Unlock>:
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	2300      	movs	r3, #0
 8001070:	71fb      	strb	r3, [r7, #7]
 8001072:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <HAL_FLASH_Unlock+0x40>)
 8001074:	691b      	ldr	r3, [r3, #16]
 8001076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800107a:	2b00      	cmp	r3, #0
 800107c:	d00d      	beq.n	800109a <HAL_FLASH_Unlock+0x32>
 800107e:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <HAL_FLASH_Unlock+0x40>)
 8001080:	4a0a      	ldr	r2, [pc, #40]	; (80010ac <HAL_FLASH_Unlock+0x44>)
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <HAL_FLASH_Unlock+0x40>)
 8001086:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <HAL_FLASH_Unlock+0x48>)
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <HAL_FLASH_Unlock+0x40>)
 800108c:	691b      	ldr	r3, [r3, #16]
 800108e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <HAL_FLASH_Unlock+0x32>
 8001096:	2301      	movs	r3, #1
 8001098:	71fb      	strb	r3, [r7, #7]
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	4618      	mov	r0, r3
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40022000 	.word	0x40022000
 80010ac:	45670123 	.word	0x45670123
 80010b0:	cdef89ab 	.word	0xcdef89ab

080010b4 <HAL_FLASH_Lock>:
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <HAL_FLASH_Lock+0x1c>)
 80010ba:	691b      	ldr	r3, [r3, #16]
 80010bc:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <HAL_FLASH_Lock+0x1c>)
 80010be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c2:	6113      	str	r3, [r2, #16]
 80010c4:	2300      	movs	r3, #0
 80010c6:	4618      	mov	r0, r3
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bc80      	pop	{r7}
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	40022000 	.word	0x40022000

080010d4 <HAL_FLASH_OB_Unlock>:
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	4b09      	ldr	r3, [pc, #36]	; (8001100 <HAL_FLASH_OB_Unlock+0x2c>)
 80010da:	691b      	ldr	r3, [r3, #16]
 80010dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d107      	bne.n	80010f4 <HAL_FLASH_OB_Unlock+0x20>
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_FLASH_OB_Unlock+0x2c>)
 80010e6:	4a07      	ldr	r2, [pc, #28]	; (8001104 <HAL_FLASH_OB_Unlock+0x30>)
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	4b05      	ldr	r3, [pc, #20]	; (8001100 <HAL_FLASH_OB_Unlock+0x2c>)
 80010ec:	4a06      	ldr	r2, [pc, #24]	; (8001108 <HAL_FLASH_OB_Unlock+0x34>)
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	2300      	movs	r3, #0
 80010f2:	e000      	b.n	80010f6 <HAL_FLASH_OB_Unlock+0x22>
 80010f4:	2301      	movs	r3, #1
 80010f6:	4618      	mov	r0, r3
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bc80      	pop	{r7}
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	40022000 	.word	0x40022000
 8001104:	45670123 	.word	0x45670123
 8001108:	cdef89ab 	.word	0xcdef89ab

0800110c <HAL_FLASH_OB_Lock>:
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <HAL_FLASH_OB_Lock+0x1c>)
 8001112:	691b      	ldr	r3, [r3, #16]
 8001114:	4a04      	ldr	r2, [pc, #16]	; (8001128 <HAL_FLASH_OB_Lock+0x1c>)
 8001116:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800111a:	6113      	str	r3, [r2, #16]
 800111c:	2300      	movs	r3, #0
 800111e:	4618      	mov	r0, r3
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	40022000 	.word	0x40022000

0800112c <HAL_FLASH_OB_Launch>:
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
 8001130:	f7ff fefd 	bl	8000f2e <HAL_NVIC_SystemReset>
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}

08001138 <FLASH_Program_HalfWord>:
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	460b      	mov	r3, r1
 8001142:	807b      	strh	r3, [r7, #2]
 8001144:	4b08      	ldr	r3, [pc, #32]	; (8001168 <FLASH_Program_HalfWord+0x30>)
 8001146:	2200      	movs	r2, #0
 8001148:	61da      	str	r2, [r3, #28]
 800114a:	4b08      	ldr	r3, [pc, #32]	; (800116c <FLASH_Program_HalfWord+0x34>)
 800114c:	691b      	ldr	r3, [r3, #16]
 800114e:	4a07      	ldr	r2, [pc, #28]	; (800116c <FLASH_Program_HalfWord+0x34>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6113      	str	r3, [r2, #16]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	887a      	ldrh	r2, [r7, #2]
 800115a:	801a      	strh	r2, [r3, #0]
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	200001e0 	.word	0x200001e0
 800116c:	40022000 	.word	0x40022000

08001170 <FLASH_WaitForLastOperation>:
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	f7ff fde2 	bl	8000d40 <HAL_GetTick>
 800117c:	60f8      	str	r0, [r7, #12]
 800117e:	e010      	b.n	80011a2 <FLASH_WaitForLastOperation+0x32>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001186:	d00c      	beq.n	80011a2 <FLASH_WaitForLastOperation+0x32>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d007      	beq.n	800119e <FLASH_WaitForLastOperation+0x2e>
 800118e:	f7ff fdd7 	bl	8000d40 <HAL_GetTick>
 8001192:	4602      	mov	r2, r0
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	429a      	cmp	r2, r3
 800119c:	d201      	bcs.n	80011a2 <FLASH_WaitForLastOperation+0x32>
 800119e:	2303      	movs	r3, #3
 80011a0:	e025      	b.n	80011ee <FLASH_WaitForLastOperation+0x7e>
 80011a2:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <FLASH_WaitForLastOperation+0x88>)
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1e8      	bne.n	8001180 <FLASH_WaitForLastOperation+0x10>
 80011ae:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <FLASH_WaitForLastOperation+0x88>)
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	f003 0320 	and.w	r3, r3, #32
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d002      	beq.n	80011c0 <FLASH_WaitForLastOperation+0x50>
 80011ba:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <FLASH_WaitForLastOperation+0x88>)
 80011bc:	2220      	movs	r2, #32
 80011be:	60da      	str	r2, [r3, #12]
 80011c0:	4b0d      	ldr	r3, [pc, #52]	; (80011f8 <FLASH_WaitForLastOperation+0x88>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	f003 0310 	and.w	r3, r3, #16
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d10b      	bne.n	80011e4 <FLASH_WaitForLastOperation+0x74>
 80011cc:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <FLASH_WaitForLastOperation+0x88>)
 80011ce:	69db      	ldr	r3, [r3, #28]
 80011d0:	f003 0301 	and.w	r3, r3, #1
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d105      	bne.n	80011e4 <FLASH_WaitForLastOperation+0x74>
 80011d8:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <FLASH_WaitForLastOperation+0x88>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	f003 0304 	and.w	r3, r3, #4
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d003      	beq.n	80011ec <FLASH_WaitForLastOperation+0x7c>
 80011e4:	f000 f80a 	bl	80011fc <FLASH_SetErrorCode>
 80011e8:	2301      	movs	r3, #1
 80011ea:	e000      	b.n	80011ee <FLASH_WaitForLastOperation+0x7e>
 80011ec:	2300      	movs	r3, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40022000 	.word	0x40022000

080011fc <FLASH_SetErrorCode>:
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	2300      	movs	r3, #0
 8001204:	607b      	str	r3, [r7, #4]
 8001206:	4b23      	ldr	r3, [pc, #140]	; (8001294 <FLASH_SetErrorCode+0x98>)
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	f003 0310 	and.w	r3, r3, #16
 800120e:	2b00      	cmp	r3, #0
 8001210:	d009      	beq.n	8001226 <FLASH_SetErrorCode+0x2a>
 8001212:	4b21      	ldr	r3, [pc, #132]	; (8001298 <FLASH_SetErrorCode+0x9c>)
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	f043 0302 	orr.w	r3, r3, #2
 800121a:	4a1f      	ldr	r2, [pc, #124]	; (8001298 <FLASH_SetErrorCode+0x9c>)
 800121c:	61d3      	str	r3, [r2, #28]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f043 0310 	orr.w	r3, r3, #16
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <FLASH_SetErrorCode+0x98>)
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	f003 0304 	and.w	r3, r3, #4
 800122e:	2b00      	cmp	r3, #0
 8001230:	d009      	beq.n	8001246 <FLASH_SetErrorCode+0x4a>
 8001232:	4b19      	ldr	r3, [pc, #100]	; (8001298 <FLASH_SetErrorCode+0x9c>)
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	f043 0301 	orr.w	r3, r3, #1
 800123a:	4a17      	ldr	r2, [pc, #92]	; (8001298 <FLASH_SetErrorCode+0x9c>)
 800123c:	61d3      	str	r3, [r2, #28]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f043 0304 	orr.w	r3, r3, #4
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	4b13      	ldr	r3, [pc, #76]	; (8001294 <FLASH_SetErrorCode+0x98>)
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b00      	cmp	r3, #0
 8001250:	d00b      	beq.n	800126a <FLASH_SetErrorCode+0x6e>
 8001252:	4b11      	ldr	r3, [pc, #68]	; (8001298 <FLASH_SetErrorCode+0x9c>)
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	f043 0304 	orr.w	r3, r3, #4
 800125a:	4a0f      	ldr	r2, [pc, #60]	; (8001298 <FLASH_SetErrorCode+0x9c>)
 800125c:	61d3      	str	r3, [r2, #28]
 800125e:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <FLASH_SetErrorCode+0x98>)
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	4a0c      	ldr	r2, [pc, #48]	; (8001294 <FLASH_SetErrorCode+0x98>)
 8001264:	f023 0301 	bic.w	r3, r3, #1
 8001268:	61d3      	str	r3, [r2, #28]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f240 1201 	movw	r2, #257	; 0x101
 8001270:	4293      	cmp	r3, r2
 8001272:	d106      	bne.n	8001282 <FLASH_SetErrorCode+0x86>
 8001274:	4b07      	ldr	r3, [pc, #28]	; (8001294 <FLASH_SetErrorCode+0x98>)
 8001276:	69db      	ldr	r3, [r3, #28]
 8001278:	4a06      	ldr	r2, [pc, #24]	; (8001294 <FLASH_SetErrorCode+0x98>)
 800127a:	f023 0301 	bic.w	r3, r3, #1
 800127e:	61d3      	str	r3, [r2, #28]
 8001280:	e002      	b.n	8001288 <FLASH_SetErrorCode+0x8c>
 8001282:	4a04      	ldr	r2, [pc, #16]	; (8001294 <FLASH_SetErrorCode+0x98>)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	60d3      	str	r3, [r2, #12]
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	40022000 	.word	0x40022000
 8001298:	200001e0 	.word	0x200001e0

0800129c <HAL_FLASHEx_Erase>:
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
 80012a6:	2301      	movs	r3, #1
 80012a8:	73fb      	strb	r3, [r7, #15]
 80012aa:	2300      	movs	r3, #0
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	4b2f      	ldr	r3, [pc, #188]	; (800136c <HAL_FLASHEx_Erase+0xd0>)
 80012b0:	7e1b      	ldrb	r3, [r3, #24]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d101      	bne.n	80012ba <HAL_FLASHEx_Erase+0x1e>
 80012b6:	2302      	movs	r3, #2
 80012b8:	e053      	b.n	8001362 <HAL_FLASHEx_Erase+0xc6>
 80012ba:	4b2c      	ldr	r3, [pc, #176]	; (800136c <HAL_FLASHEx_Erase+0xd0>)
 80012bc:	2201      	movs	r2, #1
 80012be:	761a      	strb	r2, [r3, #24]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d116      	bne.n	80012f6 <HAL_FLASHEx_Erase+0x5a>
 80012c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012cc:	f7ff ff50 	bl	8001170 <FLASH_WaitForLastOperation>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d141      	bne.n	800135a <HAL_FLASHEx_Erase+0xbe>
 80012d6:	2001      	movs	r0, #1
 80012d8:	f000 f926 	bl	8001528 <FLASH_MassErase>
 80012dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012e0:	f7ff ff46 	bl	8001170 <FLASH_WaitForLastOperation>
 80012e4:	4603      	mov	r3, r0
 80012e6:	73fb      	strb	r3, [r7, #15]
 80012e8:	4b21      	ldr	r3, [pc, #132]	; (8001370 <HAL_FLASHEx_Erase+0xd4>)
 80012ea:	691b      	ldr	r3, [r3, #16]
 80012ec:	4a20      	ldr	r2, [pc, #128]	; (8001370 <HAL_FLASHEx_Erase+0xd4>)
 80012ee:	f023 0304 	bic.w	r3, r3, #4
 80012f2:	6113      	str	r3, [r2, #16]
 80012f4:	e031      	b.n	800135a <HAL_FLASHEx_Erase+0xbe>
 80012f6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012fa:	f7ff ff39 	bl	8001170 <FLASH_WaitForLastOperation>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d12a      	bne.n	800135a <HAL_FLASHEx_Erase+0xbe>
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	f04f 32ff 	mov.w	r2, #4294967295
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	e019      	b.n	8001348 <HAL_FLASHEx_Erase+0xac>
 8001314:	68b8      	ldr	r0, [r7, #8]
 8001316:	f000 fb57 	bl	80019c8 <FLASH_PageErase>
 800131a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800131e:	f7ff ff27 	bl	8001170 <FLASH_WaitForLastOperation>
 8001322:	4603      	mov	r3, r0
 8001324:	73fb      	strb	r3, [r7, #15]
 8001326:	4b12      	ldr	r3, [pc, #72]	; (8001370 <HAL_FLASHEx_Erase+0xd4>)
 8001328:	691b      	ldr	r3, [r3, #16]
 800132a:	4a11      	ldr	r2, [pc, #68]	; (8001370 <HAL_FLASHEx_Erase+0xd4>)
 800132c:	f023 0302 	bic.w	r3, r3, #2
 8001330:	6113      	str	r3, [r2, #16]
 8001332:	7bfb      	ldrb	r3, [r7, #15]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d003      	beq.n	8001340 <HAL_FLASHEx_Erase+0xa4>
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	68ba      	ldr	r2, [r7, #8]
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	e00c      	b.n	800135a <HAL_FLASHEx_Erase+0xbe>
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	029a      	lsls	r2, r3, #10
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	4413      	add	r3, r2
 8001354:	68ba      	ldr	r2, [r7, #8]
 8001356:	429a      	cmp	r2, r3
 8001358:	d3dc      	bcc.n	8001314 <HAL_FLASHEx_Erase+0x78>
 800135a:	4b04      	ldr	r3, [pc, #16]	; (800136c <HAL_FLASHEx_Erase+0xd0>)
 800135c:	2200      	movs	r2, #0
 800135e:	761a      	strb	r2, [r3, #24]
 8001360:	7bfb      	ldrb	r3, [r7, #15]
 8001362:	4618      	mov	r0, r3
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200001e0 	.word	0x200001e0
 8001370:	40022000 	.word	0x40022000

08001374 <HAL_FLASHEx_OBErase>:
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	23a5      	movs	r3, #165	; 0xa5
 800137c:	71bb      	strb	r3, [r7, #6]
 800137e:	2301      	movs	r3, #1
 8001380:	71fb      	strb	r3, [r7, #7]
 8001382:	f000 faf5 	bl	8001970 <FLASH_OB_GetRDP>
 8001386:	4603      	mov	r3, r0
 8001388:	71bb      	strb	r3, [r7, #6]
 800138a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800138e:	f7ff feef 	bl	8001170 <FLASH_WaitForLastOperation>
 8001392:	4603      	mov	r3, r0
 8001394:	71fb      	strb	r3, [r7, #7]
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d123      	bne.n	80013e4 <HAL_FLASHEx_OBErase+0x70>
 800139c:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <HAL_FLASHEx_OBErase+0x7c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	61da      	str	r2, [r3, #28]
 80013a2:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <HAL_FLASHEx_OBErase+0x80>)
 80013a4:	691b      	ldr	r3, [r3, #16]
 80013a6:	4a13      	ldr	r2, [pc, #76]	; (80013f4 <HAL_FLASHEx_OBErase+0x80>)
 80013a8:	f043 0320 	orr.w	r3, r3, #32
 80013ac:	6113      	str	r3, [r2, #16]
 80013ae:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <HAL_FLASHEx_OBErase+0x80>)
 80013b0:	691b      	ldr	r3, [r3, #16]
 80013b2:	4a10      	ldr	r2, [pc, #64]	; (80013f4 <HAL_FLASHEx_OBErase+0x80>)
 80013b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013b8:	6113      	str	r3, [r2, #16]
 80013ba:	f24c 3050 	movw	r0, #50000	; 0xc350
 80013be:	f7ff fed7 	bl	8001170 <FLASH_WaitForLastOperation>
 80013c2:	4603      	mov	r3, r0
 80013c4:	71fb      	strb	r3, [r7, #7]
 80013c6:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <HAL_FLASHEx_OBErase+0x80>)
 80013c8:	691b      	ldr	r3, [r3, #16]
 80013ca:	4a0a      	ldr	r2, [pc, #40]	; (80013f4 <HAL_FLASHEx_OBErase+0x80>)
 80013cc:	f023 0320 	bic.w	r3, r3, #32
 80013d0:	6113      	str	r3, [r2, #16]
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d105      	bne.n	80013e4 <HAL_FLASHEx_OBErase+0x70>
 80013d8:	79bb      	ldrb	r3, [r7, #6]
 80013da:	4618      	mov	r0, r3
 80013dc:	f000 fa02 	bl	80017e4 <FLASH_OB_RDP_LevelConfig>
 80013e0:	4603      	mov	r3, r0
 80013e2:	71fb      	strb	r3, [r7, #7]
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	4618      	mov	r0, r3
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	200001e0 	.word	0x200001e0
 80013f4:	40022000 	.word	0x40022000

080013f8 <HAL_FLASHEx_OBProgram>:
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	2301      	movs	r3, #1
 8001402:	73fb      	strb	r3, [r7, #15]
 8001404:	4b39      	ldr	r3, [pc, #228]	; (80014ec <HAL_FLASHEx_OBProgram+0xf4>)
 8001406:	7e1b      	ldrb	r3, [r3, #24]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d101      	bne.n	8001410 <HAL_FLASHEx_OBProgram+0x18>
 800140c:	2302      	movs	r3, #2
 800140e:	e069      	b.n	80014e4 <HAL_FLASHEx_OBProgram+0xec>
 8001410:	4b36      	ldr	r3, [pc, #216]	; (80014ec <HAL_FLASHEx_OBProgram+0xf4>)
 8001412:	2201      	movs	r2, #1
 8001414:	761a      	strb	r2, [r3, #24]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	2b00      	cmp	r3, #0
 8001420:	d01a      	beq.n	8001458 <HAL_FLASHEx_OBProgram+0x60>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d107      	bne.n	800143a <HAL_FLASHEx_OBProgram+0x42>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	4618      	mov	r0, r3
 8001430:	f000 f896 	bl	8001560 <FLASH_OB_EnableWRP>
 8001434:	4603      	mov	r3, r0
 8001436:	73fb      	strb	r3, [r7, #15]
 8001438:	e006      	b.n	8001448 <HAL_FLASHEx_OBProgram+0x50>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	4618      	mov	r0, r3
 8001440:	f000 f930 	bl	80016a4 <FLASH_OB_DisableWRP>
 8001444:	4603      	mov	r3, r0
 8001446:	73fb      	strb	r3, [r7, #15]
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d004      	beq.n	8001458 <HAL_FLASHEx_OBProgram+0x60>
 800144e:	4b27      	ldr	r3, [pc, #156]	; (80014ec <HAL_FLASHEx_OBProgram+0xf4>)
 8001450:	2200      	movs	r2, #0
 8001452:	761a      	strb	r2, [r3, #24]
 8001454:	7bfb      	ldrb	r3, [r7, #15]
 8001456:	e045      	b.n	80014e4 <HAL_FLASHEx_OBProgram+0xec>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	2b00      	cmp	r3, #0
 8001462:	d00e      	beq.n	8001482 <HAL_FLASHEx_OBProgram+0x8a>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	7c1b      	ldrb	r3, [r3, #16]
 8001468:	4618      	mov	r0, r3
 800146a:	f000 f9bb 	bl	80017e4 <FLASH_OB_RDP_LevelConfig>
 800146e:	4603      	mov	r3, r0
 8001470:	73fb      	strb	r3, [r7, #15]
 8001472:	7bfb      	ldrb	r3, [r7, #15]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d004      	beq.n	8001482 <HAL_FLASHEx_OBProgram+0x8a>
 8001478:	4b1c      	ldr	r3, [pc, #112]	; (80014ec <HAL_FLASHEx_OBProgram+0xf4>)
 800147a:	2200      	movs	r2, #0
 800147c:	761a      	strb	r2, [r3, #24]
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	e030      	b.n	80014e4 <HAL_FLASHEx_OBProgram+0xec>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0304 	and.w	r3, r3, #4
 800148a:	2b00      	cmp	r3, #0
 800148c:	d00e      	beq.n	80014ac <HAL_FLASHEx_OBProgram+0xb4>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	7c5b      	ldrb	r3, [r3, #17]
 8001492:	4618      	mov	r0, r3
 8001494:	f000 f9f6 	bl	8001884 <FLASH_OB_UserConfig>
 8001498:	4603      	mov	r3, r0
 800149a:	73fb      	strb	r3, [r7, #15]
 800149c:	7bfb      	ldrb	r3, [r7, #15]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d004      	beq.n	80014ac <HAL_FLASHEx_OBProgram+0xb4>
 80014a2:	4b12      	ldr	r3, [pc, #72]	; (80014ec <HAL_FLASHEx_OBProgram+0xf4>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	761a      	strb	r2, [r3, #24]
 80014a8:	7bfb      	ldrb	r3, [r7, #15]
 80014aa:	e01b      	b.n	80014e4 <HAL_FLASHEx_OBProgram+0xec>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0308 	and.w	r3, r3, #8
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d011      	beq.n	80014dc <HAL_FLASHEx_OBProgram+0xe4>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	695a      	ldr	r2, [r3, #20]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	7e1b      	ldrb	r3, [r3, #24]
 80014c0:	4619      	mov	r1, r3
 80014c2:	4610      	mov	r0, r2
 80014c4:	f000 fa16 	bl	80018f4 <FLASH_OB_ProgramData>
 80014c8:	4603      	mov	r3, r0
 80014ca:	73fb      	strb	r3, [r7, #15]
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d004      	beq.n	80014dc <HAL_FLASHEx_OBProgram+0xe4>
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <HAL_FLASHEx_OBProgram+0xf4>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	761a      	strb	r2, [r3, #24]
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	e003      	b.n	80014e4 <HAL_FLASHEx_OBProgram+0xec>
 80014dc:	4b03      	ldr	r3, [pc, #12]	; (80014ec <HAL_FLASHEx_OBProgram+0xf4>)
 80014de:	2200      	movs	r2, #0
 80014e0:	761a      	strb	r2, [r3, #24]
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
 80014e4:	4618      	mov	r0, r3
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	200001e0 	.word	0x200001e0

080014f0 <HAL_FLASHEx_OBGetConfig>:
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2207      	movs	r2, #7
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	f000 fa2d 	bl	800195c <FLASH_OB_GetWRP>
 8001502:	4602      	mov	r2, r0
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	f000 fa32 	bl	8001970 <FLASH_OB_GetRDP>
 800150c:	4603      	mov	r3, r0
 800150e:	b2da      	uxtb	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	741a      	strb	r2, [r3, #16]
 8001514:	f000 fa48 	bl	80019a8 <FLASH_OB_GetUser>
 8001518:	4603      	mov	r3, r0
 800151a:	461a      	mov	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	745a      	strb	r2, [r3, #17]
 8001520:	bf00      	nop
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <FLASH_MassErase>:
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	4b09      	ldr	r3, [pc, #36]	; (8001558 <FLASH_MassErase+0x30>)
 8001532:	2200      	movs	r2, #0
 8001534:	61da      	str	r2, [r3, #28]
 8001536:	4b09      	ldr	r3, [pc, #36]	; (800155c <FLASH_MassErase+0x34>)
 8001538:	691b      	ldr	r3, [r3, #16]
 800153a:	4a08      	ldr	r2, [pc, #32]	; (800155c <FLASH_MassErase+0x34>)
 800153c:	f043 0304 	orr.w	r3, r3, #4
 8001540:	6113      	str	r3, [r2, #16]
 8001542:	4b06      	ldr	r3, [pc, #24]	; (800155c <FLASH_MassErase+0x34>)
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	4a05      	ldr	r2, [pc, #20]	; (800155c <FLASH_MassErase+0x34>)
 8001548:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800154c:	6113      	str	r3, [r2, #16]
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr
 8001558:	200001e0 	.word	0x200001e0
 800155c:	40022000 	.word	0x40022000

08001560 <FLASH_OB_EnableWRP>:
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	2300      	movs	r3, #0
 800156a:	75fb      	strb	r3, [r7, #23]
 800156c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001570:	82bb      	strh	r3, [r7, #20]
 8001572:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001576:	827b      	strh	r3, [r7, #18]
 8001578:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800157c:	823b      	strh	r3, [r7, #16]
 800157e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001582:	81fb      	strh	r3, [r7, #14]
 8001584:	f000 f9ea 	bl	800195c <FLASH_OB_GetWRP>
 8001588:	4602      	mov	r2, r0
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	43db      	mvns	r3, r3
 800158e:	4013      	ands	r3, r2
 8001590:	607b      	str	r3, [r7, #4]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	b29b      	uxth	r3, r3
 8001596:	b2db      	uxtb	r3, r3
 8001598:	82bb      	strh	r3, [r7, #20]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	0a1b      	lsrs	r3, r3, #8
 800159e:	b29b      	uxth	r3, r3
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	827b      	strh	r3, [r7, #18]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	0c1b      	lsrs	r3, r3, #16
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	823b      	strh	r3, [r7, #16]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	0e1b      	lsrs	r3, r3, #24
 80015b2:	81fb      	strh	r3, [r7, #14]
 80015b4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80015b8:	f7ff fdda 	bl	8001170 <FLASH_WaitForLastOperation>
 80015bc:	4603      	mov	r3, r0
 80015be:	75fb      	strb	r3, [r7, #23]
 80015c0:	7dfb      	ldrb	r3, [r7, #23]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d162      	bne.n	800168c <FLASH_OB_EnableWRP+0x12c>
 80015c6:	4b34      	ldr	r3, [pc, #208]	; (8001698 <FLASH_OB_EnableWRP+0x138>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	61da      	str	r2, [r3, #28]
 80015cc:	f7ff fed2 	bl	8001374 <HAL_FLASHEx_OBErase>
 80015d0:	4603      	mov	r3, r0
 80015d2:	75fb      	strb	r3, [r7, #23]
 80015d4:	7dfb      	ldrb	r3, [r7, #23]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d158      	bne.n	800168c <FLASH_OB_EnableWRP+0x12c>
 80015da:	4b30      	ldr	r3, [pc, #192]	; (800169c <FLASH_OB_EnableWRP+0x13c>)
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	4a2f      	ldr	r2, [pc, #188]	; (800169c <FLASH_OB_EnableWRP+0x13c>)
 80015e0:	f043 0310 	orr.w	r3, r3, #16
 80015e4:	6113      	str	r3, [r2, #16]
 80015e6:	8abb      	ldrh	r3, [r7, #20]
 80015e8:	2bff      	cmp	r3, #255	; 0xff
 80015ea:	d00d      	beq.n	8001608 <FLASH_OB_EnableWRP+0xa8>
 80015ec:	4b2c      	ldr	r3, [pc, #176]	; (80016a0 <FLASH_OB_EnableWRP+0x140>)
 80015ee:	891b      	ldrh	r3, [r3, #8]
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	492b      	ldr	r1, [pc, #172]	; (80016a0 <FLASH_OB_EnableWRP+0x140>)
 80015f4:	8abb      	ldrh	r3, [r7, #20]
 80015f6:	4013      	ands	r3, r2
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	810b      	strh	r3, [r1, #8]
 80015fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001600:	f7ff fdb6 	bl	8001170 <FLASH_WaitForLastOperation>
 8001604:	4603      	mov	r3, r0
 8001606:	75fb      	strb	r3, [r7, #23]
 8001608:	7dfb      	ldrb	r3, [r7, #23]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d110      	bne.n	8001630 <FLASH_OB_EnableWRP+0xd0>
 800160e:	8a7b      	ldrh	r3, [r7, #18]
 8001610:	2bff      	cmp	r3, #255	; 0xff
 8001612:	d00d      	beq.n	8001630 <FLASH_OB_EnableWRP+0xd0>
 8001614:	4b22      	ldr	r3, [pc, #136]	; (80016a0 <FLASH_OB_EnableWRP+0x140>)
 8001616:	895b      	ldrh	r3, [r3, #10]
 8001618:	b29a      	uxth	r2, r3
 800161a:	4921      	ldr	r1, [pc, #132]	; (80016a0 <FLASH_OB_EnableWRP+0x140>)
 800161c:	8a7b      	ldrh	r3, [r7, #18]
 800161e:	4013      	ands	r3, r2
 8001620:	b29b      	uxth	r3, r3
 8001622:	814b      	strh	r3, [r1, #10]
 8001624:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001628:	f7ff fda2 	bl	8001170 <FLASH_WaitForLastOperation>
 800162c:	4603      	mov	r3, r0
 800162e:	75fb      	strb	r3, [r7, #23]
 8001630:	7dfb      	ldrb	r3, [r7, #23]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d110      	bne.n	8001658 <FLASH_OB_EnableWRP+0xf8>
 8001636:	8a3b      	ldrh	r3, [r7, #16]
 8001638:	2bff      	cmp	r3, #255	; 0xff
 800163a:	d00d      	beq.n	8001658 <FLASH_OB_EnableWRP+0xf8>
 800163c:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <FLASH_OB_EnableWRP+0x140>)
 800163e:	899b      	ldrh	r3, [r3, #12]
 8001640:	b29a      	uxth	r2, r3
 8001642:	4917      	ldr	r1, [pc, #92]	; (80016a0 <FLASH_OB_EnableWRP+0x140>)
 8001644:	8a3b      	ldrh	r3, [r7, #16]
 8001646:	4013      	ands	r3, r2
 8001648:	b29b      	uxth	r3, r3
 800164a:	818b      	strh	r3, [r1, #12]
 800164c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001650:	f7ff fd8e 	bl	8001170 <FLASH_WaitForLastOperation>
 8001654:	4603      	mov	r3, r0
 8001656:	75fb      	strb	r3, [r7, #23]
 8001658:	7dfb      	ldrb	r3, [r7, #23]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d110      	bne.n	8001680 <FLASH_OB_EnableWRP+0x120>
 800165e:	89fb      	ldrh	r3, [r7, #14]
 8001660:	2bff      	cmp	r3, #255	; 0xff
 8001662:	d00d      	beq.n	8001680 <FLASH_OB_EnableWRP+0x120>
 8001664:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <FLASH_OB_EnableWRP+0x140>)
 8001666:	89db      	ldrh	r3, [r3, #14]
 8001668:	b29a      	uxth	r2, r3
 800166a:	490d      	ldr	r1, [pc, #52]	; (80016a0 <FLASH_OB_EnableWRP+0x140>)
 800166c:	89fb      	ldrh	r3, [r7, #14]
 800166e:	4013      	ands	r3, r2
 8001670:	b29b      	uxth	r3, r3
 8001672:	81cb      	strh	r3, [r1, #14]
 8001674:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001678:	f7ff fd7a 	bl	8001170 <FLASH_WaitForLastOperation>
 800167c:	4603      	mov	r3, r0
 800167e:	75fb      	strb	r3, [r7, #23]
 8001680:	4b06      	ldr	r3, [pc, #24]	; (800169c <FLASH_OB_EnableWRP+0x13c>)
 8001682:	691b      	ldr	r3, [r3, #16]
 8001684:	4a05      	ldr	r2, [pc, #20]	; (800169c <FLASH_OB_EnableWRP+0x13c>)
 8001686:	f023 0310 	bic.w	r3, r3, #16
 800168a:	6113      	str	r3, [r2, #16]
 800168c:	7dfb      	ldrb	r3, [r7, #23]
 800168e:	4618      	mov	r0, r3
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	200001e0 	.word	0x200001e0
 800169c:	40022000 	.word	0x40022000
 80016a0:	1ffff800 	.word	0x1ffff800

080016a4 <FLASH_OB_DisableWRP>:
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	2300      	movs	r3, #0
 80016ae:	75fb      	strb	r3, [r7, #23]
 80016b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016b4:	82bb      	strh	r3, [r7, #20]
 80016b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016ba:	827b      	strh	r3, [r7, #18]
 80016bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016c0:	823b      	strh	r3, [r7, #16]
 80016c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016c6:	81fb      	strh	r3, [r7, #14]
 80016c8:	f000 f948 	bl	800195c <FLASH_OB_GetWRP>
 80016cc:	4602      	mov	r2, r0
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	82bb      	strh	r3, [r7, #20]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	0a1b      	lsrs	r3, r3, #8
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	827b      	strh	r3, [r7, #18]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	0c1b      	lsrs	r3, r3, #16
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	823b      	strh	r3, [r7, #16]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	0e1b      	lsrs	r3, r3, #24
 80016f4:	81fb      	strh	r3, [r7, #14]
 80016f6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80016fa:	f7ff fd39 	bl	8001170 <FLASH_WaitForLastOperation>
 80016fe:	4603      	mov	r3, r0
 8001700:	75fb      	strb	r3, [r7, #23]
 8001702:	7dfb      	ldrb	r3, [r7, #23]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d162      	bne.n	80017ce <FLASH_OB_DisableWRP+0x12a>
 8001708:	4b33      	ldr	r3, [pc, #204]	; (80017d8 <FLASH_OB_DisableWRP+0x134>)
 800170a:	2200      	movs	r2, #0
 800170c:	61da      	str	r2, [r3, #28]
 800170e:	f7ff fe31 	bl	8001374 <HAL_FLASHEx_OBErase>
 8001712:	4603      	mov	r3, r0
 8001714:	75fb      	strb	r3, [r7, #23]
 8001716:	7dfb      	ldrb	r3, [r7, #23]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d158      	bne.n	80017ce <FLASH_OB_DisableWRP+0x12a>
 800171c:	4b2f      	ldr	r3, [pc, #188]	; (80017dc <FLASH_OB_DisableWRP+0x138>)
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	4a2e      	ldr	r2, [pc, #184]	; (80017dc <FLASH_OB_DisableWRP+0x138>)
 8001722:	f043 0310 	orr.w	r3, r3, #16
 8001726:	6113      	str	r3, [r2, #16]
 8001728:	8abb      	ldrh	r3, [r7, #20]
 800172a:	2bff      	cmp	r3, #255	; 0xff
 800172c:	d00d      	beq.n	800174a <FLASH_OB_DisableWRP+0xa6>
 800172e:	4b2c      	ldr	r3, [pc, #176]	; (80017e0 <FLASH_OB_DisableWRP+0x13c>)
 8001730:	891b      	ldrh	r3, [r3, #8]
 8001732:	b29a      	uxth	r2, r3
 8001734:	492a      	ldr	r1, [pc, #168]	; (80017e0 <FLASH_OB_DisableWRP+0x13c>)
 8001736:	8abb      	ldrh	r3, [r7, #20]
 8001738:	4313      	orrs	r3, r2
 800173a:	b29b      	uxth	r3, r3
 800173c:	810b      	strh	r3, [r1, #8]
 800173e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001742:	f7ff fd15 	bl	8001170 <FLASH_WaitForLastOperation>
 8001746:	4603      	mov	r3, r0
 8001748:	75fb      	strb	r3, [r7, #23]
 800174a:	7dfb      	ldrb	r3, [r7, #23]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d110      	bne.n	8001772 <FLASH_OB_DisableWRP+0xce>
 8001750:	8a7b      	ldrh	r3, [r7, #18]
 8001752:	2bff      	cmp	r3, #255	; 0xff
 8001754:	d00d      	beq.n	8001772 <FLASH_OB_DisableWRP+0xce>
 8001756:	4b22      	ldr	r3, [pc, #136]	; (80017e0 <FLASH_OB_DisableWRP+0x13c>)
 8001758:	895b      	ldrh	r3, [r3, #10]
 800175a:	b29a      	uxth	r2, r3
 800175c:	4920      	ldr	r1, [pc, #128]	; (80017e0 <FLASH_OB_DisableWRP+0x13c>)
 800175e:	8a7b      	ldrh	r3, [r7, #18]
 8001760:	4313      	orrs	r3, r2
 8001762:	b29b      	uxth	r3, r3
 8001764:	814b      	strh	r3, [r1, #10]
 8001766:	f24c 3050 	movw	r0, #50000	; 0xc350
 800176a:	f7ff fd01 	bl	8001170 <FLASH_WaitForLastOperation>
 800176e:	4603      	mov	r3, r0
 8001770:	75fb      	strb	r3, [r7, #23]
 8001772:	7dfb      	ldrb	r3, [r7, #23]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d110      	bne.n	800179a <FLASH_OB_DisableWRP+0xf6>
 8001778:	8a3b      	ldrh	r3, [r7, #16]
 800177a:	2bff      	cmp	r3, #255	; 0xff
 800177c:	d00d      	beq.n	800179a <FLASH_OB_DisableWRP+0xf6>
 800177e:	4b18      	ldr	r3, [pc, #96]	; (80017e0 <FLASH_OB_DisableWRP+0x13c>)
 8001780:	899b      	ldrh	r3, [r3, #12]
 8001782:	b29a      	uxth	r2, r3
 8001784:	4916      	ldr	r1, [pc, #88]	; (80017e0 <FLASH_OB_DisableWRP+0x13c>)
 8001786:	8a3b      	ldrh	r3, [r7, #16]
 8001788:	4313      	orrs	r3, r2
 800178a:	b29b      	uxth	r3, r3
 800178c:	818b      	strh	r3, [r1, #12]
 800178e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001792:	f7ff fced 	bl	8001170 <FLASH_WaitForLastOperation>
 8001796:	4603      	mov	r3, r0
 8001798:	75fb      	strb	r3, [r7, #23]
 800179a:	7dfb      	ldrb	r3, [r7, #23]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d110      	bne.n	80017c2 <FLASH_OB_DisableWRP+0x11e>
 80017a0:	89fb      	ldrh	r3, [r7, #14]
 80017a2:	2bff      	cmp	r3, #255	; 0xff
 80017a4:	d00d      	beq.n	80017c2 <FLASH_OB_DisableWRP+0x11e>
 80017a6:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <FLASH_OB_DisableWRP+0x13c>)
 80017a8:	89db      	ldrh	r3, [r3, #14]
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	490c      	ldr	r1, [pc, #48]	; (80017e0 <FLASH_OB_DisableWRP+0x13c>)
 80017ae:	89fb      	ldrh	r3, [r7, #14]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	81cb      	strh	r3, [r1, #14]
 80017b6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80017ba:	f7ff fcd9 	bl	8001170 <FLASH_WaitForLastOperation>
 80017be:	4603      	mov	r3, r0
 80017c0:	75fb      	strb	r3, [r7, #23]
 80017c2:	4b06      	ldr	r3, [pc, #24]	; (80017dc <FLASH_OB_DisableWRP+0x138>)
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	4a05      	ldr	r2, [pc, #20]	; (80017dc <FLASH_OB_DisableWRP+0x138>)
 80017c8:	f023 0310 	bic.w	r3, r3, #16
 80017cc:	6113      	str	r3, [r2, #16]
 80017ce:	7dfb      	ldrb	r3, [r7, #23]
 80017d0:	4618      	mov	r0, r3
 80017d2:	3718      	adds	r7, #24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	200001e0 	.word	0x200001e0
 80017dc:	40022000 	.word	0x40022000
 80017e0:	1ffff800 	.word	0x1ffff800

080017e4 <FLASH_OB_RDP_LevelConfig>:
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	71fb      	strb	r3, [r7, #7]
 80017ee:	2300      	movs	r3, #0
 80017f0:	73fb      	strb	r3, [r7, #15]
 80017f2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80017f6:	f7ff fcbb 	bl	8001170 <FLASH_WaitForLastOperation>
 80017fa:	4603      	mov	r3, r0
 80017fc:	73fb      	strb	r3, [r7, #15]
 80017fe:	7bfb      	ldrb	r3, [r7, #15]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d133      	bne.n	800186c <FLASH_OB_RDP_LevelConfig+0x88>
 8001804:	4b1c      	ldr	r3, [pc, #112]	; (8001878 <FLASH_OB_RDP_LevelConfig+0x94>)
 8001806:	2200      	movs	r2, #0
 8001808:	61da      	str	r2, [r3, #28]
 800180a:	4b1c      	ldr	r3, [pc, #112]	; (800187c <FLASH_OB_RDP_LevelConfig+0x98>)
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	4a1b      	ldr	r2, [pc, #108]	; (800187c <FLASH_OB_RDP_LevelConfig+0x98>)
 8001810:	f043 0320 	orr.w	r3, r3, #32
 8001814:	6113      	str	r3, [r2, #16]
 8001816:	4b19      	ldr	r3, [pc, #100]	; (800187c <FLASH_OB_RDP_LevelConfig+0x98>)
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	4a18      	ldr	r2, [pc, #96]	; (800187c <FLASH_OB_RDP_LevelConfig+0x98>)
 800181c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001820:	6113      	str	r3, [r2, #16]
 8001822:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001826:	f7ff fca3 	bl	8001170 <FLASH_WaitForLastOperation>
 800182a:	4603      	mov	r3, r0
 800182c:	73fb      	strb	r3, [r7, #15]
 800182e:	4b13      	ldr	r3, [pc, #76]	; (800187c <FLASH_OB_RDP_LevelConfig+0x98>)
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	4a12      	ldr	r2, [pc, #72]	; (800187c <FLASH_OB_RDP_LevelConfig+0x98>)
 8001834:	f023 0320 	bic.w	r3, r3, #32
 8001838:	6113      	str	r3, [r2, #16]
 800183a:	7bfb      	ldrb	r3, [r7, #15]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d115      	bne.n	800186c <FLASH_OB_RDP_LevelConfig+0x88>
 8001840:	4b0e      	ldr	r3, [pc, #56]	; (800187c <FLASH_OB_RDP_LevelConfig+0x98>)
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	4a0d      	ldr	r2, [pc, #52]	; (800187c <FLASH_OB_RDP_LevelConfig+0x98>)
 8001846:	f043 0310 	orr.w	r3, r3, #16
 800184a:	6113      	str	r3, [r2, #16]
 800184c:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <FLASH_OB_RDP_LevelConfig+0x9c>)
 800184e:	79fa      	ldrb	r2, [r7, #7]
 8001850:	b292      	uxth	r2, r2
 8001852:	801a      	strh	r2, [r3, #0]
 8001854:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001858:	f7ff fc8a 	bl	8001170 <FLASH_WaitForLastOperation>
 800185c:	4603      	mov	r3, r0
 800185e:	73fb      	strb	r3, [r7, #15]
 8001860:	4b06      	ldr	r3, [pc, #24]	; (800187c <FLASH_OB_RDP_LevelConfig+0x98>)
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	4a05      	ldr	r2, [pc, #20]	; (800187c <FLASH_OB_RDP_LevelConfig+0x98>)
 8001866:	f023 0310 	bic.w	r3, r3, #16
 800186a:	6113      	str	r3, [r2, #16]
 800186c:	7bfb      	ldrb	r3, [r7, #15]
 800186e:	4618      	mov	r0, r3
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	200001e0 	.word	0x200001e0
 800187c:	40022000 	.word	0x40022000
 8001880:	1ffff800 	.word	0x1ffff800

08001884 <FLASH_OB_UserConfig>:
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]
 800188e:	2300      	movs	r3, #0
 8001890:	73fb      	strb	r3, [r7, #15]
 8001892:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001896:	f7ff fc6b 	bl	8001170 <FLASH_WaitForLastOperation>
 800189a:	4603      	mov	r3, r0
 800189c:	73fb      	strb	r3, [r7, #15]
 800189e:	7bfb      	ldrb	r3, [r7, #15]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d11b      	bne.n	80018dc <FLASH_OB_UserConfig+0x58>
 80018a4:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <FLASH_OB_UserConfig+0x64>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	61da      	str	r2, [r3, #28]
 80018aa:	4b10      	ldr	r3, [pc, #64]	; (80018ec <FLASH_OB_UserConfig+0x68>)
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	4a0f      	ldr	r2, [pc, #60]	; (80018ec <FLASH_OB_UserConfig+0x68>)
 80018b0:	f043 0310 	orr.w	r3, r3, #16
 80018b4:	6113      	str	r3, [r2, #16]
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	f063 0377 	orn	r3, r3, #119	; 0x77
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <FLASH_OB_UserConfig+0x6c>)
 80018c0:	b292      	uxth	r2, r2
 80018c2:	805a      	strh	r2, [r3, #2]
 80018c4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80018c8:	f7ff fc52 	bl	8001170 <FLASH_WaitForLastOperation>
 80018cc:	4603      	mov	r3, r0
 80018ce:	73fb      	strb	r3, [r7, #15]
 80018d0:	4b06      	ldr	r3, [pc, #24]	; (80018ec <FLASH_OB_UserConfig+0x68>)
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	4a05      	ldr	r2, [pc, #20]	; (80018ec <FLASH_OB_UserConfig+0x68>)
 80018d6:	f023 0310 	bic.w	r3, r3, #16
 80018da:	6113      	str	r3, [r2, #16]
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
 80018de:	4618      	mov	r0, r3
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	200001e0 	.word	0x200001e0
 80018ec:	40022000 	.word	0x40022000
 80018f0:	1ffff800 	.word	0x1ffff800

080018f4 <FLASH_OB_ProgramData>:
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	460b      	mov	r3, r1
 80018fe:	70fb      	strb	r3, [r7, #3]
 8001900:	2301      	movs	r3, #1
 8001902:	73fb      	strb	r3, [r7, #15]
 8001904:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001908:	f7ff fc32 	bl	8001170 <FLASH_WaitForLastOperation>
 800190c:	4603      	mov	r3, r0
 800190e:	73fb      	strb	r3, [r7, #15]
 8001910:	7bfb      	ldrb	r3, [r7, #15]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d118      	bne.n	8001948 <FLASH_OB_ProgramData+0x54>
 8001916:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <FLASH_OB_ProgramData+0x60>)
 8001918:	2200      	movs	r2, #0
 800191a:	61da      	str	r2, [r3, #28]
 800191c:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <FLASH_OB_ProgramData+0x64>)
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	4a0d      	ldr	r2, [pc, #52]	; (8001958 <FLASH_OB_ProgramData+0x64>)
 8001922:	f043 0310 	orr.w	r3, r3, #16
 8001926:	6113      	str	r3, [r2, #16]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	78fa      	ldrb	r2, [r7, #3]
 800192c:	b292      	uxth	r2, r2
 800192e:	801a      	strh	r2, [r3, #0]
 8001930:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001934:	f7ff fc1c 	bl	8001170 <FLASH_WaitForLastOperation>
 8001938:	4603      	mov	r3, r0
 800193a:	73fb      	strb	r3, [r7, #15]
 800193c:	4b06      	ldr	r3, [pc, #24]	; (8001958 <FLASH_OB_ProgramData+0x64>)
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	4a05      	ldr	r2, [pc, #20]	; (8001958 <FLASH_OB_ProgramData+0x64>)
 8001942:	f023 0310 	bic.w	r3, r3, #16
 8001946:	6113      	str	r3, [r2, #16]
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	4618      	mov	r0, r3
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	200001e0 	.word	0x200001e0
 8001958:	40022000 	.word	0x40022000

0800195c <FLASH_OB_GetWRP>:
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
 8001960:	4b02      	ldr	r3, [pc, #8]	; (800196c <FLASH_OB_GetWRP+0x10>)
 8001962:	6a1b      	ldr	r3, [r3, #32]
 8001964:	4618      	mov	r0, r3
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr
 800196c:	40022000 	.word	0x40022000

08001970 <FLASH_OB_GetRDP>:
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	23a5      	movs	r3, #165	; 0xa5
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	2300      	movs	r3, #0
 800197c:	603b      	str	r3, [r7, #0]
 800197e:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <FLASH_OB_GetRDP+0x34>)
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	603b      	str	r3, [r7, #0]
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	2b02      	cmp	r3, #2
 800198c:	d102      	bne.n	8001994 <FLASH_OB_GetRDP+0x24>
 800198e:	2300      	movs	r3, #0
 8001990:	607b      	str	r3, [r7, #4]
 8001992:	e001      	b.n	8001998 <FLASH_OB_GetRDP+0x28>
 8001994:	23a5      	movs	r3, #165	; 0xa5
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4618      	mov	r0, r3
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr
 80019a4:	40022000 	.word	0x40022000

080019a8 <FLASH_OB_GetUser>:
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <FLASH_OB_GetUser+0x1c>)
 80019ae:	69db      	ldr	r3, [r3, #28]
 80019b0:	089b      	lsrs	r3, r3, #2
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	f003 0307 	and.w	r3, r3, #7
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	4618      	mov	r0, r3
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	40022000 	.word	0x40022000

080019c8 <FLASH_PageErase>:
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <FLASH_PageErase+0x38>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	61da      	str	r2, [r3, #28]
 80019d6:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <FLASH_PageErase+0x3c>)
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	4a0a      	ldr	r2, [pc, #40]	; (8001a04 <FLASH_PageErase+0x3c>)
 80019dc:	f043 0302 	orr.w	r3, r3, #2
 80019e0:	6113      	str	r3, [r2, #16]
 80019e2:	4a08      	ldr	r2, [pc, #32]	; (8001a04 <FLASH_PageErase+0x3c>)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6153      	str	r3, [r2, #20]
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <FLASH_PageErase+0x3c>)
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	4a05      	ldr	r2, [pc, #20]	; (8001a04 <FLASH_PageErase+0x3c>)
 80019ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019f2:	6113      	str	r3, [r2, #16]
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bc80      	pop	{r7}
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	200001e0 	.word	0x200001e0
 8001a04:	40022000 	.word	0x40022000

08001a08 <HAL_GPIO_Init>:
 8001a08:	b480      	push	{r7}
 8001a0a:	b08b      	sub	sp, #44	; 0x2c
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
 8001a12:	2300      	movs	r3, #0
 8001a14:	627b      	str	r3, [r7, #36]	; 0x24
 8001a16:	2300      	movs	r3, #0
 8001a18:	623b      	str	r3, [r7, #32]
 8001a1a:	e169      	b.n	8001cf0 <HAL_GPIO_Init+0x2e8>
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	61fb      	str	r3, [r7, #28]
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	69fa      	ldr	r2, [r7, #28]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	f040 8158 	bne.w	8001cea <HAL_GPIO_Init+0x2e2>
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	4a9a      	ldr	r2, [pc, #616]	; (8001ca8 <HAL_GPIO_Init+0x2a0>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d05e      	beq.n	8001b02 <HAL_GPIO_Init+0xfa>
 8001a44:	4a98      	ldr	r2, [pc, #608]	; (8001ca8 <HAL_GPIO_Init+0x2a0>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d875      	bhi.n	8001b36 <HAL_GPIO_Init+0x12e>
 8001a4a:	4a98      	ldr	r2, [pc, #608]	; (8001cac <HAL_GPIO_Init+0x2a4>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d058      	beq.n	8001b02 <HAL_GPIO_Init+0xfa>
 8001a50:	4a96      	ldr	r2, [pc, #600]	; (8001cac <HAL_GPIO_Init+0x2a4>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d86f      	bhi.n	8001b36 <HAL_GPIO_Init+0x12e>
 8001a56:	4a96      	ldr	r2, [pc, #600]	; (8001cb0 <HAL_GPIO_Init+0x2a8>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d052      	beq.n	8001b02 <HAL_GPIO_Init+0xfa>
 8001a5c:	4a94      	ldr	r2, [pc, #592]	; (8001cb0 <HAL_GPIO_Init+0x2a8>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d869      	bhi.n	8001b36 <HAL_GPIO_Init+0x12e>
 8001a62:	4a94      	ldr	r2, [pc, #592]	; (8001cb4 <HAL_GPIO_Init+0x2ac>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d04c      	beq.n	8001b02 <HAL_GPIO_Init+0xfa>
 8001a68:	4a92      	ldr	r2, [pc, #584]	; (8001cb4 <HAL_GPIO_Init+0x2ac>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d863      	bhi.n	8001b36 <HAL_GPIO_Init+0x12e>
 8001a6e:	4a92      	ldr	r2, [pc, #584]	; (8001cb8 <HAL_GPIO_Init+0x2b0>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d046      	beq.n	8001b02 <HAL_GPIO_Init+0xfa>
 8001a74:	4a90      	ldr	r2, [pc, #576]	; (8001cb8 <HAL_GPIO_Init+0x2b0>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d85d      	bhi.n	8001b36 <HAL_GPIO_Init+0x12e>
 8001a7a:	2b12      	cmp	r3, #18
 8001a7c:	d82a      	bhi.n	8001ad4 <HAL_GPIO_Init+0xcc>
 8001a7e:	2b12      	cmp	r3, #18
 8001a80:	d859      	bhi.n	8001b36 <HAL_GPIO_Init+0x12e>
 8001a82:	a201      	add	r2, pc, #4	; (adr r2, 8001a88 <HAL_GPIO_Init+0x80>)
 8001a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a88:	08001b03 	.word	0x08001b03
 8001a8c:	08001add 	.word	0x08001add
 8001a90:	08001aef 	.word	0x08001aef
 8001a94:	08001b31 	.word	0x08001b31
 8001a98:	08001b37 	.word	0x08001b37
 8001a9c:	08001b37 	.word	0x08001b37
 8001aa0:	08001b37 	.word	0x08001b37
 8001aa4:	08001b37 	.word	0x08001b37
 8001aa8:	08001b37 	.word	0x08001b37
 8001aac:	08001b37 	.word	0x08001b37
 8001ab0:	08001b37 	.word	0x08001b37
 8001ab4:	08001b37 	.word	0x08001b37
 8001ab8:	08001b37 	.word	0x08001b37
 8001abc:	08001b37 	.word	0x08001b37
 8001ac0:	08001b37 	.word	0x08001b37
 8001ac4:	08001b37 	.word	0x08001b37
 8001ac8:	08001b37 	.word	0x08001b37
 8001acc:	08001ae5 	.word	0x08001ae5
 8001ad0:	08001af9 	.word	0x08001af9
 8001ad4:	4a79      	ldr	r2, [pc, #484]	; (8001cbc <HAL_GPIO_Init+0x2b4>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d013      	beq.n	8001b02 <HAL_GPIO_Init+0xfa>
 8001ada:	e02c      	b.n	8001b36 <HAL_GPIO_Init+0x12e>
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	623b      	str	r3, [r7, #32]
 8001ae2:	e029      	b.n	8001b38 <HAL_GPIO_Init+0x130>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	3304      	adds	r3, #4
 8001aea:	623b      	str	r3, [r7, #32]
 8001aec:	e024      	b.n	8001b38 <HAL_GPIO_Init+0x130>
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	3308      	adds	r3, #8
 8001af4:	623b      	str	r3, [r7, #32]
 8001af6:	e01f      	b.n	8001b38 <HAL_GPIO_Init+0x130>
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	330c      	adds	r3, #12
 8001afe:	623b      	str	r3, [r7, #32]
 8001b00:	e01a      	b.n	8001b38 <HAL_GPIO_Init+0x130>
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d102      	bne.n	8001b10 <HAL_GPIO_Init+0x108>
 8001b0a:	2304      	movs	r3, #4
 8001b0c:	623b      	str	r3, [r7, #32]
 8001b0e:	e013      	b.n	8001b38 <HAL_GPIO_Init+0x130>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d105      	bne.n	8001b24 <HAL_GPIO_Init+0x11c>
 8001b18:	2308      	movs	r3, #8
 8001b1a:	623b      	str	r3, [r7, #32]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	69fa      	ldr	r2, [r7, #28]
 8001b20:	611a      	str	r2, [r3, #16]
 8001b22:	e009      	b.n	8001b38 <HAL_GPIO_Init+0x130>
 8001b24:	2308      	movs	r3, #8
 8001b26:	623b      	str	r3, [r7, #32]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	69fa      	ldr	r2, [r7, #28]
 8001b2c:	615a      	str	r2, [r3, #20]
 8001b2e:	e003      	b.n	8001b38 <HAL_GPIO_Init+0x130>
 8001b30:	2300      	movs	r3, #0
 8001b32:	623b      	str	r3, [r7, #32]
 8001b34:	e000      	b.n	8001b38 <HAL_GPIO_Init+0x130>
 8001b36:	bf00      	nop
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	2bff      	cmp	r3, #255	; 0xff
 8001b3c:	d801      	bhi.n	8001b42 <HAL_GPIO_Init+0x13a>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	e001      	b.n	8001b46 <HAL_GPIO_Init+0x13e>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	3304      	adds	r3, #4
 8001b46:	617b      	str	r3, [r7, #20]
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	2bff      	cmp	r3, #255	; 0xff
 8001b4c:	d802      	bhi.n	8001b54 <HAL_GPIO_Init+0x14c>
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	e002      	b.n	8001b5a <HAL_GPIO_Init+0x152>
 8001b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b56:	3b08      	subs	r3, #8
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	613b      	str	r3, [r7, #16]
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	210f      	movs	r1, #15
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	fa01 f303 	lsl.w	r3, r1, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	401a      	ands	r2, r3
 8001b6c:	6a39      	ldr	r1, [r7, #32]
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	fa01 f303 	lsl.w	r3, r1, r3
 8001b74:	431a      	orrs	r2, r3
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f000 80b1 	beq.w	8001cea <HAL_GPIO_Init+0x2e2>
 8001b88:	4b4d      	ldr	r3, [pc, #308]	; (8001cc0 <HAL_GPIO_Init+0x2b8>)
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	4a4c      	ldr	r2, [pc, #304]	; (8001cc0 <HAL_GPIO_Init+0x2b8>)
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	6193      	str	r3, [r2, #24]
 8001b94:	4b4a      	ldr	r3, [pc, #296]	; (8001cc0 <HAL_GPIO_Init+0x2b8>)
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	60bb      	str	r3, [r7, #8]
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	4a48      	ldr	r2, [pc, #288]	; (8001cc4 <HAL_GPIO_Init+0x2bc>)
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba4:	089b      	lsrs	r3, r3, #2
 8001ba6:	3302      	adds	r3, #2
 8001ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	f003 0303 	and.w	r3, r3, #3
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	220f      	movs	r2, #15
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a40      	ldr	r2, [pc, #256]	; (8001cc8 <HAL_GPIO_Init+0x2c0>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d013      	beq.n	8001bf4 <HAL_GPIO_Init+0x1ec>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a3f      	ldr	r2, [pc, #252]	; (8001ccc <HAL_GPIO_Init+0x2c4>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d00d      	beq.n	8001bf0 <HAL_GPIO_Init+0x1e8>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a3e      	ldr	r2, [pc, #248]	; (8001cd0 <HAL_GPIO_Init+0x2c8>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d007      	beq.n	8001bec <HAL_GPIO_Init+0x1e4>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a3d      	ldr	r2, [pc, #244]	; (8001cd4 <HAL_GPIO_Init+0x2cc>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d101      	bne.n	8001be8 <HAL_GPIO_Init+0x1e0>
 8001be4:	2303      	movs	r3, #3
 8001be6:	e006      	b.n	8001bf6 <HAL_GPIO_Init+0x1ee>
 8001be8:	2304      	movs	r3, #4
 8001bea:	e004      	b.n	8001bf6 <HAL_GPIO_Init+0x1ee>
 8001bec:	2302      	movs	r3, #2
 8001bee:	e002      	b.n	8001bf6 <HAL_GPIO_Init+0x1ee>
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e000      	b.n	8001bf6 <HAL_GPIO_Init+0x1ee>
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bf8:	f002 0203 	and.w	r2, r2, #3
 8001bfc:	0092      	lsls	r2, r2, #2
 8001bfe:	4093      	lsls	r3, r2
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	492f      	ldr	r1, [pc, #188]	; (8001cc4 <HAL_GPIO_Init+0x2bc>)
 8001c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0a:	089b      	lsrs	r3, r3, #2
 8001c0c:	3302      	adds	r3, #2
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d006      	beq.n	8001c2e <HAL_GPIO_Init+0x226>
 8001c20:	4b2d      	ldr	r3, [pc, #180]	; (8001cd8 <HAL_GPIO_Init+0x2d0>)
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	492c      	ldr	r1, [pc, #176]	; (8001cd8 <HAL_GPIO_Init+0x2d0>)
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	608b      	str	r3, [r1, #8]
 8001c2c:	e006      	b.n	8001c3c <HAL_GPIO_Init+0x234>
 8001c2e:	4b2a      	ldr	r3, [pc, #168]	; (8001cd8 <HAL_GPIO_Init+0x2d0>)
 8001c30:	689a      	ldr	r2, [r3, #8]
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	43db      	mvns	r3, r3
 8001c36:	4928      	ldr	r1, [pc, #160]	; (8001cd8 <HAL_GPIO_Init+0x2d0>)
 8001c38:	4013      	ands	r3, r2
 8001c3a:	608b      	str	r3, [r1, #8]
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d006      	beq.n	8001c56 <HAL_GPIO_Init+0x24e>
 8001c48:	4b23      	ldr	r3, [pc, #140]	; (8001cd8 <HAL_GPIO_Init+0x2d0>)
 8001c4a:	68da      	ldr	r2, [r3, #12]
 8001c4c:	4922      	ldr	r1, [pc, #136]	; (8001cd8 <HAL_GPIO_Init+0x2d0>)
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	60cb      	str	r3, [r1, #12]
 8001c54:	e006      	b.n	8001c64 <HAL_GPIO_Init+0x25c>
 8001c56:	4b20      	ldr	r3, [pc, #128]	; (8001cd8 <HAL_GPIO_Init+0x2d0>)
 8001c58:	68da      	ldr	r2, [r3, #12]
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	491e      	ldr	r1, [pc, #120]	; (8001cd8 <HAL_GPIO_Init+0x2d0>)
 8001c60:	4013      	ands	r3, r2
 8001c62:	60cb      	str	r3, [r1, #12]
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d006      	beq.n	8001c7e <HAL_GPIO_Init+0x276>
 8001c70:	4b19      	ldr	r3, [pc, #100]	; (8001cd8 <HAL_GPIO_Init+0x2d0>)
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	4918      	ldr	r1, [pc, #96]	; (8001cd8 <HAL_GPIO_Init+0x2d0>)
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	604b      	str	r3, [r1, #4]
 8001c7c:	e006      	b.n	8001c8c <HAL_GPIO_Init+0x284>
 8001c7e:	4b16      	ldr	r3, [pc, #88]	; (8001cd8 <HAL_GPIO_Init+0x2d0>)
 8001c80:	685a      	ldr	r2, [r3, #4]
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	43db      	mvns	r3, r3
 8001c86:	4914      	ldr	r1, [pc, #80]	; (8001cd8 <HAL_GPIO_Init+0x2d0>)
 8001c88:	4013      	ands	r3, r2
 8001c8a:	604b      	str	r3, [r1, #4]
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d021      	beq.n	8001cdc <HAL_GPIO_Init+0x2d4>
 8001c98:	4b0f      	ldr	r3, [pc, #60]	; (8001cd8 <HAL_GPIO_Init+0x2d0>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	490e      	ldr	r1, [pc, #56]	; (8001cd8 <HAL_GPIO_Init+0x2d0>)
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	600b      	str	r3, [r1, #0]
 8001ca4:	e021      	b.n	8001cea <HAL_GPIO_Init+0x2e2>
 8001ca6:	bf00      	nop
 8001ca8:	10320000 	.word	0x10320000
 8001cac:	10310000 	.word	0x10310000
 8001cb0:	10220000 	.word	0x10220000
 8001cb4:	10210000 	.word	0x10210000
 8001cb8:	10120000 	.word	0x10120000
 8001cbc:	10110000 	.word	0x10110000
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	40010000 	.word	0x40010000
 8001cc8:	40010800 	.word	0x40010800
 8001ccc:	40010c00 	.word	0x40010c00
 8001cd0:	40011000 	.word	0x40011000
 8001cd4:	40011400 	.word	0x40011400
 8001cd8:	40010400 	.word	0x40010400
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <HAL_GPIO_Init+0x304>)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	4909      	ldr	r1, [pc, #36]	; (8001d0c <HAL_GPIO_Init+0x304>)
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	600b      	str	r3, [r1, #0]
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	3301      	adds	r3, #1
 8001cee:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f47f ae8e 	bne.w	8001a1c <HAL_GPIO_Init+0x14>
 8001d00:	bf00      	nop
 8001d02:	bf00      	nop
 8001d04:	372c      	adds	r7, #44	; 0x2c
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bc80      	pop	{r7}
 8001d0a:	4770      	bx	lr
 8001d0c:	40010400 	.word	0x40010400

08001d10 <HAL_RCC_DeInit>:
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	f7ff f813 	bl	8000d40 <HAL_GetTick>
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	4b45      	ldr	r3, [pc, #276]	; (8001e34 <HAL_RCC_DeInit+0x124>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a44      	ldr	r2, [pc, #272]	; (8001e34 <HAL_RCC_DeInit+0x124>)
 8001d22:	f043 0301 	orr.w	r3, r3, #1
 8001d26:	6013      	str	r3, [r2, #0]
 8001d28:	e008      	b.n	8001d3c <HAL_RCC_DeInit+0x2c>
 8001d2a:	f7ff f809 	bl	8000d40 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_DeInit+0x2c>
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e077      	b.n	8001e2c <HAL_RCC_DeInit+0x11c>
 8001d3c:	4b3d      	ldr	r3, [pc, #244]	; (8001e34 <HAL_RCC_DeInit+0x124>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d0f0      	beq.n	8001d2a <HAL_RCC_DeInit+0x1a>
 8001d48:	4b3a      	ldr	r3, [pc, #232]	; (8001e34 <HAL_RCC_DeInit+0x124>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001d50:	4a38      	ldr	r2, [pc, #224]	; (8001e34 <HAL_RCC_DeInit+0x124>)
 8001d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d56:	6013      	str	r3, [r2, #0]
 8001d58:	f7fe fff2 	bl	8000d40 <HAL_GetTick>
 8001d5c:	6078      	str	r0, [r7, #4]
 8001d5e:	4b35      	ldr	r3, [pc, #212]	; (8001e34 <HAL_RCC_DeInit+0x124>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	e00a      	b.n	8001d7c <HAL_RCC_DeInit+0x6c>
 8001d66:	f7fe ffeb 	bl	8000d40 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_DeInit+0x6c>
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e057      	b.n	8001e2c <HAL_RCC_DeInit+0x11c>
 8001d7c:	4b2d      	ldr	r3, [pc, #180]	; (8001e34 <HAL_RCC_DeInit+0x124>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 030c 	and.w	r3, r3, #12
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1ee      	bne.n	8001d66 <HAL_RCC_DeInit+0x56>
 8001d88:	4b2b      	ldr	r3, [pc, #172]	; (8001e38 <HAL_RCC_DeInit+0x128>)
 8001d8a:	4a2c      	ldr	r2, [pc, #176]	; (8001e3c <HAL_RCC_DeInit+0x12c>)
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	4b2c      	ldr	r3, [pc, #176]	; (8001e40 <HAL_RCC_DeInit+0x130>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe ff92 	bl	8000cbc <HAL_InitTick>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <HAL_RCC_DeInit+0x92>
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e044      	b.n	8001e2c <HAL_RCC_DeInit+0x11c>
 8001da2:	f7fe ffcd 	bl	8000d40 <HAL_GetTick>
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	4b22      	ldr	r3, [pc, #136]	; (8001e34 <HAL_RCC_DeInit+0x124>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a21      	ldr	r2, [pc, #132]	; (8001e34 <HAL_RCC_DeInit+0x124>)
 8001dae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001db2:	6013      	str	r3, [r2, #0]
 8001db4:	e008      	b.n	8001dc8 <HAL_RCC_DeInit+0xb8>
 8001db6:	f7fe ffc3 	bl	8000d40 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_DeInit+0xb8>
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e031      	b.n	8001e2c <HAL_RCC_DeInit+0x11c>
 8001dc8:	4b1a      	ldr	r3, [pc, #104]	; (8001e34 <HAL_RCC_DeInit+0x124>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1f0      	bne.n	8001db6 <HAL_RCC_DeInit+0xa6>
 8001dd4:	4b17      	ldr	r3, [pc, #92]	; (8001e34 <HAL_RCC_DeInit+0x124>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	f7fe ffb1 	bl	8000d40 <HAL_GetTick>
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	4b14      	ldr	r3, [pc, #80]	; (8001e34 <HAL_RCC_DeInit+0x124>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a13      	ldr	r2, [pc, #76]	; (8001e34 <HAL_RCC_DeInit+0x124>)
 8001de6:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001dea:	6013      	str	r3, [r2, #0]
 8001dec:	e008      	b.n	8001e00 <HAL_RCC_DeInit+0xf0>
 8001dee:	f7fe ffa7 	bl	8000d40 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b64      	cmp	r3, #100	; 0x64
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_DeInit+0xf0>
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e015      	b.n	8001e2c <HAL_RCC_DeInit+0x11c>
 8001e00:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <HAL_RCC_DeInit+0x124>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1f0      	bne.n	8001dee <HAL_RCC_DeInit+0xde>
 8001e0c:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <HAL_RCC_DeInit+0x124>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a08      	ldr	r2, [pc, #32]	; (8001e34 <HAL_RCC_DeInit+0x124>)
 8001e12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e16:	6013      	str	r3, [r2, #0]
 8001e18:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <HAL_RCC_DeInit+0x124>)
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1c:	4a05      	ldr	r2, [pc, #20]	; (8001e34 <HAL_RCC_DeInit+0x124>)
 8001e1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e22:	6253      	str	r3, [r2, #36]	; 0x24
 8001e24:	4b03      	ldr	r3, [pc, #12]	; (8001e34 <HAL_RCC_DeInit+0x124>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40021000 	.word	0x40021000
 8001e38:	20000034 	.word	0x20000034
 8001e3c:	007a1200 	.word	0x007a1200
 8001e40:	20000038 	.word	0x20000038

08001e44 <HAL_RCC_OscConfig>:
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_RCC_OscConfig+0x12>
 8001e52:	2301      	movs	r3, #1
 8001e54:	e272      	b.n	800233c <HAL_RCC_OscConfig+0x4f8>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f000 8087 	beq.w	8001f72 <HAL_RCC_OscConfig+0x12e>
 8001e64:	4b92      	ldr	r3, [pc, #584]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 030c 	and.w	r3, r3, #12
 8001e6c:	2b04      	cmp	r3, #4
 8001e6e:	d00c      	beq.n	8001e8a <HAL_RCC_OscConfig+0x46>
 8001e70:	4b8f      	ldr	r3, [pc, #572]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f003 030c 	and.w	r3, r3, #12
 8001e78:	2b08      	cmp	r3, #8
 8001e7a:	d112      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x5e>
 8001e7c:	4b8c      	ldr	r3, [pc, #560]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e88:	d10b      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x5e>
 8001e8a:	4b89      	ldr	r3, [pc, #548]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d06c      	beq.n	8001f70 <HAL_RCC_OscConfig+0x12c>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d168      	bne.n	8001f70 <HAL_RCC_OscConfig+0x12c>
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e24c      	b.n	800233c <HAL_RCC_OscConfig+0x4f8>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eaa:	d106      	bne.n	8001eba <HAL_RCC_OscConfig+0x76>
 8001eac:	4b80      	ldr	r3, [pc, #512]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a7f      	ldr	r2, [pc, #508]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001eb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb6:	6013      	str	r3, [r2, #0]
 8001eb8:	e02e      	b.n	8001f18 <HAL_RCC_OscConfig+0xd4>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10c      	bne.n	8001edc <HAL_RCC_OscConfig+0x98>
 8001ec2:	4b7b      	ldr	r3, [pc, #492]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a7a      	ldr	r2, [pc, #488]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	4b78      	ldr	r3, [pc, #480]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a77      	ldr	r2, [pc, #476]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	e01d      	b.n	8001f18 <HAL_RCC_OscConfig+0xd4>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ee4:	d10c      	bne.n	8001f00 <HAL_RCC_OscConfig+0xbc>
 8001ee6:	4b72      	ldr	r3, [pc, #456]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a71      	ldr	r2, [pc, #452]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001eec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	4b6f      	ldr	r3, [pc, #444]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a6e      	ldr	r2, [pc, #440]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	e00b      	b.n	8001f18 <HAL_RCC_OscConfig+0xd4>
 8001f00:	4b6b      	ldr	r3, [pc, #428]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a6a      	ldr	r2, [pc, #424]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f0a:	6013      	str	r3, [r2, #0]
 8001f0c:	4b68      	ldr	r3, [pc, #416]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a67      	ldr	r2, [pc, #412]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001f12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f16:	6013      	str	r3, [r2, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d013      	beq.n	8001f48 <HAL_RCC_OscConfig+0x104>
 8001f20:	f7fe ff0e 	bl	8000d40 <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0xf6>
 8001f28:	f7fe ff0a 	bl	8000d40 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b64      	cmp	r3, #100	; 0x64
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0xf6>
 8001f36:	2303      	movs	r3, #3
 8001f38:	e200      	b.n	800233c <HAL_RCC_OscConfig+0x4f8>
 8001f3a:	4b5d      	ldr	r3, [pc, #372]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d0f0      	beq.n	8001f28 <HAL_RCC_OscConfig+0xe4>
 8001f46:	e014      	b.n	8001f72 <HAL_RCC_OscConfig+0x12e>
 8001f48:	f7fe fefa 	bl	8000d40 <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x11e>
 8001f50:	f7fe fef6 	bl	8000d40 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b64      	cmp	r3, #100	; 0x64
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x11e>
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e1ec      	b.n	800233c <HAL_RCC_OscConfig+0x4f8>
 8001f62:	4b53      	ldr	r3, [pc, #332]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1f0      	bne.n	8001f50 <HAL_RCC_OscConfig+0x10c>
 8001f6e:	e000      	b.n	8001f72 <HAL_RCC_OscConfig+0x12e>
 8001f70:	bf00      	nop
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d063      	beq.n	8002046 <HAL_RCC_OscConfig+0x202>
 8001f7e:	4b4c      	ldr	r3, [pc, #304]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f003 030c 	and.w	r3, r3, #12
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00b      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x15e>
 8001f8a:	4b49      	ldr	r3, [pc, #292]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f003 030c 	and.w	r3, r3, #12
 8001f92:	2b08      	cmp	r3, #8
 8001f94:	d11c      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x18c>
 8001f96:	4b46      	ldr	r3, [pc, #280]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d116      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x18c>
 8001fa2:	4b43      	ldr	r3, [pc, #268]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d005      	beq.n	8001fba <HAL_RCC_OscConfig+0x176>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d001      	beq.n	8001fba <HAL_RCC_OscConfig+0x176>
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e1c0      	b.n	800233c <HAL_RCC_OscConfig+0x4f8>
 8001fba:	4b3d      	ldr	r3, [pc, #244]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	4939      	ldr	r1, [pc, #228]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	600b      	str	r3, [r1, #0]
 8001fce:	e03a      	b.n	8002046 <HAL_RCC_OscConfig+0x202>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d020      	beq.n	800201a <HAL_RCC_OscConfig+0x1d6>
 8001fd8:	4b36      	ldr	r3, [pc, #216]	; (80020b4 <HAL_RCC_OscConfig+0x270>)
 8001fda:	2201      	movs	r2, #1
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	f7fe feaf 	bl	8000d40 <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x1b4>
 8001fe6:	f7fe feab 	bl	8000d40 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x1b4>
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e1a1      	b.n	800233c <HAL_RCC_OscConfig+0x4f8>
 8001ff8:	4b2d      	ldr	r3, [pc, #180]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d0f0      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x1a2>
 8002004:	4b2a      	ldr	r3, [pc, #168]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	695b      	ldr	r3, [r3, #20]
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	4927      	ldr	r1, [pc, #156]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8002014:	4313      	orrs	r3, r2
 8002016:	600b      	str	r3, [r1, #0]
 8002018:	e015      	b.n	8002046 <HAL_RCC_OscConfig+0x202>
 800201a:	4b26      	ldr	r3, [pc, #152]	; (80020b4 <HAL_RCC_OscConfig+0x270>)
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	f7fe fe8e 	bl	8000d40 <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x1f6>
 8002028:	f7fe fe8a 	bl	8000d40 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x1f6>
 8002036:	2303      	movs	r3, #3
 8002038:	e180      	b.n	800233c <HAL_RCC_OscConfig+0x4f8>
 800203a:	4b1d      	ldr	r3, [pc, #116]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1f0      	bne.n	8002028 <HAL_RCC_OscConfig+0x1e4>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0308 	and.w	r3, r3, #8
 800204e:	2b00      	cmp	r3, #0
 8002050:	d03a      	beq.n	80020c8 <HAL_RCC_OscConfig+0x284>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d019      	beq.n	800208e <HAL_RCC_OscConfig+0x24a>
 800205a:	4b17      	ldr	r3, [pc, #92]	; (80020b8 <HAL_RCC_OscConfig+0x274>)
 800205c:	2201      	movs	r2, #1
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	f7fe fe6e 	bl	8000d40 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x236>
 8002068:	f7fe fe6a 	bl	8000d40 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x236>
 8002076:	2303      	movs	r3, #3
 8002078:	e160      	b.n	800233c <HAL_RCC_OscConfig+0x4f8>
 800207a:	4b0d      	ldr	r3, [pc, #52]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 800207c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d0f0      	beq.n	8002068 <HAL_RCC_OscConfig+0x224>
 8002086:	2001      	movs	r0, #1
 8002088:	f000 face 	bl	8002628 <RCC_Delay>
 800208c:	e01c      	b.n	80020c8 <HAL_RCC_OscConfig+0x284>
 800208e:	4b0a      	ldr	r3, [pc, #40]	; (80020b8 <HAL_RCC_OscConfig+0x274>)
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	f7fe fe54 	bl	8000d40 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]
 800209a:	e00f      	b.n	80020bc <HAL_RCC_OscConfig+0x278>
 800209c:	f7fe fe50 	bl	8000d40 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d908      	bls.n	80020bc <HAL_RCC_OscConfig+0x278>
 80020aa:	2303      	movs	r3, #3
 80020ac:	e146      	b.n	800233c <HAL_RCC_OscConfig+0x4f8>
 80020ae:	bf00      	nop
 80020b0:	40021000 	.word	0x40021000
 80020b4:	42420000 	.word	0x42420000
 80020b8:	42420480 	.word	0x42420480
 80020bc:	4b92      	ldr	r3, [pc, #584]	; (8002308 <HAL_RCC_OscConfig+0x4c4>)
 80020be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1e9      	bne.n	800209c <HAL_RCC_OscConfig+0x258>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f000 80a6 	beq.w	8002222 <HAL_RCC_OscConfig+0x3de>
 80020d6:	2300      	movs	r3, #0
 80020d8:	75fb      	strb	r3, [r7, #23]
 80020da:	4b8b      	ldr	r3, [pc, #556]	; (8002308 <HAL_RCC_OscConfig+0x4c4>)
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d10d      	bne.n	8002102 <HAL_RCC_OscConfig+0x2be>
 80020e6:	4b88      	ldr	r3, [pc, #544]	; (8002308 <HAL_RCC_OscConfig+0x4c4>)
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	4a87      	ldr	r2, [pc, #540]	; (8002308 <HAL_RCC_OscConfig+0x4c4>)
 80020ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f0:	61d3      	str	r3, [r2, #28]
 80020f2:	4b85      	ldr	r3, [pc, #532]	; (8002308 <HAL_RCC_OscConfig+0x4c4>)
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fa:	60bb      	str	r3, [r7, #8]
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	2301      	movs	r3, #1
 8002100:	75fb      	strb	r3, [r7, #23]
 8002102:	4b82      	ldr	r3, [pc, #520]	; (800230c <HAL_RCC_OscConfig+0x4c8>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210a:	2b00      	cmp	r3, #0
 800210c:	d118      	bne.n	8002140 <HAL_RCC_OscConfig+0x2fc>
 800210e:	4b7f      	ldr	r3, [pc, #508]	; (800230c <HAL_RCC_OscConfig+0x4c8>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a7e      	ldr	r2, [pc, #504]	; (800230c <HAL_RCC_OscConfig+0x4c8>)
 8002114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002118:	6013      	str	r3, [r2, #0]
 800211a:	f7fe fe11 	bl	8000d40 <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x2f0>
 8002122:	f7fe fe0d 	bl	8000d40 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b64      	cmp	r3, #100	; 0x64
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x2f0>
 8002130:	2303      	movs	r3, #3
 8002132:	e103      	b.n	800233c <HAL_RCC_OscConfig+0x4f8>
 8002134:	4b75      	ldr	r3, [pc, #468]	; (800230c <HAL_RCC_OscConfig+0x4c8>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213c:	2b00      	cmp	r3, #0
 800213e:	d0f0      	beq.n	8002122 <HAL_RCC_OscConfig+0x2de>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d106      	bne.n	8002156 <HAL_RCC_OscConfig+0x312>
 8002148:	4b6f      	ldr	r3, [pc, #444]	; (8002308 <HAL_RCC_OscConfig+0x4c4>)
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	4a6e      	ldr	r2, [pc, #440]	; (8002308 <HAL_RCC_OscConfig+0x4c4>)
 800214e:	f043 0301 	orr.w	r3, r3, #1
 8002152:	6213      	str	r3, [r2, #32]
 8002154:	e02d      	b.n	80021b2 <HAL_RCC_OscConfig+0x36e>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10c      	bne.n	8002178 <HAL_RCC_OscConfig+0x334>
 800215e:	4b6a      	ldr	r3, [pc, #424]	; (8002308 <HAL_RCC_OscConfig+0x4c4>)
 8002160:	6a1b      	ldr	r3, [r3, #32]
 8002162:	4a69      	ldr	r2, [pc, #420]	; (8002308 <HAL_RCC_OscConfig+0x4c4>)
 8002164:	f023 0301 	bic.w	r3, r3, #1
 8002168:	6213      	str	r3, [r2, #32]
 800216a:	4b67      	ldr	r3, [pc, #412]	; (8002308 <HAL_RCC_OscConfig+0x4c4>)
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	4a66      	ldr	r2, [pc, #408]	; (8002308 <HAL_RCC_OscConfig+0x4c4>)
 8002170:	f023 0304 	bic.w	r3, r3, #4
 8002174:	6213      	str	r3, [r2, #32]
 8002176:	e01c      	b.n	80021b2 <HAL_RCC_OscConfig+0x36e>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	2b05      	cmp	r3, #5
 800217e:	d10c      	bne.n	800219a <HAL_RCC_OscConfig+0x356>
 8002180:	4b61      	ldr	r3, [pc, #388]	; (8002308 <HAL_RCC_OscConfig+0x4c4>)
 8002182:	6a1b      	ldr	r3, [r3, #32]
 8002184:	4a60      	ldr	r2, [pc, #384]	; (8002308 <HAL_RCC_OscConfig+0x4c4>)
 8002186:	f043 0304 	orr.w	r3, r3, #4
 800218a:	6213      	str	r3, [r2, #32]
 800218c:	4b5e      	ldr	r3, [pc, #376]	; (8002308 <HAL_RCC_OscConfig+0x4c4>)
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	4a5d      	ldr	r2, [pc, #372]	; (8002308 <HAL_RCC_OscConfig+0x4c4>)
 8002192:	f043 0301 	orr.w	r3, r3, #1
 8002196:	6213      	str	r3, [r2, #32]
 8002198:	e00b      	b.n	80021b2 <HAL_RCC_OscConfig+0x36e>
 800219a:	4b5b      	ldr	r3, [pc, #364]	; (8002308 <HAL_RCC_OscConfig+0x4c4>)
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	4a5a      	ldr	r2, [pc, #360]	; (8002308 <HAL_RCC_OscConfig+0x4c4>)
 80021a0:	f023 0301 	bic.w	r3, r3, #1
 80021a4:	6213      	str	r3, [r2, #32]
 80021a6:	4b58      	ldr	r3, [pc, #352]	; (8002308 <HAL_RCC_OscConfig+0x4c4>)
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	4a57      	ldr	r2, [pc, #348]	; (8002308 <HAL_RCC_OscConfig+0x4c4>)
 80021ac:	f023 0304 	bic.w	r3, r3, #4
 80021b0:	6213      	str	r3, [r2, #32]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d015      	beq.n	80021e6 <HAL_RCC_OscConfig+0x3a2>
 80021ba:	f7fe fdc1 	bl	8000d40 <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]
 80021c0:	e00a      	b.n	80021d8 <HAL_RCC_OscConfig+0x394>
 80021c2:	f7fe fdbd 	bl	8000d40 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x394>
 80021d4:	2303      	movs	r3, #3
 80021d6:	e0b1      	b.n	800233c <HAL_RCC_OscConfig+0x4f8>
 80021d8:	4b4b      	ldr	r3, [pc, #300]	; (8002308 <HAL_RCC_OscConfig+0x4c4>)
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d0ee      	beq.n	80021c2 <HAL_RCC_OscConfig+0x37e>
 80021e4:	e014      	b.n	8002210 <HAL_RCC_OscConfig+0x3cc>
 80021e6:	f7fe fdab 	bl	8000d40 <HAL_GetTick>
 80021ea:	6138      	str	r0, [r7, #16]
 80021ec:	e00a      	b.n	8002204 <HAL_RCC_OscConfig+0x3c0>
 80021ee:	f7fe fda7 	bl	8000d40 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x3c0>
 8002200:	2303      	movs	r3, #3
 8002202:	e09b      	b.n	800233c <HAL_RCC_OscConfig+0x4f8>
 8002204:	4b40      	ldr	r3, [pc, #256]	; (8002308 <HAL_RCC_OscConfig+0x4c4>)
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1ee      	bne.n	80021ee <HAL_RCC_OscConfig+0x3aa>
 8002210:	7dfb      	ldrb	r3, [r7, #23]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d105      	bne.n	8002222 <HAL_RCC_OscConfig+0x3de>
 8002216:	4b3c      	ldr	r3, [pc, #240]	; (8002308 <HAL_RCC_OscConfig+0x4c4>)
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	4a3b      	ldr	r2, [pc, #236]	; (8002308 <HAL_RCC_OscConfig+0x4c4>)
 800221c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002220:	61d3      	str	r3, [r2, #28]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	2b00      	cmp	r3, #0
 8002228:	f000 8087 	beq.w	800233a <HAL_RCC_OscConfig+0x4f6>
 800222c:	4b36      	ldr	r3, [pc, #216]	; (8002308 <HAL_RCC_OscConfig+0x4c4>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 030c 	and.w	r3, r3, #12
 8002234:	2b08      	cmp	r3, #8
 8002236:	d061      	beq.n	80022fc <HAL_RCC_OscConfig+0x4b8>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	69db      	ldr	r3, [r3, #28]
 800223c:	2b02      	cmp	r3, #2
 800223e:	d146      	bne.n	80022ce <HAL_RCC_OscConfig+0x48a>
 8002240:	4b33      	ldr	r3, [pc, #204]	; (8002310 <HAL_RCC_OscConfig+0x4cc>)
 8002242:	2200      	movs	r2, #0
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	f7fe fd7b 	bl	8000d40 <HAL_GetTick>
 800224a:	6138      	str	r0, [r7, #16]
 800224c:	e008      	b.n	8002260 <HAL_RCC_OscConfig+0x41c>
 800224e:	f7fe fd77 	bl	8000d40 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x41c>
 800225c:	2303      	movs	r3, #3
 800225e:	e06d      	b.n	800233c <HAL_RCC_OscConfig+0x4f8>
 8002260:	4b29      	ldr	r3, [pc, #164]	; (8002308 <HAL_RCC_OscConfig+0x4c4>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1f0      	bne.n	800224e <HAL_RCC_OscConfig+0x40a>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002274:	d108      	bne.n	8002288 <HAL_RCC_OscConfig+0x444>
 8002276:	4b24      	ldr	r3, [pc, #144]	; (8002308 <HAL_RCC_OscConfig+0x4c4>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	4921      	ldr	r1, [pc, #132]	; (8002308 <HAL_RCC_OscConfig+0x4c4>)
 8002284:	4313      	orrs	r3, r2
 8002286:	604b      	str	r3, [r1, #4]
 8002288:	4b1f      	ldr	r3, [pc, #124]	; (8002308 <HAL_RCC_OscConfig+0x4c4>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a19      	ldr	r1, [r3, #32]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002298:	430b      	orrs	r3, r1
 800229a:	491b      	ldr	r1, [pc, #108]	; (8002308 <HAL_RCC_OscConfig+0x4c4>)
 800229c:	4313      	orrs	r3, r2
 800229e:	604b      	str	r3, [r1, #4]
 80022a0:	4b1b      	ldr	r3, [pc, #108]	; (8002310 <HAL_RCC_OscConfig+0x4cc>)
 80022a2:	2201      	movs	r2, #1
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	f7fe fd4b 	bl	8000d40 <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x47c>
 80022ae:	f7fe fd47 	bl	8000d40 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x47c>
 80022bc:	2303      	movs	r3, #3
 80022be:	e03d      	b.n	800233c <HAL_RCC_OscConfig+0x4f8>
 80022c0:	4b11      	ldr	r3, [pc, #68]	; (8002308 <HAL_RCC_OscConfig+0x4c4>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d0f0      	beq.n	80022ae <HAL_RCC_OscConfig+0x46a>
 80022cc:	e035      	b.n	800233a <HAL_RCC_OscConfig+0x4f6>
 80022ce:	4b10      	ldr	r3, [pc, #64]	; (8002310 <HAL_RCC_OscConfig+0x4cc>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	f7fe fd34 	bl	8000d40 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x4aa>
 80022dc:	f7fe fd30 	bl	8000d40 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x4aa>
 80022ea:	2303      	movs	r3, #3
 80022ec:	e026      	b.n	800233c <HAL_RCC_OscConfig+0x4f8>
 80022ee:	4b06      	ldr	r3, [pc, #24]	; (8002308 <HAL_RCC_OscConfig+0x4c4>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1f0      	bne.n	80022dc <HAL_RCC_OscConfig+0x498>
 80022fa:	e01e      	b.n	800233a <HAL_RCC_OscConfig+0x4f6>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	69db      	ldr	r3, [r3, #28]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d107      	bne.n	8002314 <HAL_RCC_OscConfig+0x4d0>
 8002304:	2301      	movs	r3, #1
 8002306:	e019      	b.n	800233c <HAL_RCC_OscConfig+0x4f8>
 8002308:	40021000 	.word	0x40021000
 800230c:	40007000 	.word	0x40007000
 8002310:	42420060 	.word	0x42420060
 8002314:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <HAL_RCC_OscConfig+0x500>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	60fb      	str	r3, [r7, #12]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	429a      	cmp	r2, r3
 8002326:	d106      	bne.n	8002336 <HAL_RCC_OscConfig+0x4f2>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	429a      	cmp	r2, r3
 8002334:	d001      	beq.n	800233a <HAL_RCC_OscConfig+0x4f6>
 8002336:	2301      	movs	r3, #1
 8002338:	e000      	b.n	800233c <HAL_RCC_OscConfig+0x4f8>
 800233a:	2300      	movs	r3, #0
 800233c:	4618      	mov	r0, r3
 800233e:	3718      	adds	r7, #24
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40021000 	.word	0x40021000

08002348 <HAL_RCC_ClockConfig>:
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <HAL_RCC_ClockConfig+0x14>
 8002358:	2301      	movs	r3, #1
 800235a:	e0d0      	b.n	80024fe <HAL_RCC_ClockConfig+0x1b6>
 800235c:	4b6a      	ldr	r3, [pc, #424]	; (8002508 <HAL_RCC_ClockConfig+0x1c0>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	429a      	cmp	r2, r3
 8002368:	d910      	bls.n	800238c <HAL_RCC_ClockConfig+0x44>
 800236a:	4b67      	ldr	r3, [pc, #412]	; (8002508 <HAL_RCC_ClockConfig+0x1c0>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f023 0207 	bic.w	r2, r3, #7
 8002372:	4965      	ldr	r1, [pc, #404]	; (8002508 <HAL_RCC_ClockConfig+0x1c0>)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	4313      	orrs	r3, r2
 8002378:	600b      	str	r3, [r1, #0]
 800237a:	4b63      	ldr	r3, [pc, #396]	; (8002508 <HAL_RCC_ClockConfig+0x1c0>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	429a      	cmp	r2, r3
 8002386:	d001      	beq.n	800238c <HAL_RCC_ClockConfig+0x44>
 8002388:	2301      	movs	r3, #1
 800238a:	e0b8      	b.n	80024fe <HAL_RCC_ClockConfig+0x1b6>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d020      	beq.n	80023da <HAL_RCC_ClockConfig+0x92>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d005      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x68>
 80023a4:	4b59      	ldr	r3, [pc, #356]	; (800250c <HAL_RCC_ClockConfig+0x1c4>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	4a58      	ldr	r2, [pc, #352]	; (800250c <HAL_RCC_ClockConfig+0x1c4>)
 80023aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023ae:	6053      	str	r3, [r2, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0308 	and.w	r3, r3, #8
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d005      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x80>
 80023bc:	4b53      	ldr	r3, [pc, #332]	; (800250c <HAL_RCC_ClockConfig+0x1c4>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	4a52      	ldr	r2, [pc, #328]	; (800250c <HAL_RCC_ClockConfig+0x1c4>)
 80023c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023c6:	6053      	str	r3, [r2, #4]
 80023c8:	4b50      	ldr	r3, [pc, #320]	; (800250c <HAL_RCC_ClockConfig+0x1c4>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	494d      	ldr	r1, [pc, #308]	; (800250c <HAL_RCC_ClockConfig+0x1c4>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	604b      	str	r3, [r1, #4]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d040      	beq.n	8002468 <HAL_RCC_ClockConfig+0x120>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d107      	bne.n	80023fe <HAL_RCC_ClockConfig+0xb6>
 80023ee:	4b47      	ldr	r3, [pc, #284]	; (800250c <HAL_RCC_ClockConfig+0x1c4>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d115      	bne.n	8002426 <HAL_RCC_ClockConfig+0xde>
 80023fa:	2301      	movs	r3, #1
 80023fc:	e07f      	b.n	80024fe <HAL_RCC_ClockConfig+0x1b6>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b02      	cmp	r3, #2
 8002404:	d107      	bne.n	8002416 <HAL_RCC_ClockConfig+0xce>
 8002406:	4b41      	ldr	r3, [pc, #260]	; (800250c <HAL_RCC_ClockConfig+0x1c4>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d109      	bne.n	8002426 <HAL_RCC_ClockConfig+0xde>
 8002412:	2301      	movs	r3, #1
 8002414:	e073      	b.n	80024fe <HAL_RCC_ClockConfig+0x1b6>
 8002416:	4b3d      	ldr	r3, [pc, #244]	; (800250c <HAL_RCC_ClockConfig+0x1c4>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_RCC_ClockConfig+0xde>
 8002422:	2301      	movs	r3, #1
 8002424:	e06b      	b.n	80024fe <HAL_RCC_ClockConfig+0x1b6>
 8002426:	4b39      	ldr	r3, [pc, #228]	; (800250c <HAL_RCC_ClockConfig+0x1c4>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f023 0203 	bic.w	r2, r3, #3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	4936      	ldr	r1, [pc, #216]	; (800250c <HAL_RCC_ClockConfig+0x1c4>)
 8002434:	4313      	orrs	r3, r2
 8002436:	604b      	str	r3, [r1, #4]
 8002438:	f7fe fc82 	bl	8000d40 <HAL_GetTick>
 800243c:	60f8      	str	r0, [r7, #12]
 800243e:	e00a      	b.n	8002456 <HAL_RCC_ClockConfig+0x10e>
 8002440:	f7fe fc7e 	bl	8000d40 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	f241 3288 	movw	r2, #5000	; 0x1388
 800244e:	4293      	cmp	r3, r2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_ClockConfig+0x10e>
 8002452:	2303      	movs	r3, #3
 8002454:	e053      	b.n	80024fe <HAL_RCC_ClockConfig+0x1b6>
 8002456:	4b2d      	ldr	r3, [pc, #180]	; (800250c <HAL_RCC_ClockConfig+0x1c4>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f003 020c 	and.w	r2, r3, #12
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	429a      	cmp	r2, r3
 8002466:	d1eb      	bne.n	8002440 <HAL_RCC_ClockConfig+0xf8>
 8002468:	4b27      	ldr	r3, [pc, #156]	; (8002508 <HAL_RCC_ClockConfig+0x1c0>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	429a      	cmp	r2, r3
 8002474:	d210      	bcs.n	8002498 <HAL_RCC_ClockConfig+0x150>
 8002476:	4b24      	ldr	r3, [pc, #144]	; (8002508 <HAL_RCC_ClockConfig+0x1c0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f023 0207 	bic.w	r2, r3, #7
 800247e:	4922      	ldr	r1, [pc, #136]	; (8002508 <HAL_RCC_ClockConfig+0x1c0>)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	4313      	orrs	r3, r2
 8002484:	600b      	str	r3, [r1, #0]
 8002486:	4b20      	ldr	r3, [pc, #128]	; (8002508 <HAL_RCC_ClockConfig+0x1c0>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0307 	and.w	r3, r3, #7
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	429a      	cmp	r2, r3
 8002492:	d001      	beq.n	8002498 <HAL_RCC_ClockConfig+0x150>
 8002494:	2301      	movs	r3, #1
 8002496:	e032      	b.n	80024fe <HAL_RCC_ClockConfig+0x1b6>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d008      	beq.n	80024b6 <HAL_RCC_ClockConfig+0x16e>
 80024a4:	4b19      	ldr	r3, [pc, #100]	; (800250c <HAL_RCC_ClockConfig+0x1c4>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	4916      	ldr	r1, [pc, #88]	; (800250c <HAL_RCC_ClockConfig+0x1c4>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	604b      	str	r3, [r1, #4]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0308 	and.w	r3, r3, #8
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d009      	beq.n	80024d6 <HAL_RCC_ClockConfig+0x18e>
 80024c2:	4b12      	ldr	r3, [pc, #72]	; (800250c <HAL_RCC_ClockConfig+0x1c4>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	490e      	ldr	r1, [pc, #56]	; (800250c <HAL_RCC_ClockConfig+0x1c4>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	604b      	str	r3, [r1, #4]
 80024d6:	f000 f821 	bl	800251c <HAL_RCC_GetSysClockFreq>
 80024da:	4602      	mov	r2, r0
 80024dc:	4b0b      	ldr	r3, [pc, #44]	; (800250c <HAL_RCC_ClockConfig+0x1c4>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	091b      	lsrs	r3, r3, #4
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	490a      	ldr	r1, [pc, #40]	; (8002510 <HAL_RCC_ClockConfig+0x1c8>)
 80024e8:	5ccb      	ldrb	r3, [r1, r3]
 80024ea:	fa22 f303 	lsr.w	r3, r2, r3
 80024ee:	4a09      	ldr	r2, [pc, #36]	; (8002514 <HAL_RCC_ClockConfig+0x1cc>)
 80024f0:	6013      	str	r3, [r2, #0]
 80024f2:	4b09      	ldr	r3, [pc, #36]	; (8002518 <HAL_RCC_ClockConfig+0x1d0>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7fe fbe0 	bl	8000cbc <HAL_InitTick>
 80024fc:	2300      	movs	r3, #0
 80024fe:	4618      	mov	r0, r3
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	40022000 	.word	0x40022000
 800250c:	40021000 	.word	0x40021000
 8002510:	08002ba8 	.word	0x08002ba8
 8002514:	20000034 	.word	0x20000034
 8002518:	20000038 	.word	0x20000038

0800251c <HAL_RCC_GetSysClockFreq>:
 800251c:	b480      	push	{r7}
 800251e:	b087      	sub	sp, #28
 8002520:	af00      	add	r7, sp, #0
 8002522:	2300      	movs	r3, #0
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	2300      	movs	r3, #0
 8002528:	60bb      	str	r3, [r7, #8]
 800252a:	2300      	movs	r3, #0
 800252c:	617b      	str	r3, [r7, #20]
 800252e:	2300      	movs	r3, #0
 8002530:	607b      	str	r3, [r7, #4]
 8002532:	2300      	movs	r3, #0
 8002534:	613b      	str	r3, [r7, #16]
 8002536:	4b1e      	ldr	r3, [pc, #120]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f003 030c 	and.w	r3, r3, #12
 8002542:	2b04      	cmp	r3, #4
 8002544:	d002      	beq.n	800254c <HAL_RCC_GetSysClockFreq+0x30>
 8002546:	2b08      	cmp	r3, #8
 8002548:	d003      	beq.n	8002552 <HAL_RCC_GetSysClockFreq+0x36>
 800254a:	e027      	b.n	800259c <HAL_RCC_GetSysClockFreq+0x80>
 800254c:	4b19      	ldr	r3, [pc, #100]	; (80025b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800254e:	613b      	str	r3, [r7, #16]
 8002550:	e027      	b.n	80025a2 <HAL_RCC_GetSysClockFreq+0x86>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	0c9b      	lsrs	r3, r3, #18
 8002556:	f003 030f 	and.w	r3, r3, #15
 800255a:	4a17      	ldr	r2, [pc, #92]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800255c:	5cd3      	ldrb	r3, [r2, r3]
 800255e:	607b      	str	r3, [r7, #4]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d010      	beq.n	800258c <HAL_RCC_GetSysClockFreq+0x70>
 800256a:	4b11      	ldr	r3, [pc, #68]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x94>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	0c5b      	lsrs	r3, r3, #17
 8002570:	f003 0301 	and.w	r3, r3, #1
 8002574:	4a11      	ldr	r2, [pc, #68]	; (80025bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002576:	5cd3      	ldrb	r3, [r2, r3]
 8002578:	60bb      	str	r3, [r7, #8]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a0d      	ldr	r2, [pc, #52]	; (80025b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800257e:	fb03 f202 	mul.w	r2, r3, r2
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	fbb2 f3f3 	udiv	r3, r2, r3
 8002588:	617b      	str	r3, [r7, #20]
 800258a:	e004      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0x7a>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a0c      	ldr	r2, [pc, #48]	; (80025c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002590:	fb02 f303 	mul.w	r3, r2, r3
 8002594:	617b      	str	r3, [r7, #20]
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	613b      	str	r3, [r7, #16]
 800259a:	e002      	b.n	80025a2 <HAL_RCC_GetSysClockFreq+0x86>
 800259c:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800259e:	613b      	str	r3, [r7, #16]
 80025a0:	bf00      	nop
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	4618      	mov	r0, r3
 80025a6:	371c      	adds	r7, #28
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bc80      	pop	{r7}
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	40021000 	.word	0x40021000
 80025b4:	007a1200 	.word	0x007a1200
 80025b8:	08002bc0 	.word	0x08002bc0
 80025bc:	08002bd0 	.word	0x08002bd0
 80025c0:	003d0900 	.word	0x003d0900

080025c4 <HAL_RCC_GetHCLKFreq>:
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	4b02      	ldr	r3, [pc, #8]	; (80025d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr
 80025d4:	20000034 	.word	0x20000034

080025d8 <HAL_RCC_GetPCLK1Freq>:
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
 80025dc:	f7ff fff2 	bl	80025c4 <HAL_RCC_GetHCLKFreq>
 80025e0:	4602      	mov	r2, r0
 80025e2:	4b05      	ldr	r3, [pc, #20]	; (80025f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	0a1b      	lsrs	r3, r3, #8
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	4903      	ldr	r1, [pc, #12]	; (80025fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ee:	5ccb      	ldrb	r3, [r1, r3]
 80025f0:	fa22 f303 	lsr.w	r3, r2, r3
 80025f4:	4618      	mov	r0, r3
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40021000 	.word	0x40021000
 80025fc:	08002bb8 	.word	0x08002bb8

08002600 <HAL_RCC_GetPCLK2Freq>:
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
 8002604:	f7ff ffde 	bl	80025c4 <HAL_RCC_GetHCLKFreq>
 8002608:	4602      	mov	r2, r0
 800260a:	4b05      	ldr	r3, [pc, #20]	; (8002620 <HAL_RCC_GetPCLK2Freq+0x20>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	0adb      	lsrs	r3, r3, #11
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	4903      	ldr	r1, [pc, #12]	; (8002624 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002616:	5ccb      	ldrb	r3, [r1, r3]
 8002618:	fa22 f303 	lsr.w	r3, r2, r3
 800261c:	4618      	mov	r0, r3
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40021000 	.word	0x40021000
 8002624:	08002bb8 	.word	0x08002bb8

08002628 <RCC_Delay>:
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	4b0a      	ldr	r3, [pc, #40]	; (800265c <RCC_Delay+0x34>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a0a      	ldr	r2, [pc, #40]	; (8002660 <RCC_Delay+0x38>)
 8002636:	fba2 2303 	umull	r2, r3, r2, r3
 800263a:	0a5b      	lsrs	r3, r3, #9
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	fb02 f303 	mul.w	r3, r2, r3
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	bf00      	nop
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	1e5a      	subs	r2, r3, #1
 800264a:	60fa      	str	r2, [r7, #12]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1f9      	bne.n	8002644 <RCC_Delay+0x1c>
 8002650:	bf00      	nop
 8002652:	bf00      	nop
 8002654:	3714      	adds	r7, #20
 8002656:	46bd      	mov	sp, r7
 8002658:	bc80      	pop	{r7}
 800265a:	4770      	bx	lr
 800265c:	20000034 	.word	0x20000034
 8002660:	10624dd3 	.word	0x10624dd3

08002664 <HAL_UART_Init>:
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_UART_Init+0x12>
 8002672:	2301      	movs	r3, #1
 8002674:	e042      	b.n	80026fc <HAL_UART_Init+0x98>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d106      	bne.n	8002690 <HAL_UART_Init+0x2c>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7fe fa56 	bl	8000b3c <HAL_UART_MspInit>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2224      	movs	r2, #36	; 0x24
 8002694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68da      	ldr	r2, [r3, #12]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026a6:	60da      	str	r2, [r3, #12]
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f000 f9af 	bl	8002a0c <UART_SetConfig>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	691a      	ldr	r2, [r3, #16]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026bc:	611a      	str	r2, [r3, #16]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	695a      	ldr	r2, [r3, #20]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026cc:	615a      	str	r2, [r3, #20]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68da      	ldr	r2, [r3, #12]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026dc:	60da      	str	r2, [r3, #12]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	645a      	str	r2, [r3, #68]	; 0x44
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2220      	movs	r2, #32
 80026e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2220      	movs	r2, #32
 80026f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	635a      	str	r2, [r3, #52]	; 0x34
 80026fa:	2300      	movs	r3, #0
 80026fc:	4618      	mov	r0, r3
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <HAL_UART_Transmit>:
 8002704:	b580      	push	{r7, lr}
 8002706:	b08a      	sub	sp, #40	; 0x28
 8002708:	af02      	add	r7, sp, #8
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	603b      	str	r3, [r7, #0]
 8002710:	4613      	mov	r3, r2
 8002712:	80fb      	strh	r3, [r7, #6]
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b20      	cmp	r3, #32
 8002722:	d16d      	bne.n	8002800 <HAL_UART_Transmit+0xfc>
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d002      	beq.n	8002730 <HAL_UART_Transmit+0x2c>
 800272a:	88fb      	ldrh	r3, [r7, #6]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <HAL_UART_Transmit+0x30>
 8002730:	2301      	movs	r3, #1
 8002732:	e066      	b.n	8002802 <HAL_UART_Transmit+0xfe>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	645a      	str	r2, [r3, #68]	; 0x44
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2221      	movs	r2, #33	; 0x21
 800273e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002742:	f7fe fafd 	bl	8000d40 <HAL_GetTick>
 8002746:	6178      	str	r0, [r7, #20]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	88fa      	ldrh	r2, [r7, #6]
 800274c:	849a      	strh	r2, [r3, #36]	; 0x24
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	88fa      	ldrh	r2, [r7, #6]
 8002752:	84da      	strh	r2, [r3, #38]	; 0x26
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800275c:	d108      	bne.n	8002770 <HAL_UART_Transmit+0x6c>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d104      	bne.n	8002770 <HAL_UART_Transmit+0x6c>
 8002766:	2300      	movs	r3, #0
 8002768:	61fb      	str	r3, [r7, #28]
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	61bb      	str	r3, [r7, #24]
 800276e:	e003      	b.n	8002778 <HAL_UART_Transmit+0x74>
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	61fb      	str	r3, [r7, #28]
 8002774:	2300      	movs	r3, #0
 8002776:	61bb      	str	r3, [r7, #24]
 8002778:	e02a      	b.n	80027d0 <HAL_UART_Transmit+0xcc>
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	2200      	movs	r2, #0
 8002782:	2180      	movs	r1, #128	; 0x80
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f000 f8d2 	bl	800292e <UART_WaitOnFlagUntilTimeout>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <HAL_UART_Transmit+0x90>
 8002790:	2303      	movs	r3, #3
 8002792:	e036      	b.n	8002802 <HAL_UART_Transmit+0xfe>
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10b      	bne.n	80027b2 <HAL_UART_Transmit+0xae>
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	881b      	ldrh	r3, [r3, #0]
 800279e:	461a      	mov	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027a8:	605a      	str	r2, [r3, #4]
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	3302      	adds	r3, #2
 80027ae:	61bb      	str	r3, [r7, #24]
 80027b0:	e007      	b.n	80027c2 <HAL_UART_Transmit+0xbe>
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	781a      	ldrb	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	605a      	str	r2, [r3, #4]
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	3301      	adds	r3, #1
 80027c0:	61fb      	str	r3, [r7, #28]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	84da      	strh	r2, [r3, #38]	; 0x26
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1cf      	bne.n	800277a <HAL_UART_Transmit+0x76>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	2200      	movs	r2, #0
 80027e2:	2140      	movs	r1, #64	; 0x40
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f000 f8a2 	bl	800292e <UART_WaitOnFlagUntilTimeout>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <HAL_UART_Transmit+0xf0>
 80027f0:	2303      	movs	r3, #3
 80027f2:	e006      	b.n	8002802 <HAL_UART_Transmit+0xfe>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2220      	movs	r2, #32
 80027f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80027fc:	2300      	movs	r3, #0
 80027fe:	e000      	b.n	8002802 <HAL_UART_Transmit+0xfe>
 8002800:	2302      	movs	r3, #2
 8002802:	4618      	mov	r0, r3
 8002804:	3720      	adds	r7, #32
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_UART_Receive>:
 800280a:	b580      	push	{r7, lr}
 800280c:	b08a      	sub	sp, #40	; 0x28
 800280e:	af02      	add	r7, sp, #8
 8002810:	60f8      	str	r0, [r7, #12]
 8002812:	60b9      	str	r1, [r7, #8]
 8002814:	603b      	str	r3, [r7, #0]
 8002816:	4613      	mov	r3, r2
 8002818:	80fb      	strh	r3, [r7, #6]
 800281a:	2300      	movs	r3, #0
 800281c:	617b      	str	r3, [r7, #20]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b20      	cmp	r3, #32
 8002828:	d17c      	bne.n	8002924 <HAL_UART_Receive+0x11a>
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d002      	beq.n	8002836 <HAL_UART_Receive+0x2c>
 8002830:	88fb      	ldrh	r3, [r7, #6]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_UART_Receive+0x30>
 8002836:	2301      	movs	r3, #1
 8002838:	e075      	b.n	8002926 <HAL_UART_Receive+0x11c>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	645a      	str	r2, [r3, #68]	; 0x44
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2222      	movs	r2, #34	; 0x22
 8002844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	631a      	str	r2, [r3, #48]	; 0x30
 800284e:	f7fe fa77 	bl	8000d40 <HAL_GetTick>
 8002852:	6178      	str	r0, [r7, #20]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	88fa      	ldrh	r2, [r7, #6]
 8002858:	859a      	strh	r2, [r3, #44]	; 0x2c
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	88fa      	ldrh	r2, [r7, #6]
 800285e:	85da      	strh	r2, [r3, #46]	; 0x2e
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002868:	d108      	bne.n	800287c <HAL_UART_Receive+0x72>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d104      	bne.n	800287c <HAL_UART_Receive+0x72>
 8002872:	2300      	movs	r3, #0
 8002874:	61fb      	str	r3, [r7, #28]
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	61bb      	str	r3, [r7, #24]
 800287a:	e003      	b.n	8002884 <HAL_UART_Receive+0x7a>
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	61fb      	str	r3, [r7, #28]
 8002880:	2300      	movs	r3, #0
 8002882:	61bb      	str	r3, [r7, #24]
 8002884:	e043      	b.n	800290e <HAL_UART_Receive+0x104>
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	2200      	movs	r2, #0
 800288e:	2120      	movs	r1, #32
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f000 f84c 	bl	800292e <UART_WaitOnFlagUntilTimeout>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <HAL_UART_Receive+0x96>
 800289c:	2303      	movs	r3, #3
 800289e:	e042      	b.n	8002926 <HAL_UART_Receive+0x11c>
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10c      	bne.n	80028c0 <HAL_UART_Receive+0xb6>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	801a      	strh	r2, [r3, #0]
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	3302      	adds	r3, #2
 80028bc:	61bb      	str	r3, [r7, #24]
 80028be:	e01f      	b.n	8002900 <HAL_UART_Receive+0xf6>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028c8:	d007      	beq.n	80028da <HAL_UART_Receive+0xd0>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10a      	bne.n	80028e8 <HAL_UART_Receive+0xde>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d106      	bne.n	80028e8 <HAL_UART_Receive+0xde>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	701a      	strb	r2, [r3, #0]
 80028e6:	e008      	b.n	80028fa <HAL_UART_Receive+0xf0>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	701a      	strb	r2, [r3, #0]
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	3301      	adds	r3, #1
 80028fe:	61fb      	str	r3, [r7, #28]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002904:	b29b      	uxth	r3, r3
 8002906:	3b01      	subs	r3, #1
 8002908:	b29a      	uxth	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	85da      	strh	r2, [r3, #46]	; 0x2e
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002912:	b29b      	uxth	r3, r3
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1b6      	bne.n	8002886 <HAL_UART_Receive+0x7c>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2220      	movs	r2, #32
 800291c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002920:	2300      	movs	r3, #0
 8002922:	e000      	b.n	8002926 <HAL_UART_Receive+0x11c>
 8002924:	2302      	movs	r3, #2
 8002926:	4618      	mov	r0, r3
 8002928:	3720      	adds	r7, #32
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <UART_WaitOnFlagUntilTimeout>:
 800292e:	b580      	push	{r7, lr}
 8002930:	b090      	sub	sp, #64	; 0x40
 8002932:	af00      	add	r7, sp, #0
 8002934:	60f8      	str	r0, [r7, #12]
 8002936:	60b9      	str	r1, [r7, #8]
 8002938:	603b      	str	r3, [r7, #0]
 800293a:	4613      	mov	r3, r2
 800293c:	71fb      	strb	r3, [r7, #7]
 800293e:	e050      	b.n	80029e2 <UART_WaitOnFlagUntilTimeout+0xb4>
 8002940:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002946:	d04c      	beq.n	80029e2 <UART_WaitOnFlagUntilTimeout+0xb4>
 8002948:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800294a:	2b00      	cmp	r3, #0
 800294c:	d007      	beq.n	800295e <UART_WaitOnFlagUntilTimeout+0x30>
 800294e:	f7fe f9f7 	bl	8000d40 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800295a:	429a      	cmp	r2, r3
 800295c:	d241      	bcs.n	80029e2 <UART_WaitOnFlagUntilTimeout+0xb4>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	330c      	adds	r3, #12
 8002964:	62bb      	str	r3, [r7, #40]	; 0x28
 8002966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002968:	e853 3f00 	ldrex	r3, [r3]
 800296c:	627b      	str	r3, [r7, #36]	; 0x24
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002974:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	330c      	adds	r3, #12
 800297c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800297e:	637a      	str	r2, [r7, #52]	; 0x34
 8002980:	633b      	str	r3, [r7, #48]	; 0x30
 8002982:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002984:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002986:	e841 2300 	strex	r3, r2, [r1]
 800298a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800298c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1e5      	bne.n	800295e <UART_WaitOnFlagUntilTimeout+0x30>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	3314      	adds	r3, #20
 8002998:	617b      	str	r3, [r7, #20]
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	e853 3f00 	ldrex	r3, [r3]
 80029a0:	613b      	str	r3, [r7, #16]
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	f023 0301 	bic.w	r3, r3, #1
 80029a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	3314      	adds	r3, #20
 80029b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029b2:	623a      	str	r2, [r7, #32]
 80029b4:	61fb      	str	r3, [r7, #28]
 80029b6:	69f9      	ldr	r1, [r7, #28]
 80029b8:	6a3a      	ldr	r2, [r7, #32]
 80029ba:	e841 2300 	strex	r3, r2, [r1]
 80029be:	61bb      	str	r3, [r7, #24]
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1e5      	bne.n	8002992 <UART_WaitOnFlagUntilTimeout+0x64>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2220      	movs	r2, #32
 80029ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2220      	movs	r2, #32
 80029d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029de:	2303      	movs	r3, #3
 80029e0:	e00f      	b.n	8002a02 <UART_WaitOnFlagUntilTimeout+0xd4>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	4013      	ands	r3, r2
 80029ec:	68ba      	ldr	r2, [r7, #8]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	bf0c      	ite	eq
 80029f2:	2301      	moveq	r3, #1
 80029f4:	2300      	movne	r3, #0
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	461a      	mov	r2, r3
 80029fa:	79fb      	ldrb	r3, [r7, #7]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d09f      	beq.n	8002940 <UART_WaitOnFlagUntilTimeout+0x12>
 8002a00:	2300      	movs	r3, #0
 8002a02:	4618      	mov	r0, r3
 8002a04:	3740      	adds	r7, #64	; 0x40
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
	...

08002a0c <UART_SetConfig>:
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	68da      	ldr	r2, [r3, #12]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	611a      	str	r2, [r3, #16]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	689a      	ldr	r2, [r3, #8]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	431a      	orrs	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	60bb      	str	r3, [r7, #8]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002a46:	f023 030c 	bic.w	r3, r3, #12
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	6812      	ldr	r2, [r2, #0]
 8002a4e:	68b9      	ldr	r1, [r7, #8]
 8002a50:	430b      	orrs	r3, r1
 8002a52:	60d3      	str	r3, [r2, #12]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	699a      	ldr	r2, [r3, #24]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	430a      	orrs	r2, r1
 8002a68:	615a      	str	r2, [r3, #20]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a2c      	ldr	r2, [pc, #176]	; (8002b20 <UART_SetConfig+0x114>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d103      	bne.n	8002a7c <UART_SetConfig+0x70>
 8002a74:	f7ff fdc4 	bl	8002600 <HAL_RCC_GetPCLK2Freq>
 8002a78:	60f8      	str	r0, [r7, #12]
 8002a7a:	e002      	b.n	8002a82 <UART_SetConfig+0x76>
 8002a7c:	f7ff fdac 	bl	80025d8 <HAL_RCC_GetPCLK1Freq>
 8002a80:	60f8      	str	r0, [r7, #12]
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	4613      	mov	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4413      	add	r3, r2
 8002a8a:	009a      	lsls	r2, r3, #2
 8002a8c:	441a      	add	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a98:	4a22      	ldr	r2, [pc, #136]	; (8002b24 <UART_SetConfig+0x118>)
 8002a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9e:	095b      	lsrs	r3, r3, #5
 8002aa0:	0119      	lsls	r1, r3, #4
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	009a      	lsls	r2, r3, #2
 8002aac:	441a      	add	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ab8:	4b1a      	ldr	r3, [pc, #104]	; (8002b24 <UART_SetConfig+0x118>)
 8002aba:	fba3 0302 	umull	r0, r3, r3, r2
 8002abe:	095b      	lsrs	r3, r3, #5
 8002ac0:	2064      	movs	r0, #100	; 0x64
 8002ac2:	fb00 f303 	mul.w	r3, r0, r3
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	3332      	adds	r3, #50	; 0x32
 8002acc:	4a15      	ldr	r2, [pc, #84]	; (8002b24 <UART_SetConfig+0x118>)
 8002ace:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad2:	095b      	lsrs	r3, r3, #5
 8002ad4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ad8:	4419      	add	r1, r3
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	4613      	mov	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	009a      	lsls	r2, r3, #2
 8002ae4:	441a      	add	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	fbb2 f2f3 	udiv	r2, r2, r3
 8002af0:	4b0c      	ldr	r3, [pc, #48]	; (8002b24 <UART_SetConfig+0x118>)
 8002af2:	fba3 0302 	umull	r0, r3, r3, r2
 8002af6:	095b      	lsrs	r3, r3, #5
 8002af8:	2064      	movs	r0, #100	; 0x64
 8002afa:	fb00 f303 	mul.w	r3, r0, r3
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	011b      	lsls	r3, r3, #4
 8002b02:	3332      	adds	r3, #50	; 0x32
 8002b04:	4a07      	ldr	r2, [pc, #28]	; (8002b24 <UART_SetConfig+0x118>)
 8002b06:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0a:	095b      	lsrs	r3, r3, #5
 8002b0c:	f003 020f 	and.w	r2, r3, #15
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	440a      	add	r2, r1
 8002b16:	609a      	str	r2, [r3, #8]
 8002b18:	bf00      	nop
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40013800 	.word	0x40013800
 8002b24:	51eb851f 	.word	0x51eb851f

08002b28 <memset>:
 8002b28:	4603      	mov	r3, r0
 8002b2a:	4402      	add	r2, r0
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d100      	bne.n	8002b32 <memset+0xa>
 8002b30:	4770      	bx	lr
 8002b32:	f803 1b01 	strb.w	r1, [r3], #1
 8002b36:	e7f9      	b.n	8002b2c <memset+0x4>

08002b38 <__libc_init_array>:
 8002b38:	b570      	push	{r4, r5, r6, lr}
 8002b3a:	2600      	movs	r6, #0
 8002b3c:	4d0c      	ldr	r5, [pc, #48]	; (8002b70 <__libc_init_array+0x38>)
 8002b3e:	4c0d      	ldr	r4, [pc, #52]	; (8002b74 <__libc_init_array+0x3c>)
 8002b40:	1b64      	subs	r4, r4, r5
 8002b42:	10a4      	asrs	r4, r4, #2
 8002b44:	42a6      	cmp	r6, r4
 8002b46:	d109      	bne.n	8002b5c <__libc_init_array+0x24>
 8002b48:	f000 f81a 	bl	8002b80 <_init>
 8002b4c:	2600      	movs	r6, #0
 8002b4e:	4d0a      	ldr	r5, [pc, #40]	; (8002b78 <__libc_init_array+0x40>)
 8002b50:	4c0a      	ldr	r4, [pc, #40]	; (8002b7c <__libc_init_array+0x44>)
 8002b52:	1b64      	subs	r4, r4, r5
 8002b54:	10a4      	asrs	r4, r4, #2
 8002b56:	42a6      	cmp	r6, r4
 8002b58:	d105      	bne.n	8002b66 <__libc_init_array+0x2e>
 8002b5a:	bd70      	pop	{r4, r5, r6, pc}
 8002b5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b60:	4798      	blx	r3
 8002b62:	3601      	adds	r6, #1
 8002b64:	e7ee      	b.n	8002b44 <__libc_init_array+0xc>
 8002b66:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b6a:	4798      	blx	r3
 8002b6c:	3601      	adds	r6, #1
 8002b6e:	e7f2      	b.n	8002b56 <__libc_init_array+0x1e>
 8002b70:	08002bd4 	.word	0x08002bd4
 8002b74:	08002bd4 	.word	0x08002bd4
 8002b78:	08002bd4 	.word	0x08002bd4
 8002b7c:	08002bd8 	.word	0x08002bd8

08002b80 <_init>:
 8002b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b82:	bf00      	nop
 8002b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b86:	bc08      	pop	{r3}
 8002b88:	469e      	mov	lr, r3
 8002b8a:	4770      	bx	lr

08002b8c <_fini>:
 8002b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b8e:	bf00      	nop
 8002b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b92:	bc08      	pop	{r3}
 8002b94:	469e      	mov	lr, r3
 8002b96:	4770      	bx	lr
