
BootloaderApplication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001540  0800810c  0800810c  0000810c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800964c  0800964c  0000964c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009678  08009678  00010028  2**0
                  CONTENTS
  4 .ARM          00000000  08009678  08009678  00010028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009678  08009678  00010028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009678  08009678  00009678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800967c  0800967c  0000967c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08009680  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000028  080096a8  00010028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  080096a8  00010090  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010028  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010051  2**0
                  CONTENTS, READONLY
 13 .debug_info   000063cc  00000000  00000000  00010094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000120f  00000000  00000000  00016460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005f0  00000000  00000000  00017670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000487  00000000  00000000  00017c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015d6a  00000000  00000000  000180e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000731a  00000000  00000000  0002de51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007e1a8  00000000  00000000  0003516b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000016d8  00000000  00000000  000b3314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000b49ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800810c <__do_global_dtors_aux>:
 800810c:	b510      	push	{r4, lr}
 800810e:	4c05      	ldr	r4, [pc, #20]	; (8008124 <__do_global_dtors_aux+0x18>)
 8008110:	7823      	ldrb	r3, [r4, #0]
 8008112:	b933      	cbnz	r3, 8008122 <__do_global_dtors_aux+0x16>
 8008114:	4b04      	ldr	r3, [pc, #16]	; (8008128 <__do_global_dtors_aux+0x1c>)
 8008116:	b113      	cbz	r3, 800811e <__do_global_dtors_aux+0x12>
 8008118:	4804      	ldr	r0, [pc, #16]	; (800812c <__do_global_dtors_aux+0x20>)
 800811a:	f3af 8000 	nop.w
 800811e:	2301      	movs	r3, #1
 8008120:	7023      	strb	r3, [r4, #0]
 8008122:	bd10      	pop	{r4, pc}
 8008124:	20000028 	.word	0x20000028
 8008128:	00000000 	.word	0x00000000
 800812c:	08009634 	.word	0x08009634

08008130 <frame_dummy>:
 8008130:	b508      	push	{r3, lr}
 8008132:	4b03      	ldr	r3, [pc, #12]	; (8008140 <frame_dummy+0x10>)
 8008134:	b11b      	cbz	r3, 800813e <frame_dummy+0xe>
 8008136:	4903      	ldr	r1, [pc, #12]	; (8008144 <frame_dummy+0x14>)
 8008138:	4803      	ldr	r0, [pc, #12]	; (8008148 <frame_dummy+0x18>)
 800813a:	f3af 8000 	nop.w
 800813e:	bd08      	pop	{r3, pc}
 8008140:	00000000 	.word	0x00000000
 8008144:	2000002c 	.word	0x2000002c
 8008148:	08009634 	.word	0x08009634

0800814c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008150:	f000 f976 	bl	8008440 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008154:	f000 f814 	bl	8008180 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008158:	f000 f882 	bl	8008260 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800815c:	f000 f856 	bl	800820c <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Transmit(&huart2, Message, sizeof(Message),HAL_MAX_DELAY);
 8008160:	f04f 33ff 	mov.w	r3, #4294967295
 8008164:	2219      	movs	r2, #25
 8008166:	4904      	ldr	r1, [pc, #16]	; (8008178 <main+0x2c>)
 8008168:	4804      	ldr	r0, [pc, #16]	; (800817c <main+0x30>)
 800816a:	f001 f8b7 	bl	80092dc <HAL_UART_Transmit>
	  HAL_Delay(500);
 800816e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008172:	f000 f9c7 	bl	8008504 <HAL_Delay>
	  HAL_UART_Transmit(&huart2, Message, sizeof(Message),HAL_MAX_DELAY);
 8008176:	e7f3      	b.n	8008160 <main+0x14>
 8008178:	20000000 	.word	0x20000000
 800817c:	20000044 	.word	0x20000044

08008180 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b090      	sub	sp, #64	; 0x40
 8008184:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008186:	f107 0318 	add.w	r3, r7, #24
 800818a:	2228      	movs	r2, #40	; 0x28
 800818c:	2100      	movs	r1, #0
 800818e:	4618      	mov	r0, r3
 8008190:	f001 fa24 	bl	80095dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008194:	1d3b      	adds	r3, r7, #4
 8008196:	2200      	movs	r2, #0
 8008198:	601a      	str	r2, [r3, #0]
 800819a:	605a      	str	r2, [r3, #4]
 800819c:	609a      	str	r2, [r3, #8]
 800819e:	60da      	str	r2, [r3, #12]
 80081a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80081a2:	2301      	movs	r3, #1
 80081a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80081a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80081aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80081ac:	2300      	movs	r3, #0
 80081ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80081b0:	2301      	movs	r3, #1
 80081b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80081b4:	2302      	movs	r3, #2
 80081b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80081b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80081bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80081be:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80081c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80081c4:	f107 0318 	add.w	r3, r7, #24
 80081c8:	4618      	mov	r0, r3
 80081ca:	f000 fc27 	bl	8008a1c <HAL_RCC_OscConfig>
 80081ce:	4603      	mov	r3, r0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d001      	beq.n	80081d8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80081d4:	f000 f866 	bl	80082a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80081d8:	230f      	movs	r3, #15
 80081da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80081dc:	2302      	movs	r3, #2
 80081de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80081e0:	2300      	movs	r3, #0
 80081e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80081e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80081ea:	2300      	movs	r3, #0
 80081ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80081ee:	1d3b      	adds	r3, r7, #4
 80081f0:	2102      	movs	r1, #2
 80081f2:	4618      	mov	r0, r3
 80081f4:	f000 fe94 	bl	8008f20 <HAL_RCC_ClockConfig>
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d001      	beq.n	8008202 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80081fe:	f000 f851 	bl	80082a4 <Error_Handler>
  }
}
 8008202:	bf00      	nop
 8008204:	3740      	adds	r7, #64	; 0x40
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
	...

0800820c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008210:	4b11      	ldr	r3, [pc, #68]	; (8008258 <MX_USART2_UART_Init+0x4c>)
 8008212:	4a12      	ldr	r2, [pc, #72]	; (800825c <MX_USART2_UART_Init+0x50>)
 8008214:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8008216:	4b10      	ldr	r3, [pc, #64]	; (8008258 <MX_USART2_UART_Init+0x4c>)
 8008218:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800821c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800821e:	4b0e      	ldr	r3, [pc, #56]	; (8008258 <MX_USART2_UART_Init+0x4c>)
 8008220:	2200      	movs	r2, #0
 8008222:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008224:	4b0c      	ldr	r3, [pc, #48]	; (8008258 <MX_USART2_UART_Init+0x4c>)
 8008226:	2200      	movs	r2, #0
 8008228:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800822a:	4b0b      	ldr	r3, [pc, #44]	; (8008258 <MX_USART2_UART_Init+0x4c>)
 800822c:	2200      	movs	r2, #0
 800822e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008230:	4b09      	ldr	r3, [pc, #36]	; (8008258 <MX_USART2_UART_Init+0x4c>)
 8008232:	220c      	movs	r2, #12
 8008234:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008236:	4b08      	ldr	r3, [pc, #32]	; (8008258 <MX_USART2_UART_Init+0x4c>)
 8008238:	2200      	movs	r2, #0
 800823a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800823c:	4b06      	ldr	r3, [pc, #24]	; (8008258 <MX_USART2_UART_Init+0x4c>)
 800823e:	2200      	movs	r2, #0
 8008240:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008242:	4805      	ldr	r0, [pc, #20]	; (8008258 <MX_USART2_UART_Init+0x4c>)
 8008244:	f000 fffa 	bl	800923c <HAL_UART_Init>
 8008248:	4603      	mov	r3, r0
 800824a:	2b00      	cmp	r3, #0
 800824c:	d001      	beq.n	8008252 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800824e:	f000 f829 	bl	80082a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008252:	bf00      	nop
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	20000044 	.word	0x20000044
 800825c:	40004400 	.word	0x40004400

08008260 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008266:	4b0e      	ldr	r3, [pc, #56]	; (80082a0 <MX_GPIO_Init+0x40>)
 8008268:	699b      	ldr	r3, [r3, #24]
 800826a:	4a0d      	ldr	r2, [pc, #52]	; (80082a0 <MX_GPIO_Init+0x40>)
 800826c:	f043 0320 	orr.w	r3, r3, #32
 8008270:	6193      	str	r3, [r2, #24]
 8008272:	4b0b      	ldr	r3, [pc, #44]	; (80082a0 <MX_GPIO_Init+0x40>)
 8008274:	699b      	ldr	r3, [r3, #24]
 8008276:	f003 0320 	and.w	r3, r3, #32
 800827a:	607b      	str	r3, [r7, #4]
 800827c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800827e:	4b08      	ldr	r3, [pc, #32]	; (80082a0 <MX_GPIO_Init+0x40>)
 8008280:	699b      	ldr	r3, [r3, #24]
 8008282:	4a07      	ldr	r2, [pc, #28]	; (80082a0 <MX_GPIO_Init+0x40>)
 8008284:	f043 0304 	orr.w	r3, r3, #4
 8008288:	6193      	str	r3, [r2, #24]
 800828a:	4b05      	ldr	r3, [pc, #20]	; (80082a0 <MX_GPIO_Init+0x40>)
 800828c:	699b      	ldr	r3, [r3, #24]
 800828e:	f003 0304 	and.w	r3, r3, #4
 8008292:	603b      	str	r3, [r7, #0]
 8008294:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008296:	bf00      	nop
 8008298:	370c      	adds	r7, #12
 800829a:	46bd      	mov	sp, r7
 800829c:	bc80      	pop	{r7}
 800829e:	4770      	bx	lr
 80082a0:	40021000 	.word	0x40021000

080082a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80082a4:	b480      	push	{r7}
 80082a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80082a8:	b672      	cpsid	i
}
 80082aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80082ac:	e7fe      	b.n	80082ac <Error_Handler+0x8>
	...

080082b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80082b6:	4b0e      	ldr	r3, [pc, #56]	; (80082f0 <HAL_MspInit+0x40>)
 80082b8:	699b      	ldr	r3, [r3, #24]
 80082ba:	4a0d      	ldr	r2, [pc, #52]	; (80082f0 <HAL_MspInit+0x40>)
 80082bc:	f043 0301 	orr.w	r3, r3, #1
 80082c0:	6193      	str	r3, [r2, #24]
 80082c2:	4b0b      	ldr	r3, [pc, #44]	; (80082f0 <HAL_MspInit+0x40>)
 80082c4:	699b      	ldr	r3, [r3, #24]
 80082c6:	f003 0301 	and.w	r3, r3, #1
 80082ca:	607b      	str	r3, [r7, #4]
 80082cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80082ce:	4b08      	ldr	r3, [pc, #32]	; (80082f0 <HAL_MspInit+0x40>)
 80082d0:	69db      	ldr	r3, [r3, #28]
 80082d2:	4a07      	ldr	r2, [pc, #28]	; (80082f0 <HAL_MspInit+0x40>)
 80082d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082d8:	61d3      	str	r3, [r2, #28]
 80082da:	4b05      	ldr	r3, [pc, #20]	; (80082f0 <HAL_MspInit+0x40>)
 80082dc:	69db      	ldr	r3, [r3, #28]
 80082de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082e2:	603b      	str	r3, [r7, #0]
 80082e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80082e6:	bf00      	nop
 80082e8:	370c      	adds	r7, #12
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bc80      	pop	{r7}
 80082ee:	4770      	bx	lr
 80082f0:	40021000 	.word	0x40021000

080082f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b088      	sub	sp, #32
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082fc:	f107 0310 	add.w	r3, r7, #16
 8008300:	2200      	movs	r2, #0
 8008302:	601a      	str	r2, [r3, #0]
 8008304:	605a      	str	r2, [r3, #4]
 8008306:	609a      	str	r2, [r3, #8]
 8008308:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a1b      	ldr	r2, [pc, #108]	; (800837c <HAL_UART_MspInit+0x88>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d12f      	bne.n	8008374 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008314:	4b1a      	ldr	r3, [pc, #104]	; (8008380 <HAL_UART_MspInit+0x8c>)
 8008316:	69db      	ldr	r3, [r3, #28]
 8008318:	4a19      	ldr	r2, [pc, #100]	; (8008380 <HAL_UART_MspInit+0x8c>)
 800831a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800831e:	61d3      	str	r3, [r2, #28]
 8008320:	4b17      	ldr	r3, [pc, #92]	; (8008380 <HAL_UART_MspInit+0x8c>)
 8008322:	69db      	ldr	r3, [r3, #28]
 8008324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008328:	60fb      	str	r3, [r7, #12]
 800832a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800832c:	4b14      	ldr	r3, [pc, #80]	; (8008380 <HAL_UART_MspInit+0x8c>)
 800832e:	699b      	ldr	r3, [r3, #24]
 8008330:	4a13      	ldr	r2, [pc, #76]	; (8008380 <HAL_UART_MspInit+0x8c>)
 8008332:	f043 0304 	orr.w	r3, r3, #4
 8008336:	6193      	str	r3, [r2, #24]
 8008338:	4b11      	ldr	r3, [pc, #68]	; (8008380 <HAL_UART_MspInit+0x8c>)
 800833a:	699b      	ldr	r3, [r3, #24]
 800833c:	f003 0304 	and.w	r3, r3, #4
 8008340:	60bb      	str	r3, [r7, #8]
 8008342:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008344:	2304      	movs	r3, #4
 8008346:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008348:	2302      	movs	r3, #2
 800834a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800834c:	2303      	movs	r3, #3
 800834e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008350:	f107 0310 	add.w	r3, r7, #16
 8008354:	4619      	mov	r1, r3
 8008356:	480b      	ldr	r0, [pc, #44]	; (8008384 <HAL_UART_MspInit+0x90>)
 8008358:	f000 f9dc 	bl	8008714 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800835c:	2308      	movs	r3, #8
 800835e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008360:	2300      	movs	r3, #0
 8008362:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008364:	2300      	movs	r3, #0
 8008366:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008368:	f107 0310 	add.w	r3, r7, #16
 800836c:	4619      	mov	r1, r3
 800836e:	4805      	ldr	r0, [pc, #20]	; (8008384 <HAL_UART_MspInit+0x90>)
 8008370:	f000 f9d0 	bl	8008714 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8008374:	bf00      	nop
 8008376:	3720      	adds	r7, #32
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}
 800837c:	40004400 	.word	0x40004400
 8008380:	40021000 	.word	0x40021000
 8008384:	40010800 	.word	0x40010800

08008388 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008388:	b480      	push	{r7}
 800838a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800838c:	e7fe      	b.n	800838c <NMI_Handler+0x4>

0800838e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800838e:	b480      	push	{r7}
 8008390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008392:	e7fe      	b.n	8008392 <HardFault_Handler+0x4>

08008394 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008394:	b480      	push	{r7}
 8008396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008398:	e7fe      	b.n	8008398 <MemManage_Handler+0x4>

0800839a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800839a:	b480      	push	{r7}
 800839c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800839e:	e7fe      	b.n	800839e <BusFault_Handler+0x4>

080083a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80083a0:	b480      	push	{r7}
 80083a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80083a4:	e7fe      	b.n	80083a4 <UsageFault_Handler+0x4>

080083a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80083a6:	b480      	push	{r7}
 80083a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80083aa:	bf00      	nop
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bc80      	pop	{r7}
 80083b0:	4770      	bx	lr

080083b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80083b2:	b480      	push	{r7}
 80083b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80083b6:	bf00      	nop
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bc80      	pop	{r7}
 80083bc:	4770      	bx	lr

080083be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80083be:	b480      	push	{r7}
 80083c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80083c2:	bf00      	nop
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bc80      	pop	{r7}
 80083c8:	4770      	bx	lr

080083ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80083ca:	b580      	push	{r7, lr}
 80083cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80083ce:	f000 f87d 	bl	80084cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80083d2:	bf00      	nop
 80083d4:	bd80      	pop	{r7, pc}
	...

080083d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80083d8:	b480      	push	{r7}
 80083da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | 0x8000; /* Vector Table Relocation in Internal FLASH. */
 80083dc:	4b03      	ldr	r3, [pc, #12]	; (80083ec <SystemInit+0x14>)
 80083de:	4a04      	ldr	r2, [pc, #16]	; (80083f0 <SystemInit+0x18>)
 80083e0:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80083e2:	bf00      	nop
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bc80      	pop	{r7}
 80083e8:	4770      	bx	lr
 80083ea:	bf00      	nop
 80083ec:	e000ed00 	.word	0xe000ed00
 80083f0:	08008000 	.word	0x08008000

080083f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80083f4:	f7ff fff0 	bl	80083d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80083f8:	480b      	ldr	r0, [pc, #44]	; (8008428 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80083fa:	490c      	ldr	r1, [pc, #48]	; (800842c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80083fc:	4a0c      	ldr	r2, [pc, #48]	; (8008430 <LoopFillZerobss+0x16>)
  movs r3, #0
 80083fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008400:	e002      	b.n	8008408 <LoopCopyDataInit>

08008402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008406:	3304      	adds	r3, #4

08008408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800840a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800840c:	d3f9      	bcc.n	8008402 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800840e:	4a09      	ldr	r2, [pc, #36]	; (8008434 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8008410:	4c09      	ldr	r4, [pc, #36]	; (8008438 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8008412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008414:	e001      	b.n	800841a <LoopFillZerobss>

08008416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008418:	3204      	adds	r2, #4

0800841a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800841a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800841c:	d3fb      	bcc.n	8008416 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800841e:	f001 f8e5 	bl	80095ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008422:	f7ff fe93 	bl	800814c <main>
  bx lr
 8008426:	4770      	bx	lr
  ldr r0, =_sdata
 8008428:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800842c:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8008430:	08009680 	.word	0x08009680
  ldr r2, =_sbss
 8008434:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8008438:	20000090 	.word	0x20000090

0800843c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800843c:	e7fe      	b.n	800843c <ADC1_2_IRQHandler>
	...

08008440 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008444:	4b08      	ldr	r3, [pc, #32]	; (8008468 <HAL_Init+0x28>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a07      	ldr	r2, [pc, #28]	; (8008468 <HAL_Init+0x28>)
 800844a:	f043 0310 	orr.w	r3, r3, #16
 800844e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008450:	2003      	movs	r0, #3
 8008452:	f000 f92b 	bl	80086ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008456:	200f      	movs	r0, #15
 8008458:	f000 f808 	bl	800846c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800845c:	f7ff ff28 	bl	80082b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008460:	2300      	movs	r3, #0
}
 8008462:	4618      	mov	r0, r3
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	40022000 	.word	0x40022000

0800846c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b082      	sub	sp, #8
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008474:	4b12      	ldr	r3, [pc, #72]	; (80084c0 <HAL_InitTick+0x54>)
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	4b12      	ldr	r3, [pc, #72]	; (80084c4 <HAL_InitTick+0x58>)
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	4619      	mov	r1, r3
 800847e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008482:	fbb3 f3f1 	udiv	r3, r3, r1
 8008486:	fbb2 f3f3 	udiv	r3, r2, r3
 800848a:	4618      	mov	r0, r3
 800848c:	f000 f935 	bl	80086fa <HAL_SYSTICK_Config>
 8008490:	4603      	mov	r3, r0
 8008492:	2b00      	cmp	r3, #0
 8008494:	d001      	beq.n	800849a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	e00e      	b.n	80084b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2b0f      	cmp	r3, #15
 800849e:	d80a      	bhi.n	80084b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80084a0:	2200      	movs	r2, #0
 80084a2:	6879      	ldr	r1, [r7, #4]
 80084a4:	f04f 30ff 	mov.w	r0, #4294967295
 80084a8:	f000 f90b 	bl	80086c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80084ac:	4a06      	ldr	r2, [pc, #24]	; (80084c8 <HAL_InitTick+0x5c>)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80084b2:	2300      	movs	r3, #0
 80084b4:	e000      	b.n	80084b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80084b6:	2301      	movs	r3, #1
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3708      	adds	r7, #8
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}
 80084c0:	2000001c 	.word	0x2000001c
 80084c4:	20000024 	.word	0x20000024
 80084c8:	20000020 	.word	0x20000020

080084cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80084cc:	b480      	push	{r7}
 80084ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80084d0:	4b05      	ldr	r3, [pc, #20]	; (80084e8 <HAL_IncTick+0x1c>)
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	461a      	mov	r2, r3
 80084d6:	4b05      	ldr	r3, [pc, #20]	; (80084ec <HAL_IncTick+0x20>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4413      	add	r3, r2
 80084dc:	4a03      	ldr	r2, [pc, #12]	; (80084ec <HAL_IncTick+0x20>)
 80084de:	6013      	str	r3, [r2, #0]
}
 80084e0:	bf00      	nop
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bc80      	pop	{r7}
 80084e6:	4770      	bx	lr
 80084e8:	20000024 	.word	0x20000024
 80084ec:	2000008c 	.word	0x2000008c

080084f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80084f0:	b480      	push	{r7}
 80084f2:	af00      	add	r7, sp, #0
  return uwTick;
 80084f4:	4b02      	ldr	r3, [pc, #8]	; (8008500 <HAL_GetTick+0x10>)
 80084f6:	681b      	ldr	r3, [r3, #0]
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bc80      	pop	{r7}
 80084fe:	4770      	bx	lr
 8008500:	2000008c 	.word	0x2000008c

08008504 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800850c:	f7ff fff0 	bl	80084f0 <HAL_GetTick>
 8008510:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800851c:	d005      	beq.n	800852a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800851e:	4b0a      	ldr	r3, [pc, #40]	; (8008548 <HAL_Delay+0x44>)
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	461a      	mov	r2, r3
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	4413      	add	r3, r2
 8008528:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800852a:	bf00      	nop
 800852c:	f7ff ffe0 	bl	80084f0 <HAL_GetTick>
 8008530:	4602      	mov	r2, r0
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	1ad3      	subs	r3, r2, r3
 8008536:	68fa      	ldr	r2, [r7, #12]
 8008538:	429a      	cmp	r2, r3
 800853a:	d8f7      	bhi.n	800852c <HAL_Delay+0x28>
  {
  }
}
 800853c:	bf00      	nop
 800853e:	bf00      	nop
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop
 8008548:	20000024 	.word	0x20000024

0800854c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800854c:	b480      	push	{r7}
 800854e:	b085      	sub	sp, #20
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f003 0307 	and.w	r3, r3, #7
 800855a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800855c:	4b0c      	ldr	r3, [pc, #48]	; (8008590 <__NVIC_SetPriorityGrouping+0x44>)
 800855e:	68db      	ldr	r3, [r3, #12]
 8008560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008562:	68ba      	ldr	r2, [r7, #8]
 8008564:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008568:	4013      	ands	r3, r2
 800856a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008574:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800857c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800857e:	4a04      	ldr	r2, [pc, #16]	; (8008590 <__NVIC_SetPriorityGrouping+0x44>)
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	60d3      	str	r3, [r2, #12]
}
 8008584:	bf00      	nop
 8008586:	3714      	adds	r7, #20
 8008588:	46bd      	mov	sp, r7
 800858a:	bc80      	pop	{r7}
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop
 8008590:	e000ed00 	.word	0xe000ed00

08008594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008594:	b480      	push	{r7}
 8008596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008598:	4b04      	ldr	r3, [pc, #16]	; (80085ac <__NVIC_GetPriorityGrouping+0x18>)
 800859a:	68db      	ldr	r3, [r3, #12]
 800859c:	0a1b      	lsrs	r3, r3, #8
 800859e:	f003 0307 	and.w	r3, r3, #7
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bc80      	pop	{r7}
 80085a8:	4770      	bx	lr
 80085aa:	bf00      	nop
 80085ac:	e000ed00 	.word	0xe000ed00

080085b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	4603      	mov	r3, r0
 80085b8:	6039      	str	r1, [r7, #0]
 80085ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80085bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	db0a      	blt.n	80085da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	b2da      	uxtb	r2, r3
 80085c8:	490c      	ldr	r1, [pc, #48]	; (80085fc <__NVIC_SetPriority+0x4c>)
 80085ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085ce:	0112      	lsls	r2, r2, #4
 80085d0:	b2d2      	uxtb	r2, r2
 80085d2:	440b      	add	r3, r1
 80085d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80085d8:	e00a      	b.n	80085f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	b2da      	uxtb	r2, r3
 80085de:	4908      	ldr	r1, [pc, #32]	; (8008600 <__NVIC_SetPriority+0x50>)
 80085e0:	79fb      	ldrb	r3, [r7, #7]
 80085e2:	f003 030f 	and.w	r3, r3, #15
 80085e6:	3b04      	subs	r3, #4
 80085e8:	0112      	lsls	r2, r2, #4
 80085ea:	b2d2      	uxtb	r2, r2
 80085ec:	440b      	add	r3, r1
 80085ee:	761a      	strb	r2, [r3, #24]
}
 80085f0:	bf00      	nop
 80085f2:	370c      	adds	r7, #12
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bc80      	pop	{r7}
 80085f8:	4770      	bx	lr
 80085fa:	bf00      	nop
 80085fc:	e000e100 	.word	0xe000e100
 8008600:	e000ed00 	.word	0xe000ed00

08008604 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008604:	b480      	push	{r7}
 8008606:	b089      	sub	sp, #36	; 0x24
 8008608:	af00      	add	r7, sp, #0
 800860a:	60f8      	str	r0, [r7, #12]
 800860c:	60b9      	str	r1, [r7, #8]
 800860e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f003 0307 	and.w	r3, r3, #7
 8008616:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	f1c3 0307 	rsb	r3, r3, #7
 800861e:	2b04      	cmp	r3, #4
 8008620:	bf28      	it	cs
 8008622:	2304      	movcs	r3, #4
 8008624:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008626:	69fb      	ldr	r3, [r7, #28]
 8008628:	3304      	adds	r3, #4
 800862a:	2b06      	cmp	r3, #6
 800862c:	d902      	bls.n	8008634 <NVIC_EncodePriority+0x30>
 800862e:	69fb      	ldr	r3, [r7, #28]
 8008630:	3b03      	subs	r3, #3
 8008632:	e000      	b.n	8008636 <NVIC_EncodePriority+0x32>
 8008634:	2300      	movs	r3, #0
 8008636:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008638:	f04f 32ff 	mov.w	r2, #4294967295
 800863c:	69bb      	ldr	r3, [r7, #24]
 800863e:	fa02 f303 	lsl.w	r3, r2, r3
 8008642:	43da      	mvns	r2, r3
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	401a      	ands	r2, r3
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800864c:	f04f 31ff 	mov.w	r1, #4294967295
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	fa01 f303 	lsl.w	r3, r1, r3
 8008656:	43d9      	mvns	r1, r3
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800865c:	4313      	orrs	r3, r2
         );
}
 800865e:	4618      	mov	r0, r3
 8008660:	3724      	adds	r7, #36	; 0x24
 8008662:	46bd      	mov	sp, r7
 8008664:	bc80      	pop	{r7}
 8008666:	4770      	bx	lr

08008668 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b082      	sub	sp, #8
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	3b01      	subs	r3, #1
 8008674:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008678:	d301      	bcc.n	800867e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800867a:	2301      	movs	r3, #1
 800867c:	e00f      	b.n	800869e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800867e:	4a0a      	ldr	r2, [pc, #40]	; (80086a8 <SysTick_Config+0x40>)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	3b01      	subs	r3, #1
 8008684:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008686:	210f      	movs	r1, #15
 8008688:	f04f 30ff 	mov.w	r0, #4294967295
 800868c:	f7ff ff90 	bl	80085b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008690:	4b05      	ldr	r3, [pc, #20]	; (80086a8 <SysTick_Config+0x40>)
 8008692:	2200      	movs	r2, #0
 8008694:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008696:	4b04      	ldr	r3, [pc, #16]	; (80086a8 <SysTick_Config+0x40>)
 8008698:	2207      	movs	r2, #7
 800869a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800869c:	2300      	movs	r3, #0
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3708      	adds	r7, #8
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	bf00      	nop
 80086a8:	e000e010 	.word	0xe000e010

080086ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f7ff ff49 	bl	800854c <__NVIC_SetPriorityGrouping>
}
 80086ba:	bf00      	nop
 80086bc:	3708      	adds	r7, #8
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}

080086c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80086c2:	b580      	push	{r7, lr}
 80086c4:	b086      	sub	sp, #24
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	4603      	mov	r3, r0
 80086ca:	60b9      	str	r1, [r7, #8]
 80086cc:	607a      	str	r2, [r7, #4]
 80086ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80086d0:	2300      	movs	r3, #0
 80086d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80086d4:	f7ff ff5e 	bl	8008594 <__NVIC_GetPriorityGrouping>
 80086d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	68b9      	ldr	r1, [r7, #8]
 80086de:	6978      	ldr	r0, [r7, #20]
 80086e0:	f7ff ff90 	bl	8008604 <NVIC_EncodePriority>
 80086e4:	4602      	mov	r2, r0
 80086e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086ea:	4611      	mov	r1, r2
 80086ec:	4618      	mov	r0, r3
 80086ee:	f7ff ff5f 	bl	80085b0 <__NVIC_SetPriority>
}
 80086f2:	bf00      	nop
 80086f4:	3718      	adds	r7, #24
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}

080086fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80086fa:	b580      	push	{r7, lr}
 80086fc:	b082      	sub	sp, #8
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f7ff ffb0 	bl	8008668 <SysTick_Config>
 8008708:	4603      	mov	r3, r0
}
 800870a:	4618      	mov	r0, r3
 800870c:	3708      	adds	r7, #8
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
	...

08008714 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008714:	b480      	push	{r7}
 8008716:	b08b      	sub	sp, #44	; 0x2c
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800871e:	2300      	movs	r3, #0
 8008720:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008722:	2300      	movs	r3, #0
 8008724:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008726:	e169      	b.n	80089fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008728:	2201      	movs	r2, #1
 800872a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872c:	fa02 f303 	lsl.w	r3, r2, r3
 8008730:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	69fa      	ldr	r2, [r7, #28]
 8008738:	4013      	ands	r3, r2
 800873a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800873c:	69ba      	ldr	r2, [r7, #24]
 800873e:	69fb      	ldr	r3, [r7, #28]
 8008740:	429a      	cmp	r2, r3
 8008742:	f040 8158 	bne.w	80089f6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	4a9a      	ldr	r2, [pc, #616]	; (80089b4 <HAL_GPIO_Init+0x2a0>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d05e      	beq.n	800880e <HAL_GPIO_Init+0xfa>
 8008750:	4a98      	ldr	r2, [pc, #608]	; (80089b4 <HAL_GPIO_Init+0x2a0>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d875      	bhi.n	8008842 <HAL_GPIO_Init+0x12e>
 8008756:	4a98      	ldr	r2, [pc, #608]	; (80089b8 <HAL_GPIO_Init+0x2a4>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d058      	beq.n	800880e <HAL_GPIO_Init+0xfa>
 800875c:	4a96      	ldr	r2, [pc, #600]	; (80089b8 <HAL_GPIO_Init+0x2a4>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d86f      	bhi.n	8008842 <HAL_GPIO_Init+0x12e>
 8008762:	4a96      	ldr	r2, [pc, #600]	; (80089bc <HAL_GPIO_Init+0x2a8>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d052      	beq.n	800880e <HAL_GPIO_Init+0xfa>
 8008768:	4a94      	ldr	r2, [pc, #592]	; (80089bc <HAL_GPIO_Init+0x2a8>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d869      	bhi.n	8008842 <HAL_GPIO_Init+0x12e>
 800876e:	4a94      	ldr	r2, [pc, #592]	; (80089c0 <HAL_GPIO_Init+0x2ac>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d04c      	beq.n	800880e <HAL_GPIO_Init+0xfa>
 8008774:	4a92      	ldr	r2, [pc, #584]	; (80089c0 <HAL_GPIO_Init+0x2ac>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d863      	bhi.n	8008842 <HAL_GPIO_Init+0x12e>
 800877a:	4a92      	ldr	r2, [pc, #584]	; (80089c4 <HAL_GPIO_Init+0x2b0>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d046      	beq.n	800880e <HAL_GPIO_Init+0xfa>
 8008780:	4a90      	ldr	r2, [pc, #576]	; (80089c4 <HAL_GPIO_Init+0x2b0>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d85d      	bhi.n	8008842 <HAL_GPIO_Init+0x12e>
 8008786:	2b12      	cmp	r3, #18
 8008788:	d82a      	bhi.n	80087e0 <HAL_GPIO_Init+0xcc>
 800878a:	2b12      	cmp	r3, #18
 800878c:	d859      	bhi.n	8008842 <HAL_GPIO_Init+0x12e>
 800878e:	a201      	add	r2, pc, #4	; (adr r2, 8008794 <HAL_GPIO_Init+0x80>)
 8008790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008794:	0800880f 	.word	0x0800880f
 8008798:	080087e9 	.word	0x080087e9
 800879c:	080087fb 	.word	0x080087fb
 80087a0:	0800883d 	.word	0x0800883d
 80087a4:	08008843 	.word	0x08008843
 80087a8:	08008843 	.word	0x08008843
 80087ac:	08008843 	.word	0x08008843
 80087b0:	08008843 	.word	0x08008843
 80087b4:	08008843 	.word	0x08008843
 80087b8:	08008843 	.word	0x08008843
 80087bc:	08008843 	.word	0x08008843
 80087c0:	08008843 	.word	0x08008843
 80087c4:	08008843 	.word	0x08008843
 80087c8:	08008843 	.word	0x08008843
 80087cc:	08008843 	.word	0x08008843
 80087d0:	08008843 	.word	0x08008843
 80087d4:	08008843 	.word	0x08008843
 80087d8:	080087f1 	.word	0x080087f1
 80087dc:	08008805 	.word	0x08008805
 80087e0:	4a79      	ldr	r2, [pc, #484]	; (80089c8 <HAL_GPIO_Init+0x2b4>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d013      	beq.n	800880e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80087e6:	e02c      	b.n	8008842 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	68db      	ldr	r3, [r3, #12]
 80087ec:	623b      	str	r3, [r7, #32]
          break;
 80087ee:	e029      	b.n	8008844 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	68db      	ldr	r3, [r3, #12]
 80087f4:	3304      	adds	r3, #4
 80087f6:	623b      	str	r3, [r7, #32]
          break;
 80087f8:	e024      	b.n	8008844 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	68db      	ldr	r3, [r3, #12]
 80087fe:	3308      	adds	r3, #8
 8008800:	623b      	str	r3, [r7, #32]
          break;
 8008802:	e01f      	b.n	8008844 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	68db      	ldr	r3, [r3, #12]
 8008808:	330c      	adds	r3, #12
 800880a:	623b      	str	r3, [r7, #32]
          break;
 800880c:	e01a      	b.n	8008844 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d102      	bne.n	800881c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008816:	2304      	movs	r3, #4
 8008818:	623b      	str	r3, [r7, #32]
          break;
 800881a:	e013      	b.n	8008844 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	689b      	ldr	r3, [r3, #8]
 8008820:	2b01      	cmp	r3, #1
 8008822:	d105      	bne.n	8008830 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008824:	2308      	movs	r3, #8
 8008826:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	69fa      	ldr	r2, [r7, #28]
 800882c:	611a      	str	r2, [r3, #16]
          break;
 800882e:	e009      	b.n	8008844 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008830:	2308      	movs	r3, #8
 8008832:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	69fa      	ldr	r2, [r7, #28]
 8008838:	615a      	str	r2, [r3, #20]
          break;
 800883a:	e003      	b.n	8008844 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800883c:	2300      	movs	r3, #0
 800883e:	623b      	str	r3, [r7, #32]
          break;
 8008840:	e000      	b.n	8008844 <HAL_GPIO_Init+0x130>
          break;
 8008842:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008844:	69bb      	ldr	r3, [r7, #24]
 8008846:	2bff      	cmp	r3, #255	; 0xff
 8008848:	d801      	bhi.n	800884e <HAL_GPIO_Init+0x13a>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	e001      	b.n	8008852 <HAL_GPIO_Init+0x13e>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	3304      	adds	r3, #4
 8008852:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008854:	69bb      	ldr	r3, [r7, #24]
 8008856:	2bff      	cmp	r3, #255	; 0xff
 8008858:	d802      	bhi.n	8008860 <HAL_GPIO_Init+0x14c>
 800885a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885c:	009b      	lsls	r3, r3, #2
 800885e:	e002      	b.n	8008866 <HAL_GPIO_Init+0x152>
 8008860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008862:	3b08      	subs	r3, #8
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	210f      	movs	r1, #15
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	fa01 f303 	lsl.w	r3, r1, r3
 8008874:	43db      	mvns	r3, r3
 8008876:	401a      	ands	r2, r3
 8008878:	6a39      	ldr	r1, [r7, #32]
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	fa01 f303 	lsl.w	r3, r1, r3
 8008880:	431a      	orrs	r2, r3
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800888e:	2b00      	cmp	r3, #0
 8008890:	f000 80b1 	beq.w	80089f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008894:	4b4d      	ldr	r3, [pc, #308]	; (80089cc <HAL_GPIO_Init+0x2b8>)
 8008896:	699b      	ldr	r3, [r3, #24]
 8008898:	4a4c      	ldr	r2, [pc, #304]	; (80089cc <HAL_GPIO_Init+0x2b8>)
 800889a:	f043 0301 	orr.w	r3, r3, #1
 800889e:	6193      	str	r3, [r2, #24]
 80088a0:	4b4a      	ldr	r3, [pc, #296]	; (80089cc <HAL_GPIO_Init+0x2b8>)
 80088a2:	699b      	ldr	r3, [r3, #24]
 80088a4:	f003 0301 	and.w	r3, r3, #1
 80088a8:	60bb      	str	r3, [r7, #8]
 80088aa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80088ac:	4a48      	ldr	r2, [pc, #288]	; (80089d0 <HAL_GPIO_Init+0x2bc>)
 80088ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b0:	089b      	lsrs	r3, r3, #2
 80088b2:	3302      	adds	r3, #2
 80088b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088b8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80088ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088bc:	f003 0303 	and.w	r3, r3, #3
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	220f      	movs	r2, #15
 80088c4:	fa02 f303 	lsl.w	r3, r2, r3
 80088c8:	43db      	mvns	r3, r3
 80088ca:	68fa      	ldr	r2, [r7, #12]
 80088cc:	4013      	ands	r3, r2
 80088ce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	4a40      	ldr	r2, [pc, #256]	; (80089d4 <HAL_GPIO_Init+0x2c0>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d013      	beq.n	8008900 <HAL_GPIO_Init+0x1ec>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	4a3f      	ldr	r2, [pc, #252]	; (80089d8 <HAL_GPIO_Init+0x2c4>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d00d      	beq.n	80088fc <HAL_GPIO_Init+0x1e8>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	4a3e      	ldr	r2, [pc, #248]	; (80089dc <HAL_GPIO_Init+0x2c8>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d007      	beq.n	80088f8 <HAL_GPIO_Init+0x1e4>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	4a3d      	ldr	r2, [pc, #244]	; (80089e0 <HAL_GPIO_Init+0x2cc>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d101      	bne.n	80088f4 <HAL_GPIO_Init+0x1e0>
 80088f0:	2303      	movs	r3, #3
 80088f2:	e006      	b.n	8008902 <HAL_GPIO_Init+0x1ee>
 80088f4:	2304      	movs	r3, #4
 80088f6:	e004      	b.n	8008902 <HAL_GPIO_Init+0x1ee>
 80088f8:	2302      	movs	r3, #2
 80088fa:	e002      	b.n	8008902 <HAL_GPIO_Init+0x1ee>
 80088fc:	2301      	movs	r3, #1
 80088fe:	e000      	b.n	8008902 <HAL_GPIO_Init+0x1ee>
 8008900:	2300      	movs	r3, #0
 8008902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008904:	f002 0203 	and.w	r2, r2, #3
 8008908:	0092      	lsls	r2, r2, #2
 800890a:	4093      	lsls	r3, r2
 800890c:	68fa      	ldr	r2, [r7, #12]
 800890e:	4313      	orrs	r3, r2
 8008910:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8008912:	492f      	ldr	r1, [pc, #188]	; (80089d0 <HAL_GPIO_Init+0x2bc>)
 8008914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008916:	089b      	lsrs	r3, r3, #2
 8008918:	3302      	adds	r3, #2
 800891a:	68fa      	ldr	r2, [r7, #12]
 800891c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008928:	2b00      	cmp	r3, #0
 800892a:	d006      	beq.n	800893a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800892c:	4b2d      	ldr	r3, [pc, #180]	; (80089e4 <HAL_GPIO_Init+0x2d0>)
 800892e:	689a      	ldr	r2, [r3, #8]
 8008930:	492c      	ldr	r1, [pc, #176]	; (80089e4 <HAL_GPIO_Init+0x2d0>)
 8008932:	69bb      	ldr	r3, [r7, #24]
 8008934:	4313      	orrs	r3, r2
 8008936:	608b      	str	r3, [r1, #8]
 8008938:	e006      	b.n	8008948 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800893a:	4b2a      	ldr	r3, [pc, #168]	; (80089e4 <HAL_GPIO_Init+0x2d0>)
 800893c:	689a      	ldr	r2, [r3, #8]
 800893e:	69bb      	ldr	r3, [r7, #24]
 8008940:	43db      	mvns	r3, r3
 8008942:	4928      	ldr	r1, [pc, #160]	; (80089e4 <HAL_GPIO_Init+0x2d0>)
 8008944:	4013      	ands	r3, r2
 8008946:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008950:	2b00      	cmp	r3, #0
 8008952:	d006      	beq.n	8008962 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008954:	4b23      	ldr	r3, [pc, #140]	; (80089e4 <HAL_GPIO_Init+0x2d0>)
 8008956:	68da      	ldr	r2, [r3, #12]
 8008958:	4922      	ldr	r1, [pc, #136]	; (80089e4 <HAL_GPIO_Init+0x2d0>)
 800895a:	69bb      	ldr	r3, [r7, #24]
 800895c:	4313      	orrs	r3, r2
 800895e:	60cb      	str	r3, [r1, #12]
 8008960:	e006      	b.n	8008970 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008962:	4b20      	ldr	r3, [pc, #128]	; (80089e4 <HAL_GPIO_Init+0x2d0>)
 8008964:	68da      	ldr	r2, [r3, #12]
 8008966:	69bb      	ldr	r3, [r7, #24]
 8008968:	43db      	mvns	r3, r3
 800896a:	491e      	ldr	r1, [pc, #120]	; (80089e4 <HAL_GPIO_Init+0x2d0>)
 800896c:	4013      	ands	r3, r2
 800896e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008978:	2b00      	cmp	r3, #0
 800897a:	d006      	beq.n	800898a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800897c:	4b19      	ldr	r3, [pc, #100]	; (80089e4 <HAL_GPIO_Init+0x2d0>)
 800897e:	685a      	ldr	r2, [r3, #4]
 8008980:	4918      	ldr	r1, [pc, #96]	; (80089e4 <HAL_GPIO_Init+0x2d0>)
 8008982:	69bb      	ldr	r3, [r7, #24]
 8008984:	4313      	orrs	r3, r2
 8008986:	604b      	str	r3, [r1, #4]
 8008988:	e006      	b.n	8008998 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800898a:	4b16      	ldr	r3, [pc, #88]	; (80089e4 <HAL_GPIO_Init+0x2d0>)
 800898c:	685a      	ldr	r2, [r3, #4]
 800898e:	69bb      	ldr	r3, [r7, #24]
 8008990:	43db      	mvns	r3, r3
 8008992:	4914      	ldr	r1, [pc, #80]	; (80089e4 <HAL_GPIO_Init+0x2d0>)
 8008994:	4013      	ands	r3, r2
 8008996:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d021      	beq.n	80089e8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80089a4:	4b0f      	ldr	r3, [pc, #60]	; (80089e4 <HAL_GPIO_Init+0x2d0>)
 80089a6:	681a      	ldr	r2, [r3, #0]
 80089a8:	490e      	ldr	r1, [pc, #56]	; (80089e4 <HAL_GPIO_Init+0x2d0>)
 80089aa:	69bb      	ldr	r3, [r7, #24]
 80089ac:	4313      	orrs	r3, r2
 80089ae:	600b      	str	r3, [r1, #0]
 80089b0:	e021      	b.n	80089f6 <HAL_GPIO_Init+0x2e2>
 80089b2:	bf00      	nop
 80089b4:	10320000 	.word	0x10320000
 80089b8:	10310000 	.word	0x10310000
 80089bc:	10220000 	.word	0x10220000
 80089c0:	10210000 	.word	0x10210000
 80089c4:	10120000 	.word	0x10120000
 80089c8:	10110000 	.word	0x10110000
 80089cc:	40021000 	.word	0x40021000
 80089d0:	40010000 	.word	0x40010000
 80089d4:	40010800 	.word	0x40010800
 80089d8:	40010c00 	.word	0x40010c00
 80089dc:	40011000 	.word	0x40011000
 80089e0:	40011400 	.word	0x40011400
 80089e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80089e8:	4b0b      	ldr	r3, [pc, #44]	; (8008a18 <HAL_GPIO_Init+0x304>)
 80089ea:	681a      	ldr	r2, [r3, #0]
 80089ec:	69bb      	ldr	r3, [r7, #24]
 80089ee:	43db      	mvns	r3, r3
 80089f0:	4909      	ldr	r1, [pc, #36]	; (8008a18 <HAL_GPIO_Init+0x304>)
 80089f2:	4013      	ands	r3, r2
 80089f4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80089f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f8:	3301      	adds	r3, #1
 80089fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	681a      	ldr	r2, [r3, #0]
 8008a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a02:	fa22 f303 	lsr.w	r3, r2, r3
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	f47f ae8e 	bne.w	8008728 <HAL_GPIO_Init+0x14>
  }
}
 8008a0c:	bf00      	nop
 8008a0e:	bf00      	nop
 8008a10:	372c      	adds	r7, #44	; 0x2c
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bc80      	pop	{r7}
 8008a16:	4770      	bx	lr
 8008a18:	40010400 	.word	0x40010400

08008a1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b086      	sub	sp, #24
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d101      	bne.n	8008a2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	e272      	b.n	8008f14 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f003 0301 	and.w	r3, r3, #1
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	f000 8087 	beq.w	8008b4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008a3c:	4b92      	ldr	r3, [pc, #584]	; (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	f003 030c 	and.w	r3, r3, #12
 8008a44:	2b04      	cmp	r3, #4
 8008a46:	d00c      	beq.n	8008a62 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008a48:	4b8f      	ldr	r3, [pc, #572]	; (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	f003 030c 	and.w	r3, r3, #12
 8008a50:	2b08      	cmp	r3, #8
 8008a52:	d112      	bne.n	8008a7a <HAL_RCC_OscConfig+0x5e>
 8008a54:	4b8c      	ldr	r3, [pc, #560]	; (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a60:	d10b      	bne.n	8008a7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a62:	4b89      	ldr	r3, [pc, #548]	; (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d06c      	beq.n	8008b48 <HAL_RCC_OscConfig+0x12c>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d168      	bne.n	8008b48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	e24c      	b.n	8008f14 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a82:	d106      	bne.n	8008a92 <HAL_RCC_OscConfig+0x76>
 8008a84:	4b80      	ldr	r3, [pc, #512]	; (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a7f      	ldr	r2, [pc, #508]	; (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008a8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a8e:	6013      	str	r3, [r2, #0]
 8008a90:	e02e      	b.n	8008af0 <HAL_RCC_OscConfig+0xd4>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d10c      	bne.n	8008ab4 <HAL_RCC_OscConfig+0x98>
 8008a9a:	4b7b      	ldr	r3, [pc, #492]	; (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a7a      	ldr	r2, [pc, #488]	; (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008aa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008aa4:	6013      	str	r3, [r2, #0]
 8008aa6:	4b78      	ldr	r3, [pc, #480]	; (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a77      	ldr	r2, [pc, #476]	; (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008aac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008ab0:	6013      	str	r3, [r2, #0]
 8008ab2:	e01d      	b.n	8008af0 <HAL_RCC_OscConfig+0xd4>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008abc:	d10c      	bne.n	8008ad8 <HAL_RCC_OscConfig+0xbc>
 8008abe:	4b72      	ldr	r3, [pc, #456]	; (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a71      	ldr	r2, [pc, #452]	; (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008ac4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ac8:	6013      	str	r3, [r2, #0]
 8008aca:	4b6f      	ldr	r3, [pc, #444]	; (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a6e      	ldr	r2, [pc, #440]	; (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ad4:	6013      	str	r3, [r2, #0]
 8008ad6:	e00b      	b.n	8008af0 <HAL_RCC_OscConfig+0xd4>
 8008ad8:	4b6b      	ldr	r3, [pc, #428]	; (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a6a      	ldr	r2, [pc, #424]	; (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008ade:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ae2:	6013      	str	r3, [r2, #0]
 8008ae4:	4b68      	ldr	r3, [pc, #416]	; (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a67      	ldr	r2, [pc, #412]	; (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008aea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008aee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d013      	beq.n	8008b20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008af8:	f7ff fcfa 	bl	80084f0 <HAL_GetTick>
 8008afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008afe:	e008      	b.n	8008b12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008b00:	f7ff fcf6 	bl	80084f0 <HAL_GetTick>
 8008b04:	4602      	mov	r2, r0
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	1ad3      	subs	r3, r2, r3
 8008b0a:	2b64      	cmp	r3, #100	; 0x64
 8008b0c:	d901      	bls.n	8008b12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008b0e:	2303      	movs	r3, #3
 8008b10:	e200      	b.n	8008f14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b12:	4b5d      	ldr	r3, [pc, #372]	; (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d0f0      	beq.n	8008b00 <HAL_RCC_OscConfig+0xe4>
 8008b1e:	e014      	b.n	8008b4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b20:	f7ff fce6 	bl	80084f0 <HAL_GetTick>
 8008b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b26:	e008      	b.n	8008b3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008b28:	f7ff fce2 	bl	80084f0 <HAL_GetTick>
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	1ad3      	subs	r3, r2, r3
 8008b32:	2b64      	cmp	r3, #100	; 0x64
 8008b34:	d901      	bls.n	8008b3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008b36:	2303      	movs	r3, #3
 8008b38:	e1ec      	b.n	8008f14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b3a:	4b53      	ldr	r3, [pc, #332]	; (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d1f0      	bne.n	8008b28 <HAL_RCC_OscConfig+0x10c>
 8008b46:	e000      	b.n	8008b4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f003 0302 	and.w	r3, r3, #2
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d063      	beq.n	8008c1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008b56:	4b4c      	ldr	r3, [pc, #304]	; (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	f003 030c 	and.w	r3, r3, #12
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d00b      	beq.n	8008b7a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008b62:	4b49      	ldr	r3, [pc, #292]	; (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	f003 030c 	and.w	r3, r3, #12
 8008b6a:	2b08      	cmp	r3, #8
 8008b6c:	d11c      	bne.n	8008ba8 <HAL_RCC_OscConfig+0x18c>
 8008b6e:	4b46      	ldr	r3, [pc, #280]	; (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d116      	bne.n	8008ba8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008b7a:	4b43      	ldr	r3, [pc, #268]	; (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f003 0302 	and.w	r3, r3, #2
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d005      	beq.n	8008b92 <HAL_RCC_OscConfig+0x176>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	691b      	ldr	r3, [r3, #16]
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d001      	beq.n	8008b92 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e1c0      	b.n	8008f14 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b92:	4b3d      	ldr	r3, [pc, #244]	; (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	695b      	ldr	r3, [r3, #20]
 8008b9e:	00db      	lsls	r3, r3, #3
 8008ba0:	4939      	ldr	r1, [pc, #228]	; (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008ba6:	e03a      	b.n	8008c1e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	691b      	ldr	r3, [r3, #16]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d020      	beq.n	8008bf2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008bb0:	4b36      	ldr	r3, [pc, #216]	; (8008c8c <HAL_RCC_OscConfig+0x270>)
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bb6:	f7ff fc9b 	bl	80084f0 <HAL_GetTick>
 8008bba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008bbc:	e008      	b.n	8008bd0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008bbe:	f7ff fc97 	bl	80084f0 <HAL_GetTick>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	1ad3      	subs	r3, r2, r3
 8008bc8:	2b02      	cmp	r3, #2
 8008bca:	d901      	bls.n	8008bd0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008bcc:	2303      	movs	r3, #3
 8008bce:	e1a1      	b.n	8008f14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008bd0:	4b2d      	ldr	r3, [pc, #180]	; (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f003 0302 	and.w	r3, r3, #2
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d0f0      	beq.n	8008bbe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008bdc:	4b2a      	ldr	r3, [pc, #168]	; (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	695b      	ldr	r3, [r3, #20]
 8008be8:	00db      	lsls	r3, r3, #3
 8008bea:	4927      	ldr	r1, [pc, #156]	; (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008bec:	4313      	orrs	r3, r2
 8008bee:	600b      	str	r3, [r1, #0]
 8008bf0:	e015      	b.n	8008c1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008bf2:	4b26      	ldr	r3, [pc, #152]	; (8008c8c <HAL_RCC_OscConfig+0x270>)
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bf8:	f7ff fc7a 	bl	80084f0 <HAL_GetTick>
 8008bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008bfe:	e008      	b.n	8008c12 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c00:	f7ff fc76 	bl	80084f0 <HAL_GetTick>
 8008c04:	4602      	mov	r2, r0
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	1ad3      	subs	r3, r2, r3
 8008c0a:	2b02      	cmp	r3, #2
 8008c0c:	d901      	bls.n	8008c12 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8008c0e:	2303      	movs	r3, #3
 8008c10:	e180      	b.n	8008f14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c12:	4b1d      	ldr	r3, [pc, #116]	; (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f003 0302 	and.w	r3, r3, #2
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d1f0      	bne.n	8008c00 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f003 0308 	and.w	r3, r3, #8
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d03a      	beq.n	8008ca0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	699b      	ldr	r3, [r3, #24]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d019      	beq.n	8008c66 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008c32:	4b17      	ldr	r3, [pc, #92]	; (8008c90 <HAL_RCC_OscConfig+0x274>)
 8008c34:	2201      	movs	r2, #1
 8008c36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008c38:	f7ff fc5a 	bl	80084f0 <HAL_GetTick>
 8008c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c3e:	e008      	b.n	8008c52 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c40:	f7ff fc56 	bl	80084f0 <HAL_GetTick>
 8008c44:	4602      	mov	r2, r0
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	1ad3      	subs	r3, r2, r3
 8008c4a:	2b02      	cmp	r3, #2
 8008c4c:	d901      	bls.n	8008c52 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8008c4e:	2303      	movs	r3, #3
 8008c50:	e160      	b.n	8008f14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c52:	4b0d      	ldr	r3, [pc, #52]	; (8008c88 <HAL_RCC_OscConfig+0x26c>)
 8008c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c56:	f003 0302 	and.w	r3, r3, #2
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d0f0      	beq.n	8008c40 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8008c5e:	2001      	movs	r0, #1
 8008c60:	f000 face 	bl	8009200 <RCC_Delay>
 8008c64:	e01c      	b.n	8008ca0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008c66:	4b0a      	ldr	r3, [pc, #40]	; (8008c90 <HAL_RCC_OscConfig+0x274>)
 8008c68:	2200      	movs	r2, #0
 8008c6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008c6c:	f7ff fc40 	bl	80084f0 <HAL_GetTick>
 8008c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008c72:	e00f      	b.n	8008c94 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c74:	f7ff fc3c 	bl	80084f0 <HAL_GetTick>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	1ad3      	subs	r3, r2, r3
 8008c7e:	2b02      	cmp	r3, #2
 8008c80:	d908      	bls.n	8008c94 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8008c82:	2303      	movs	r3, #3
 8008c84:	e146      	b.n	8008f14 <HAL_RCC_OscConfig+0x4f8>
 8008c86:	bf00      	nop
 8008c88:	40021000 	.word	0x40021000
 8008c8c:	42420000 	.word	0x42420000
 8008c90:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008c94:	4b92      	ldr	r3, [pc, #584]	; (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c98:	f003 0302 	and.w	r3, r3, #2
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d1e9      	bne.n	8008c74 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f003 0304 	and.w	r3, r3, #4
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	f000 80a6 	beq.w	8008dfa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008cb2:	4b8b      	ldr	r3, [pc, #556]	; (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008cb4:	69db      	ldr	r3, [r3, #28]
 8008cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d10d      	bne.n	8008cda <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008cbe:	4b88      	ldr	r3, [pc, #544]	; (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008cc0:	69db      	ldr	r3, [r3, #28]
 8008cc2:	4a87      	ldr	r2, [pc, #540]	; (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cc8:	61d3      	str	r3, [r2, #28]
 8008cca:	4b85      	ldr	r3, [pc, #532]	; (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008ccc:	69db      	ldr	r3, [r3, #28]
 8008cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cd2:	60bb      	str	r3, [r7, #8]
 8008cd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008cda:	4b82      	ldr	r3, [pc, #520]	; (8008ee4 <HAL_RCC_OscConfig+0x4c8>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d118      	bne.n	8008d18 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008ce6:	4b7f      	ldr	r3, [pc, #508]	; (8008ee4 <HAL_RCC_OscConfig+0x4c8>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a7e      	ldr	r2, [pc, #504]	; (8008ee4 <HAL_RCC_OscConfig+0x4c8>)
 8008cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008cf2:	f7ff fbfd 	bl	80084f0 <HAL_GetTick>
 8008cf6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008cf8:	e008      	b.n	8008d0c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008cfa:	f7ff fbf9 	bl	80084f0 <HAL_GetTick>
 8008cfe:	4602      	mov	r2, r0
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	1ad3      	subs	r3, r2, r3
 8008d04:	2b64      	cmp	r3, #100	; 0x64
 8008d06:	d901      	bls.n	8008d0c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008d08:	2303      	movs	r3, #3
 8008d0a:	e103      	b.n	8008f14 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d0c:	4b75      	ldr	r3, [pc, #468]	; (8008ee4 <HAL_RCC_OscConfig+0x4c8>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d0f0      	beq.n	8008cfa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	68db      	ldr	r3, [r3, #12]
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d106      	bne.n	8008d2e <HAL_RCC_OscConfig+0x312>
 8008d20:	4b6f      	ldr	r3, [pc, #444]	; (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008d22:	6a1b      	ldr	r3, [r3, #32]
 8008d24:	4a6e      	ldr	r2, [pc, #440]	; (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008d26:	f043 0301 	orr.w	r3, r3, #1
 8008d2a:	6213      	str	r3, [r2, #32]
 8008d2c:	e02d      	b.n	8008d8a <HAL_RCC_OscConfig+0x36e>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	68db      	ldr	r3, [r3, #12]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d10c      	bne.n	8008d50 <HAL_RCC_OscConfig+0x334>
 8008d36:	4b6a      	ldr	r3, [pc, #424]	; (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008d38:	6a1b      	ldr	r3, [r3, #32]
 8008d3a:	4a69      	ldr	r2, [pc, #420]	; (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008d3c:	f023 0301 	bic.w	r3, r3, #1
 8008d40:	6213      	str	r3, [r2, #32]
 8008d42:	4b67      	ldr	r3, [pc, #412]	; (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008d44:	6a1b      	ldr	r3, [r3, #32]
 8008d46:	4a66      	ldr	r2, [pc, #408]	; (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008d48:	f023 0304 	bic.w	r3, r3, #4
 8008d4c:	6213      	str	r3, [r2, #32]
 8008d4e:	e01c      	b.n	8008d8a <HAL_RCC_OscConfig+0x36e>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	2b05      	cmp	r3, #5
 8008d56:	d10c      	bne.n	8008d72 <HAL_RCC_OscConfig+0x356>
 8008d58:	4b61      	ldr	r3, [pc, #388]	; (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008d5a:	6a1b      	ldr	r3, [r3, #32]
 8008d5c:	4a60      	ldr	r2, [pc, #384]	; (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008d5e:	f043 0304 	orr.w	r3, r3, #4
 8008d62:	6213      	str	r3, [r2, #32]
 8008d64:	4b5e      	ldr	r3, [pc, #376]	; (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008d66:	6a1b      	ldr	r3, [r3, #32]
 8008d68:	4a5d      	ldr	r2, [pc, #372]	; (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008d6a:	f043 0301 	orr.w	r3, r3, #1
 8008d6e:	6213      	str	r3, [r2, #32]
 8008d70:	e00b      	b.n	8008d8a <HAL_RCC_OscConfig+0x36e>
 8008d72:	4b5b      	ldr	r3, [pc, #364]	; (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008d74:	6a1b      	ldr	r3, [r3, #32]
 8008d76:	4a5a      	ldr	r2, [pc, #360]	; (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008d78:	f023 0301 	bic.w	r3, r3, #1
 8008d7c:	6213      	str	r3, [r2, #32]
 8008d7e:	4b58      	ldr	r3, [pc, #352]	; (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008d80:	6a1b      	ldr	r3, [r3, #32]
 8008d82:	4a57      	ldr	r2, [pc, #348]	; (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008d84:	f023 0304 	bic.w	r3, r3, #4
 8008d88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d015      	beq.n	8008dbe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d92:	f7ff fbad 	bl	80084f0 <HAL_GetTick>
 8008d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d98:	e00a      	b.n	8008db0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d9a:	f7ff fba9 	bl	80084f0 <HAL_GetTick>
 8008d9e:	4602      	mov	r2, r0
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	1ad3      	subs	r3, r2, r3
 8008da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d901      	bls.n	8008db0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008dac:	2303      	movs	r3, #3
 8008dae:	e0b1      	b.n	8008f14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008db0:	4b4b      	ldr	r3, [pc, #300]	; (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008db2:	6a1b      	ldr	r3, [r3, #32]
 8008db4:	f003 0302 	and.w	r3, r3, #2
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d0ee      	beq.n	8008d9a <HAL_RCC_OscConfig+0x37e>
 8008dbc:	e014      	b.n	8008de8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008dbe:	f7ff fb97 	bl	80084f0 <HAL_GetTick>
 8008dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008dc4:	e00a      	b.n	8008ddc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008dc6:	f7ff fb93 	bl	80084f0 <HAL_GetTick>
 8008dca:	4602      	mov	r2, r0
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	1ad3      	subs	r3, r2, r3
 8008dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d901      	bls.n	8008ddc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008dd8:	2303      	movs	r3, #3
 8008dda:	e09b      	b.n	8008f14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ddc:	4b40      	ldr	r3, [pc, #256]	; (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008dde:	6a1b      	ldr	r3, [r3, #32]
 8008de0:	f003 0302 	and.w	r3, r3, #2
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d1ee      	bne.n	8008dc6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008de8:	7dfb      	ldrb	r3, [r7, #23]
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	d105      	bne.n	8008dfa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008dee:	4b3c      	ldr	r3, [pc, #240]	; (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008df0:	69db      	ldr	r3, [r3, #28]
 8008df2:	4a3b      	ldr	r2, [pc, #236]	; (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008df4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008df8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	69db      	ldr	r3, [r3, #28]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	f000 8087 	beq.w	8008f12 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008e04:	4b36      	ldr	r3, [pc, #216]	; (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	f003 030c 	and.w	r3, r3, #12
 8008e0c:	2b08      	cmp	r3, #8
 8008e0e:	d061      	beq.n	8008ed4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	69db      	ldr	r3, [r3, #28]
 8008e14:	2b02      	cmp	r3, #2
 8008e16:	d146      	bne.n	8008ea6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e18:	4b33      	ldr	r3, [pc, #204]	; (8008ee8 <HAL_RCC_OscConfig+0x4cc>)
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e1e:	f7ff fb67 	bl	80084f0 <HAL_GetTick>
 8008e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008e24:	e008      	b.n	8008e38 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e26:	f7ff fb63 	bl	80084f0 <HAL_GetTick>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	1ad3      	subs	r3, r2, r3
 8008e30:	2b02      	cmp	r3, #2
 8008e32:	d901      	bls.n	8008e38 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008e34:	2303      	movs	r3, #3
 8008e36:	e06d      	b.n	8008f14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008e38:	4b29      	ldr	r3, [pc, #164]	; (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d1f0      	bne.n	8008e26 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6a1b      	ldr	r3, [r3, #32]
 8008e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e4c:	d108      	bne.n	8008e60 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008e4e:	4b24      	ldr	r3, [pc, #144]	; (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	4921      	ldr	r1, [pc, #132]	; (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008e60:	4b1f      	ldr	r3, [pc, #124]	; (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6a19      	ldr	r1, [r3, #32]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e70:	430b      	orrs	r3, r1
 8008e72:	491b      	ldr	r1, [pc, #108]	; (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008e74:	4313      	orrs	r3, r2
 8008e76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008e78:	4b1b      	ldr	r3, [pc, #108]	; (8008ee8 <HAL_RCC_OscConfig+0x4cc>)
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e7e:	f7ff fb37 	bl	80084f0 <HAL_GetTick>
 8008e82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008e84:	e008      	b.n	8008e98 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e86:	f7ff fb33 	bl	80084f0 <HAL_GetTick>
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	1ad3      	subs	r3, r2, r3
 8008e90:	2b02      	cmp	r3, #2
 8008e92:	d901      	bls.n	8008e98 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008e94:	2303      	movs	r3, #3
 8008e96:	e03d      	b.n	8008f14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008e98:	4b11      	ldr	r3, [pc, #68]	; (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d0f0      	beq.n	8008e86 <HAL_RCC_OscConfig+0x46a>
 8008ea4:	e035      	b.n	8008f12 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ea6:	4b10      	ldr	r3, [pc, #64]	; (8008ee8 <HAL_RCC_OscConfig+0x4cc>)
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008eac:	f7ff fb20 	bl	80084f0 <HAL_GetTick>
 8008eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008eb2:	e008      	b.n	8008ec6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008eb4:	f7ff fb1c 	bl	80084f0 <HAL_GetTick>
 8008eb8:	4602      	mov	r2, r0
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	1ad3      	subs	r3, r2, r3
 8008ebe:	2b02      	cmp	r3, #2
 8008ec0:	d901      	bls.n	8008ec6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008ec2:	2303      	movs	r3, #3
 8008ec4:	e026      	b.n	8008f14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008ec6:	4b06      	ldr	r3, [pc, #24]	; (8008ee0 <HAL_RCC_OscConfig+0x4c4>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d1f0      	bne.n	8008eb4 <HAL_RCC_OscConfig+0x498>
 8008ed2:	e01e      	b.n	8008f12 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	69db      	ldr	r3, [r3, #28]
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d107      	bne.n	8008eec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8008edc:	2301      	movs	r3, #1
 8008ede:	e019      	b.n	8008f14 <HAL_RCC_OscConfig+0x4f8>
 8008ee0:	40021000 	.word	0x40021000
 8008ee4:	40007000 	.word	0x40007000
 8008ee8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008eec:	4b0b      	ldr	r3, [pc, #44]	; (8008f1c <HAL_RCC_OscConfig+0x500>)
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6a1b      	ldr	r3, [r3, #32]
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d106      	bne.n	8008f0e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d001      	beq.n	8008f12 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	e000      	b.n	8008f14 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8008f12:	2300      	movs	r3, #0
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3718      	adds	r7, #24
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}
 8008f1c:	40021000 	.word	0x40021000

08008f20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b084      	sub	sp, #16
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d101      	bne.n	8008f34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008f30:	2301      	movs	r3, #1
 8008f32:	e0d0      	b.n	80090d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008f34:	4b6a      	ldr	r3, [pc, #424]	; (80090e0 <HAL_RCC_ClockConfig+0x1c0>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f003 0307 	and.w	r3, r3, #7
 8008f3c:	683a      	ldr	r2, [r7, #0]
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d910      	bls.n	8008f64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f42:	4b67      	ldr	r3, [pc, #412]	; (80090e0 <HAL_RCC_ClockConfig+0x1c0>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f023 0207 	bic.w	r2, r3, #7
 8008f4a:	4965      	ldr	r1, [pc, #404]	; (80090e0 <HAL_RCC_ClockConfig+0x1c0>)
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f52:	4b63      	ldr	r3, [pc, #396]	; (80090e0 <HAL_RCC_ClockConfig+0x1c0>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f003 0307 	and.w	r3, r3, #7
 8008f5a:	683a      	ldr	r2, [r7, #0]
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d001      	beq.n	8008f64 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008f60:	2301      	movs	r3, #1
 8008f62:	e0b8      	b.n	80090d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f003 0302 	and.w	r3, r3, #2
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d020      	beq.n	8008fb2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f003 0304 	and.w	r3, r3, #4
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d005      	beq.n	8008f88 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008f7c:	4b59      	ldr	r3, [pc, #356]	; (80090e4 <HAL_RCC_ClockConfig+0x1c4>)
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	4a58      	ldr	r2, [pc, #352]	; (80090e4 <HAL_RCC_ClockConfig+0x1c4>)
 8008f82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008f86:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f003 0308 	and.w	r3, r3, #8
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d005      	beq.n	8008fa0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008f94:	4b53      	ldr	r3, [pc, #332]	; (80090e4 <HAL_RCC_ClockConfig+0x1c4>)
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	4a52      	ldr	r2, [pc, #328]	; (80090e4 <HAL_RCC_ClockConfig+0x1c4>)
 8008f9a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8008f9e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008fa0:	4b50      	ldr	r3, [pc, #320]	; (80090e4 <HAL_RCC_ClockConfig+0x1c4>)
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	494d      	ldr	r1, [pc, #308]	; (80090e4 <HAL_RCC_ClockConfig+0x1c4>)
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f003 0301 	and.w	r3, r3, #1
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d040      	beq.n	8009040 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d107      	bne.n	8008fd6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008fc6:	4b47      	ldr	r3, [pc, #284]	; (80090e4 <HAL_RCC_ClockConfig+0x1c4>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d115      	bne.n	8008ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e07f      	b.n	80090d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	2b02      	cmp	r3, #2
 8008fdc:	d107      	bne.n	8008fee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008fde:	4b41      	ldr	r3, [pc, #260]	; (80090e4 <HAL_RCC_ClockConfig+0x1c4>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d109      	bne.n	8008ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008fea:	2301      	movs	r3, #1
 8008fec:	e073      	b.n	80090d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008fee:	4b3d      	ldr	r3, [pc, #244]	; (80090e4 <HAL_RCC_ClockConfig+0x1c4>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f003 0302 	and.w	r3, r3, #2
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d101      	bne.n	8008ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	e06b      	b.n	80090d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008ffe:	4b39      	ldr	r3, [pc, #228]	; (80090e4 <HAL_RCC_ClockConfig+0x1c4>)
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	f023 0203 	bic.w	r2, r3, #3
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	4936      	ldr	r1, [pc, #216]	; (80090e4 <HAL_RCC_ClockConfig+0x1c4>)
 800900c:	4313      	orrs	r3, r2
 800900e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009010:	f7ff fa6e 	bl	80084f0 <HAL_GetTick>
 8009014:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009016:	e00a      	b.n	800902e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009018:	f7ff fa6a 	bl	80084f0 <HAL_GetTick>
 800901c:	4602      	mov	r2, r0
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	1ad3      	subs	r3, r2, r3
 8009022:	f241 3288 	movw	r2, #5000	; 0x1388
 8009026:	4293      	cmp	r3, r2
 8009028:	d901      	bls.n	800902e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800902a:	2303      	movs	r3, #3
 800902c:	e053      	b.n	80090d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800902e:	4b2d      	ldr	r3, [pc, #180]	; (80090e4 <HAL_RCC_ClockConfig+0x1c4>)
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	f003 020c 	and.w	r2, r3, #12
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	009b      	lsls	r3, r3, #2
 800903c:	429a      	cmp	r2, r3
 800903e:	d1eb      	bne.n	8009018 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009040:	4b27      	ldr	r3, [pc, #156]	; (80090e0 <HAL_RCC_ClockConfig+0x1c0>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f003 0307 	and.w	r3, r3, #7
 8009048:	683a      	ldr	r2, [r7, #0]
 800904a:	429a      	cmp	r2, r3
 800904c:	d210      	bcs.n	8009070 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800904e:	4b24      	ldr	r3, [pc, #144]	; (80090e0 <HAL_RCC_ClockConfig+0x1c0>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f023 0207 	bic.w	r2, r3, #7
 8009056:	4922      	ldr	r1, [pc, #136]	; (80090e0 <HAL_RCC_ClockConfig+0x1c0>)
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	4313      	orrs	r3, r2
 800905c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800905e:	4b20      	ldr	r3, [pc, #128]	; (80090e0 <HAL_RCC_ClockConfig+0x1c0>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f003 0307 	and.w	r3, r3, #7
 8009066:	683a      	ldr	r2, [r7, #0]
 8009068:	429a      	cmp	r2, r3
 800906a:	d001      	beq.n	8009070 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800906c:	2301      	movs	r3, #1
 800906e:	e032      	b.n	80090d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f003 0304 	and.w	r3, r3, #4
 8009078:	2b00      	cmp	r3, #0
 800907a:	d008      	beq.n	800908e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800907c:	4b19      	ldr	r3, [pc, #100]	; (80090e4 <HAL_RCC_ClockConfig+0x1c4>)
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	4916      	ldr	r1, [pc, #88]	; (80090e4 <HAL_RCC_ClockConfig+0x1c4>)
 800908a:	4313      	orrs	r3, r2
 800908c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f003 0308 	and.w	r3, r3, #8
 8009096:	2b00      	cmp	r3, #0
 8009098:	d009      	beq.n	80090ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800909a:	4b12      	ldr	r3, [pc, #72]	; (80090e4 <HAL_RCC_ClockConfig+0x1c4>)
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	691b      	ldr	r3, [r3, #16]
 80090a6:	00db      	lsls	r3, r3, #3
 80090a8:	490e      	ldr	r1, [pc, #56]	; (80090e4 <HAL_RCC_ClockConfig+0x1c4>)
 80090aa:	4313      	orrs	r3, r2
 80090ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80090ae:	f000 f821 	bl	80090f4 <HAL_RCC_GetSysClockFreq>
 80090b2:	4602      	mov	r2, r0
 80090b4:	4b0b      	ldr	r3, [pc, #44]	; (80090e4 <HAL_RCC_ClockConfig+0x1c4>)
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	091b      	lsrs	r3, r3, #4
 80090ba:	f003 030f 	and.w	r3, r3, #15
 80090be:	490a      	ldr	r1, [pc, #40]	; (80090e8 <HAL_RCC_ClockConfig+0x1c8>)
 80090c0:	5ccb      	ldrb	r3, [r1, r3]
 80090c2:	fa22 f303 	lsr.w	r3, r2, r3
 80090c6:	4a09      	ldr	r2, [pc, #36]	; (80090ec <HAL_RCC_ClockConfig+0x1cc>)
 80090c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80090ca:	4b09      	ldr	r3, [pc, #36]	; (80090f0 <HAL_RCC_ClockConfig+0x1d0>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4618      	mov	r0, r3
 80090d0:	f7ff f9cc 	bl	800846c <HAL_InitTick>

  return HAL_OK;
 80090d4:	2300      	movs	r3, #0
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3710      	adds	r7, #16
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
 80090de:	bf00      	nop
 80090e0:	40022000 	.word	0x40022000
 80090e4:	40021000 	.word	0x40021000
 80090e8:	0800964c 	.word	0x0800964c
 80090ec:	2000001c 	.word	0x2000001c
 80090f0:	20000020 	.word	0x20000020

080090f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b087      	sub	sp, #28
 80090f8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80090fa:	2300      	movs	r3, #0
 80090fc:	60fb      	str	r3, [r7, #12]
 80090fe:	2300      	movs	r3, #0
 8009100:	60bb      	str	r3, [r7, #8]
 8009102:	2300      	movs	r3, #0
 8009104:	617b      	str	r3, [r7, #20]
 8009106:	2300      	movs	r3, #0
 8009108:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800910a:	2300      	movs	r3, #0
 800910c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800910e:	4b1e      	ldr	r3, [pc, #120]	; (8009188 <HAL_RCC_GetSysClockFreq+0x94>)
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f003 030c 	and.w	r3, r3, #12
 800911a:	2b04      	cmp	r3, #4
 800911c:	d002      	beq.n	8009124 <HAL_RCC_GetSysClockFreq+0x30>
 800911e:	2b08      	cmp	r3, #8
 8009120:	d003      	beq.n	800912a <HAL_RCC_GetSysClockFreq+0x36>
 8009122:	e027      	b.n	8009174 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009124:	4b19      	ldr	r3, [pc, #100]	; (800918c <HAL_RCC_GetSysClockFreq+0x98>)
 8009126:	613b      	str	r3, [r7, #16]
      break;
 8009128:	e027      	b.n	800917a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	0c9b      	lsrs	r3, r3, #18
 800912e:	f003 030f 	and.w	r3, r3, #15
 8009132:	4a17      	ldr	r2, [pc, #92]	; (8009190 <HAL_RCC_GetSysClockFreq+0x9c>)
 8009134:	5cd3      	ldrb	r3, [r2, r3]
 8009136:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800913e:	2b00      	cmp	r3, #0
 8009140:	d010      	beq.n	8009164 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009142:	4b11      	ldr	r3, [pc, #68]	; (8009188 <HAL_RCC_GetSysClockFreq+0x94>)
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	0c5b      	lsrs	r3, r3, #17
 8009148:	f003 0301 	and.w	r3, r3, #1
 800914c:	4a11      	ldr	r2, [pc, #68]	; (8009194 <HAL_RCC_GetSysClockFreq+0xa0>)
 800914e:	5cd3      	ldrb	r3, [r2, r3]
 8009150:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	4a0d      	ldr	r2, [pc, #52]	; (800918c <HAL_RCC_GetSysClockFreq+0x98>)
 8009156:	fb03 f202 	mul.w	r2, r3, r2
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009160:	617b      	str	r3, [r7, #20]
 8009162:	e004      	b.n	800916e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	4a0c      	ldr	r2, [pc, #48]	; (8009198 <HAL_RCC_GetSysClockFreq+0xa4>)
 8009168:	fb02 f303 	mul.w	r3, r2, r3
 800916c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	613b      	str	r3, [r7, #16]
      break;
 8009172:	e002      	b.n	800917a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009174:	4b05      	ldr	r3, [pc, #20]	; (800918c <HAL_RCC_GetSysClockFreq+0x98>)
 8009176:	613b      	str	r3, [r7, #16]
      break;
 8009178:	bf00      	nop
    }
  }
  return sysclockfreq;
 800917a:	693b      	ldr	r3, [r7, #16]
}
 800917c:	4618      	mov	r0, r3
 800917e:	371c      	adds	r7, #28
 8009180:	46bd      	mov	sp, r7
 8009182:	bc80      	pop	{r7}
 8009184:	4770      	bx	lr
 8009186:	bf00      	nop
 8009188:	40021000 	.word	0x40021000
 800918c:	007a1200 	.word	0x007a1200
 8009190:	08009664 	.word	0x08009664
 8009194:	08009674 	.word	0x08009674
 8009198:	003d0900 	.word	0x003d0900

0800919c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800919c:	b480      	push	{r7}
 800919e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80091a0:	4b02      	ldr	r3, [pc, #8]	; (80091ac <HAL_RCC_GetHCLKFreq+0x10>)
 80091a2:	681b      	ldr	r3, [r3, #0]
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bc80      	pop	{r7}
 80091aa:	4770      	bx	lr
 80091ac:	2000001c 	.word	0x2000001c

080091b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80091b4:	f7ff fff2 	bl	800919c <HAL_RCC_GetHCLKFreq>
 80091b8:	4602      	mov	r2, r0
 80091ba:	4b05      	ldr	r3, [pc, #20]	; (80091d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	0a1b      	lsrs	r3, r3, #8
 80091c0:	f003 0307 	and.w	r3, r3, #7
 80091c4:	4903      	ldr	r1, [pc, #12]	; (80091d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80091c6:	5ccb      	ldrb	r3, [r1, r3]
 80091c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	bd80      	pop	{r7, pc}
 80091d0:	40021000 	.word	0x40021000
 80091d4:	0800965c 	.word	0x0800965c

080091d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80091dc:	f7ff ffde 	bl	800919c <HAL_RCC_GetHCLKFreq>
 80091e0:	4602      	mov	r2, r0
 80091e2:	4b05      	ldr	r3, [pc, #20]	; (80091f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	0adb      	lsrs	r3, r3, #11
 80091e8:	f003 0307 	and.w	r3, r3, #7
 80091ec:	4903      	ldr	r1, [pc, #12]	; (80091fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80091ee:	5ccb      	ldrb	r3, [r1, r3]
 80091f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	bd80      	pop	{r7, pc}
 80091f8:	40021000 	.word	0x40021000
 80091fc:	0800965c 	.word	0x0800965c

08009200 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8009200:	b480      	push	{r7}
 8009202:	b085      	sub	sp, #20
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8009208:	4b0a      	ldr	r3, [pc, #40]	; (8009234 <RCC_Delay+0x34>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4a0a      	ldr	r2, [pc, #40]	; (8009238 <RCC_Delay+0x38>)
 800920e:	fba2 2303 	umull	r2, r3, r2, r3
 8009212:	0a5b      	lsrs	r3, r3, #9
 8009214:	687a      	ldr	r2, [r7, #4]
 8009216:	fb02 f303 	mul.w	r3, r2, r3
 800921a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800921c:	bf00      	nop
  }
  while (Delay --);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	1e5a      	subs	r2, r3, #1
 8009222:	60fa      	str	r2, [r7, #12]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d1f9      	bne.n	800921c <RCC_Delay+0x1c>
}
 8009228:	bf00      	nop
 800922a:	bf00      	nop
 800922c:	3714      	adds	r7, #20
 800922e:	46bd      	mov	sp, r7
 8009230:	bc80      	pop	{r7}
 8009232:	4770      	bx	lr
 8009234:	2000001c 	.word	0x2000001c
 8009238:	10624dd3 	.word	0x10624dd3

0800923c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b082      	sub	sp, #8
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d101      	bne.n	800924e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800924a:	2301      	movs	r3, #1
 800924c:	e042      	b.n	80092d4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009254:	b2db      	uxtb	r3, r3
 8009256:	2b00      	cmp	r3, #0
 8009258:	d106      	bne.n	8009268 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f7ff f846 	bl	80082f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2224      	movs	r2, #36	; 0x24
 800926c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	68da      	ldr	r2, [r3, #12]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800927e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f000 f91d 	bl	80094c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	691a      	ldr	r2, [r3, #16]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009294:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	695a      	ldr	r2, [r3, #20]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80092a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	68da      	ldr	r2, [r3, #12]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80092b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2200      	movs	r2, #0
 80092ba:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2220      	movs	r2, #32
 80092c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2220      	movs	r2, #32
 80092c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2200      	movs	r2, #0
 80092d0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80092d2:	2300      	movs	r3, #0
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3708      	adds	r7, #8
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b08a      	sub	sp, #40	; 0x28
 80092e0:	af02      	add	r7, sp, #8
 80092e2:	60f8      	str	r0, [r7, #12]
 80092e4:	60b9      	str	r1, [r7, #8]
 80092e6:	603b      	str	r3, [r7, #0]
 80092e8:	4613      	mov	r3, r2
 80092ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80092ec:	2300      	movs	r3, #0
 80092ee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092f6:	b2db      	uxtb	r3, r3
 80092f8:	2b20      	cmp	r3, #32
 80092fa:	d16d      	bne.n	80093d8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d002      	beq.n	8009308 <HAL_UART_Transmit+0x2c>
 8009302:	88fb      	ldrh	r3, [r7, #6]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d101      	bne.n	800930c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009308:	2301      	movs	r3, #1
 800930a:	e066      	b.n	80093da <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2200      	movs	r2, #0
 8009310:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	2221      	movs	r2, #33	; 0x21
 8009316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800931a:	f7ff f8e9 	bl	80084f0 <HAL_GetTick>
 800931e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	88fa      	ldrh	r2, [r7, #6]
 8009324:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	88fa      	ldrh	r2, [r7, #6]
 800932a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009334:	d108      	bne.n	8009348 <HAL_UART_Transmit+0x6c>
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	691b      	ldr	r3, [r3, #16]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d104      	bne.n	8009348 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800933e:	2300      	movs	r3, #0
 8009340:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	61bb      	str	r3, [r7, #24]
 8009346:	e003      	b.n	8009350 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800934c:	2300      	movs	r3, #0
 800934e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009350:	e02a      	b.n	80093a8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	9300      	str	r3, [sp, #0]
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	2200      	movs	r2, #0
 800935a:	2180      	movs	r1, #128	; 0x80
 800935c:	68f8      	ldr	r0, [r7, #12]
 800935e:	f000 f840 	bl	80093e2 <UART_WaitOnFlagUntilTimeout>
 8009362:	4603      	mov	r3, r0
 8009364:	2b00      	cmp	r3, #0
 8009366:	d001      	beq.n	800936c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8009368:	2303      	movs	r3, #3
 800936a:	e036      	b.n	80093da <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800936c:	69fb      	ldr	r3, [r7, #28]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d10b      	bne.n	800938a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009372:	69bb      	ldr	r3, [r7, #24]
 8009374:	881b      	ldrh	r3, [r3, #0]
 8009376:	461a      	mov	r2, r3
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009380:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009382:	69bb      	ldr	r3, [r7, #24]
 8009384:	3302      	adds	r3, #2
 8009386:	61bb      	str	r3, [r7, #24]
 8009388:	e007      	b.n	800939a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800938a:	69fb      	ldr	r3, [r7, #28]
 800938c:	781a      	ldrb	r2, [r3, #0]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009394:	69fb      	ldr	r3, [r7, #28]
 8009396:	3301      	adds	r3, #1
 8009398:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800939e:	b29b      	uxth	r3, r3
 80093a0:	3b01      	subs	r3, #1
 80093a2:	b29a      	uxth	r2, r3
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d1cf      	bne.n	8009352 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	9300      	str	r3, [sp, #0]
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	2200      	movs	r2, #0
 80093ba:	2140      	movs	r1, #64	; 0x40
 80093bc:	68f8      	ldr	r0, [r7, #12]
 80093be:	f000 f810 	bl	80093e2 <UART_WaitOnFlagUntilTimeout>
 80093c2:	4603      	mov	r3, r0
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d001      	beq.n	80093cc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80093c8:	2303      	movs	r3, #3
 80093ca:	e006      	b.n	80093da <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2220      	movs	r2, #32
 80093d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80093d4:	2300      	movs	r3, #0
 80093d6:	e000      	b.n	80093da <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80093d8:	2302      	movs	r3, #2
  }
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3720      	adds	r7, #32
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}

080093e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80093e2:	b580      	push	{r7, lr}
 80093e4:	b090      	sub	sp, #64	; 0x40
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	60f8      	str	r0, [r7, #12]
 80093ea:	60b9      	str	r1, [r7, #8]
 80093ec:	603b      	str	r3, [r7, #0]
 80093ee:	4613      	mov	r3, r2
 80093f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093f2:	e050      	b.n	8009496 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093fa:	d04c      	beq.n	8009496 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80093fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d007      	beq.n	8009412 <UART_WaitOnFlagUntilTimeout+0x30>
 8009402:	f7ff f875 	bl	80084f0 <HAL_GetTick>
 8009406:	4602      	mov	r2, r0
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	1ad3      	subs	r3, r2, r3
 800940c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800940e:	429a      	cmp	r2, r3
 8009410:	d241      	bcs.n	8009496 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	330c      	adds	r3, #12
 8009418:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800941a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800941c:	e853 3f00 	ldrex	r3, [r3]
 8009420:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009424:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009428:	63fb      	str	r3, [r7, #60]	; 0x3c
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	330c      	adds	r3, #12
 8009430:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009432:	637a      	str	r2, [r7, #52]	; 0x34
 8009434:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009436:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009438:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800943a:	e841 2300 	strex	r3, r2, [r1]
 800943e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009442:	2b00      	cmp	r3, #0
 8009444:	d1e5      	bne.n	8009412 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	3314      	adds	r3, #20
 800944c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	e853 3f00 	ldrex	r3, [r3]
 8009454:	613b      	str	r3, [r7, #16]
   return(result);
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	f023 0301 	bic.w	r3, r3, #1
 800945c:	63bb      	str	r3, [r7, #56]	; 0x38
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	3314      	adds	r3, #20
 8009464:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009466:	623a      	str	r2, [r7, #32]
 8009468:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800946a:	69f9      	ldr	r1, [r7, #28]
 800946c:	6a3a      	ldr	r2, [r7, #32]
 800946e:	e841 2300 	strex	r3, r2, [r1]
 8009472:	61bb      	str	r3, [r7, #24]
   return(result);
 8009474:	69bb      	ldr	r3, [r7, #24]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d1e5      	bne.n	8009446 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2220      	movs	r2, #32
 800947e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2220      	movs	r2, #32
 8009486:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2200      	movs	r2, #0
 800948e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8009492:	2303      	movs	r3, #3
 8009494:	e00f      	b.n	80094b6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	681a      	ldr	r2, [r3, #0]
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	4013      	ands	r3, r2
 80094a0:	68ba      	ldr	r2, [r7, #8]
 80094a2:	429a      	cmp	r2, r3
 80094a4:	bf0c      	ite	eq
 80094a6:	2301      	moveq	r3, #1
 80094a8:	2300      	movne	r3, #0
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	461a      	mov	r2, r3
 80094ae:	79fb      	ldrb	r3, [r7, #7]
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d09f      	beq.n	80093f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80094b4:	2300      	movs	r3, #0
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3740      	adds	r7, #64	; 0x40
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
	...

080094c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b084      	sub	sp, #16
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	691b      	ldr	r3, [r3, #16]
 80094ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	68da      	ldr	r2, [r3, #12]
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	430a      	orrs	r2, r1
 80094dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	689a      	ldr	r2, [r3, #8]
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	691b      	ldr	r3, [r3, #16]
 80094e6:	431a      	orrs	r2, r3
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	695b      	ldr	r3, [r3, #20]
 80094ec:	4313      	orrs	r3, r2
 80094ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	68db      	ldr	r3, [r3, #12]
 80094f6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80094fa:	f023 030c 	bic.w	r3, r3, #12
 80094fe:	687a      	ldr	r2, [r7, #4]
 8009500:	6812      	ldr	r2, [r2, #0]
 8009502:	68b9      	ldr	r1, [r7, #8]
 8009504:	430b      	orrs	r3, r1
 8009506:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	695b      	ldr	r3, [r3, #20]
 800950e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	699a      	ldr	r2, [r3, #24]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	430a      	orrs	r2, r1
 800951c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4a2c      	ldr	r2, [pc, #176]	; (80095d4 <UART_SetConfig+0x114>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d103      	bne.n	8009530 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009528:	f7ff fe56 	bl	80091d8 <HAL_RCC_GetPCLK2Freq>
 800952c:	60f8      	str	r0, [r7, #12]
 800952e:	e002      	b.n	8009536 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009530:	f7ff fe3e 	bl	80091b0 <HAL_RCC_GetPCLK1Freq>
 8009534:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009536:	68fa      	ldr	r2, [r7, #12]
 8009538:	4613      	mov	r3, r2
 800953a:	009b      	lsls	r3, r3, #2
 800953c:	4413      	add	r3, r2
 800953e:	009a      	lsls	r2, r3, #2
 8009540:	441a      	add	r2, r3
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	fbb2 f3f3 	udiv	r3, r2, r3
 800954c:	4a22      	ldr	r2, [pc, #136]	; (80095d8 <UART_SetConfig+0x118>)
 800954e:	fba2 2303 	umull	r2, r3, r2, r3
 8009552:	095b      	lsrs	r3, r3, #5
 8009554:	0119      	lsls	r1, r3, #4
 8009556:	68fa      	ldr	r2, [r7, #12]
 8009558:	4613      	mov	r3, r2
 800955a:	009b      	lsls	r3, r3, #2
 800955c:	4413      	add	r3, r2
 800955e:	009a      	lsls	r2, r3, #2
 8009560:	441a      	add	r2, r3
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	009b      	lsls	r3, r3, #2
 8009568:	fbb2 f2f3 	udiv	r2, r2, r3
 800956c:	4b1a      	ldr	r3, [pc, #104]	; (80095d8 <UART_SetConfig+0x118>)
 800956e:	fba3 0302 	umull	r0, r3, r3, r2
 8009572:	095b      	lsrs	r3, r3, #5
 8009574:	2064      	movs	r0, #100	; 0x64
 8009576:	fb00 f303 	mul.w	r3, r0, r3
 800957a:	1ad3      	subs	r3, r2, r3
 800957c:	011b      	lsls	r3, r3, #4
 800957e:	3332      	adds	r3, #50	; 0x32
 8009580:	4a15      	ldr	r2, [pc, #84]	; (80095d8 <UART_SetConfig+0x118>)
 8009582:	fba2 2303 	umull	r2, r3, r2, r3
 8009586:	095b      	lsrs	r3, r3, #5
 8009588:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800958c:	4419      	add	r1, r3
 800958e:	68fa      	ldr	r2, [r7, #12]
 8009590:	4613      	mov	r3, r2
 8009592:	009b      	lsls	r3, r3, #2
 8009594:	4413      	add	r3, r2
 8009596:	009a      	lsls	r2, r3, #2
 8009598:	441a      	add	r2, r3
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	009b      	lsls	r3, r3, #2
 80095a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80095a4:	4b0c      	ldr	r3, [pc, #48]	; (80095d8 <UART_SetConfig+0x118>)
 80095a6:	fba3 0302 	umull	r0, r3, r3, r2
 80095aa:	095b      	lsrs	r3, r3, #5
 80095ac:	2064      	movs	r0, #100	; 0x64
 80095ae:	fb00 f303 	mul.w	r3, r0, r3
 80095b2:	1ad3      	subs	r3, r2, r3
 80095b4:	011b      	lsls	r3, r3, #4
 80095b6:	3332      	adds	r3, #50	; 0x32
 80095b8:	4a07      	ldr	r2, [pc, #28]	; (80095d8 <UART_SetConfig+0x118>)
 80095ba:	fba2 2303 	umull	r2, r3, r2, r3
 80095be:	095b      	lsrs	r3, r3, #5
 80095c0:	f003 020f 	and.w	r2, r3, #15
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	440a      	add	r2, r1
 80095ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80095cc:	bf00      	nop
 80095ce:	3710      	adds	r7, #16
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}
 80095d4:	40013800 	.word	0x40013800
 80095d8:	51eb851f 	.word	0x51eb851f

080095dc <memset>:
 80095dc:	4603      	mov	r3, r0
 80095de:	4402      	add	r2, r0
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d100      	bne.n	80095e6 <memset+0xa>
 80095e4:	4770      	bx	lr
 80095e6:	f803 1b01 	strb.w	r1, [r3], #1
 80095ea:	e7f9      	b.n	80095e0 <memset+0x4>

080095ec <__libc_init_array>:
 80095ec:	b570      	push	{r4, r5, r6, lr}
 80095ee:	2600      	movs	r6, #0
 80095f0:	4d0c      	ldr	r5, [pc, #48]	; (8009624 <__libc_init_array+0x38>)
 80095f2:	4c0d      	ldr	r4, [pc, #52]	; (8009628 <__libc_init_array+0x3c>)
 80095f4:	1b64      	subs	r4, r4, r5
 80095f6:	10a4      	asrs	r4, r4, #2
 80095f8:	42a6      	cmp	r6, r4
 80095fa:	d109      	bne.n	8009610 <__libc_init_array+0x24>
 80095fc:	f000 f81a 	bl	8009634 <_init>
 8009600:	2600      	movs	r6, #0
 8009602:	4d0a      	ldr	r5, [pc, #40]	; (800962c <__libc_init_array+0x40>)
 8009604:	4c0a      	ldr	r4, [pc, #40]	; (8009630 <__libc_init_array+0x44>)
 8009606:	1b64      	subs	r4, r4, r5
 8009608:	10a4      	asrs	r4, r4, #2
 800960a:	42a6      	cmp	r6, r4
 800960c:	d105      	bne.n	800961a <__libc_init_array+0x2e>
 800960e:	bd70      	pop	{r4, r5, r6, pc}
 8009610:	f855 3b04 	ldr.w	r3, [r5], #4
 8009614:	4798      	blx	r3
 8009616:	3601      	adds	r6, #1
 8009618:	e7ee      	b.n	80095f8 <__libc_init_array+0xc>
 800961a:	f855 3b04 	ldr.w	r3, [r5], #4
 800961e:	4798      	blx	r3
 8009620:	3601      	adds	r6, #1
 8009622:	e7f2      	b.n	800960a <__libc_init_array+0x1e>
 8009624:	08009678 	.word	0x08009678
 8009628:	08009678 	.word	0x08009678
 800962c:	08009678 	.word	0x08009678
 8009630:	0800967c 	.word	0x0800967c

08009634 <_init>:
 8009634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009636:	bf00      	nop
 8009638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800963a:	bc08      	pop	{r3}
 800963c:	469e      	mov	lr, r3
 800963e:	4770      	bx	lr

08009640 <_fini>:
 8009640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009642:	bf00      	nop
 8009644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009646:	bc08      	pop	{r3}
 8009648:	469e      	mov	lr, r3
 800964a:	4770      	bx	lr
