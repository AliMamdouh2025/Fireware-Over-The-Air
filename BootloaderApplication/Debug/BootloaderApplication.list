
BootloaderApplication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08004400  08004400  00004400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001540  0800450c  0800450c  0000450c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08005a4c  08005a4c  00005a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a78  08005a78  00010028  2**0
                  CONTENTS
  4 .ARM          00000000  08005a78  08005a78  00010028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a78  08005a78  00010028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a78  08005a78  00005a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a7c  08005a7c  00005a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08005a80  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000028  08005aa8  00010028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08005aa8  00010090  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010028  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010051  2**0
                  CONTENTS, READONLY
 13 .debug_info   000063cc  00000000  00000000  00010094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000120f  00000000  00000000  00016460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005f0  00000000  00000000  00017670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000487  00000000  00000000  00017c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015d6a  00000000  00000000  000180e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000731a  00000000  00000000  0002de51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007e1a8  00000000  00000000  0003516b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000016d8  00000000  00000000  000b3314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000b49ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800450c <__do_global_dtors_aux>:
 800450c:	b510      	push	{r4, lr}
 800450e:	4c05      	ldr	r4, [pc, #20]	; (8004524 <__do_global_dtors_aux+0x18>)
 8004510:	7823      	ldrb	r3, [r4, #0]
 8004512:	b933      	cbnz	r3, 8004522 <__do_global_dtors_aux+0x16>
 8004514:	4b04      	ldr	r3, [pc, #16]	; (8004528 <__do_global_dtors_aux+0x1c>)
 8004516:	b113      	cbz	r3, 800451e <__do_global_dtors_aux+0x12>
 8004518:	4804      	ldr	r0, [pc, #16]	; (800452c <__do_global_dtors_aux+0x20>)
 800451a:	f3af 8000 	nop.w
 800451e:	2301      	movs	r3, #1
 8004520:	7023      	strb	r3, [r4, #0]
 8004522:	bd10      	pop	{r4, pc}
 8004524:	20000028 	.word	0x20000028
 8004528:	00000000 	.word	0x00000000
 800452c:	08005a34 	.word	0x08005a34

08004530 <frame_dummy>:
 8004530:	b508      	push	{r3, lr}
 8004532:	4b03      	ldr	r3, [pc, #12]	; (8004540 <frame_dummy+0x10>)
 8004534:	b11b      	cbz	r3, 800453e <frame_dummy+0xe>
 8004536:	4903      	ldr	r1, [pc, #12]	; (8004544 <frame_dummy+0x14>)
 8004538:	4803      	ldr	r0, [pc, #12]	; (8004548 <frame_dummy+0x18>)
 800453a:	f3af 8000 	nop.w
 800453e:	bd08      	pop	{r3, pc}
 8004540:	00000000 	.word	0x00000000
 8004544:	2000002c 	.word	0x2000002c
 8004548:	08005a34 	.word	0x08005a34

0800454c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004550:	f000 f976 	bl	8004840 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004554:	f000 f814 	bl	8004580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004558:	f000 f882 	bl	8004660 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800455c:	f000 f856 	bl	800460c <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Transmit(&huart2, Message, sizeof(Message),HAL_MAX_DELAY);
 8004560:	f04f 33ff 	mov.w	r3, #4294967295
 8004564:	2219      	movs	r2, #25
 8004566:	4904      	ldr	r1, [pc, #16]	; (8004578 <main+0x2c>)
 8004568:	4804      	ldr	r0, [pc, #16]	; (800457c <main+0x30>)
 800456a:	f001 f8b7 	bl	80056dc <HAL_UART_Transmit>
	  HAL_Delay(500);
 800456e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004572:	f000 f9c7 	bl	8004904 <HAL_Delay>
	  HAL_UART_Transmit(&huart2, Message, sizeof(Message),HAL_MAX_DELAY);
 8004576:	e7f3      	b.n	8004560 <main+0x14>
 8004578:	20000000 	.word	0x20000000
 800457c:	20000044 	.word	0x20000044

08004580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b090      	sub	sp, #64	; 0x40
 8004584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004586:	f107 0318 	add.w	r3, r7, #24
 800458a:	2228      	movs	r2, #40	; 0x28
 800458c:	2100      	movs	r1, #0
 800458e:	4618      	mov	r0, r3
 8004590:	f001 fa24 	bl	80059dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004594:	1d3b      	adds	r3, r7, #4
 8004596:	2200      	movs	r2, #0
 8004598:	601a      	str	r2, [r3, #0]
 800459a:	605a      	str	r2, [r3, #4]
 800459c:	609a      	str	r2, [r3, #8]
 800459e:	60da      	str	r2, [r3, #12]
 80045a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80045a2:	2301      	movs	r3, #1
 80045a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80045a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80045ac:	2300      	movs	r3, #0
 80045ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80045b0:	2301      	movs	r3, #1
 80045b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80045b4:	2302      	movs	r3, #2
 80045b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80045b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80045be:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80045c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80045c4:	f107 0318 	add.w	r3, r7, #24
 80045c8:	4618      	mov	r0, r3
 80045ca:	f000 fc27 	bl	8004e1c <HAL_RCC_OscConfig>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d001      	beq.n	80045d8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80045d4:	f000 f866 	bl	80046a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80045d8:	230f      	movs	r3, #15
 80045da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80045dc:	2302      	movs	r3, #2
 80045de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80045e0:	2300      	movs	r3, #0
 80045e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80045e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80045ea:	2300      	movs	r3, #0
 80045ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80045ee:	1d3b      	adds	r3, r7, #4
 80045f0:	2102      	movs	r1, #2
 80045f2:	4618      	mov	r0, r3
 80045f4:	f000 fe94 	bl	8005320 <HAL_RCC_ClockConfig>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80045fe:	f000 f851 	bl	80046a4 <Error_Handler>
  }
}
 8004602:	bf00      	nop
 8004604:	3740      	adds	r7, #64	; 0x40
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
	...

0800460c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004610:	4b11      	ldr	r3, [pc, #68]	; (8004658 <MX_USART2_UART_Init+0x4c>)
 8004612:	4a12      	ldr	r2, [pc, #72]	; (800465c <MX_USART2_UART_Init+0x50>)
 8004614:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004616:	4b10      	ldr	r3, [pc, #64]	; (8004658 <MX_USART2_UART_Init+0x4c>)
 8004618:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800461c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800461e:	4b0e      	ldr	r3, [pc, #56]	; (8004658 <MX_USART2_UART_Init+0x4c>)
 8004620:	2200      	movs	r2, #0
 8004622:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004624:	4b0c      	ldr	r3, [pc, #48]	; (8004658 <MX_USART2_UART_Init+0x4c>)
 8004626:	2200      	movs	r2, #0
 8004628:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800462a:	4b0b      	ldr	r3, [pc, #44]	; (8004658 <MX_USART2_UART_Init+0x4c>)
 800462c:	2200      	movs	r2, #0
 800462e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004630:	4b09      	ldr	r3, [pc, #36]	; (8004658 <MX_USART2_UART_Init+0x4c>)
 8004632:	220c      	movs	r2, #12
 8004634:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004636:	4b08      	ldr	r3, [pc, #32]	; (8004658 <MX_USART2_UART_Init+0x4c>)
 8004638:	2200      	movs	r2, #0
 800463a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800463c:	4b06      	ldr	r3, [pc, #24]	; (8004658 <MX_USART2_UART_Init+0x4c>)
 800463e:	2200      	movs	r2, #0
 8004640:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004642:	4805      	ldr	r0, [pc, #20]	; (8004658 <MX_USART2_UART_Init+0x4c>)
 8004644:	f000 fffa 	bl	800563c <HAL_UART_Init>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800464e:	f000 f829 	bl	80046a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004652:	bf00      	nop
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	20000044 	.word	0x20000044
 800465c:	40004400 	.word	0x40004400

08004660 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004666:	4b0e      	ldr	r3, [pc, #56]	; (80046a0 <MX_GPIO_Init+0x40>)
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	4a0d      	ldr	r2, [pc, #52]	; (80046a0 <MX_GPIO_Init+0x40>)
 800466c:	f043 0320 	orr.w	r3, r3, #32
 8004670:	6193      	str	r3, [r2, #24]
 8004672:	4b0b      	ldr	r3, [pc, #44]	; (80046a0 <MX_GPIO_Init+0x40>)
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	f003 0320 	and.w	r3, r3, #32
 800467a:	607b      	str	r3, [r7, #4]
 800467c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800467e:	4b08      	ldr	r3, [pc, #32]	; (80046a0 <MX_GPIO_Init+0x40>)
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	4a07      	ldr	r2, [pc, #28]	; (80046a0 <MX_GPIO_Init+0x40>)
 8004684:	f043 0304 	orr.w	r3, r3, #4
 8004688:	6193      	str	r3, [r2, #24]
 800468a:	4b05      	ldr	r3, [pc, #20]	; (80046a0 <MX_GPIO_Init+0x40>)
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	f003 0304 	and.w	r3, r3, #4
 8004692:	603b      	str	r3, [r7, #0]
 8004694:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004696:	bf00      	nop
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	bc80      	pop	{r7}
 800469e:	4770      	bx	lr
 80046a0:	40021000 	.word	0x40021000

080046a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80046a4:	b480      	push	{r7}
 80046a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80046a8:	b672      	cpsid	i
}
 80046aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80046ac:	e7fe      	b.n	80046ac <Error_Handler+0x8>
	...

080046b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80046b6:	4b0e      	ldr	r3, [pc, #56]	; (80046f0 <HAL_MspInit+0x40>)
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	4a0d      	ldr	r2, [pc, #52]	; (80046f0 <HAL_MspInit+0x40>)
 80046bc:	f043 0301 	orr.w	r3, r3, #1
 80046c0:	6193      	str	r3, [r2, #24]
 80046c2:	4b0b      	ldr	r3, [pc, #44]	; (80046f0 <HAL_MspInit+0x40>)
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	607b      	str	r3, [r7, #4]
 80046cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80046ce:	4b08      	ldr	r3, [pc, #32]	; (80046f0 <HAL_MspInit+0x40>)
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	4a07      	ldr	r2, [pc, #28]	; (80046f0 <HAL_MspInit+0x40>)
 80046d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046d8:	61d3      	str	r3, [r2, #28]
 80046da:	4b05      	ldr	r3, [pc, #20]	; (80046f0 <HAL_MspInit+0x40>)
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046e2:	603b      	str	r3, [r7, #0]
 80046e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80046e6:	bf00      	nop
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bc80      	pop	{r7}
 80046ee:	4770      	bx	lr
 80046f0:	40021000 	.word	0x40021000

080046f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b088      	sub	sp, #32
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046fc:	f107 0310 	add.w	r3, r7, #16
 8004700:	2200      	movs	r2, #0
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	605a      	str	r2, [r3, #4]
 8004706:	609a      	str	r2, [r3, #8]
 8004708:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a1b      	ldr	r2, [pc, #108]	; (800477c <HAL_UART_MspInit+0x88>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d12f      	bne.n	8004774 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004714:	4b1a      	ldr	r3, [pc, #104]	; (8004780 <HAL_UART_MspInit+0x8c>)
 8004716:	69db      	ldr	r3, [r3, #28]
 8004718:	4a19      	ldr	r2, [pc, #100]	; (8004780 <HAL_UART_MspInit+0x8c>)
 800471a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800471e:	61d3      	str	r3, [r2, #28]
 8004720:	4b17      	ldr	r3, [pc, #92]	; (8004780 <HAL_UART_MspInit+0x8c>)
 8004722:	69db      	ldr	r3, [r3, #28]
 8004724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004728:	60fb      	str	r3, [r7, #12]
 800472a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800472c:	4b14      	ldr	r3, [pc, #80]	; (8004780 <HAL_UART_MspInit+0x8c>)
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	4a13      	ldr	r2, [pc, #76]	; (8004780 <HAL_UART_MspInit+0x8c>)
 8004732:	f043 0304 	orr.w	r3, r3, #4
 8004736:	6193      	str	r3, [r2, #24]
 8004738:	4b11      	ldr	r3, [pc, #68]	; (8004780 <HAL_UART_MspInit+0x8c>)
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	f003 0304 	and.w	r3, r3, #4
 8004740:	60bb      	str	r3, [r7, #8]
 8004742:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004744:	2304      	movs	r3, #4
 8004746:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004748:	2302      	movs	r3, #2
 800474a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800474c:	2303      	movs	r3, #3
 800474e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004750:	f107 0310 	add.w	r3, r7, #16
 8004754:	4619      	mov	r1, r3
 8004756:	480b      	ldr	r0, [pc, #44]	; (8004784 <HAL_UART_MspInit+0x90>)
 8004758:	f000 f9dc 	bl	8004b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800475c:	2308      	movs	r3, #8
 800475e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004760:	2300      	movs	r3, #0
 8004762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004764:	2300      	movs	r3, #0
 8004766:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004768:	f107 0310 	add.w	r3, r7, #16
 800476c:	4619      	mov	r1, r3
 800476e:	4805      	ldr	r0, [pc, #20]	; (8004784 <HAL_UART_MspInit+0x90>)
 8004770:	f000 f9d0 	bl	8004b14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004774:	bf00      	nop
 8004776:	3720      	adds	r7, #32
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	40004400 	.word	0x40004400
 8004780:	40021000 	.word	0x40021000
 8004784:	40010800 	.word	0x40010800

08004788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800478c:	e7fe      	b.n	800478c <NMI_Handler+0x4>

0800478e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800478e:	b480      	push	{r7}
 8004790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004792:	e7fe      	b.n	8004792 <HardFault_Handler+0x4>

08004794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004794:	b480      	push	{r7}
 8004796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004798:	e7fe      	b.n	8004798 <MemManage_Handler+0x4>

0800479a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800479a:	b480      	push	{r7}
 800479c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800479e:	e7fe      	b.n	800479e <BusFault_Handler+0x4>

080047a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80047a0:	b480      	push	{r7}
 80047a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80047a4:	e7fe      	b.n	80047a4 <UsageFault_Handler+0x4>

080047a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80047a6:	b480      	push	{r7}
 80047a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80047aa:	bf00      	nop
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bc80      	pop	{r7}
 80047b0:	4770      	bx	lr

080047b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80047b2:	b480      	push	{r7}
 80047b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80047b6:	bf00      	nop
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bc80      	pop	{r7}
 80047bc:	4770      	bx	lr

080047be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80047be:	b480      	push	{r7}
 80047c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80047c2:	bf00      	nop
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bc80      	pop	{r7}
 80047c8:	4770      	bx	lr

080047ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80047ce:	f000 f87d 	bl	80048cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80047d2:	bf00      	nop
 80047d4:	bd80      	pop	{r7, pc}
	...

080047d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80047d8:	b480      	push	{r7}
 80047da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | 0x4400; /* Vector Table Relocation in Internal FLASH. */
 80047dc:	4b03      	ldr	r3, [pc, #12]	; (80047ec <SystemInit+0x14>)
 80047de:	4a04      	ldr	r2, [pc, #16]	; (80047f0 <SystemInit+0x18>)
 80047e0:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80047e2:	bf00      	nop
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bc80      	pop	{r7}
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	e000ed00 	.word	0xe000ed00
 80047f0:	08004400 	.word	0x08004400

080047f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80047f4:	f7ff fff0 	bl	80047d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80047f8:	480b      	ldr	r0, [pc, #44]	; (8004828 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80047fa:	490c      	ldr	r1, [pc, #48]	; (800482c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80047fc:	4a0c      	ldr	r2, [pc, #48]	; (8004830 <LoopFillZerobss+0x16>)
  movs r3, #0
 80047fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004800:	e002      	b.n	8004808 <LoopCopyDataInit>

08004802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004806:	3304      	adds	r3, #4

08004808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800480a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800480c:	d3f9      	bcc.n	8004802 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800480e:	4a09      	ldr	r2, [pc, #36]	; (8004834 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004810:	4c09      	ldr	r4, [pc, #36]	; (8004838 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004814:	e001      	b.n	800481a <LoopFillZerobss>

08004816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004818:	3204      	adds	r2, #4

0800481a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800481a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800481c:	d3fb      	bcc.n	8004816 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800481e:	f001 f8e5 	bl	80059ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004822:	f7ff fe93 	bl	800454c <main>
  bx lr
 8004826:	4770      	bx	lr
  ldr r0, =_sdata
 8004828:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800482c:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8004830:	08005a80 	.word	0x08005a80
  ldr r2, =_sbss
 8004834:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8004838:	20000090 	.word	0x20000090

0800483c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800483c:	e7fe      	b.n	800483c <ADC1_2_IRQHandler>
	...

08004840 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004844:	4b08      	ldr	r3, [pc, #32]	; (8004868 <HAL_Init+0x28>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a07      	ldr	r2, [pc, #28]	; (8004868 <HAL_Init+0x28>)
 800484a:	f043 0310 	orr.w	r3, r3, #16
 800484e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004850:	2003      	movs	r0, #3
 8004852:	f000 f92b 	bl	8004aac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004856:	200f      	movs	r0, #15
 8004858:	f000 f808 	bl	800486c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800485c:	f7ff ff28 	bl	80046b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	40022000 	.word	0x40022000

0800486c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004874:	4b12      	ldr	r3, [pc, #72]	; (80048c0 <HAL_InitTick+0x54>)
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	4b12      	ldr	r3, [pc, #72]	; (80048c4 <HAL_InitTick+0x58>)
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	4619      	mov	r1, r3
 800487e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004882:	fbb3 f3f1 	udiv	r3, r3, r1
 8004886:	fbb2 f3f3 	udiv	r3, r2, r3
 800488a:	4618      	mov	r0, r3
 800488c:	f000 f935 	bl	8004afa <HAL_SYSTICK_Config>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d001      	beq.n	800489a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e00e      	b.n	80048b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2b0f      	cmp	r3, #15
 800489e:	d80a      	bhi.n	80048b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80048a0:	2200      	movs	r2, #0
 80048a2:	6879      	ldr	r1, [r7, #4]
 80048a4:	f04f 30ff 	mov.w	r0, #4294967295
 80048a8:	f000 f90b 	bl	8004ac2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80048ac:	4a06      	ldr	r2, [pc, #24]	; (80048c8 <HAL_InitTick+0x5c>)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
 80048b4:	e000      	b.n	80048b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3708      	adds	r7, #8
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	2000001c 	.word	0x2000001c
 80048c4:	20000024 	.word	0x20000024
 80048c8:	20000020 	.word	0x20000020

080048cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048cc:	b480      	push	{r7}
 80048ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80048d0:	4b05      	ldr	r3, [pc, #20]	; (80048e8 <HAL_IncTick+0x1c>)
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	461a      	mov	r2, r3
 80048d6:	4b05      	ldr	r3, [pc, #20]	; (80048ec <HAL_IncTick+0x20>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4413      	add	r3, r2
 80048dc:	4a03      	ldr	r2, [pc, #12]	; (80048ec <HAL_IncTick+0x20>)
 80048de:	6013      	str	r3, [r2, #0]
}
 80048e0:	bf00      	nop
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bc80      	pop	{r7}
 80048e6:	4770      	bx	lr
 80048e8:	20000024 	.word	0x20000024
 80048ec:	2000008c 	.word	0x2000008c

080048f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048f0:	b480      	push	{r7}
 80048f2:	af00      	add	r7, sp, #0
  return uwTick;
 80048f4:	4b02      	ldr	r3, [pc, #8]	; (8004900 <HAL_GetTick+0x10>)
 80048f6:	681b      	ldr	r3, [r3, #0]
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bc80      	pop	{r7}
 80048fe:	4770      	bx	lr
 8004900:	2000008c 	.word	0x2000008c

08004904 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800490c:	f7ff fff0 	bl	80048f0 <HAL_GetTick>
 8004910:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800491c:	d005      	beq.n	800492a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800491e:	4b0a      	ldr	r3, [pc, #40]	; (8004948 <HAL_Delay+0x44>)
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	461a      	mov	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4413      	add	r3, r2
 8004928:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800492a:	bf00      	nop
 800492c:	f7ff ffe0 	bl	80048f0 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	429a      	cmp	r2, r3
 800493a:	d8f7      	bhi.n	800492c <HAL_Delay+0x28>
  {
  }
}
 800493c:	bf00      	nop
 800493e:	bf00      	nop
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	20000024 	.word	0x20000024

0800494c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f003 0307 	and.w	r3, r3, #7
 800495a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800495c:	4b0c      	ldr	r3, [pc, #48]	; (8004990 <__NVIC_SetPriorityGrouping+0x44>)
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004968:	4013      	ands	r3, r2
 800496a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004974:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800497c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800497e:	4a04      	ldr	r2, [pc, #16]	; (8004990 <__NVIC_SetPriorityGrouping+0x44>)
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	60d3      	str	r3, [r2, #12]
}
 8004984:	bf00      	nop
 8004986:	3714      	adds	r7, #20
 8004988:	46bd      	mov	sp, r7
 800498a:	bc80      	pop	{r7}
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	e000ed00 	.word	0xe000ed00

08004994 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004994:	b480      	push	{r7}
 8004996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004998:	4b04      	ldr	r3, [pc, #16]	; (80049ac <__NVIC_GetPriorityGrouping+0x18>)
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	0a1b      	lsrs	r3, r3, #8
 800499e:	f003 0307 	and.w	r3, r3, #7
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bc80      	pop	{r7}
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	e000ed00 	.word	0xe000ed00

080049b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	4603      	mov	r3, r0
 80049b8:	6039      	str	r1, [r7, #0]
 80049ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	db0a      	blt.n	80049da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	b2da      	uxtb	r2, r3
 80049c8:	490c      	ldr	r1, [pc, #48]	; (80049fc <__NVIC_SetPriority+0x4c>)
 80049ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ce:	0112      	lsls	r2, r2, #4
 80049d0:	b2d2      	uxtb	r2, r2
 80049d2:	440b      	add	r3, r1
 80049d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049d8:	e00a      	b.n	80049f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	b2da      	uxtb	r2, r3
 80049de:	4908      	ldr	r1, [pc, #32]	; (8004a00 <__NVIC_SetPriority+0x50>)
 80049e0:	79fb      	ldrb	r3, [r7, #7]
 80049e2:	f003 030f 	and.w	r3, r3, #15
 80049e6:	3b04      	subs	r3, #4
 80049e8:	0112      	lsls	r2, r2, #4
 80049ea:	b2d2      	uxtb	r2, r2
 80049ec:	440b      	add	r3, r1
 80049ee:	761a      	strb	r2, [r3, #24]
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bc80      	pop	{r7}
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	e000e100 	.word	0xe000e100
 8004a00:	e000ed00 	.word	0xe000ed00

08004a04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b089      	sub	sp, #36	; 0x24
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f003 0307 	and.w	r3, r3, #7
 8004a16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	f1c3 0307 	rsb	r3, r3, #7
 8004a1e:	2b04      	cmp	r3, #4
 8004a20:	bf28      	it	cs
 8004a22:	2304      	movcs	r3, #4
 8004a24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	3304      	adds	r3, #4
 8004a2a:	2b06      	cmp	r3, #6
 8004a2c:	d902      	bls.n	8004a34 <NVIC_EncodePriority+0x30>
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	3b03      	subs	r3, #3
 8004a32:	e000      	b.n	8004a36 <NVIC_EncodePriority+0x32>
 8004a34:	2300      	movs	r3, #0
 8004a36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a38:	f04f 32ff 	mov.w	r2, #4294967295
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a42:	43da      	mvns	r2, r3
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	401a      	ands	r2, r3
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	fa01 f303 	lsl.w	r3, r1, r3
 8004a56:	43d9      	mvns	r1, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a5c:	4313      	orrs	r3, r2
         );
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3724      	adds	r7, #36	; 0x24
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bc80      	pop	{r7}
 8004a66:	4770      	bx	lr

08004a68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	3b01      	subs	r3, #1
 8004a74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a78:	d301      	bcc.n	8004a7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e00f      	b.n	8004a9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a7e:	4a0a      	ldr	r2, [pc, #40]	; (8004aa8 <SysTick_Config+0x40>)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	3b01      	subs	r3, #1
 8004a84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a86:	210f      	movs	r1, #15
 8004a88:	f04f 30ff 	mov.w	r0, #4294967295
 8004a8c:	f7ff ff90 	bl	80049b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a90:	4b05      	ldr	r3, [pc, #20]	; (8004aa8 <SysTick_Config+0x40>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a96:	4b04      	ldr	r3, [pc, #16]	; (8004aa8 <SysTick_Config+0x40>)
 8004a98:	2207      	movs	r2, #7
 8004a9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3708      	adds	r7, #8
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	e000e010 	.word	0xe000e010

08004aac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f7ff ff49 	bl	800494c <__NVIC_SetPriorityGrouping>
}
 8004aba:	bf00      	nop
 8004abc:	3708      	adds	r7, #8
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b086      	sub	sp, #24
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	4603      	mov	r3, r0
 8004aca:	60b9      	str	r1, [r7, #8]
 8004acc:	607a      	str	r2, [r7, #4]
 8004ace:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ad4:	f7ff ff5e 	bl	8004994 <__NVIC_GetPriorityGrouping>
 8004ad8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	68b9      	ldr	r1, [r7, #8]
 8004ade:	6978      	ldr	r0, [r7, #20]
 8004ae0:	f7ff ff90 	bl	8004a04 <NVIC_EncodePriority>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004aea:	4611      	mov	r1, r2
 8004aec:	4618      	mov	r0, r3
 8004aee:	f7ff ff5f 	bl	80049b0 <__NVIC_SetPriority>
}
 8004af2:	bf00      	nop
 8004af4:	3718      	adds	r7, #24
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b082      	sub	sp, #8
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f7ff ffb0 	bl	8004a68 <SysTick_Config>
 8004b08:	4603      	mov	r3, r0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3708      	adds	r7, #8
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
	...

08004b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b08b      	sub	sp, #44	; 0x2c
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004b22:	2300      	movs	r3, #0
 8004b24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b26:	e169      	b.n	8004dfc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004b28:	2201      	movs	r2, #1
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	69fa      	ldr	r2, [r7, #28]
 8004b38:	4013      	ands	r3, r2
 8004b3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	f040 8158 	bne.w	8004df6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	4a9a      	ldr	r2, [pc, #616]	; (8004db4 <HAL_GPIO_Init+0x2a0>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d05e      	beq.n	8004c0e <HAL_GPIO_Init+0xfa>
 8004b50:	4a98      	ldr	r2, [pc, #608]	; (8004db4 <HAL_GPIO_Init+0x2a0>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d875      	bhi.n	8004c42 <HAL_GPIO_Init+0x12e>
 8004b56:	4a98      	ldr	r2, [pc, #608]	; (8004db8 <HAL_GPIO_Init+0x2a4>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d058      	beq.n	8004c0e <HAL_GPIO_Init+0xfa>
 8004b5c:	4a96      	ldr	r2, [pc, #600]	; (8004db8 <HAL_GPIO_Init+0x2a4>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d86f      	bhi.n	8004c42 <HAL_GPIO_Init+0x12e>
 8004b62:	4a96      	ldr	r2, [pc, #600]	; (8004dbc <HAL_GPIO_Init+0x2a8>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d052      	beq.n	8004c0e <HAL_GPIO_Init+0xfa>
 8004b68:	4a94      	ldr	r2, [pc, #592]	; (8004dbc <HAL_GPIO_Init+0x2a8>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d869      	bhi.n	8004c42 <HAL_GPIO_Init+0x12e>
 8004b6e:	4a94      	ldr	r2, [pc, #592]	; (8004dc0 <HAL_GPIO_Init+0x2ac>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d04c      	beq.n	8004c0e <HAL_GPIO_Init+0xfa>
 8004b74:	4a92      	ldr	r2, [pc, #584]	; (8004dc0 <HAL_GPIO_Init+0x2ac>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d863      	bhi.n	8004c42 <HAL_GPIO_Init+0x12e>
 8004b7a:	4a92      	ldr	r2, [pc, #584]	; (8004dc4 <HAL_GPIO_Init+0x2b0>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d046      	beq.n	8004c0e <HAL_GPIO_Init+0xfa>
 8004b80:	4a90      	ldr	r2, [pc, #576]	; (8004dc4 <HAL_GPIO_Init+0x2b0>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d85d      	bhi.n	8004c42 <HAL_GPIO_Init+0x12e>
 8004b86:	2b12      	cmp	r3, #18
 8004b88:	d82a      	bhi.n	8004be0 <HAL_GPIO_Init+0xcc>
 8004b8a:	2b12      	cmp	r3, #18
 8004b8c:	d859      	bhi.n	8004c42 <HAL_GPIO_Init+0x12e>
 8004b8e:	a201      	add	r2, pc, #4	; (adr r2, 8004b94 <HAL_GPIO_Init+0x80>)
 8004b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b94:	08004c0f 	.word	0x08004c0f
 8004b98:	08004be9 	.word	0x08004be9
 8004b9c:	08004bfb 	.word	0x08004bfb
 8004ba0:	08004c3d 	.word	0x08004c3d
 8004ba4:	08004c43 	.word	0x08004c43
 8004ba8:	08004c43 	.word	0x08004c43
 8004bac:	08004c43 	.word	0x08004c43
 8004bb0:	08004c43 	.word	0x08004c43
 8004bb4:	08004c43 	.word	0x08004c43
 8004bb8:	08004c43 	.word	0x08004c43
 8004bbc:	08004c43 	.word	0x08004c43
 8004bc0:	08004c43 	.word	0x08004c43
 8004bc4:	08004c43 	.word	0x08004c43
 8004bc8:	08004c43 	.word	0x08004c43
 8004bcc:	08004c43 	.word	0x08004c43
 8004bd0:	08004c43 	.word	0x08004c43
 8004bd4:	08004c43 	.word	0x08004c43
 8004bd8:	08004bf1 	.word	0x08004bf1
 8004bdc:	08004c05 	.word	0x08004c05
 8004be0:	4a79      	ldr	r2, [pc, #484]	; (8004dc8 <HAL_GPIO_Init+0x2b4>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d013      	beq.n	8004c0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004be6:	e02c      	b.n	8004c42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	623b      	str	r3, [r7, #32]
          break;
 8004bee:	e029      	b.n	8004c44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	3304      	adds	r3, #4
 8004bf6:	623b      	str	r3, [r7, #32]
          break;
 8004bf8:	e024      	b.n	8004c44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	3308      	adds	r3, #8
 8004c00:	623b      	str	r3, [r7, #32]
          break;
 8004c02:	e01f      	b.n	8004c44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	330c      	adds	r3, #12
 8004c0a:	623b      	str	r3, [r7, #32]
          break;
 8004c0c:	e01a      	b.n	8004c44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d102      	bne.n	8004c1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004c16:	2304      	movs	r3, #4
 8004c18:	623b      	str	r3, [r7, #32]
          break;
 8004c1a:	e013      	b.n	8004c44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d105      	bne.n	8004c30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004c24:	2308      	movs	r3, #8
 8004c26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	69fa      	ldr	r2, [r7, #28]
 8004c2c:	611a      	str	r2, [r3, #16]
          break;
 8004c2e:	e009      	b.n	8004c44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004c30:	2308      	movs	r3, #8
 8004c32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	69fa      	ldr	r2, [r7, #28]
 8004c38:	615a      	str	r2, [r3, #20]
          break;
 8004c3a:	e003      	b.n	8004c44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	623b      	str	r3, [r7, #32]
          break;
 8004c40:	e000      	b.n	8004c44 <HAL_GPIO_Init+0x130>
          break;
 8004c42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	2bff      	cmp	r3, #255	; 0xff
 8004c48:	d801      	bhi.n	8004c4e <HAL_GPIO_Init+0x13a>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	e001      	b.n	8004c52 <HAL_GPIO_Init+0x13e>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	3304      	adds	r3, #4
 8004c52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	2bff      	cmp	r3, #255	; 0xff
 8004c58:	d802      	bhi.n	8004c60 <HAL_GPIO_Init+0x14c>
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	e002      	b.n	8004c66 <HAL_GPIO_Init+0x152>
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c62:	3b08      	subs	r3, #8
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	210f      	movs	r1, #15
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	fa01 f303 	lsl.w	r3, r1, r3
 8004c74:	43db      	mvns	r3, r3
 8004c76:	401a      	ands	r2, r3
 8004c78:	6a39      	ldr	r1, [r7, #32]
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c80:	431a      	orrs	r2, r3
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f000 80b1 	beq.w	8004df6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004c94:	4b4d      	ldr	r3, [pc, #308]	; (8004dcc <HAL_GPIO_Init+0x2b8>)
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	4a4c      	ldr	r2, [pc, #304]	; (8004dcc <HAL_GPIO_Init+0x2b8>)
 8004c9a:	f043 0301 	orr.w	r3, r3, #1
 8004c9e:	6193      	str	r3, [r2, #24]
 8004ca0:	4b4a      	ldr	r3, [pc, #296]	; (8004dcc <HAL_GPIO_Init+0x2b8>)
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	60bb      	str	r3, [r7, #8]
 8004caa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004cac:	4a48      	ldr	r2, [pc, #288]	; (8004dd0 <HAL_GPIO_Init+0x2bc>)
 8004cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb0:	089b      	lsrs	r3, r3, #2
 8004cb2:	3302      	adds	r3, #2
 8004cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cb8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbc:	f003 0303 	and.w	r3, r3, #3
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	220f      	movs	r2, #15
 8004cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc8:	43db      	mvns	r3, r3
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	4013      	ands	r3, r2
 8004cce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a40      	ldr	r2, [pc, #256]	; (8004dd4 <HAL_GPIO_Init+0x2c0>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d013      	beq.n	8004d00 <HAL_GPIO_Init+0x1ec>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a3f      	ldr	r2, [pc, #252]	; (8004dd8 <HAL_GPIO_Init+0x2c4>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d00d      	beq.n	8004cfc <HAL_GPIO_Init+0x1e8>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a3e      	ldr	r2, [pc, #248]	; (8004ddc <HAL_GPIO_Init+0x2c8>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d007      	beq.n	8004cf8 <HAL_GPIO_Init+0x1e4>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a3d      	ldr	r2, [pc, #244]	; (8004de0 <HAL_GPIO_Init+0x2cc>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d101      	bne.n	8004cf4 <HAL_GPIO_Init+0x1e0>
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e006      	b.n	8004d02 <HAL_GPIO_Init+0x1ee>
 8004cf4:	2304      	movs	r3, #4
 8004cf6:	e004      	b.n	8004d02 <HAL_GPIO_Init+0x1ee>
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	e002      	b.n	8004d02 <HAL_GPIO_Init+0x1ee>
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e000      	b.n	8004d02 <HAL_GPIO_Init+0x1ee>
 8004d00:	2300      	movs	r3, #0
 8004d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d04:	f002 0203 	and.w	r2, r2, #3
 8004d08:	0092      	lsls	r2, r2, #2
 8004d0a:	4093      	lsls	r3, r2
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004d12:	492f      	ldr	r1, [pc, #188]	; (8004dd0 <HAL_GPIO_Init+0x2bc>)
 8004d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d16:	089b      	lsrs	r3, r3, #2
 8004d18:	3302      	adds	r3, #2
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d006      	beq.n	8004d3a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004d2c:	4b2d      	ldr	r3, [pc, #180]	; (8004de4 <HAL_GPIO_Init+0x2d0>)
 8004d2e:	689a      	ldr	r2, [r3, #8]
 8004d30:	492c      	ldr	r1, [pc, #176]	; (8004de4 <HAL_GPIO_Init+0x2d0>)
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	608b      	str	r3, [r1, #8]
 8004d38:	e006      	b.n	8004d48 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004d3a:	4b2a      	ldr	r3, [pc, #168]	; (8004de4 <HAL_GPIO_Init+0x2d0>)
 8004d3c:	689a      	ldr	r2, [r3, #8]
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	43db      	mvns	r3, r3
 8004d42:	4928      	ldr	r1, [pc, #160]	; (8004de4 <HAL_GPIO_Init+0x2d0>)
 8004d44:	4013      	ands	r3, r2
 8004d46:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d006      	beq.n	8004d62 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004d54:	4b23      	ldr	r3, [pc, #140]	; (8004de4 <HAL_GPIO_Init+0x2d0>)
 8004d56:	68da      	ldr	r2, [r3, #12]
 8004d58:	4922      	ldr	r1, [pc, #136]	; (8004de4 <HAL_GPIO_Init+0x2d0>)
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	60cb      	str	r3, [r1, #12]
 8004d60:	e006      	b.n	8004d70 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004d62:	4b20      	ldr	r3, [pc, #128]	; (8004de4 <HAL_GPIO_Init+0x2d0>)
 8004d64:	68da      	ldr	r2, [r3, #12]
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	43db      	mvns	r3, r3
 8004d6a:	491e      	ldr	r1, [pc, #120]	; (8004de4 <HAL_GPIO_Init+0x2d0>)
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d006      	beq.n	8004d8a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004d7c:	4b19      	ldr	r3, [pc, #100]	; (8004de4 <HAL_GPIO_Init+0x2d0>)
 8004d7e:	685a      	ldr	r2, [r3, #4]
 8004d80:	4918      	ldr	r1, [pc, #96]	; (8004de4 <HAL_GPIO_Init+0x2d0>)
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	604b      	str	r3, [r1, #4]
 8004d88:	e006      	b.n	8004d98 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004d8a:	4b16      	ldr	r3, [pc, #88]	; (8004de4 <HAL_GPIO_Init+0x2d0>)
 8004d8c:	685a      	ldr	r2, [r3, #4]
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	43db      	mvns	r3, r3
 8004d92:	4914      	ldr	r1, [pc, #80]	; (8004de4 <HAL_GPIO_Init+0x2d0>)
 8004d94:	4013      	ands	r3, r2
 8004d96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d021      	beq.n	8004de8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004da4:	4b0f      	ldr	r3, [pc, #60]	; (8004de4 <HAL_GPIO_Init+0x2d0>)
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	490e      	ldr	r1, [pc, #56]	; (8004de4 <HAL_GPIO_Init+0x2d0>)
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	600b      	str	r3, [r1, #0]
 8004db0:	e021      	b.n	8004df6 <HAL_GPIO_Init+0x2e2>
 8004db2:	bf00      	nop
 8004db4:	10320000 	.word	0x10320000
 8004db8:	10310000 	.word	0x10310000
 8004dbc:	10220000 	.word	0x10220000
 8004dc0:	10210000 	.word	0x10210000
 8004dc4:	10120000 	.word	0x10120000
 8004dc8:	10110000 	.word	0x10110000
 8004dcc:	40021000 	.word	0x40021000
 8004dd0:	40010000 	.word	0x40010000
 8004dd4:	40010800 	.word	0x40010800
 8004dd8:	40010c00 	.word	0x40010c00
 8004ddc:	40011000 	.word	0x40011000
 8004de0:	40011400 	.word	0x40011400
 8004de4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004de8:	4b0b      	ldr	r3, [pc, #44]	; (8004e18 <HAL_GPIO_Init+0x304>)
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	43db      	mvns	r3, r3
 8004df0:	4909      	ldr	r1, [pc, #36]	; (8004e18 <HAL_GPIO_Init+0x304>)
 8004df2:	4013      	ands	r3, r2
 8004df4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df8:	3301      	adds	r3, #1
 8004dfa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e02:	fa22 f303 	lsr.w	r3, r2, r3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	f47f ae8e 	bne.w	8004b28 <HAL_GPIO_Init+0x14>
  }
}
 8004e0c:	bf00      	nop
 8004e0e:	bf00      	nop
 8004e10:	372c      	adds	r7, #44	; 0x2c
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bc80      	pop	{r7}
 8004e16:	4770      	bx	lr
 8004e18:	40010400 	.word	0x40010400

08004e1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e272      	b.n	8005314 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f000 8087 	beq.w	8004f4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e3c:	4b92      	ldr	r3, [pc, #584]	; (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f003 030c 	and.w	r3, r3, #12
 8004e44:	2b04      	cmp	r3, #4
 8004e46:	d00c      	beq.n	8004e62 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004e48:	4b8f      	ldr	r3, [pc, #572]	; (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f003 030c 	and.w	r3, r3, #12
 8004e50:	2b08      	cmp	r3, #8
 8004e52:	d112      	bne.n	8004e7a <HAL_RCC_OscConfig+0x5e>
 8004e54:	4b8c      	ldr	r3, [pc, #560]	; (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e60:	d10b      	bne.n	8004e7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e62:	4b89      	ldr	r3, [pc, #548]	; (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d06c      	beq.n	8004f48 <HAL_RCC_OscConfig+0x12c>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d168      	bne.n	8004f48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e24c      	b.n	8005314 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e82:	d106      	bne.n	8004e92 <HAL_RCC_OscConfig+0x76>
 8004e84:	4b80      	ldr	r3, [pc, #512]	; (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a7f      	ldr	r2, [pc, #508]	; (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004e8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e8e:	6013      	str	r3, [r2, #0]
 8004e90:	e02e      	b.n	8004ef0 <HAL_RCC_OscConfig+0xd4>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10c      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x98>
 8004e9a:	4b7b      	ldr	r3, [pc, #492]	; (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a7a      	ldr	r2, [pc, #488]	; (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004ea0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ea4:	6013      	str	r3, [r2, #0]
 8004ea6:	4b78      	ldr	r3, [pc, #480]	; (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a77      	ldr	r2, [pc, #476]	; (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004eac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004eb0:	6013      	str	r3, [r2, #0]
 8004eb2:	e01d      	b.n	8004ef0 <HAL_RCC_OscConfig+0xd4>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ebc:	d10c      	bne.n	8004ed8 <HAL_RCC_OscConfig+0xbc>
 8004ebe:	4b72      	ldr	r3, [pc, #456]	; (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a71      	ldr	r2, [pc, #452]	; (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004ec4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ec8:	6013      	str	r3, [r2, #0]
 8004eca:	4b6f      	ldr	r3, [pc, #444]	; (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a6e      	ldr	r2, [pc, #440]	; (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ed4:	6013      	str	r3, [r2, #0]
 8004ed6:	e00b      	b.n	8004ef0 <HAL_RCC_OscConfig+0xd4>
 8004ed8:	4b6b      	ldr	r3, [pc, #428]	; (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a6a      	ldr	r2, [pc, #424]	; (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004ede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ee2:	6013      	str	r3, [r2, #0]
 8004ee4:	4b68      	ldr	r3, [pc, #416]	; (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a67      	ldr	r2, [pc, #412]	; (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004eea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004eee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d013      	beq.n	8004f20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ef8:	f7ff fcfa 	bl	80048f0 <HAL_GetTick>
 8004efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004efe:	e008      	b.n	8004f12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f00:	f7ff fcf6 	bl	80048f0 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	2b64      	cmp	r3, #100	; 0x64
 8004f0c:	d901      	bls.n	8004f12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e200      	b.n	8005314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f12:	4b5d      	ldr	r3, [pc, #372]	; (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d0f0      	beq.n	8004f00 <HAL_RCC_OscConfig+0xe4>
 8004f1e:	e014      	b.n	8004f4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f20:	f7ff fce6 	bl	80048f0 <HAL_GetTick>
 8004f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f26:	e008      	b.n	8004f3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f28:	f7ff fce2 	bl	80048f0 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b64      	cmp	r3, #100	; 0x64
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e1ec      	b.n	8005314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f3a:	4b53      	ldr	r3, [pc, #332]	; (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1f0      	bne.n	8004f28 <HAL_RCC_OscConfig+0x10c>
 8004f46:	e000      	b.n	8004f4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d063      	beq.n	800501e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f56:	4b4c      	ldr	r3, [pc, #304]	; (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f003 030c 	and.w	r3, r3, #12
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00b      	beq.n	8004f7a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004f62:	4b49      	ldr	r3, [pc, #292]	; (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f003 030c 	and.w	r3, r3, #12
 8004f6a:	2b08      	cmp	r3, #8
 8004f6c:	d11c      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x18c>
 8004f6e:	4b46      	ldr	r3, [pc, #280]	; (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d116      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f7a:	4b43      	ldr	r3, [pc, #268]	; (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d005      	beq.n	8004f92 <HAL_RCC_OscConfig+0x176>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d001      	beq.n	8004f92 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e1c0      	b.n	8005314 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f92:	4b3d      	ldr	r3, [pc, #244]	; (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	00db      	lsls	r3, r3, #3
 8004fa0:	4939      	ldr	r1, [pc, #228]	; (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fa6:	e03a      	b.n	800501e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d020      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fb0:	4b36      	ldr	r3, [pc, #216]	; (800508c <HAL_RCC_OscConfig+0x270>)
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fb6:	f7ff fc9b 	bl	80048f0 <HAL_GetTick>
 8004fba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fbc:	e008      	b.n	8004fd0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fbe:	f7ff fc97 	bl	80048f0 <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d901      	bls.n	8004fd0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e1a1      	b.n	8005314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fd0:	4b2d      	ldr	r3, [pc, #180]	; (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0302 	and.w	r3, r3, #2
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d0f0      	beq.n	8004fbe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fdc:	4b2a      	ldr	r3, [pc, #168]	; (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	695b      	ldr	r3, [r3, #20]
 8004fe8:	00db      	lsls	r3, r3, #3
 8004fea:	4927      	ldr	r1, [pc, #156]	; (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	600b      	str	r3, [r1, #0]
 8004ff0:	e015      	b.n	800501e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ff2:	4b26      	ldr	r3, [pc, #152]	; (800508c <HAL_RCC_OscConfig+0x270>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff8:	f7ff fc7a 	bl	80048f0 <HAL_GetTick>
 8004ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ffe:	e008      	b.n	8005012 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005000:	f7ff fc76 	bl	80048f0 <HAL_GetTick>
 8005004:	4602      	mov	r2, r0
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	2b02      	cmp	r3, #2
 800500c:	d901      	bls.n	8005012 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e180      	b.n	8005314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005012:	4b1d      	ldr	r3, [pc, #116]	; (8005088 <HAL_RCC_OscConfig+0x26c>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0302 	and.w	r3, r3, #2
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1f0      	bne.n	8005000 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0308 	and.w	r3, r3, #8
 8005026:	2b00      	cmp	r3, #0
 8005028:	d03a      	beq.n	80050a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d019      	beq.n	8005066 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005032:	4b17      	ldr	r3, [pc, #92]	; (8005090 <HAL_RCC_OscConfig+0x274>)
 8005034:	2201      	movs	r2, #1
 8005036:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005038:	f7ff fc5a 	bl	80048f0 <HAL_GetTick>
 800503c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800503e:	e008      	b.n	8005052 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005040:	f7ff fc56 	bl	80048f0 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	2b02      	cmp	r3, #2
 800504c:	d901      	bls.n	8005052 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e160      	b.n	8005314 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005052:	4b0d      	ldr	r3, [pc, #52]	; (8005088 <HAL_RCC_OscConfig+0x26c>)
 8005054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d0f0      	beq.n	8005040 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800505e:	2001      	movs	r0, #1
 8005060:	f000 face 	bl	8005600 <RCC_Delay>
 8005064:	e01c      	b.n	80050a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005066:	4b0a      	ldr	r3, [pc, #40]	; (8005090 <HAL_RCC_OscConfig+0x274>)
 8005068:	2200      	movs	r2, #0
 800506a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800506c:	f7ff fc40 	bl	80048f0 <HAL_GetTick>
 8005070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005072:	e00f      	b.n	8005094 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005074:	f7ff fc3c 	bl	80048f0 <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	2b02      	cmp	r3, #2
 8005080:	d908      	bls.n	8005094 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e146      	b.n	8005314 <HAL_RCC_OscConfig+0x4f8>
 8005086:	bf00      	nop
 8005088:	40021000 	.word	0x40021000
 800508c:	42420000 	.word	0x42420000
 8005090:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005094:	4b92      	ldr	r3, [pc, #584]	; (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 8005096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005098:	f003 0302 	and.w	r3, r3, #2
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1e9      	bne.n	8005074 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0304 	and.w	r3, r3, #4
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 80a6 	beq.w	80051fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050ae:	2300      	movs	r3, #0
 80050b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050b2:	4b8b      	ldr	r3, [pc, #556]	; (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10d      	bne.n	80050da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050be:	4b88      	ldr	r3, [pc, #544]	; (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 80050c0:	69db      	ldr	r3, [r3, #28]
 80050c2:	4a87      	ldr	r2, [pc, #540]	; (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 80050c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050c8:	61d3      	str	r3, [r2, #28]
 80050ca:	4b85      	ldr	r3, [pc, #532]	; (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050d2:	60bb      	str	r3, [r7, #8]
 80050d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050d6:	2301      	movs	r3, #1
 80050d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050da:	4b82      	ldr	r3, [pc, #520]	; (80052e4 <HAL_RCC_OscConfig+0x4c8>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d118      	bne.n	8005118 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050e6:	4b7f      	ldr	r3, [pc, #508]	; (80052e4 <HAL_RCC_OscConfig+0x4c8>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a7e      	ldr	r2, [pc, #504]	; (80052e4 <HAL_RCC_OscConfig+0x4c8>)
 80050ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050f2:	f7ff fbfd 	bl	80048f0 <HAL_GetTick>
 80050f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050f8:	e008      	b.n	800510c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050fa:	f7ff fbf9 	bl	80048f0 <HAL_GetTick>
 80050fe:	4602      	mov	r2, r0
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	2b64      	cmp	r3, #100	; 0x64
 8005106:	d901      	bls.n	800510c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	e103      	b.n	8005314 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800510c:	4b75      	ldr	r3, [pc, #468]	; (80052e4 <HAL_RCC_OscConfig+0x4c8>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005114:	2b00      	cmp	r3, #0
 8005116:	d0f0      	beq.n	80050fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d106      	bne.n	800512e <HAL_RCC_OscConfig+0x312>
 8005120:	4b6f      	ldr	r3, [pc, #444]	; (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 8005122:	6a1b      	ldr	r3, [r3, #32]
 8005124:	4a6e      	ldr	r2, [pc, #440]	; (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 8005126:	f043 0301 	orr.w	r3, r3, #1
 800512a:	6213      	str	r3, [r2, #32]
 800512c:	e02d      	b.n	800518a <HAL_RCC_OscConfig+0x36e>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d10c      	bne.n	8005150 <HAL_RCC_OscConfig+0x334>
 8005136:	4b6a      	ldr	r3, [pc, #424]	; (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	4a69      	ldr	r2, [pc, #420]	; (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 800513c:	f023 0301 	bic.w	r3, r3, #1
 8005140:	6213      	str	r3, [r2, #32]
 8005142:	4b67      	ldr	r3, [pc, #412]	; (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 8005144:	6a1b      	ldr	r3, [r3, #32]
 8005146:	4a66      	ldr	r2, [pc, #408]	; (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 8005148:	f023 0304 	bic.w	r3, r3, #4
 800514c:	6213      	str	r3, [r2, #32]
 800514e:	e01c      	b.n	800518a <HAL_RCC_OscConfig+0x36e>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	2b05      	cmp	r3, #5
 8005156:	d10c      	bne.n	8005172 <HAL_RCC_OscConfig+0x356>
 8005158:	4b61      	ldr	r3, [pc, #388]	; (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 800515a:	6a1b      	ldr	r3, [r3, #32]
 800515c:	4a60      	ldr	r2, [pc, #384]	; (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 800515e:	f043 0304 	orr.w	r3, r3, #4
 8005162:	6213      	str	r3, [r2, #32]
 8005164:	4b5e      	ldr	r3, [pc, #376]	; (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	4a5d      	ldr	r2, [pc, #372]	; (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 800516a:	f043 0301 	orr.w	r3, r3, #1
 800516e:	6213      	str	r3, [r2, #32]
 8005170:	e00b      	b.n	800518a <HAL_RCC_OscConfig+0x36e>
 8005172:	4b5b      	ldr	r3, [pc, #364]	; (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	4a5a      	ldr	r2, [pc, #360]	; (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 8005178:	f023 0301 	bic.w	r3, r3, #1
 800517c:	6213      	str	r3, [r2, #32]
 800517e:	4b58      	ldr	r3, [pc, #352]	; (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	4a57      	ldr	r2, [pc, #348]	; (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 8005184:	f023 0304 	bic.w	r3, r3, #4
 8005188:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d015      	beq.n	80051be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005192:	f7ff fbad 	bl	80048f0 <HAL_GetTick>
 8005196:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005198:	e00a      	b.n	80051b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800519a:	f7ff fba9 	bl	80048f0 <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d901      	bls.n	80051b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e0b1      	b.n	8005314 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051b0:	4b4b      	ldr	r3, [pc, #300]	; (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 80051b2:	6a1b      	ldr	r3, [r3, #32]
 80051b4:	f003 0302 	and.w	r3, r3, #2
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d0ee      	beq.n	800519a <HAL_RCC_OscConfig+0x37e>
 80051bc:	e014      	b.n	80051e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051be:	f7ff fb97 	bl	80048f0 <HAL_GetTick>
 80051c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051c4:	e00a      	b.n	80051dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051c6:	f7ff fb93 	bl	80048f0 <HAL_GetTick>
 80051ca:	4602      	mov	r2, r0
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d901      	bls.n	80051dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e09b      	b.n	8005314 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051dc:	4b40      	ldr	r3, [pc, #256]	; (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 80051de:	6a1b      	ldr	r3, [r3, #32]
 80051e0:	f003 0302 	and.w	r3, r3, #2
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1ee      	bne.n	80051c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80051e8:	7dfb      	ldrb	r3, [r7, #23]
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d105      	bne.n	80051fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051ee:	4b3c      	ldr	r3, [pc, #240]	; (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	4a3b      	ldr	r2, [pc, #236]	; (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 80051f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	f000 8087 	beq.w	8005312 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005204:	4b36      	ldr	r3, [pc, #216]	; (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f003 030c 	and.w	r3, r3, #12
 800520c:	2b08      	cmp	r3, #8
 800520e:	d061      	beq.n	80052d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	69db      	ldr	r3, [r3, #28]
 8005214:	2b02      	cmp	r3, #2
 8005216:	d146      	bne.n	80052a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005218:	4b33      	ldr	r3, [pc, #204]	; (80052e8 <HAL_RCC_OscConfig+0x4cc>)
 800521a:	2200      	movs	r2, #0
 800521c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800521e:	f7ff fb67 	bl	80048f0 <HAL_GetTick>
 8005222:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005224:	e008      	b.n	8005238 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005226:	f7ff fb63 	bl	80048f0 <HAL_GetTick>
 800522a:	4602      	mov	r2, r0
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	2b02      	cmp	r3, #2
 8005232:	d901      	bls.n	8005238 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e06d      	b.n	8005314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005238:	4b29      	ldr	r3, [pc, #164]	; (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d1f0      	bne.n	8005226 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a1b      	ldr	r3, [r3, #32]
 8005248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800524c:	d108      	bne.n	8005260 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800524e:	4b24      	ldr	r3, [pc, #144]	; (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	4921      	ldr	r1, [pc, #132]	; (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 800525c:	4313      	orrs	r3, r2
 800525e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005260:	4b1f      	ldr	r3, [pc, #124]	; (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a19      	ldr	r1, [r3, #32]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005270:	430b      	orrs	r3, r1
 8005272:	491b      	ldr	r1, [pc, #108]	; (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 8005274:	4313      	orrs	r3, r2
 8005276:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005278:	4b1b      	ldr	r3, [pc, #108]	; (80052e8 <HAL_RCC_OscConfig+0x4cc>)
 800527a:	2201      	movs	r2, #1
 800527c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800527e:	f7ff fb37 	bl	80048f0 <HAL_GetTick>
 8005282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005284:	e008      	b.n	8005298 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005286:	f7ff fb33 	bl	80048f0 <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	2b02      	cmp	r3, #2
 8005292:	d901      	bls.n	8005298 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e03d      	b.n	8005314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005298:	4b11      	ldr	r3, [pc, #68]	; (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d0f0      	beq.n	8005286 <HAL_RCC_OscConfig+0x46a>
 80052a4:	e035      	b.n	8005312 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052a6:	4b10      	ldr	r3, [pc, #64]	; (80052e8 <HAL_RCC_OscConfig+0x4cc>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052ac:	f7ff fb20 	bl	80048f0 <HAL_GetTick>
 80052b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052b2:	e008      	b.n	80052c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052b4:	f7ff fb1c 	bl	80048f0 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d901      	bls.n	80052c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e026      	b.n	8005314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052c6:	4b06      	ldr	r3, [pc, #24]	; (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1f0      	bne.n	80052b4 <HAL_RCC_OscConfig+0x498>
 80052d2:	e01e      	b.n	8005312 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	69db      	ldr	r3, [r3, #28]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d107      	bne.n	80052ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e019      	b.n	8005314 <HAL_RCC_OscConfig+0x4f8>
 80052e0:	40021000 	.word	0x40021000
 80052e4:	40007000 	.word	0x40007000
 80052e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80052ec:	4b0b      	ldr	r3, [pc, #44]	; (800531c <HAL_RCC_OscConfig+0x500>)
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a1b      	ldr	r3, [r3, #32]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d106      	bne.n	800530e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800530a:	429a      	cmp	r2, r3
 800530c:	d001      	beq.n	8005312 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e000      	b.n	8005314 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3718      	adds	r7, #24
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	40021000 	.word	0x40021000

08005320 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d101      	bne.n	8005334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e0d0      	b.n	80054d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005334:	4b6a      	ldr	r3, [pc, #424]	; (80054e0 <HAL_RCC_ClockConfig+0x1c0>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0307 	and.w	r3, r3, #7
 800533c:	683a      	ldr	r2, [r7, #0]
 800533e:	429a      	cmp	r2, r3
 8005340:	d910      	bls.n	8005364 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005342:	4b67      	ldr	r3, [pc, #412]	; (80054e0 <HAL_RCC_ClockConfig+0x1c0>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f023 0207 	bic.w	r2, r3, #7
 800534a:	4965      	ldr	r1, [pc, #404]	; (80054e0 <HAL_RCC_ClockConfig+0x1c0>)
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	4313      	orrs	r3, r2
 8005350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005352:	4b63      	ldr	r3, [pc, #396]	; (80054e0 <HAL_RCC_ClockConfig+0x1c0>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0307 	and.w	r3, r3, #7
 800535a:	683a      	ldr	r2, [r7, #0]
 800535c:	429a      	cmp	r2, r3
 800535e:	d001      	beq.n	8005364 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e0b8      	b.n	80054d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0302 	and.w	r3, r3, #2
 800536c:	2b00      	cmp	r3, #0
 800536e:	d020      	beq.n	80053b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0304 	and.w	r3, r3, #4
 8005378:	2b00      	cmp	r3, #0
 800537a:	d005      	beq.n	8005388 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800537c:	4b59      	ldr	r3, [pc, #356]	; (80054e4 <HAL_RCC_ClockConfig+0x1c4>)
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	4a58      	ldr	r2, [pc, #352]	; (80054e4 <HAL_RCC_ClockConfig+0x1c4>)
 8005382:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005386:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0308 	and.w	r3, r3, #8
 8005390:	2b00      	cmp	r3, #0
 8005392:	d005      	beq.n	80053a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005394:	4b53      	ldr	r3, [pc, #332]	; (80054e4 <HAL_RCC_ClockConfig+0x1c4>)
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	4a52      	ldr	r2, [pc, #328]	; (80054e4 <HAL_RCC_ClockConfig+0x1c4>)
 800539a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800539e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053a0:	4b50      	ldr	r3, [pc, #320]	; (80054e4 <HAL_RCC_ClockConfig+0x1c4>)
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	494d      	ldr	r1, [pc, #308]	; (80054e4 <HAL_RCC_ClockConfig+0x1c4>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d040      	beq.n	8005440 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d107      	bne.n	80053d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053c6:	4b47      	ldr	r3, [pc, #284]	; (80054e4 <HAL_RCC_ClockConfig+0x1c4>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d115      	bne.n	80053fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e07f      	b.n	80054d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d107      	bne.n	80053ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053de:	4b41      	ldr	r3, [pc, #260]	; (80054e4 <HAL_RCC_ClockConfig+0x1c4>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d109      	bne.n	80053fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e073      	b.n	80054d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053ee:	4b3d      	ldr	r3, [pc, #244]	; (80054e4 <HAL_RCC_ClockConfig+0x1c4>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0302 	and.w	r3, r3, #2
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d101      	bne.n	80053fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e06b      	b.n	80054d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053fe:	4b39      	ldr	r3, [pc, #228]	; (80054e4 <HAL_RCC_ClockConfig+0x1c4>)
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f023 0203 	bic.w	r2, r3, #3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	4936      	ldr	r1, [pc, #216]	; (80054e4 <HAL_RCC_ClockConfig+0x1c4>)
 800540c:	4313      	orrs	r3, r2
 800540e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005410:	f7ff fa6e 	bl	80048f0 <HAL_GetTick>
 8005414:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005416:	e00a      	b.n	800542e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005418:	f7ff fa6a 	bl	80048f0 <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	f241 3288 	movw	r2, #5000	; 0x1388
 8005426:	4293      	cmp	r3, r2
 8005428:	d901      	bls.n	800542e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e053      	b.n	80054d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800542e:	4b2d      	ldr	r3, [pc, #180]	; (80054e4 <HAL_RCC_ClockConfig+0x1c4>)
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	f003 020c 	and.w	r2, r3, #12
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	429a      	cmp	r2, r3
 800543e:	d1eb      	bne.n	8005418 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005440:	4b27      	ldr	r3, [pc, #156]	; (80054e0 <HAL_RCC_ClockConfig+0x1c0>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0307 	and.w	r3, r3, #7
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	429a      	cmp	r2, r3
 800544c:	d210      	bcs.n	8005470 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800544e:	4b24      	ldr	r3, [pc, #144]	; (80054e0 <HAL_RCC_ClockConfig+0x1c0>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f023 0207 	bic.w	r2, r3, #7
 8005456:	4922      	ldr	r1, [pc, #136]	; (80054e0 <HAL_RCC_ClockConfig+0x1c0>)
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	4313      	orrs	r3, r2
 800545c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800545e:	4b20      	ldr	r3, [pc, #128]	; (80054e0 <HAL_RCC_ClockConfig+0x1c0>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0307 	and.w	r3, r3, #7
 8005466:	683a      	ldr	r2, [r7, #0]
 8005468:	429a      	cmp	r2, r3
 800546a:	d001      	beq.n	8005470 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e032      	b.n	80054d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0304 	and.w	r3, r3, #4
 8005478:	2b00      	cmp	r3, #0
 800547a:	d008      	beq.n	800548e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800547c:	4b19      	ldr	r3, [pc, #100]	; (80054e4 <HAL_RCC_ClockConfig+0x1c4>)
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	4916      	ldr	r1, [pc, #88]	; (80054e4 <HAL_RCC_ClockConfig+0x1c4>)
 800548a:	4313      	orrs	r3, r2
 800548c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0308 	and.w	r3, r3, #8
 8005496:	2b00      	cmp	r3, #0
 8005498:	d009      	beq.n	80054ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800549a:	4b12      	ldr	r3, [pc, #72]	; (80054e4 <HAL_RCC_ClockConfig+0x1c4>)
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	00db      	lsls	r3, r3, #3
 80054a8:	490e      	ldr	r1, [pc, #56]	; (80054e4 <HAL_RCC_ClockConfig+0x1c4>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80054ae:	f000 f821 	bl	80054f4 <HAL_RCC_GetSysClockFreq>
 80054b2:	4602      	mov	r2, r0
 80054b4:	4b0b      	ldr	r3, [pc, #44]	; (80054e4 <HAL_RCC_ClockConfig+0x1c4>)
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	091b      	lsrs	r3, r3, #4
 80054ba:	f003 030f 	and.w	r3, r3, #15
 80054be:	490a      	ldr	r1, [pc, #40]	; (80054e8 <HAL_RCC_ClockConfig+0x1c8>)
 80054c0:	5ccb      	ldrb	r3, [r1, r3]
 80054c2:	fa22 f303 	lsr.w	r3, r2, r3
 80054c6:	4a09      	ldr	r2, [pc, #36]	; (80054ec <HAL_RCC_ClockConfig+0x1cc>)
 80054c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80054ca:	4b09      	ldr	r3, [pc, #36]	; (80054f0 <HAL_RCC_ClockConfig+0x1d0>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7ff f9cc 	bl	800486c <HAL_InitTick>

  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	40022000 	.word	0x40022000
 80054e4:	40021000 	.word	0x40021000
 80054e8:	08005a4c 	.word	0x08005a4c
 80054ec:	2000001c 	.word	0x2000001c
 80054f0:	20000020 	.word	0x20000020

080054f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b087      	sub	sp, #28
 80054f8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80054fa:	2300      	movs	r3, #0
 80054fc:	60fb      	str	r3, [r7, #12]
 80054fe:	2300      	movs	r3, #0
 8005500:	60bb      	str	r3, [r7, #8]
 8005502:	2300      	movs	r3, #0
 8005504:	617b      	str	r3, [r7, #20]
 8005506:	2300      	movs	r3, #0
 8005508:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800550a:	2300      	movs	r3, #0
 800550c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800550e:	4b1e      	ldr	r3, [pc, #120]	; (8005588 <HAL_RCC_GetSysClockFreq+0x94>)
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f003 030c 	and.w	r3, r3, #12
 800551a:	2b04      	cmp	r3, #4
 800551c:	d002      	beq.n	8005524 <HAL_RCC_GetSysClockFreq+0x30>
 800551e:	2b08      	cmp	r3, #8
 8005520:	d003      	beq.n	800552a <HAL_RCC_GetSysClockFreq+0x36>
 8005522:	e027      	b.n	8005574 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005524:	4b19      	ldr	r3, [pc, #100]	; (800558c <HAL_RCC_GetSysClockFreq+0x98>)
 8005526:	613b      	str	r3, [r7, #16]
      break;
 8005528:	e027      	b.n	800557a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	0c9b      	lsrs	r3, r3, #18
 800552e:	f003 030f 	and.w	r3, r3, #15
 8005532:	4a17      	ldr	r2, [pc, #92]	; (8005590 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005534:	5cd3      	ldrb	r3, [r2, r3]
 8005536:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d010      	beq.n	8005564 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005542:	4b11      	ldr	r3, [pc, #68]	; (8005588 <HAL_RCC_GetSysClockFreq+0x94>)
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	0c5b      	lsrs	r3, r3, #17
 8005548:	f003 0301 	and.w	r3, r3, #1
 800554c:	4a11      	ldr	r2, [pc, #68]	; (8005594 <HAL_RCC_GetSysClockFreq+0xa0>)
 800554e:	5cd3      	ldrb	r3, [r2, r3]
 8005550:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a0d      	ldr	r2, [pc, #52]	; (800558c <HAL_RCC_GetSysClockFreq+0x98>)
 8005556:	fb03 f202 	mul.w	r2, r3, r2
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005560:	617b      	str	r3, [r7, #20]
 8005562:	e004      	b.n	800556e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a0c      	ldr	r2, [pc, #48]	; (8005598 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005568:	fb02 f303 	mul.w	r3, r2, r3
 800556c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	613b      	str	r3, [r7, #16]
      break;
 8005572:	e002      	b.n	800557a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005574:	4b05      	ldr	r3, [pc, #20]	; (800558c <HAL_RCC_GetSysClockFreq+0x98>)
 8005576:	613b      	str	r3, [r7, #16]
      break;
 8005578:	bf00      	nop
    }
  }
  return sysclockfreq;
 800557a:	693b      	ldr	r3, [r7, #16]
}
 800557c:	4618      	mov	r0, r3
 800557e:	371c      	adds	r7, #28
 8005580:	46bd      	mov	sp, r7
 8005582:	bc80      	pop	{r7}
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	40021000 	.word	0x40021000
 800558c:	007a1200 	.word	0x007a1200
 8005590:	08005a64 	.word	0x08005a64
 8005594:	08005a74 	.word	0x08005a74
 8005598:	003d0900 	.word	0x003d0900

0800559c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800559c:	b480      	push	{r7}
 800559e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055a0:	4b02      	ldr	r3, [pc, #8]	; (80055ac <HAL_RCC_GetHCLKFreq+0x10>)
 80055a2:	681b      	ldr	r3, [r3, #0]
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bc80      	pop	{r7}
 80055aa:	4770      	bx	lr
 80055ac:	2000001c 	.word	0x2000001c

080055b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80055b4:	f7ff fff2 	bl	800559c <HAL_RCC_GetHCLKFreq>
 80055b8:	4602      	mov	r2, r0
 80055ba:	4b05      	ldr	r3, [pc, #20]	; (80055d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	0a1b      	lsrs	r3, r3, #8
 80055c0:	f003 0307 	and.w	r3, r3, #7
 80055c4:	4903      	ldr	r1, [pc, #12]	; (80055d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055c6:	5ccb      	ldrb	r3, [r1, r3]
 80055c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	40021000 	.word	0x40021000
 80055d4:	08005a5c 	.word	0x08005a5c

080055d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80055dc:	f7ff ffde 	bl	800559c <HAL_RCC_GetHCLKFreq>
 80055e0:	4602      	mov	r2, r0
 80055e2:	4b05      	ldr	r3, [pc, #20]	; (80055f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	0adb      	lsrs	r3, r3, #11
 80055e8:	f003 0307 	and.w	r3, r3, #7
 80055ec:	4903      	ldr	r1, [pc, #12]	; (80055fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80055ee:	5ccb      	ldrb	r3, [r1, r3]
 80055f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	40021000 	.word	0x40021000
 80055fc:	08005a5c 	.word	0x08005a5c

08005600 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005608:	4b0a      	ldr	r3, [pc, #40]	; (8005634 <RCC_Delay+0x34>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a0a      	ldr	r2, [pc, #40]	; (8005638 <RCC_Delay+0x38>)
 800560e:	fba2 2303 	umull	r2, r3, r2, r3
 8005612:	0a5b      	lsrs	r3, r3, #9
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	fb02 f303 	mul.w	r3, r2, r3
 800561a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800561c:	bf00      	nop
  }
  while (Delay --);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	1e5a      	subs	r2, r3, #1
 8005622:	60fa      	str	r2, [r7, #12]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d1f9      	bne.n	800561c <RCC_Delay+0x1c>
}
 8005628:	bf00      	nop
 800562a:	bf00      	nop
 800562c:	3714      	adds	r7, #20
 800562e:	46bd      	mov	sp, r7
 8005630:	bc80      	pop	{r7}
 8005632:	4770      	bx	lr
 8005634:	2000001c 	.word	0x2000001c
 8005638:	10624dd3 	.word	0x10624dd3

0800563c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e042      	b.n	80056d4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d106      	bne.n	8005668 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f7ff f846 	bl	80046f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2224      	movs	r2, #36	; 0x24
 800566c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68da      	ldr	r2, [r3, #12]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800567e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 f91d 	bl	80058c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	691a      	ldr	r2, [r3, #16]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005694:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	695a      	ldr	r2, [r3, #20]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68da      	ldr	r2, [r3, #12]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2220      	movs	r2, #32
 80056c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2220      	movs	r2, #32
 80056c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3708      	adds	r7, #8
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b08a      	sub	sp, #40	; 0x28
 80056e0:	af02      	add	r7, sp, #8
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	603b      	str	r3, [r7, #0]
 80056e8:	4613      	mov	r3, r2
 80056ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80056ec:	2300      	movs	r3, #0
 80056ee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	2b20      	cmp	r3, #32
 80056fa:	d16d      	bne.n	80057d8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d002      	beq.n	8005708 <HAL_UART_Transmit+0x2c>
 8005702:	88fb      	ldrh	r3, [r7, #6]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d101      	bne.n	800570c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e066      	b.n	80057da <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2221      	movs	r2, #33	; 0x21
 8005716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800571a:	f7ff f8e9 	bl	80048f0 <HAL_GetTick>
 800571e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	88fa      	ldrh	r2, [r7, #6]
 8005724:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	88fa      	ldrh	r2, [r7, #6]
 800572a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005734:	d108      	bne.n	8005748 <HAL_UART_Transmit+0x6c>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d104      	bne.n	8005748 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800573e:	2300      	movs	r3, #0
 8005740:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	61bb      	str	r3, [r7, #24]
 8005746:	e003      	b.n	8005750 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800574c:	2300      	movs	r3, #0
 800574e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005750:	e02a      	b.n	80057a8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	9300      	str	r3, [sp, #0]
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	2200      	movs	r2, #0
 800575a:	2180      	movs	r1, #128	; 0x80
 800575c:	68f8      	ldr	r0, [r7, #12]
 800575e:	f000 f840 	bl	80057e2 <UART_WaitOnFlagUntilTimeout>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d001      	beq.n	800576c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e036      	b.n	80057da <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10b      	bne.n	800578a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	881b      	ldrh	r3, [r3, #0]
 8005776:	461a      	mov	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005780:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	3302      	adds	r3, #2
 8005786:	61bb      	str	r3, [r7, #24]
 8005788:	e007      	b.n	800579a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	781a      	ldrb	r2, [r3, #0]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	3301      	adds	r3, #1
 8005798:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800579e:	b29b      	uxth	r3, r3
 80057a0:	3b01      	subs	r3, #1
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d1cf      	bne.n	8005752 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	9300      	str	r3, [sp, #0]
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	2200      	movs	r2, #0
 80057ba:	2140      	movs	r1, #64	; 0x40
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f000 f810 	bl	80057e2 <UART_WaitOnFlagUntilTimeout>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d001      	beq.n	80057cc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e006      	b.n	80057da <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2220      	movs	r2, #32
 80057d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80057d4:	2300      	movs	r3, #0
 80057d6:	e000      	b.n	80057da <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80057d8:	2302      	movs	r3, #2
  }
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3720      	adds	r7, #32
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b090      	sub	sp, #64	; 0x40
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	60f8      	str	r0, [r7, #12]
 80057ea:	60b9      	str	r1, [r7, #8]
 80057ec:	603b      	str	r3, [r7, #0]
 80057ee:	4613      	mov	r3, r2
 80057f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057f2:	e050      	b.n	8005896 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057fa:	d04c      	beq.n	8005896 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80057fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d007      	beq.n	8005812 <UART_WaitOnFlagUntilTimeout+0x30>
 8005802:	f7ff f875 	bl	80048f0 <HAL_GetTick>
 8005806:	4602      	mov	r2, r0
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800580e:	429a      	cmp	r2, r3
 8005810:	d241      	bcs.n	8005896 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	330c      	adds	r3, #12
 8005818:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581c:	e853 3f00 	ldrex	r3, [r3]
 8005820:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005824:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005828:	63fb      	str	r3, [r7, #60]	; 0x3c
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	330c      	adds	r3, #12
 8005830:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005832:	637a      	str	r2, [r7, #52]	; 0x34
 8005834:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005836:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005838:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800583a:	e841 2300 	strex	r3, r2, [r1]
 800583e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1e5      	bne.n	8005812 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	3314      	adds	r3, #20
 800584c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	e853 3f00 	ldrex	r3, [r3]
 8005854:	613b      	str	r3, [r7, #16]
   return(result);
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	f023 0301 	bic.w	r3, r3, #1
 800585c:	63bb      	str	r3, [r7, #56]	; 0x38
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	3314      	adds	r3, #20
 8005864:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005866:	623a      	str	r2, [r7, #32]
 8005868:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586a:	69f9      	ldr	r1, [r7, #28]
 800586c:	6a3a      	ldr	r2, [r7, #32]
 800586e:	e841 2300 	strex	r3, r2, [r1]
 8005872:	61bb      	str	r3, [r7, #24]
   return(result);
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1e5      	bne.n	8005846 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2220      	movs	r2, #32
 800587e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2220      	movs	r2, #32
 8005886:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e00f      	b.n	80058b6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	4013      	ands	r3, r2
 80058a0:	68ba      	ldr	r2, [r7, #8]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	bf0c      	ite	eq
 80058a6:	2301      	moveq	r3, #1
 80058a8:	2300      	movne	r3, #0
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	461a      	mov	r2, r3
 80058ae:	79fb      	ldrb	r3, [r7, #7]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d09f      	beq.n	80057f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3740      	adds	r7, #64	; 0x40
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
	...

080058c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	68da      	ldr	r2, [r3, #12]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	430a      	orrs	r2, r1
 80058dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	689a      	ldr	r2, [r3, #8]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	431a      	orrs	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80058fa:	f023 030c 	bic.w	r3, r3, #12
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	6812      	ldr	r2, [r2, #0]
 8005902:	68b9      	ldr	r1, [r7, #8]
 8005904:	430b      	orrs	r3, r1
 8005906:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	699a      	ldr	r2, [r3, #24]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	430a      	orrs	r2, r1
 800591c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a2c      	ldr	r2, [pc, #176]	; (80059d4 <UART_SetConfig+0x114>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d103      	bne.n	8005930 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005928:	f7ff fe56 	bl	80055d8 <HAL_RCC_GetPCLK2Freq>
 800592c:	60f8      	str	r0, [r7, #12]
 800592e:	e002      	b.n	8005936 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005930:	f7ff fe3e 	bl	80055b0 <HAL_RCC_GetPCLK1Freq>
 8005934:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	4613      	mov	r3, r2
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	4413      	add	r3, r2
 800593e:	009a      	lsls	r2, r3, #2
 8005940:	441a      	add	r2, r3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	fbb2 f3f3 	udiv	r3, r2, r3
 800594c:	4a22      	ldr	r2, [pc, #136]	; (80059d8 <UART_SetConfig+0x118>)
 800594e:	fba2 2303 	umull	r2, r3, r2, r3
 8005952:	095b      	lsrs	r3, r3, #5
 8005954:	0119      	lsls	r1, r3, #4
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	4613      	mov	r3, r2
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4413      	add	r3, r2
 800595e:	009a      	lsls	r2, r3, #2
 8005960:	441a      	add	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	fbb2 f2f3 	udiv	r2, r2, r3
 800596c:	4b1a      	ldr	r3, [pc, #104]	; (80059d8 <UART_SetConfig+0x118>)
 800596e:	fba3 0302 	umull	r0, r3, r3, r2
 8005972:	095b      	lsrs	r3, r3, #5
 8005974:	2064      	movs	r0, #100	; 0x64
 8005976:	fb00 f303 	mul.w	r3, r0, r3
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	011b      	lsls	r3, r3, #4
 800597e:	3332      	adds	r3, #50	; 0x32
 8005980:	4a15      	ldr	r2, [pc, #84]	; (80059d8 <UART_SetConfig+0x118>)
 8005982:	fba2 2303 	umull	r2, r3, r2, r3
 8005986:	095b      	lsrs	r3, r3, #5
 8005988:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800598c:	4419      	add	r1, r3
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	4613      	mov	r3, r2
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	4413      	add	r3, r2
 8005996:	009a      	lsls	r2, r3, #2
 8005998:	441a      	add	r2, r3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80059a4:	4b0c      	ldr	r3, [pc, #48]	; (80059d8 <UART_SetConfig+0x118>)
 80059a6:	fba3 0302 	umull	r0, r3, r3, r2
 80059aa:	095b      	lsrs	r3, r3, #5
 80059ac:	2064      	movs	r0, #100	; 0x64
 80059ae:	fb00 f303 	mul.w	r3, r0, r3
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	011b      	lsls	r3, r3, #4
 80059b6:	3332      	adds	r3, #50	; 0x32
 80059b8:	4a07      	ldr	r2, [pc, #28]	; (80059d8 <UART_SetConfig+0x118>)
 80059ba:	fba2 2303 	umull	r2, r3, r2, r3
 80059be:	095b      	lsrs	r3, r3, #5
 80059c0:	f003 020f 	and.w	r2, r3, #15
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	440a      	add	r2, r1
 80059ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80059cc:	bf00      	nop
 80059ce:	3710      	adds	r7, #16
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	40013800 	.word	0x40013800
 80059d8:	51eb851f 	.word	0x51eb851f

080059dc <memset>:
 80059dc:	4603      	mov	r3, r0
 80059de:	4402      	add	r2, r0
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d100      	bne.n	80059e6 <memset+0xa>
 80059e4:	4770      	bx	lr
 80059e6:	f803 1b01 	strb.w	r1, [r3], #1
 80059ea:	e7f9      	b.n	80059e0 <memset+0x4>

080059ec <__libc_init_array>:
 80059ec:	b570      	push	{r4, r5, r6, lr}
 80059ee:	2600      	movs	r6, #0
 80059f0:	4d0c      	ldr	r5, [pc, #48]	; (8005a24 <__libc_init_array+0x38>)
 80059f2:	4c0d      	ldr	r4, [pc, #52]	; (8005a28 <__libc_init_array+0x3c>)
 80059f4:	1b64      	subs	r4, r4, r5
 80059f6:	10a4      	asrs	r4, r4, #2
 80059f8:	42a6      	cmp	r6, r4
 80059fa:	d109      	bne.n	8005a10 <__libc_init_array+0x24>
 80059fc:	f000 f81a 	bl	8005a34 <_init>
 8005a00:	2600      	movs	r6, #0
 8005a02:	4d0a      	ldr	r5, [pc, #40]	; (8005a2c <__libc_init_array+0x40>)
 8005a04:	4c0a      	ldr	r4, [pc, #40]	; (8005a30 <__libc_init_array+0x44>)
 8005a06:	1b64      	subs	r4, r4, r5
 8005a08:	10a4      	asrs	r4, r4, #2
 8005a0a:	42a6      	cmp	r6, r4
 8005a0c:	d105      	bne.n	8005a1a <__libc_init_array+0x2e>
 8005a0e:	bd70      	pop	{r4, r5, r6, pc}
 8005a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a14:	4798      	blx	r3
 8005a16:	3601      	adds	r6, #1
 8005a18:	e7ee      	b.n	80059f8 <__libc_init_array+0xc>
 8005a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a1e:	4798      	blx	r3
 8005a20:	3601      	adds	r6, #1
 8005a22:	e7f2      	b.n	8005a0a <__libc_init_array+0x1e>
 8005a24:	08005a78 	.word	0x08005a78
 8005a28:	08005a78 	.word	0x08005a78
 8005a2c:	08005a78 	.word	0x08005a78
 8005a30:	08005a7c 	.word	0x08005a7c

08005a34 <_init>:
 8005a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a36:	bf00      	nop
 8005a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a3a:	bc08      	pop	{r3}
 8005a3c:	469e      	mov	lr, r3
 8005a3e:	4770      	bx	lr

08005a40 <_fini>:
 8005a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a42:	bf00      	nop
 8005a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a46:	bc08      	pop	{r3}
 8005a48:	469e      	mov	lr, r3
 8005a4a:	4770      	bx	lr
