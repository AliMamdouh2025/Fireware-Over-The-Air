
BootloaderApplication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08003c00  08003c00  00003c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001654  08003d0c  08003d0c  00003d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005360  08005360  00005360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053a0  080053a0  00010028  2**0
                  CONTENTS
  4 .ARM          00000000  080053a0  080053a0  00010028  2**0
                  CONTENTS
  5 .preinit_array 00000000  080053a0  080053a0  00010028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053a0  080053a0  000053a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053a4  080053a4  000053a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  080053a8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000028  080053d0  00010028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  080053d0  00010090  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010028  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010051  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006b84  00000000  00000000  00010094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001383  00000000  00000000  00016c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005f8  00000000  00000000  00017fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000048e  00000000  00000000  00018598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015d6a  00000000  00000000  00018a26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007347  00000000  00000000  0002e790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007e1c7  00000000  00000000  00035ad7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000016fc  00000000  00000000  000b3ca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000b539c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08003d0c <__do_global_dtors_aux>:
 8003d0c:	b510      	push	{r4, lr}
 8003d0e:	4c05      	ldr	r4, [pc, #20]	; (8003d24 <__do_global_dtors_aux+0x18>)
 8003d10:	7823      	ldrb	r3, [r4, #0]
 8003d12:	b933      	cbnz	r3, 8003d22 <__do_global_dtors_aux+0x16>
 8003d14:	4b04      	ldr	r3, [pc, #16]	; (8003d28 <__do_global_dtors_aux+0x1c>)
 8003d16:	b113      	cbz	r3, 8003d1e <__do_global_dtors_aux+0x12>
 8003d18:	4804      	ldr	r0, [pc, #16]	; (8003d2c <__do_global_dtors_aux+0x20>)
 8003d1a:	f3af 8000 	nop.w
 8003d1e:	2301      	movs	r3, #1
 8003d20:	7023      	strb	r3, [r4, #0]
 8003d22:	bd10      	pop	{r4, pc}
 8003d24:	20000028 	.word	0x20000028
 8003d28:	00000000 	.word	0x00000000
 8003d2c:	08005348 	.word	0x08005348

08003d30 <frame_dummy>:
 8003d30:	b508      	push	{r3, lr}
 8003d32:	4b03      	ldr	r3, [pc, #12]	; (8003d40 <frame_dummy+0x10>)
 8003d34:	b11b      	cbz	r3, 8003d3e <frame_dummy+0xe>
 8003d36:	4903      	ldr	r1, [pc, #12]	; (8003d44 <frame_dummy+0x14>)
 8003d38:	4803      	ldr	r0, [pc, #12]	; (8003d48 <frame_dummy+0x18>)
 8003d3a:	f3af 8000 	nop.w
 8003d3e:	bd08      	pop	{r3, pc}
 8003d40:	00000000 	.word	0x00000000
 8003d44:	2000002c 	.word	0x2000002c
 8003d48:	08005348 	.word	0x08005348

08003d4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d50:	f000 f9b4 	bl	80040bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d54:	f000 f814 	bl	8003d80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003d58:	f000 f882 	bl	8003e60 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003d5c:	f000 f856 	bl	8003e0c <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Transmit(&huart2, Message, sizeof(Message),HAL_MAX_DELAY);
 8003d60:	f04f 33ff 	mov.w	r3, #4294967295
 8003d64:	2219      	movs	r2, #25
 8003d66:	4904      	ldr	r1, [pc, #16]	; (8003d78 <main+0x2c>)
 8003d68:	4804      	ldr	r0, [pc, #16]	; (8003d7c <main+0x30>)
 8003d6a:	f001 f941 	bl	8004ff0 <HAL_UART_Transmit>
	  HAL_Delay(500);
 8003d6e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003d72:	f000 fa05 	bl	8004180 <HAL_Delay>
	  HAL_UART_Transmit(&huart2, Message, sizeof(Message),HAL_MAX_DELAY);
 8003d76:	e7f3      	b.n	8003d60 <main+0x14>
 8003d78:	20000000 	.word	0x20000000
 8003d7c:	20000044 	.word	0x20000044

08003d80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b090      	sub	sp, #64	; 0x40
 8003d84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d86:	f107 0318 	add.w	r3, r7, #24
 8003d8a:	2228      	movs	r2, #40	; 0x28
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f001 faae 	bl	80052f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d94:	1d3b      	adds	r3, r7, #4
 8003d96:	2200      	movs	r2, #0
 8003d98:	601a      	str	r2, [r3, #0]
 8003d9a:	605a      	str	r2, [r3, #4]
 8003d9c:	609a      	str	r2, [r3, #8]
 8003d9e:	60da      	str	r2, [r3, #12]
 8003da0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003da2:	2301      	movs	r3, #1
 8003da4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003da6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003daa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003dac:	2300      	movs	r3, #0
 8003dae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003db0:	2301      	movs	r3, #1
 8003db2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003db4:	2302      	movs	r3, #2
 8003db6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003db8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003dbc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003dbe:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003dc4:	f107 0318 	add.w	r3, r7, #24
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 fcb1 	bl	8004730 <HAL_RCC_OscConfig>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8003dd4:	f000 f884 	bl	8003ee0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003dd8:	230f      	movs	r3, #15
 8003dda:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ddc:	2302      	movs	r3, #2
 8003dde:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003de0:	2300      	movs	r3, #0
 8003de2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003de4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003de8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003dea:	2300      	movs	r3, #0
 8003dec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003dee:	1d3b      	adds	r3, r7, #4
 8003df0:	2102      	movs	r1, #2
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 ff1e 	bl	8004c34 <HAL_RCC_ClockConfig>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8003dfe:	f000 f86f 	bl	8003ee0 <Error_Handler>
  }
}
 8003e02:	bf00      	nop
 8003e04:	3740      	adds	r7, #64	; 0x40
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
	...

08003e0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003e10:	4b11      	ldr	r3, [pc, #68]	; (8003e58 <MX_USART2_UART_Init+0x4c>)
 8003e12:	4a12      	ldr	r2, [pc, #72]	; (8003e5c <MX_USART2_UART_Init+0x50>)
 8003e14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003e16:	4b10      	ldr	r3, [pc, #64]	; (8003e58 <MX_USART2_UART_Init+0x4c>)
 8003e18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003e1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003e1e:	4b0e      	ldr	r3, [pc, #56]	; (8003e58 <MX_USART2_UART_Init+0x4c>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003e24:	4b0c      	ldr	r3, [pc, #48]	; (8003e58 <MX_USART2_UART_Init+0x4c>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003e2a:	4b0b      	ldr	r3, [pc, #44]	; (8003e58 <MX_USART2_UART_Init+0x4c>)
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003e30:	4b09      	ldr	r3, [pc, #36]	; (8003e58 <MX_USART2_UART_Init+0x4c>)
 8003e32:	220c      	movs	r2, #12
 8003e34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e36:	4b08      	ldr	r3, [pc, #32]	; (8003e58 <MX_USART2_UART_Init+0x4c>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e3c:	4b06      	ldr	r3, [pc, #24]	; (8003e58 <MX_USART2_UART_Init+0x4c>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003e42:	4805      	ldr	r0, [pc, #20]	; (8003e58 <MX_USART2_UART_Init+0x4c>)
 8003e44:	f001 f884 	bl	8004f50 <HAL_UART_Init>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003e4e:	f000 f847 	bl	8003ee0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003e52:	bf00      	nop
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	20000044 	.word	0x20000044
 8003e5c:	40004400 	.word	0x40004400

08003e60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e66:	f107 0308 	add.w	r3, r7, #8
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	605a      	str	r2, [r3, #4]
 8003e70:	609a      	str	r2, [r3, #8]
 8003e72:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e74:	4b17      	ldr	r3, [pc, #92]	; (8003ed4 <MX_GPIO_Init+0x74>)
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	4a16      	ldr	r2, [pc, #88]	; (8003ed4 <MX_GPIO_Init+0x74>)
 8003e7a:	f043 0320 	orr.w	r3, r3, #32
 8003e7e:	6193      	str	r3, [r2, #24]
 8003e80:	4b14      	ldr	r3, [pc, #80]	; (8003ed4 <MX_GPIO_Init+0x74>)
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	f003 0320 	and.w	r3, r3, #32
 8003e88:	607b      	str	r3, [r7, #4]
 8003e8a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e8c:	4b11      	ldr	r3, [pc, #68]	; (8003ed4 <MX_GPIO_Init+0x74>)
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	4a10      	ldr	r2, [pc, #64]	; (8003ed4 <MX_GPIO_Init+0x74>)
 8003e92:	f043 0304 	orr.w	r3, r3, #4
 8003e96:	6193      	str	r3, [r2, #24]
 8003e98:	4b0e      	ldr	r3, [pc, #56]	; (8003ed4 <MX_GPIO_Init+0x74>)
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	f003 0304 	and.w	r3, r3, #4
 8003ea0:	603b      	str	r3, [r7, #0]
 8003ea2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003ea8:	4b0b      	ldr	r3, [pc, #44]	; (8003ed8 <MX_GPIO_Init+0x78>)
 8003eaa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eac:	2300      	movs	r3, #0
 8003eae:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eb0:	f107 0308 	add.w	r3, r7, #8
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	4809      	ldr	r0, [pc, #36]	; (8003edc <MX_GPIO_Init+0x7c>)
 8003eb8:	f000 fa94 	bl	80043e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	2006      	movs	r0, #6
 8003ec2:	f000 fa58 	bl	8004376 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003ec6:	2006      	movs	r0, #6
 8003ec8:	f000 fa71 	bl	80043ae <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003ecc:	bf00      	nop
 8003ece:	3718      	adds	r7, #24
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	40021000 	.word	0x40021000
 8003ed8:	10110000 	.word	0x10110000
 8003edc:	40010800 	.word	0x40010800

08003ee0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ee4:	b672      	cpsid	i
}
 8003ee6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ee8:	e7fe      	b.n	8003ee8 <Error_Handler+0x8>
	...

08003eec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003ef2:	4b0e      	ldr	r3, [pc, #56]	; (8003f2c <HAL_MspInit+0x40>)
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	4a0d      	ldr	r2, [pc, #52]	; (8003f2c <HAL_MspInit+0x40>)
 8003ef8:	f043 0301 	orr.w	r3, r3, #1
 8003efc:	6193      	str	r3, [r2, #24]
 8003efe:	4b0b      	ldr	r3, [pc, #44]	; (8003f2c <HAL_MspInit+0x40>)
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	607b      	str	r3, [r7, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f0a:	4b08      	ldr	r3, [pc, #32]	; (8003f2c <HAL_MspInit+0x40>)
 8003f0c:	69db      	ldr	r3, [r3, #28]
 8003f0e:	4a07      	ldr	r2, [pc, #28]	; (8003f2c <HAL_MspInit+0x40>)
 8003f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f14:	61d3      	str	r3, [r2, #28]
 8003f16:	4b05      	ldr	r3, [pc, #20]	; (8003f2c <HAL_MspInit+0x40>)
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1e:	603b      	str	r3, [r7, #0]
 8003f20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f22:	bf00      	nop
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bc80      	pop	{r7}
 8003f2a:	4770      	bx	lr
 8003f2c:	40021000 	.word	0x40021000

08003f30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b088      	sub	sp, #32
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f38:	f107 0310 	add.w	r3, r7, #16
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	605a      	str	r2, [r3, #4]
 8003f42:	609a      	str	r2, [r3, #8]
 8003f44:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a1b      	ldr	r2, [pc, #108]	; (8003fb8 <HAL_UART_MspInit+0x88>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d12f      	bne.n	8003fb0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003f50:	4b1a      	ldr	r3, [pc, #104]	; (8003fbc <HAL_UART_MspInit+0x8c>)
 8003f52:	69db      	ldr	r3, [r3, #28]
 8003f54:	4a19      	ldr	r2, [pc, #100]	; (8003fbc <HAL_UART_MspInit+0x8c>)
 8003f56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f5a:	61d3      	str	r3, [r2, #28]
 8003f5c:	4b17      	ldr	r3, [pc, #92]	; (8003fbc <HAL_UART_MspInit+0x8c>)
 8003f5e:	69db      	ldr	r3, [r3, #28]
 8003f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f64:	60fb      	str	r3, [r7, #12]
 8003f66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f68:	4b14      	ldr	r3, [pc, #80]	; (8003fbc <HAL_UART_MspInit+0x8c>)
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	4a13      	ldr	r2, [pc, #76]	; (8003fbc <HAL_UART_MspInit+0x8c>)
 8003f6e:	f043 0304 	orr.w	r3, r3, #4
 8003f72:	6193      	str	r3, [r2, #24]
 8003f74:	4b11      	ldr	r3, [pc, #68]	; (8003fbc <HAL_UART_MspInit+0x8c>)
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	f003 0304 	and.w	r3, r3, #4
 8003f7c:	60bb      	str	r3, [r7, #8]
 8003f7e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003f80:	2304      	movs	r3, #4
 8003f82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f84:	2302      	movs	r3, #2
 8003f86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f8c:	f107 0310 	add.w	r3, r7, #16
 8003f90:	4619      	mov	r1, r3
 8003f92:	480b      	ldr	r0, [pc, #44]	; (8003fc0 <HAL_UART_MspInit+0x90>)
 8003f94:	f000 fa26 	bl	80043e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003f98:	2308      	movs	r3, #8
 8003f9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fa4:	f107 0310 	add.w	r3, r7, #16
 8003fa8:	4619      	mov	r1, r3
 8003faa:	4805      	ldr	r0, [pc, #20]	; (8003fc0 <HAL_UART_MspInit+0x90>)
 8003fac:	f000 fa1a 	bl	80043e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003fb0:	bf00      	nop
 8003fb2:	3720      	adds	r7, #32
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	40004400 	.word	0x40004400
 8003fbc:	40021000 	.word	0x40021000
 8003fc0:	40010800 	.word	0x40010800

08003fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003fc8:	e7fe      	b.n	8003fc8 <NMI_Handler+0x4>

08003fca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003fce:	e7fe      	b.n	8003fce <HardFault_Handler+0x4>

08003fd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003fd4:	e7fe      	b.n	8003fd4 <MemManage_Handler+0x4>

08003fd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003fda:	e7fe      	b.n	8003fda <BusFault_Handler+0x4>

08003fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003fe0:	e7fe      	b.n	8003fe0 <UsageFault_Handler+0x4>

08003fe2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003fe6:	bf00      	nop
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bc80      	pop	{r7}
 8003fec:	4770      	bx	lr

08003fee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003fee:	b480      	push	{r7}
 8003ff0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ff2:	bf00      	nop
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bc80      	pop	{r7}
 8003ff8:	4770      	bx	lr

08003ffa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ffe:	bf00      	nop
 8004000:	46bd      	mov	sp, r7
 8004002:	bc80      	pop	{r7}
 8004004:	4770      	bx	lr

08004006 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004006:	b580      	push	{r7, lr}
 8004008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800400a:	f000 f89d 	bl	8004148 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800400e:	bf00      	nop
 8004010:	bd80      	pop	{r7, pc}
	...

08004014 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004014:	b5b0      	push	{r4, r5, r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	uint8_t Message_EXTI0[] = "EXTI0 is running\r\n";
 800401a:	4b0c      	ldr	r3, [pc, #48]	; (800404c <EXTI0_IRQHandler+0x38>)
 800401c:	1d3c      	adds	r4, r7, #4
 800401e:	461d      	mov	r5, r3
 8004020:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004022:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004024:	682b      	ldr	r3, [r5, #0]
 8004026:	461a      	mov	r2, r3
 8004028:	8022      	strh	r2, [r4, #0]
 800402a:	3402      	adds	r4, #2
 800402c:	0c1b      	lsrs	r3, r3, #16
 800402e:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)Message_EXTI0, sizeof(Message_EXTI0),HAL_MAX_DELAY);
 8004030:	1d39      	adds	r1, r7, #4
 8004032:	f04f 33ff 	mov.w	r3, #4294967295
 8004036:	2213      	movs	r2, #19
 8004038:	4805      	ldr	r0, [pc, #20]	; (8004050 <EXTI0_IRQHandler+0x3c>)
 800403a:	f000 ffd9 	bl	8004ff0 <HAL_UART_Transmit>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800403e:	2001      	movs	r0, #1
 8004040:	f000 fb54 	bl	80046ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004044:	bf00      	nop
 8004046:	3718      	adds	r7, #24
 8004048:	46bd      	mov	sp, r7
 800404a:	bdb0      	pop	{r4, r5, r7, pc}
 800404c:	08005360 	.word	0x08005360
 8004050:	20000044 	.word	0x20000044

08004054 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | 0x8000; /* Vector Table Relocation in Internal FLASH. */
 8004058:	4b03      	ldr	r3, [pc, #12]	; (8004068 <SystemInit+0x14>)
 800405a:	4a04      	ldr	r2, [pc, #16]	; (800406c <SystemInit+0x18>)
 800405c:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 800405e:	bf00      	nop
 8004060:	46bd      	mov	sp, r7
 8004062:	bc80      	pop	{r7}
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	e000ed00 	.word	0xe000ed00
 800406c:	08008000 	.word	0x08008000

08004070 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004070:	f7ff fff0 	bl	8004054 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004074:	480b      	ldr	r0, [pc, #44]	; (80040a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004076:	490c      	ldr	r1, [pc, #48]	; (80040a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004078:	4a0c      	ldr	r2, [pc, #48]	; (80040ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800407a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800407c:	e002      	b.n	8004084 <LoopCopyDataInit>

0800407e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800407e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004080:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004082:	3304      	adds	r3, #4

08004084 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004084:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004086:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004088:	d3f9      	bcc.n	800407e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800408a:	4a09      	ldr	r2, [pc, #36]	; (80040b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800408c:	4c09      	ldr	r4, [pc, #36]	; (80040b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800408e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004090:	e001      	b.n	8004096 <LoopFillZerobss>

08004092 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004092:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004094:	3204      	adds	r2, #4

08004096 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004096:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004098:	d3fb      	bcc.n	8004092 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800409a:	f001 f931 	bl	8005300 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800409e:	f7ff fe55 	bl	8003d4c <main>
  bx lr
 80040a2:	4770      	bx	lr
  ldr r0, =_sdata
 80040a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040a8:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 80040ac:	080053a8 	.word	0x080053a8
  ldr r2, =_sbss
 80040b0:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 80040b4:	20000090 	.word	0x20000090

080040b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80040b8:	e7fe      	b.n	80040b8 <ADC1_2_IRQHandler>
	...

080040bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040c0:	4b08      	ldr	r3, [pc, #32]	; (80040e4 <HAL_Init+0x28>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a07      	ldr	r2, [pc, #28]	; (80040e4 <HAL_Init+0x28>)
 80040c6:	f043 0310 	orr.w	r3, r3, #16
 80040ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040cc:	2003      	movs	r0, #3
 80040ce:	f000 f947 	bl	8004360 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80040d2:	200f      	movs	r0, #15
 80040d4:	f000 f808 	bl	80040e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80040d8:	f7ff ff08 	bl	8003eec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	40022000 	.word	0x40022000

080040e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80040f0:	4b12      	ldr	r3, [pc, #72]	; (800413c <HAL_InitTick+0x54>)
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	4b12      	ldr	r3, [pc, #72]	; (8004140 <HAL_InitTick+0x58>)
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	4619      	mov	r1, r3
 80040fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8004102:	fbb2 f3f3 	udiv	r3, r2, r3
 8004106:	4618      	mov	r0, r3
 8004108:	f000 f95f 	bl	80043ca <HAL_SYSTICK_Config>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e00e      	b.n	8004134 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2b0f      	cmp	r3, #15
 800411a:	d80a      	bhi.n	8004132 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800411c:	2200      	movs	r2, #0
 800411e:	6879      	ldr	r1, [r7, #4]
 8004120:	f04f 30ff 	mov.w	r0, #4294967295
 8004124:	f000 f927 	bl	8004376 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004128:	4a06      	ldr	r2, [pc, #24]	; (8004144 <HAL_InitTick+0x5c>)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800412e:	2300      	movs	r3, #0
 8004130:	e000      	b.n	8004134 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
}
 8004134:	4618      	mov	r0, r3
 8004136:	3708      	adds	r7, #8
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	2000001c 	.word	0x2000001c
 8004140:	20000024 	.word	0x20000024
 8004144:	20000020 	.word	0x20000020

08004148 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800414c:	4b05      	ldr	r3, [pc, #20]	; (8004164 <HAL_IncTick+0x1c>)
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	461a      	mov	r2, r3
 8004152:	4b05      	ldr	r3, [pc, #20]	; (8004168 <HAL_IncTick+0x20>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4413      	add	r3, r2
 8004158:	4a03      	ldr	r2, [pc, #12]	; (8004168 <HAL_IncTick+0x20>)
 800415a:	6013      	str	r3, [r2, #0]
}
 800415c:	bf00      	nop
 800415e:	46bd      	mov	sp, r7
 8004160:	bc80      	pop	{r7}
 8004162:	4770      	bx	lr
 8004164:	20000024 	.word	0x20000024
 8004168:	2000008c 	.word	0x2000008c

0800416c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800416c:	b480      	push	{r7}
 800416e:	af00      	add	r7, sp, #0
  return uwTick;
 8004170:	4b02      	ldr	r3, [pc, #8]	; (800417c <HAL_GetTick+0x10>)
 8004172:	681b      	ldr	r3, [r3, #0]
}
 8004174:	4618      	mov	r0, r3
 8004176:	46bd      	mov	sp, r7
 8004178:	bc80      	pop	{r7}
 800417a:	4770      	bx	lr
 800417c:	2000008c 	.word	0x2000008c

08004180 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004188:	f7ff fff0 	bl	800416c <HAL_GetTick>
 800418c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004198:	d005      	beq.n	80041a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800419a:	4b0a      	ldr	r3, [pc, #40]	; (80041c4 <HAL_Delay+0x44>)
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	461a      	mov	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	4413      	add	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80041a6:	bf00      	nop
 80041a8:	f7ff ffe0 	bl	800416c <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d8f7      	bhi.n	80041a8 <HAL_Delay+0x28>
  {
  }
}
 80041b8:	bf00      	nop
 80041ba:	bf00      	nop
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	20000024 	.word	0x20000024

080041c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f003 0307 	and.w	r3, r3, #7
 80041d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041d8:	4b0c      	ldr	r3, [pc, #48]	; (800420c <__NVIC_SetPriorityGrouping+0x44>)
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041de:	68ba      	ldr	r2, [r7, #8]
 80041e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041e4:	4013      	ands	r3, r2
 80041e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80041f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041fa:	4a04      	ldr	r2, [pc, #16]	; (800420c <__NVIC_SetPriorityGrouping+0x44>)
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	60d3      	str	r3, [r2, #12]
}
 8004200:	bf00      	nop
 8004202:	3714      	adds	r7, #20
 8004204:	46bd      	mov	sp, r7
 8004206:	bc80      	pop	{r7}
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	e000ed00 	.word	0xe000ed00

08004210 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004210:	b480      	push	{r7}
 8004212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004214:	4b04      	ldr	r3, [pc, #16]	; (8004228 <__NVIC_GetPriorityGrouping+0x18>)
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	0a1b      	lsrs	r3, r3, #8
 800421a:	f003 0307 	and.w	r3, r3, #7
}
 800421e:	4618      	mov	r0, r3
 8004220:	46bd      	mov	sp, r7
 8004222:	bc80      	pop	{r7}
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	e000ed00 	.word	0xe000ed00

0800422c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	4603      	mov	r3, r0
 8004234:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800423a:	2b00      	cmp	r3, #0
 800423c:	db0b      	blt.n	8004256 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800423e:	79fb      	ldrb	r3, [r7, #7]
 8004240:	f003 021f 	and.w	r2, r3, #31
 8004244:	4906      	ldr	r1, [pc, #24]	; (8004260 <__NVIC_EnableIRQ+0x34>)
 8004246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800424a:	095b      	lsrs	r3, r3, #5
 800424c:	2001      	movs	r0, #1
 800424e:	fa00 f202 	lsl.w	r2, r0, r2
 8004252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004256:	bf00      	nop
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	bc80      	pop	{r7}
 800425e:	4770      	bx	lr
 8004260:	e000e100 	.word	0xe000e100

08004264 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	4603      	mov	r3, r0
 800426c:	6039      	str	r1, [r7, #0]
 800426e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004274:	2b00      	cmp	r3, #0
 8004276:	db0a      	blt.n	800428e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	b2da      	uxtb	r2, r3
 800427c:	490c      	ldr	r1, [pc, #48]	; (80042b0 <__NVIC_SetPriority+0x4c>)
 800427e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004282:	0112      	lsls	r2, r2, #4
 8004284:	b2d2      	uxtb	r2, r2
 8004286:	440b      	add	r3, r1
 8004288:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800428c:	e00a      	b.n	80042a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	b2da      	uxtb	r2, r3
 8004292:	4908      	ldr	r1, [pc, #32]	; (80042b4 <__NVIC_SetPriority+0x50>)
 8004294:	79fb      	ldrb	r3, [r7, #7]
 8004296:	f003 030f 	and.w	r3, r3, #15
 800429a:	3b04      	subs	r3, #4
 800429c:	0112      	lsls	r2, r2, #4
 800429e:	b2d2      	uxtb	r2, r2
 80042a0:	440b      	add	r3, r1
 80042a2:	761a      	strb	r2, [r3, #24]
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bc80      	pop	{r7}
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	e000e100 	.word	0xe000e100
 80042b4:	e000ed00 	.word	0xe000ed00

080042b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b089      	sub	sp, #36	; 0x24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f003 0307 	and.w	r3, r3, #7
 80042ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	f1c3 0307 	rsb	r3, r3, #7
 80042d2:	2b04      	cmp	r3, #4
 80042d4:	bf28      	it	cs
 80042d6:	2304      	movcs	r3, #4
 80042d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	3304      	adds	r3, #4
 80042de:	2b06      	cmp	r3, #6
 80042e0:	d902      	bls.n	80042e8 <NVIC_EncodePriority+0x30>
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	3b03      	subs	r3, #3
 80042e6:	e000      	b.n	80042ea <NVIC_EncodePriority+0x32>
 80042e8:	2300      	movs	r3, #0
 80042ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042ec:	f04f 32ff 	mov.w	r2, #4294967295
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	fa02 f303 	lsl.w	r3, r2, r3
 80042f6:	43da      	mvns	r2, r3
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	401a      	ands	r2, r3
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004300:	f04f 31ff 	mov.w	r1, #4294967295
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	fa01 f303 	lsl.w	r3, r1, r3
 800430a:	43d9      	mvns	r1, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004310:	4313      	orrs	r3, r2
         );
}
 8004312:	4618      	mov	r0, r3
 8004314:	3724      	adds	r7, #36	; 0x24
 8004316:	46bd      	mov	sp, r7
 8004318:	bc80      	pop	{r7}
 800431a:	4770      	bx	lr

0800431c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3b01      	subs	r3, #1
 8004328:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800432c:	d301      	bcc.n	8004332 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800432e:	2301      	movs	r3, #1
 8004330:	e00f      	b.n	8004352 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004332:	4a0a      	ldr	r2, [pc, #40]	; (800435c <SysTick_Config+0x40>)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	3b01      	subs	r3, #1
 8004338:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800433a:	210f      	movs	r1, #15
 800433c:	f04f 30ff 	mov.w	r0, #4294967295
 8004340:	f7ff ff90 	bl	8004264 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004344:	4b05      	ldr	r3, [pc, #20]	; (800435c <SysTick_Config+0x40>)
 8004346:	2200      	movs	r2, #0
 8004348:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800434a:	4b04      	ldr	r3, [pc, #16]	; (800435c <SysTick_Config+0x40>)
 800434c:	2207      	movs	r2, #7
 800434e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3708      	adds	r7, #8
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	e000e010 	.word	0xe000e010

08004360 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f7ff ff2d 	bl	80041c8 <__NVIC_SetPriorityGrouping>
}
 800436e:	bf00      	nop
 8004370:	3708      	adds	r7, #8
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004376:	b580      	push	{r7, lr}
 8004378:	b086      	sub	sp, #24
 800437a:	af00      	add	r7, sp, #0
 800437c:	4603      	mov	r3, r0
 800437e:	60b9      	str	r1, [r7, #8]
 8004380:	607a      	str	r2, [r7, #4]
 8004382:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004384:	2300      	movs	r3, #0
 8004386:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004388:	f7ff ff42 	bl	8004210 <__NVIC_GetPriorityGrouping>
 800438c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	68b9      	ldr	r1, [r7, #8]
 8004392:	6978      	ldr	r0, [r7, #20]
 8004394:	f7ff ff90 	bl	80042b8 <NVIC_EncodePriority>
 8004398:	4602      	mov	r2, r0
 800439a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800439e:	4611      	mov	r1, r2
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7ff ff5f 	bl	8004264 <__NVIC_SetPriority>
}
 80043a6:	bf00      	nop
 80043a8:	3718      	adds	r7, #24
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b082      	sub	sp, #8
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	4603      	mov	r3, r0
 80043b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043bc:	4618      	mov	r0, r3
 80043be:	f7ff ff35 	bl	800422c <__NVIC_EnableIRQ>
}
 80043c2:	bf00      	nop
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b082      	sub	sp, #8
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7ff ffa2 	bl	800431c <SysTick_Config>
 80043d8:	4603      	mov	r3, r0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
	...

080043e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b08b      	sub	sp, #44	; 0x2c
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043ee:	2300      	movs	r3, #0
 80043f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80043f2:	2300      	movs	r3, #0
 80043f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043f6:	e169      	b.n	80046cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80043f8:	2201      	movs	r2, #1
 80043fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004400:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	69fa      	ldr	r2, [r7, #28]
 8004408:	4013      	ands	r3, r2
 800440a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	429a      	cmp	r2, r3
 8004412:	f040 8158 	bne.w	80046c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	4a9a      	ldr	r2, [pc, #616]	; (8004684 <HAL_GPIO_Init+0x2a0>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d05e      	beq.n	80044de <HAL_GPIO_Init+0xfa>
 8004420:	4a98      	ldr	r2, [pc, #608]	; (8004684 <HAL_GPIO_Init+0x2a0>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d875      	bhi.n	8004512 <HAL_GPIO_Init+0x12e>
 8004426:	4a98      	ldr	r2, [pc, #608]	; (8004688 <HAL_GPIO_Init+0x2a4>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d058      	beq.n	80044de <HAL_GPIO_Init+0xfa>
 800442c:	4a96      	ldr	r2, [pc, #600]	; (8004688 <HAL_GPIO_Init+0x2a4>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d86f      	bhi.n	8004512 <HAL_GPIO_Init+0x12e>
 8004432:	4a96      	ldr	r2, [pc, #600]	; (800468c <HAL_GPIO_Init+0x2a8>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d052      	beq.n	80044de <HAL_GPIO_Init+0xfa>
 8004438:	4a94      	ldr	r2, [pc, #592]	; (800468c <HAL_GPIO_Init+0x2a8>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d869      	bhi.n	8004512 <HAL_GPIO_Init+0x12e>
 800443e:	4a94      	ldr	r2, [pc, #592]	; (8004690 <HAL_GPIO_Init+0x2ac>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d04c      	beq.n	80044de <HAL_GPIO_Init+0xfa>
 8004444:	4a92      	ldr	r2, [pc, #584]	; (8004690 <HAL_GPIO_Init+0x2ac>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d863      	bhi.n	8004512 <HAL_GPIO_Init+0x12e>
 800444a:	4a92      	ldr	r2, [pc, #584]	; (8004694 <HAL_GPIO_Init+0x2b0>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d046      	beq.n	80044de <HAL_GPIO_Init+0xfa>
 8004450:	4a90      	ldr	r2, [pc, #576]	; (8004694 <HAL_GPIO_Init+0x2b0>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d85d      	bhi.n	8004512 <HAL_GPIO_Init+0x12e>
 8004456:	2b12      	cmp	r3, #18
 8004458:	d82a      	bhi.n	80044b0 <HAL_GPIO_Init+0xcc>
 800445a:	2b12      	cmp	r3, #18
 800445c:	d859      	bhi.n	8004512 <HAL_GPIO_Init+0x12e>
 800445e:	a201      	add	r2, pc, #4	; (adr r2, 8004464 <HAL_GPIO_Init+0x80>)
 8004460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004464:	080044df 	.word	0x080044df
 8004468:	080044b9 	.word	0x080044b9
 800446c:	080044cb 	.word	0x080044cb
 8004470:	0800450d 	.word	0x0800450d
 8004474:	08004513 	.word	0x08004513
 8004478:	08004513 	.word	0x08004513
 800447c:	08004513 	.word	0x08004513
 8004480:	08004513 	.word	0x08004513
 8004484:	08004513 	.word	0x08004513
 8004488:	08004513 	.word	0x08004513
 800448c:	08004513 	.word	0x08004513
 8004490:	08004513 	.word	0x08004513
 8004494:	08004513 	.word	0x08004513
 8004498:	08004513 	.word	0x08004513
 800449c:	08004513 	.word	0x08004513
 80044a0:	08004513 	.word	0x08004513
 80044a4:	08004513 	.word	0x08004513
 80044a8:	080044c1 	.word	0x080044c1
 80044ac:	080044d5 	.word	0x080044d5
 80044b0:	4a79      	ldr	r2, [pc, #484]	; (8004698 <HAL_GPIO_Init+0x2b4>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d013      	beq.n	80044de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80044b6:	e02c      	b.n	8004512 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	623b      	str	r3, [r7, #32]
          break;
 80044be:	e029      	b.n	8004514 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	3304      	adds	r3, #4
 80044c6:	623b      	str	r3, [r7, #32]
          break;
 80044c8:	e024      	b.n	8004514 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	3308      	adds	r3, #8
 80044d0:	623b      	str	r3, [r7, #32]
          break;
 80044d2:	e01f      	b.n	8004514 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	330c      	adds	r3, #12
 80044da:	623b      	str	r3, [r7, #32]
          break;
 80044dc:	e01a      	b.n	8004514 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d102      	bne.n	80044ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80044e6:	2304      	movs	r3, #4
 80044e8:	623b      	str	r3, [r7, #32]
          break;
 80044ea:	e013      	b.n	8004514 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d105      	bne.n	8004500 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80044f4:	2308      	movs	r3, #8
 80044f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	69fa      	ldr	r2, [r7, #28]
 80044fc:	611a      	str	r2, [r3, #16]
          break;
 80044fe:	e009      	b.n	8004514 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004500:	2308      	movs	r3, #8
 8004502:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	69fa      	ldr	r2, [r7, #28]
 8004508:	615a      	str	r2, [r3, #20]
          break;
 800450a:	e003      	b.n	8004514 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800450c:	2300      	movs	r3, #0
 800450e:	623b      	str	r3, [r7, #32]
          break;
 8004510:	e000      	b.n	8004514 <HAL_GPIO_Init+0x130>
          break;
 8004512:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	2bff      	cmp	r3, #255	; 0xff
 8004518:	d801      	bhi.n	800451e <HAL_GPIO_Init+0x13a>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	e001      	b.n	8004522 <HAL_GPIO_Init+0x13e>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	3304      	adds	r3, #4
 8004522:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	2bff      	cmp	r3, #255	; 0xff
 8004528:	d802      	bhi.n	8004530 <HAL_GPIO_Init+0x14c>
 800452a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	e002      	b.n	8004536 <HAL_GPIO_Init+0x152>
 8004530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004532:	3b08      	subs	r3, #8
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	210f      	movs	r1, #15
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	fa01 f303 	lsl.w	r3, r1, r3
 8004544:	43db      	mvns	r3, r3
 8004546:	401a      	ands	r2, r3
 8004548:	6a39      	ldr	r1, [r7, #32]
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	fa01 f303 	lsl.w	r3, r1, r3
 8004550:	431a      	orrs	r2, r3
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800455e:	2b00      	cmp	r3, #0
 8004560:	f000 80b1 	beq.w	80046c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004564:	4b4d      	ldr	r3, [pc, #308]	; (800469c <HAL_GPIO_Init+0x2b8>)
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	4a4c      	ldr	r2, [pc, #304]	; (800469c <HAL_GPIO_Init+0x2b8>)
 800456a:	f043 0301 	orr.w	r3, r3, #1
 800456e:	6193      	str	r3, [r2, #24]
 8004570:	4b4a      	ldr	r3, [pc, #296]	; (800469c <HAL_GPIO_Init+0x2b8>)
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	f003 0301 	and.w	r3, r3, #1
 8004578:	60bb      	str	r3, [r7, #8]
 800457a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800457c:	4a48      	ldr	r2, [pc, #288]	; (80046a0 <HAL_GPIO_Init+0x2bc>)
 800457e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004580:	089b      	lsrs	r3, r3, #2
 8004582:	3302      	adds	r3, #2
 8004584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004588:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800458a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458c:	f003 0303 	and.w	r3, r3, #3
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	220f      	movs	r2, #15
 8004594:	fa02 f303 	lsl.w	r3, r2, r3
 8004598:	43db      	mvns	r3, r3
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	4013      	ands	r3, r2
 800459e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a40      	ldr	r2, [pc, #256]	; (80046a4 <HAL_GPIO_Init+0x2c0>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d013      	beq.n	80045d0 <HAL_GPIO_Init+0x1ec>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a3f      	ldr	r2, [pc, #252]	; (80046a8 <HAL_GPIO_Init+0x2c4>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d00d      	beq.n	80045cc <HAL_GPIO_Init+0x1e8>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a3e      	ldr	r2, [pc, #248]	; (80046ac <HAL_GPIO_Init+0x2c8>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d007      	beq.n	80045c8 <HAL_GPIO_Init+0x1e4>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a3d      	ldr	r2, [pc, #244]	; (80046b0 <HAL_GPIO_Init+0x2cc>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d101      	bne.n	80045c4 <HAL_GPIO_Init+0x1e0>
 80045c0:	2303      	movs	r3, #3
 80045c2:	e006      	b.n	80045d2 <HAL_GPIO_Init+0x1ee>
 80045c4:	2304      	movs	r3, #4
 80045c6:	e004      	b.n	80045d2 <HAL_GPIO_Init+0x1ee>
 80045c8:	2302      	movs	r3, #2
 80045ca:	e002      	b.n	80045d2 <HAL_GPIO_Init+0x1ee>
 80045cc:	2301      	movs	r3, #1
 80045ce:	e000      	b.n	80045d2 <HAL_GPIO_Init+0x1ee>
 80045d0:	2300      	movs	r3, #0
 80045d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045d4:	f002 0203 	and.w	r2, r2, #3
 80045d8:	0092      	lsls	r2, r2, #2
 80045da:	4093      	lsls	r3, r2
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	4313      	orrs	r3, r2
 80045e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80045e2:	492f      	ldr	r1, [pc, #188]	; (80046a0 <HAL_GPIO_Init+0x2bc>)
 80045e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e6:	089b      	lsrs	r3, r3, #2
 80045e8:	3302      	adds	r3, #2
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d006      	beq.n	800460a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80045fc:	4b2d      	ldr	r3, [pc, #180]	; (80046b4 <HAL_GPIO_Init+0x2d0>)
 80045fe:	689a      	ldr	r2, [r3, #8]
 8004600:	492c      	ldr	r1, [pc, #176]	; (80046b4 <HAL_GPIO_Init+0x2d0>)
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	4313      	orrs	r3, r2
 8004606:	608b      	str	r3, [r1, #8]
 8004608:	e006      	b.n	8004618 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800460a:	4b2a      	ldr	r3, [pc, #168]	; (80046b4 <HAL_GPIO_Init+0x2d0>)
 800460c:	689a      	ldr	r2, [r3, #8]
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	43db      	mvns	r3, r3
 8004612:	4928      	ldr	r1, [pc, #160]	; (80046b4 <HAL_GPIO_Init+0x2d0>)
 8004614:	4013      	ands	r3, r2
 8004616:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d006      	beq.n	8004632 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004624:	4b23      	ldr	r3, [pc, #140]	; (80046b4 <HAL_GPIO_Init+0x2d0>)
 8004626:	68da      	ldr	r2, [r3, #12]
 8004628:	4922      	ldr	r1, [pc, #136]	; (80046b4 <HAL_GPIO_Init+0x2d0>)
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	4313      	orrs	r3, r2
 800462e:	60cb      	str	r3, [r1, #12]
 8004630:	e006      	b.n	8004640 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004632:	4b20      	ldr	r3, [pc, #128]	; (80046b4 <HAL_GPIO_Init+0x2d0>)
 8004634:	68da      	ldr	r2, [r3, #12]
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	43db      	mvns	r3, r3
 800463a:	491e      	ldr	r1, [pc, #120]	; (80046b4 <HAL_GPIO_Init+0x2d0>)
 800463c:	4013      	ands	r3, r2
 800463e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d006      	beq.n	800465a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800464c:	4b19      	ldr	r3, [pc, #100]	; (80046b4 <HAL_GPIO_Init+0x2d0>)
 800464e:	685a      	ldr	r2, [r3, #4]
 8004650:	4918      	ldr	r1, [pc, #96]	; (80046b4 <HAL_GPIO_Init+0x2d0>)
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	4313      	orrs	r3, r2
 8004656:	604b      	str	r3, [r1, #4]
 8004658:	e006      	b.n	8004668 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800465a:	4b16      	ldr	r3, [pc, #88]	; (80046b4 <HAL_GPIO_Init+0x2d0>)
 800465c:	685a      	ldr	r2, [r3, #4]
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	43db      	mvns	r3, r3
 8004662:	4914      	ldr	r1, [pc, #80]	; (80046b4 <HAL_GPIO_Init+0x2d0>)
 8004664:	4013      	ands	r3, r2
 8004666:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d021      	beq.n	80046b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004674:	4b0f      	ldr	r3, [pc, #60]	; (80046b4 <HAL_GPIO_Init+0x2d0>)
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	490e      	ldr	r1, [pc, #56]	; (80046b4 <HAL_GPIO_Init+0x2d0>)
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	4313      	orrs	r3, r2
 800467e:	600b      	str	r3, [r1, #0]
 8004680:	e021      	b.n	80046c6 <HAL_GPIO_Init+0x2e2>
 8004682:	bf00      	nop
 8004684:	10320000 	.word	0x10320000
 8004688:	10310000 	.word	0x10310000
 800468c:	10220000 	.word	0x10220000
 8004690:	10210000 	.word	0x10210000
 8004694:	10120000 	.word	0x10120000
 8004698:	10110000 	.word	0x10110000
 800469c:	40021000 	.word	0x40021000
 80046a0:	40010000 	.word	0x40010000
 80046a4:	40010800 	.word	0x40010800
 80046a8:	40010c00 	.word	0x40010c00
 80046ac:	40011000 	.word	0x40011000
 80046b0:	40011400 	.word	0x40011400
 80046b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80046b8:	4b0b      	ldr	r3, [pc, #44]	; (80046e8 <HAL_GPIO_Init+0x304>)
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	43db      	mvns	r3, r3
 80046c0:	4909      	ldr	r1, [pc, #36]	; (80046e8 <HAL_GPIO_Init+0x304>)
 80046c2:	4013      	ands	r3, r2
 80046c4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80046c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c8:	3301      	adds	r3, #1
 80046ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d2:	fa22 f303 	lsr.w	r3, r2, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f47f ae8e 	bne.w	80043f8 <HAL_GPIO_Init+0x14>
  }
}
 80046dc:	bf00      	nop
 80046de:	bf00      	nop
 80046e0:	372c      	adds	r7, #44	; 0x2c
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bc80      	pop	{r7}
 80046e6:	4770      	bx	lr
 80046e8:	40010400 	.word	0x40010400

080046ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	4603      	mov	r3, r0
 80046f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80046f6:	4b08      	ldr	r3, [pc, #32]	; (8004718 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046f8:	695a      	ldr	r2, [r3, #20]
 80046fa:	88fb      	ldrh	r3, [r7, #6]
 80046fc:	4013      	ands	r3, r2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d006      	beq.n	8004710 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004702:	4a05      	ldr	r2, [pc, #20]	; (8004718 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004704:	88fb      	ldrh	r3, [r7, #6]
 8004706:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004708:	88fb      	ldrh	r3, [r7, #6]
 800470a:	4618      	mov	r0, r3
 800470c:	f000 f806 	bl	800471c <HAL_GPIO_EXTI_Callback>
  }
}
 8004710:	bf00      	nop
 8004712:	3708      	adds	r7, #8
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	40010400 	.word	0x40010400

0800471c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	4603      	mov	r3, r0
 8004724:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004726:	bf00      	nop
 8004728:	370c      	adds	r7, #12
 800472a:	46bd      	mov	sp, r7
 800472c:	bc80      	pop	{r7}
 800472e:	4770      	bx	lr

08004730 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d101      	bne.n	8004742 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e272      	b.n	8004c28 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b00      	cmp	r3, #0
 800474c:	f000 8087 	beq.w	800485e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004750:	4b92      	ldr	r3, [pc, #584]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f003 030c 	and.w	r3, r3, #12
 8004758:	2b04      	cmp	r3, #4
 800475a:	d00c      	beq.n	8004776 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800475c:	4b8f      	ldr	r3, [pc, #572]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f003 030c 	and.w	r3, r3, #12
 8004764:	2b08      	cmp	r3, #8
 8004766:	d112      	bne.n	800478e <HAL_RCC_OscConfig+0x5e>
 8004768:	4b8c      	ldr	r3, [pc, #560]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004774:	d10b      	bne.n	800478e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004776:	4b89      	ldr	r3, [pc, #548]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d06c      	beq.n	800485c <HAL_RCC_OscConfig+0x12c>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d168      	bne.n	800485c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e24c      	b.n	8004c28 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004796:	d106      	bne.n	80047a6 <HAL_RCC_OscConfig+0x76>
 8004798:	4b80      	ldr	r3, [pc, #512]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a7f      	ldr	r2, [pc, #508]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 800479e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047a2:	6013      	str	r3, [r2, #0]
 80047a4:	e02e      	b.n	8004804 <HAL_RCC_OscConfig+0xd4>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10c      	bne.n	80047c8 <HAL_RCC_OscConfig+0x98>
 80047ae:	4b7b      	ldr	r3, [pc, #492]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a7a      	ldr	r2, [pc, #488]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 80047b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047b8:	6013      	str	r3, [r2, #0]
 80047ba:	4b78      	ldr	r3, [pc, #480]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a77      	ldr	r2, [pc, #476]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 80047c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047c4:	6013      	str	r3, [r2, #0]
 80047c6:	e01d      	b.n	8004804 <HAL_RCC_OscConfig+0xd4>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047d0:	d10c      	bne.n	80047ec <HAL_RCC_OscConfig+0xbc>
 80047d2:	4b72      	ldr	r3, [pc, #456]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a71      	ldr	r2, [pc, #452]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 80047d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047dc:	6013      	str	r3, [r2, #0]
 80047de:	4b6f      	ldr	r3, [pc, #444]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a6e      	ldr	r2, [pc, #440]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 80047e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047e8:	6013      	str	r3, [r2, #0]
 80047ea:	e00b      	b.n	8004804 <HAL_RCC_OscConfig+0xd4>
 80047ec:	4b6b      	ldr	r3, [pc, #428]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a6a      	ldr	r2, [pc, #424]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 80047f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047f6:	6013      	str	r3, [r2, #0]
 80047f8:	4b68      	ldr	r3, [pc, #416]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a67      	ldr	r2, [pc, #412]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 80047fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004802:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d013      	beq.n	8004834 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800480c:	f7ff fcae 	bl	800416c <HAL_GetTick>
 8004810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004812:	e008      	b.n	8004826 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004814:	f7ff fcaa 	bl	800416c <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b64      	cmp	r3, #100	; 0x64
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e200      	b.n	8004c28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004826:	4b5d      	ldr	r3, [pc, #372]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d0f0      	beq.n	8004814 <HAL_RCC_OscConfig+0xe4>
 8004832:	e014      	b.n	800485e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004834:	f7ff fc9a 	bl	800416c <HAL_GetTick>
 8004838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800483a:	e008      	b.n	800484e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800483c:	f7ff fc96 	bl	800416c <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	2b64      	cmp	r3, #100	; 0x64
 8004848:	d901      	bls.n	800484e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e1ec      	b.n	8004c28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800484e:	4b53      	ldr	r3, [pc, #332]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1f0      	bne.n	800483c <HAL_RCC_OscConfig+0x10c>
 800485a:	e000      	b.n	800485e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800485c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d063      	beq.n	8004932 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800486a:	4b4c      	ldr	r3, [pc, #304]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f003 030c 	and.w	r3, r3, #12
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00b      	beq.n	800488e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004876:	4b49      	ldr	r3, [pc, #292]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f003 030c 	and.w	r3, r3, #12
 800487e:	2b08      	cmp	r3, #8
 8004880:	d11c      	bne.n	80048bc <HAL_RCC_OscConfig+0x18c>
 8004882:	4b46      	ldr	r3, [pc, #280]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d116      	bne.n	80048bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800488e:	4b43      	ldr	r3, [pc, #268]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d005      	beq.n	80048a6 <HAL_RCC_OscConfig+0x176>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d001      	beq.n	80048a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e1c0      	b.n	8004c28 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048a6:	4b3d      	ldr	r3, [pc, #244]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	00db      	lsls	r3, r3, #3
 80048b4:	4939      	ldr	r1, [pc, #228]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ba:	e03a      	b.n	8004932 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d020      	beq.n	8004906 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048c4:	4b36      	ldr	r3, [pc, #216]	; (80049a0 <HAL_RCC_OscConfig+0x270>)
 80048c6:	2201      	movs	r2, #1
 80048c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ca:	f7ff fc4f 	bl	800416c <HAL_GetTick>
 80048ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048d0:	e008      	b.n	80048e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048d2:	f7ff fc4b 	bl	800416c <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d901      	bls.n	80048e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e1a1      	b.n	8004c28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048e4:	4b2d      	ldr	r3, [pc, #180]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d0f0      	beq.n	80048d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048f0:	4b2a      	ldr	r3, [pc, #168]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	00db      	lsls	r3, r3, #3
 80048fe:	4927      	ldr	r1, [pc, #156]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 8004900:	4313      	orrs	r3, r2
 8004902:	600b      	str	r3, [r1, #0]
 8004904:	e015      	b.n	8004932 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004906:	4b26      	ldr	r3, [pc, #152]	; (80049a0 <HAL_RCC_OscConfig+0x270>)
 8004908:	2200      	movs	r2, #0
 800490a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800490c:	f7ff fc2e 	bl	800416c <HAL_GetTick>
 8004910:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004912:	e008      	b.n	8004926 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004914:	f7ff fc2a 	bl	800416c <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	2b02      	cmp	r3, #2
 8004920:	d901      	bls.n	8004926 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e180      	b.n	8004c28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004926:	4b1d      	ldr	r3, [pc, #116]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1f0      	bne.n	8004914 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0308 	and.w	r3, r3, #8
 800493a:	2b00      	cmp	r3, #0
 800493c:	d03a      	beq.n	80049b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d019      	beq.n	800497a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004946:	4b17      	ldr	r3, [pc, #92]	; (80049a4 <HAL_RCC_OscConfig+0x274>)
 8004948:	2201      	movs	r2, #1
 800494a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800494c:	f7ff fc0e 	bl	800416c <HAL_GetTick>
 8004950:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004952:	e008      	b.n	8004966 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004954:	f7ff fc0a 	bl	800416c <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b02      	cmp	r3, #2
 8004960:	d901      	bls.n	8004966 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e160      	b.n	8004c28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004966:	4b0d      	ldr	r3, [pc, #52]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 8004968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d0f0      	beq.n	8004954 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004972:	2001      	movs	r0, #1
 8004974:	f000 face 	bl	8004f14 <RCC_Delay>
 8004978:	e01c      	b.n	80049b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800497a:	4b0a      	ldr	r3, [pc, #40]	; (80049a4 <HAL_RCC_OscConfig+0x274>)
 800497c:	2200      	movs	r2, #0
 800497e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004980:	f7ff fbf4 	bl	800416c <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004986:	e00f      	b.n	80049a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004988:	f7ff fbf0 	bl	800416c <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d908      	bls.n	80049a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e146      	b.n	8004c28 <HAL_RCC_OscConfig+0x4f8>
 800499a:	bf00      	nop
 800499c:	40021000 	.word	0x40021000
 80049a0:	42420000 	.word	0x42420000
 80049a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049a8:	4b92      	ldr	r3, [pc, #584]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 80049aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ac:	f003 0302 	and.w	r3, r3, #2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1e9      	bne.n	8004988 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0304 	and.w	r3, r3, #4
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f000 80a6 	beq.w	8004b0e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049c2:	2300      	movs	r3, #0
 80049c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049c6:	4b8b      	ldr	r3, [pc, #556]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d10d      	bne.n	80049ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049d2:	4b88      	ldr	r3, [pc, #544]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 80049d4:	69db      	ldr	r3, [r3, #28]
 80049d6:	4a87      	ldr	r2, [pc, #540]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 80049d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049dc:	61d3      	str	r3, [r2, #28]
 80049de:	4b85      	ldr	r3, [pc, #532]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 80049e0:	69db      	ldr	r3, [r3, #28]
 80049e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049e6:	60bb      	str	r3, [r7, #8]
 80049e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049ea:	2301      	movs	r3, #1
 80049ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ee:	4b82      	ldr	r3, [pc, #520]	; (8004bf8 <HAL_RCC_OscConfig+0x4c8>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d118      	bne.n	8004a2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049fa:	4b7f      	ldr	r3, [pc, #508]	; (8004bf8 <HAL_RCC_OscConfig+0x4c8>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a7e      	ldr	r2, [pc, #504]	; (8004bf8 <HAL_RCC_OscConfig+0x4c8>)
 8004a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a06:	f7ff fbb1 	bl	800416c <HAL_GetTick>
 8004a0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a0c:	e008      	b.n	8004a20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a0e:	f7ff fbad 	bl	800416c <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	2b64      	cmp	r3, #100	; 0x64
 8004a1a:	d901      	bls.n	8004a20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e103      	b.n	8004c28 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a20:	4b75      	ldr	r3, [pc, #468]	; (8004bf8 <HAL_RCC_OscConfig+0x4c8>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d0f0      	beq.n	8004a0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d106      	bne.n	8004a42 <HAL_RCC_OscConfig+0x312>
 8004a34:	4b6f      	ldr	r3, [pc, #444]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	4a6e      	ldr	r2, [pc, #440]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004a3a:	f043 0301 	orr.w	r3, r3, #1
 8004a3e:	6213      	str	r3, [r2, #32]
 8004a40:	e02d      	b.n	8004a9e <HAL_RCC_OscConfig+0x36e>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10c      	bne.n	8004a64 <HAL_RCC_OscConfig+0x334>
 8004a4a:	4b6a      	ldr	r3, [pc, #424]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	4a69      	ldr	r2, [pc, #420]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004a50:	f023 0301 	bic.w	r3, r3, #1
 8004a54:	6213      	str	r3, [r2, #32]
 8004a56:	4b67      	ldr	r3, [pc, #412]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	4a66      	ldr	r2, [pc, #408]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004a5c:	f023 0304 	bic.w	r3, r3, #4
 8004a60:	6213      	str	r3, [r2, #32]
 8004a62:	e01c      	b.n	8004a9e <HAL_RCC_OscConfig+0x36e>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	2b05      	cmp	r3, #5
 8004a6a:	d10c      	bne.n	8004a86 <HAL_RCC_OscConfig+0x356>
 8004a6c:	4b61      	ldr	r3, [pc, #388]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004a6e:	6a1b      	ldr	r3, [r3, #32]
 8004a70:	4a60      	ldr	r2, [pc, #384]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004a72:	f043 0304 	orr.w	r3, r3, #4
 8004a76:	6213      	str	r3, [r2, #32]
 8004a78:	4b5e      	ldr	r3, [pc, #376]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004a7a:	6a1b      	ldr	r3, [r3, #32]
 8004a7c:	4a5d      	ldr	r2, [pc, #372]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004a7e:	f043 0301 	orr.w	r3, r3, #1
 8004a82:	6213      	str	r3, [r2, #32]
 8004a84:	e00b      	b.n	8004a9e <HAL_RCC_OscConfig+0x36e>
 8004a86:	4b5b      	ldr	r3, [pc, #364]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	4a5a      	ldr	r2, [pc, #360]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004a8c:	f023 0301 	bic.w	r3, r3, #1
 8004a90:	6213      	str	r3, [r2, #32]
 8004a92:	4b58      	ldr	r3, [pc, #352]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	4a57      	ldr	r2, [pc, #348]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004a98:	f023 0304 	bic.w	r3, r3, #4
 8004a9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d015      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aa6:	f7ff fb61 	bl	800416c <HAL_GetTick>
 8004aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aac:	e00a      	b.n	8004ac4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aae:	f7ff fb5d 	bl	800416c <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d901      	bls.n	8004ac4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e0b1      	b.n	8004c28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac4:	4b4b      	ldr	r3, [pc, #300]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004ac6:	6a1b      	ldr	r3, [r3, #32]
 8004ac8:	f003 0302 	and.w	r3, r3, #2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d0ee      	beq.n	8004aae <HAL_RCC_OscConfig+0x37e>
 8004ad0:	e014      	b.n	8004afc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ad2:	f7ff fb4b 	bl	800416c <HAL_GetTick>
 8004ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ad8:	e00a      	b.n	8004af0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ada:	f7ff fb47 	bl	800416c <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d901      	bls.n	8004af0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e09b      	b.n	8004c28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004af0:	4b40      	ldr	r3, [pc, #256]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004af2:	6a1b      	ldr	r3, [r3, #32]
 8004af4:	f003 0302 	and.w	r3, r3, #2
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1ee      	bne.n	8004ada <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004afc:	7dfb      	ldrb	r3, [r7, #23]
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d105      	bne.n	8004b0e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b02:	4b3c      	ldr	r3, [pc, #240]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	4a3b      	ldr	r2, [pc, #236]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004b08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b0c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	69db      	ldr	r3, [r3, #28]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	f000 8087 	beq.w	8004c26 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b18:	4b36      	ldr	r3, [pc, #216]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f003 030c 	and.w	r3, r3, #12
 8004b20:	2b08      	cmp	r3, #8
 8004b22:	d061      	beq.n	8004be8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	69db      	ldr	r3, [r3, #28]
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d146      	bne.n	8004bba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b2c:	4b33      	ldr	r3, [pc, #204]	; (8004bfc <HAL_RCC_OscConfig+0x4cc>)
 8004b2e:	2200      	movs	r2, #0
 8004b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b32:	f7ff fb1b 	bl	800416c <HAL_GetTick>
 8004b36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b38:	e008      	b.n	8004b4c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b3a:	f7ff fb17 	bl	800416c <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d901      	bls.n	8004b4c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e06d      	b.n	8004c28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b4c:	4b29      	ldr	r3, [pc, #164]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1f0      	bne.n	8004b3a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a1b      	ldr	r3, [r3, #32]
 8004b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b60:	d108      	bne.n	8004b74 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004b62:	4b24      	ldr	r3, [pc, #144]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	4921      	ldr	r1, [pc, #132]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b74:	4b1f      	ldr	r3, [pc, #124]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a19      	ldr	r1, [r3, #32]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b84:	430b      	orrs	r3, r1
 8004b86:	491b      	ldr	r1, [pc, #108]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b8c:	4b1b      	ldr	r3, [pc, #108]	; (8004bfc <HAL_RCC_OscConfig+0x4cc>)
 8004b8e:	2201      	movs	r2, #1
 8004b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b92:	f7ff faeb 	bl	800416c <HAL_GetTick>
 8004b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b98:	e008      	b.n	8004bac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b9a:	f7ff fae7 	bl	800416c <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d901      	bls.n	8004bac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e03d      	b.n	8004c28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004bac:	4b11      	ldr	r3, [pc, #68]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d0f0      	beq.n	8004b9a <HAL_RCC_OscConfig+0x46a>
 8004bb8:	e035      	b.n	8004c26 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bba:	4b10      	ldr	r3, [pc, #64]	; (8004bfc <HAL_RCC_OscConfig+0x4cc>)
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc0:	f7ff fad4 	bl	800416c <HAL_GetTick>
 8004bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bc6:	e008      	b.n	8004bda <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bc8:	f7ff fad0 	bl	800416c <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d901      	bls.n	8004bda <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e026      	b.n	8004c28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bda:	4b06      	ldr	r3, [pc, #24]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1f0      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x498>
 8004be6:	e01e      	b.n	8004c26 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	69db      	ldr	r3, [r3, #28]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d107      	bne.n	8004c00 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e019      	b.n	8004c28 <HAL_RCC_OscConfig+0x4f8>
 8004bf4:	40021000 	.word	0x40021000
 8004bf8:	40007000 	.word	0x40007000
 8004bfc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004c00:	4b0b      	ldr	r3, [pc, #44]	; (8004c30 <HAL_RCC_OscConfig+0x500>)
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a1b      	ldr	r3, [r3, #32]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d106      	bne.n	8004c22 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d001      	beq.n	8004c26 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e000      	b.n	8004c28 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3718      	adds	r7, #24
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	40021000 	.word	0x40021000

08004c34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d101      	bne.n	8004c48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e0d0      	b.n	8004dea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c48:	4b6a      	ldr	r3, [pc, #424]	; (8004df4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0307 	and.w	r3, r3, #7
 8004c50:	683a      	ldr	r2, [r7, #0]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d910      	bls.n	8004c78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c56:	4b67      	ldr	r3, [pc, #412]	; (8004df4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f023 0207 	bic.w	r2, r3, #7
 8004c5e:	4965      	ldr	r1, [pc, #404]	; (8004df4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c66:	4b63      	ldr	r3, [pc, #396]	; (8004df4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0307 	and.w	r3, r3, #7
 8004c6e:	683a      	ldr	r2, [r7, #0]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d001      	beq.n	8004c78 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e0b8      	b.n	8004dea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0302 	and.w	r3, r3, #2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d020      	beq.n	8004cc6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0304 	and.w	r3, r3, #4
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d005      	beq.n	8004c9c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c90:	4b59      	ldr	r3, [pc, #356]	; (8004df8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	4a58      	ldr	r2, [pc, #352]	; (8004df8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004c9a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0308 	and.w	r3, r3, #8
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d005      	beq.n	8004cb4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ca8:	4b53      	ldr	r3, [pc, #332]	; (8004df8 <HAL_RCC_ClockConfig+0x1c4>)
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	4a52      	ldr	r2, [pc, #328]	; (8004df8 <HAL_RCC_ClockConfig+0x1c4>)
 8004cae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004cb2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cb4:	4b50      	ldr	r3, [pc, #320]	; (8004df8 <HAL_RCC_ClockConfig+0x1c4>)
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	494d      	ldr	r1, [pc, #308]	; (8004df8 <HAL_RCC_ClockConfig+0x1c4>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d040      	beq.n	8004d54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d107      	bne.n	8004cea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cda:	4b47      	ldr	r3, [pc, #284]	; (8004df8 <HAL_RCC_ClockConfig+0x1c4>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d115      	bne.n	8004d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e07f      	b.n	8004dea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d107      	bne.n	8004d02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cf2:	4b41      	ldr	r3, [pc, #260]	; (8004df8 <HAL_RCC_ClockConfig+0x1c4>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d109      	bne.n	8004d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e073      	b.n	8004dea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d02:	4b3d      	ldr	r3, [pc, #244]	; (8004df8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0302 	and.w	r3, r3, #2
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d101      	bne.n	8004d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e06b      	b.n	8004dea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d12:	4b39      	ldr	r3, [pc, #228]	; (8004df8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f023 0203 	bic.w	r2, r3, #3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	4936      	ldr	r1, [pc, #216]	; (8004df8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d24:	f7ff fa22 	bl	800416c <HAL_GetTick>
 8004d28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d2a:	e00a      	b.n	8004d42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d2c:	f7ff fa1e 	bl	800416c <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d901      	bls.n	8004d42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e053      	b.n	8004dea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d42:	4b2d      	ldr	r3, [pc, #180]	; (8004df8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f003 020c 	and.w	r2, r3, #12
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d1eb      	bne.n	8004d2c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d54:	4b27      	ldr	r3, [pc, #156]	; (8004df4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0307 	and.w	r3, r3, #7
 8004d5c:	683a      	ldr	r2, [r7, #0]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d210      	bcs.n	8004d84 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d62:	4b24      	ldr	r3, [pc, #144]	; (8004df4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f023 0207 	bic.w	r2, r3, #7
 8004d6a:	4922      	ldr	r1, [pc, #136]	; (8004df4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d72:	4b20      	ldr	r3, [pc, #128]	; (8004df4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0307 	and.w	r3, r3, #7
 8004d7a:	683a      	ldr	r2, [r7, #0]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d001      	beq.n	8004d84 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e032      	b.n	8004dea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0304 	and.w	r3, r3, #4
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d008      	beq.n	8004da2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d90:	4b19      	ldr	r3, [pc, #100]	; (8004df8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	4916      	ldr	r1, [pc, #88]	; (8004df8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0308 	and.w	r3, r3, #8
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d009      	beq.n	8004dc2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004dae:	4b12      	ldr	r3, [pc, #72]	; (8004df8 <HAL_RCC_ClockConfig+0x1c4>)
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	00db      	lsls	r3, r3, #3
 8004dbc:	490e      	ldr	r1, [pc, #56]	; (8004df8 <HAL_RCC_ClockConfig+0x1c4>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004dc2:	f000 f821 	bl	8004e08 <HAL_RCC_GetSysClockFreq>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	4b0b      	ldr	r3, [pc, #44]	; (8004df8 <HAL_RCC_ClockConfig+0x1c4>)
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	091b      	lsrs	r3, r3, #4
 8004dce:	f003 030f 	and.w	r3, r3, #15
 8004dd2:	490a      	ldr	r1, [pc, #40]	; (8004dfc <HAL_RCC_ClockConfig+0x1c8>)
 8004dd4:	5ccb      	ldrb	r3, [r1, r3]
 8004dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8004dda:	4a09      	ldr	r2, [pc, #36]	; (8004e00 <HAL_RCC_ClockConfig+0x1cc>)
 8004ddc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004dde:	4b09      	ldr	r3, [pc, #36]	; (8004e04 <HAL_RCC_ClockConfig+0x1d0>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7ff f980 	bl	80040e8 <HAL_InitTick>

  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	40022000 	.word	0x40022000
 8004df8:	40021000 	.word	0x40021000
 8004dfc:	08005374 	.word	0x08005374
 8004e00:	2000001c 	.word	0x2000001c
 8004e04:	20000020 	.word	0x20000020

08004e08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b087      	sub	sp, #28
 8004e0c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	60fb      	str	r3, [r7, #12]
 8004e12:	2300      	movs	r3, #0
 8004e14:	60bb      	str	r3, [r7, #8]
 8004e16:	2300      	movs	r3, #0
 8004e18:	617b      	str	r3, [r7, #20]
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004e22:	4b1e      	ldr	r3, [pc, #120]	; (8004e9c <HAL_RCC_GetSysClockFreq+0x94>)
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f003 030c 	and.w	r3, r3, #12
 8004e2e:	2b04      	cmp	r3, #4
 8004e30:	d002      	beq.n	8004e38 <HAL_RCC_GetSysClockFreq+0x30>
 8004e32:	2b08      	cmp	r3, #8
 8004e34:	d003      	beq.n	8004e3e <HAL_RCC_GetSysClockFreq+0x36>
 8004e36:	e027      	b.n	8004e88 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e38:	4b19      	ldr	r3, [pc, #100]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004e3a:	613b      	str	r3, [r7, #16]
      break;
 8004e3c:	e027      	b.n	8004e8e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	0c9b      	lsrs	r3, r3, #18
 8004e42:	f003 030f 	and.w	r3, r3, #15
 8004e46:	4a17      	ldr	r2, [pc, #92]	; (8004ea4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004e48:	5cd3      	ldrb	r3, [r2, r3]
 8004e4a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d010      	beq.n	8004e78 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004e56:	4b11      	ldr	r3, [pc, #68]	; (8004e9c <HAL_RCC_GetSysClockFreq+0x94>)
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	0c5b      	lsrs	r3, r3, #17
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	4a11      	ldr	r2, [pc, #68]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004e62:	5cd3      	ldrb	r3, [r2, r3]
 8004e64:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a0d      	ldr	r2, [pc, #52]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004e6a:	fb03 f202 	mul.w	r2, r3, r2
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e74:	617b      	str	r3, [r7, #20]
 8004e76:	e004      	b.n	8004e82 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a0c      	ldr	r2, [pc, #48]	; (8004eac <HAL_RCC_GetSysClockFreq+0xa4>)
 8004e7c:	fb02 f303 	mul.w	r3, r2, r3
 8004e80:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	613b      	str	r3, [r7, #16]
      break;
 8004e86:	e002      	b.n	8004e8e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004e88:	4b05      	ldr	r3, [pc, #20]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004e8a:	613b      	str	r3, [r7, #16]
      break;
 8004e8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e8e:	693b      	ldr	r3, [r7, #16]
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	371c      	adds	r7, #28
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bc80      	pop	{r7}
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	40021000 	.word	0x40021000
 8004ea0:	007a1200 	.word	0x007a1200
 8004ea4:	0800538c 	.word	0x0800538c
 8004ea8:	0800539c 	.word	0x0800539c
 8004eac:	003d0900 	.word	0x003d0900

08004eb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004eb4:	4b02      	ldr	r3, [pc, #8]	; (8004ec0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bc80      	pop	{r7}
 8004ebe:	4770      	bx	lr
 8004ec0:	2000001c 	.word	0x2000001c

08004ec4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ec8:	f7ff fff2 	bl	8004eb0 <HAL_RCC_GetHCLKFreq>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	4b05      	ldr	r3, [pc, #20]	; (8004ee4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	0a1b      	lsrs	r3, r3, #8
 8004ed4:	f003 0307 	and.w	r3, r3, #7
 8004ed8:	4903      	ldr	r1, [pc, #12]	; (8004ee8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004eda:	5ccb      	ldrb	r3, [r1, r3]
 8004edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	40021000 	.word	0x40021000
 8004ee8:	08005384 	.word	0x08005384

08004eec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ef0:	f7ff ffde 	bl	8004eb0 <HAL_RCC_GetHCLKFreq>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	4b05      	ldr	r3, [pc, #20]	; (8004f0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	0adb      	lsrs	r3, r3, #11
 8004efc:	f003 0307 	and.w	r3, r3, #7
 8004f00:	4903      	ldr	r1, [pc, #12]	; (8004f10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f02:	5ccb      	ldrb	r3, [r1, r3]
 8004f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	40021000 	.word	0x40021000
 8004f10:	08005384 	.word	0x08005384

08004f14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004f1c:	4b0a      	ldr	r3, [pc, #40]	; (8004f48 <RCC_Delay+0x34>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a0a      	ldr	r2, [pc, #40]	; (8004f4c <RCC_Delay+0x38>)
 8004f22:	fba2 2303 	umull	r2, r3, r2, r3
 8004f26:	0a5b      	lsrs	r3, r3, #9
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	fb02 f303 	mul.w	r3, r2, r3
 8004f2e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004f30:	bf00      	nop
  }
  while (Delay --);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	1e5a      	subs	r2, r3, #1
 8004f36:	60fa      	str	r2, [r7, #12]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1f9      	bne.n	8004f30 <RCC_Delay+0x1c>
}
 8004f3c:	bf00      	nop
 8004f3e:	bf00      	nop
 8004f40:	3714      	adds	r7, #20
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bc80      	pop	{r7}
 8004f46:	4770      	bx	lr
 8004f48:	2000001c 	.word	0x2000001c
 8004f4c:	10624dd3 	.word	0x10624dd3

08004f50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d101      	bne.n	8004f62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e042      	b.n	8004fe8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d106      	bne.n	8004f7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7fe ffda 	bl	8003f30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2224      	movs	r2, #36	; 0x24
 8004f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68da      	ldr	r2, [r3, #12]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 f91d 	bl	80051d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	691a      	ldr	r2, [r3, #16]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fa8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	695a      	ldr	r2, [r3, #20]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68da      	ldr	r2, [r3, #12]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2220      	movs	r2, #32
 8004fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2220      	movs	r2, #32
 8004fdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3708      	adds	r7, #8
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b08a      	sub	sp, #40	; 0x28
 8004ff4:	af02      	add	r7, sp, #8
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	603b      	str	r3, [r7, #0]
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005000:	2300      	movs	r3, #0
 8005002:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800500a:	b2db      	uxtb	r3, r3
 800500c:	2b20      	cmp	r3, #32
 800500e:	d16d      	bne.n	80050ec <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d002      	beq.n	800501c <HAL_UART_Transmit+0x2c>
 8005016:	88fb      	ldrh	r3, [r7, #6]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d101      	bne.n	8005020 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e066      	b.n	80050ee <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2221      	movs	r2, #33	; 0x21
 800502a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800502e:	f7ff f89d 	bl	800416c <HAL_GetTick>
 8005032:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	88fa      	ldrh	r2, [r7, #6]
 8005038:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	88fa      	ldrh	r2, [r7, #6]
 800503e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005048:	d108      	bne.n	800505c <HAL_UART_Transmit+0x6c>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d104      	bne.n	800505c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005052:	2300      	movs	r3, #0
 8005054:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	61bb      	str	r3, [r7, #24]
 800505a:	e003      	b.n	8005064 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005060:	2300      	movs	r3, #0
 8005062:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005064:	e02a      	b.n	80050bc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	9300      	str	r3, [sp, #0]
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	2200      	movs	r2, #0
 800506e:	2180      	movs	r1, #128	; 0x80
 8005070:	68f8      	ldr	r0, [r7, #12]
 8005072:	f000 f840 	bl	80050f6 <UART_WaitOnFlagUntilTimeout>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d001      	beq.n	8005080 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e036      	b.n	80050ee <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10b      	bne.n	800509e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	881b      	ldrh	r3, [r3, #0]
 800508a:	461a      	mov	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005094:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	3302      	adds	r3, #2
 800509a:	61bb      	str	r3, [r7, #24]
 800509c:	e007      	b.n	80050ae <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	781a      	ldrb	r2, [r3, #0]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	3301      	adds	r3, #1
 80050ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	3b01      	subs	r3, #1
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1cf      	bne.n	8005066 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	9300      	str	r3, [sp, #0]
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	2200      	movs	r2, #0
 80050ce:	2140      	movs	r1, #64	; 0x40
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f000 f810 	bl	80050f6 <UART_WaitOnFlagUntilTimeout>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d001      	beq.n	80050e0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e006      	b.n	80050ee <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2220      	movs	r2, #32
 80050e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80050e8:	2300      	movs	r3, #0
 80050ea:	e000      	b.n	80050ee <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80050ec:	2302      	movs	r3, #2
  }
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3720      	adds	r7, #32
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b090      	sub	sp, #64	; 0x40
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	60f8      	str	r0, [r7, #12]
 80050fe:	60b9      	str	r1, [r7, #8]
 8005100:	603b      	str	r3, [r7, #0]
 8005102:	4613      	mov	r3, r2
 8005104:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005106:	e050      	b.n	80051aa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005108:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800510a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800510e:	d04c      	beq.n	80051aa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005110:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005112:	2b00      	cmp	r3, #0
 8005114:	d007      	beq.n	8005126 <UART_WaitOnFlagUntilTimeout+0x30>
 8005116:	f7ff f829 	bl	800416c <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005122:	429a      	cmp	r2, r3
 8005124:	d241      	bcs.n	80051aa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	330c      	adds	r3, #12
 800512c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005130:	e853 3f00 	ldrex	r3, [r3]
 8005134:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005138:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800513c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	330c      	adds	r3, #12
 8005144:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005146:	637a      	str	r2, [r7, #52]	; 0x34
 8005148:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800514c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800514e:	e841 2300 	strex	r3, r2, [r1]
 8005152:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1e5      	bne.n	8005126 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	3314      	adds	r3, #20
 8005160:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	e853 3f00 	ldrex	r3, [r3]
 8005168:	613b      	str	r3, [r7, #16]
   return(result);
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	f023 0301 	bic.w	r3, r3, #1
 8005170:	63bb      	str	r3, [r7, #56]	; 0x38
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	3314      	adds	r3, #20
 8005178:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800517a:	623a      	str	r2, [r7, #32]
 800517c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517e:	69f9      	ldr	r1, [r7, #28]
 8005180:	6a3a      	ldr	r2, [r7, #32]
 8005182:	e841 2300 	strex	r3, r2, [r1]
 8005186:	61bb      	str	r3, [r7, #24]
   return(result);
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d1e5      	bne.n	800515a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2220      	movs	r2, #32
 8005192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2220      	movs	r2, #32
 800519a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e00f      	b.n	80051ca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	4013      	ands	r3, r2
 80051b4:	68ba      	ldr	r2, [r7, #8]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	bf0c      	ite	eq
 80051ba:	2301      	moveq	r3, #1
 80051bc:	2300      	movne	r3, #0
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	461a      	mov	r2, r3
 80051c2:	79fb      	ldrb	r3, [r7, #7]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d09f      	beq.n	8005108 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3740      	adds	r7, #64	; 0x40
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
	...

080051d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	68da      	ldr	r2, [r3, #12]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	689a      	ldr	r2, [r3, #8]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	431a      	orrs	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	695b      	ldr	r3, [r3, #20]
 8005200:	4313      	orrs	r3, r2
 8005202:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800520e:	f023 030c 	bic.w	r3, r3, #12
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	6812      	ldr	r2, [r2, #0]
 8005216:	68b9      	ldr	r1, [r7, #8]
 8005218:	430b      	orrs	r3, r1
 800521a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	699a      	ldr	r2, [r3, #24]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	430a      	orrs	r2, r1
 8005230:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a2c      	ldr	r2, [pc, #176]	; (80052e8 <UART_SetConfig+0x114>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d103      	bne.n	8005244 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800523c:	f7ff fe56 	bl	8004eec <HAL_RCC_GetPCLK2Freq>
 8005240:	60f8      	str	r0, [r7, #12]
 8005242:	e002      	b.n	800524a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005244:	f7ff fe3e 	bl	8004ec4 <HAL_RCC_GetPCLK1Freq>
 8005248:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	4613      	mov	r3, r2
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	4413      	add	r3, r2
 8005252:	009a      	lsls	r2, r3, #2
 8005254:	441a      	add	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005260:	4a22      	ldr	r2, [pc, #136]	; (80052ec <UART_SetConfig+0x118>)
 8005262:	fba2 2303 	umull	r2, r3, r2, r3
 8005266:	095b      	lsrs	r3, r3, #5
 8005268:	0119      	lsls	r1, r3, #4
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	4613      	mov	r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	4413      	add	r3, r2
 8005272:	009a      	lsls	r2, r3, #2
 8005274:	441a      	add	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005280:	4b1a      	ldr	r3, [pc, #104]	; (80052ec <UART_SetConfig+0x118>)
 8005282:	fba3 0302 	umull	r0, r3, r3, r2
 8005286:	095b      	lsrs	r3, r3, #5
 8005288:	2064      	movs	r0, #100	; 0x64
 800528a:	fb00 f303 	mul.w	r3, r0, r3
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	011b      	lsls	r3, r3, #4
 8005292:	3332      	adds	r3, #50	; 0x32
 8005294:	4a15      	ldr	r2, [pc, #84]	; (80052ec <UART_SetConfig+0x118>)
 8005296:	fba2 2303 	umull	r2, r3, r2, r3
 800529a:	095b      	lsrs	r3, r3, #5
 800529c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052a0:	4419      	add	r1, r3
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	4613      	mov	r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	4413      	add	r3, r2
 80052aa:	009a      	lsls	r2, r3, #2
 80052ac:	441a      	add	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80052b8:	4b0c      	ldr	r3, [pc, #48]	; (80052ec <UART_SetConfig+0x118>)
 80052ba:	fba3 0302 	umull	r0, r3, r3, r2
 80052be:	095b      	lsrs	r3, r3, #5
 80052c0:	2064      	movs	r0, #100	; 0x64
 80052c2:	fb00 f303 	mul.w	r3, r0, r3
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	011b      	lsls	r3, r3, #4
 80052ca:	3332      	adds	r3, #50	; 0x32
 80052cc:	4a07      	ldr	r2, [pc, #28]	; (80052ec <UART_SetConfig+0x118>)
 80052ce:	fba2 2303 	umull	r2, r3, r2, r3
 80052d2:	095b      	lsrs	r3, r3, #5
 80052d4:	f003 020f 	and.w	r2, r3, #15
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	440a      	add	r2, r1
 80052de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80052e0:	bf00      	nop
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	40013800 	.word	0x40013800
 80052ec:	51eb851f 	.word	0x51eb851f

080052f0 <memset>:
 80052f0:	4603      	mov	r3, r0
 80052f2:	4402      	add	r2, r0
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d100      	bne.n	80052fa <memset+0xa>
 80052f8:	4770      	bx	lr
 80052fa:	f803 1b01 	strb.w	r1, [r3], #1
 80052fe:	e7f9      	b.n	80052f4 <memset+0x4>

08005300 <__libc_init_array>:
 8005300:	b570      	push	{r4, r5, r6, lr}
 8005302:	2600      	movs	r6, #0
 8005304:	4d0c      	ldr	r5, [pc, #48]	; (8005338 <__libc_init_array+0x38>)
 8005306:	4c0d      	ldr	r4, [pc, #52]	; (800533c <__libc_init_array+0x3c>)
 8005308:	1b64      	subs	r4, r4, r5
 800530a:	10a4      	asrs	r4, r4, #2
 800530c:	42a6      	cmp	r6, r4
 800530e:	d109      	bne.n	8005324 <__libc_init_array+0x24>
 8005310:	f000 f81a 	bl	8005348 <_init>
 8005314:	2600      	movs	r6, #0
 8005316:	4d0a      	ldr	r5, [pc, #40]	; (8005340 <__libc_init_array+0x40>)
 8005318:	4c0a      	ldr	r4, [pc, #40]	; (8005344 <__libc_init_array+0x44>)
 800531a:	1b64      	subs	r4, r4, r5
 800531c:	10a4      	asrs	r4, r4, #2
 800531e:	42a6      	cmp	r6, r4
 8005320:	d105      	bne.n	800532e <__libc_init_array+0x2e>
 8005322:	bd70      	pop	{r4, r5, r6, pc}
 8005324:	f855 3b04 	ldr.w	r3, [r5], #4
 8005328:	4798      	blx	r3
 800532a:	3601      	adds	r6, #1
 800532c:	e7ee      	b.n	800530c <__libc_init_array+0xc>
 800532e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005332:	4798      	blx	r3
 8005334:	3601      	adds	r6, #1
 8005336:	e7f2      	b.n	800531e <__libc_init_array+0x1e>
 8005338:	080053a0 	.word	0x080053a0
 800533c:	080053a0 	.word	0x080053a0
 8005340:	080053a0 	.word	0x080053a0
 8005344:	080053a4 	.word	0x080053a4

08005348 <_init>:
 8005348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800534a:	bf00      	nop
 800534c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800534e:	bc08      	pop	{r3}
 8005350:	469e      	mov	lr, r3
 8005352:	4770      	bx	lr

08005354 <_fini>:
 8005354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005356:	bf00      	nop
 8005358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800535a:	bc08      	pop	{r3}
 800535c:	469e      	mov	lr, r3
 800535e:	4770      	bx	lr
