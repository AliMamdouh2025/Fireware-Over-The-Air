
BootloaderApplication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001654  0800810c  0800810c  0000810c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009760  08009760  00009760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097a0  080097a0  00010028  2**0
                  CONTENTS
  4 .ARM          00000000  080097a0  080097a0  00010028  2**0
                  CONTENTS
  5 .preinit_array 00000000  080097a0  080097a0  00010028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097a0  080097a0  000097a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097a4  080097a4  000097a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  080097a8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000028  080097d0  00010028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  080097d0  00010090  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010028  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010051  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006b84  00000000  00000000  00010094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001383  00000000  00000000  00016c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005f8  00000000  00000000  00017fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000048e  00000000  00000000  00018598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015d6a  00000000  00000000  00018a26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007347  00000000  00000000  0002e790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007e1c7  00000000  00000000  00035ad7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000016fc  00000000  00000000  000b3ca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000b539c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800810c <__do_global_dtors_aux>:
 800810c:	b510      	push	{r4, lr}
 800810e:	4c05      	ldr	r4, [pc, #20]	; (8008124 <__do_global_dtors_aux+0x18>)
 8008110:	7823      	ldrb	r3, [r4, #0]
 8008112:	b933      	cbnz	r3, 8008122 <__do_global_dtors_aux+0x16>
 8008114:	4b04      	ldr	r3, [pc, #16]	; (8008128 <__do_global_dtors_aux+0x1c>)
 8008116:	b113      	cbz	r3, 800811e <__do_global_dtors_aux+0x12>
 8008118:	4804      	ldr	r0, [pc, #16]	; (800812c <__do_global_dtors_aux+0x20>)
 800811a:	f3af 8000 	nop.w
 800811e:	2301      	movs	r3, #1
 8008120:	7023      	strb	r3, [r4, #0]
 8008122:	bd10      	pop	{r4, pc}
 8008124:	20000028 	.word	0x20000028
 8008128:	00000000 	.word	0x00000000
 800812c:	08009748 	.word	0x08009748

08008130 <frame_dummy>:
 8008130:	b508      	push	{r3, lr}
 8008132:	4b03      	ldr	r3, [pc, #12]	; (8008140 <frame_dummy+0x10>)
 8008134:	b11b      	cbz	r3, 800813e <frame_dummy+0xe>
 8008136:	4903      	ldr	r1, [pc, #12]	; (8008144 <frame_dummy+0x14>)
 8008138:	4803      	ldr	r0, [pc, #12]	; (8008148 <frame_dummy+0x18>)
 800813a:	f3af 8000 	nop.w
 800813e:	bd08      	pop	{r3, pc}
 8008140:	00000000 	.word	0x00000000
 8008144:	2000002c 	.word	0x2000002c
 8008148:	08009748 	.word	0x08009748

0800814c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008150:	f000 f9b4 	bl	80084bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008154:	f000 f814 	bl	8008180 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008158:	f000 f882 	bl	8008260 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800815c:	f000 f856 	bl	800820c <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Transmit(&huart2, Message, sizeof(Message),HAL_MAX_DELAY);
 8008160:	f04f 33ff 	mov.w	r3, #4294967295
 8008164:	2219      	movs	r2, #25
 8008166:	4904      	ldr	r1, [pc, #16]	; (8008178 <main+0x2c>)
 8008168:	4804      	ldr	r0, [pc, #16]	; (800817c <main+0x30>)
 800816a:	f001 f941 	bl	80093f0 <HAL_UART_Transmit>
	  HAL_Delay(500);
 800816e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008172:	f000 fa05 	bl	8008580 <HAL_Delay>
	  HAL_UART_Transmit(&huart2, Message, sizeof(Message),HAL_MAX_DELAY);
 8008176:	e7f3      	b.n	8008160 <main+0x14>
 8008178:	20000000 	.word	0x20000000
 800817c:	20000044 	.word	0x20000044

08008180 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b090      	sub	sp, #64	; 0x40
 8008184:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008186:	f107 0318 	add.w	r3, r7, #24
 800818a:	2228      	movs	r2, #40	; 0x28
 800818c:	2100      	movs	r1, #0
 800818e:	4618      	mov	r0, r3
 8008190:	f001 faae 	bl	80096f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008194:	1d3b      	adds	r3, r7, #4
 8008196:	2200      	movs	r2, #0
 8008198:	601a      	str	r2, [r3, #0]
 800819a:	605a      	str	r2, [r3, #4]
 800819c:	609a      	str	r2, [r3, #8]
 800819e:	60da      	str	r2, [r3, #12]
 80081a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80081a2:	2301      	movs	r3, #1
 80081a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80081a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80081aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80081ac:	2300      	movs	r3, #0
 80081ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80081b0:	2301      	movs	r3, #1
 80081b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80081b4:	2302      	movs	r3, #2
 80081b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80081b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80081bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80081be:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80081c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80081c4:	f107 0318 	add.w	r3, r7, #24
 80081c8:	4618      	mov	r0, r3
 80081ca:	f000 fcb1 	bl	8008b30 <HAL_RCC_OscConfig>
 80081ce:	4603      	mov	r3, r0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d001      	beq.n	80081d8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80081d4:	f000 f884 	bl	80082e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80081d8:	230f      	movs	r3, #15
 80081da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80081dc:	2302      	movs	r3, #2
 80081de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80081e0:	2300      	movs	r3, #0
 80081e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80081e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80081ea:	2300      	movs	r3, #0
 80081ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80081ee:	1d3b      	adds	r3, r7, #4
 80081f0:	2102      	movs	r1, #2
 80081f2:	4618      	mov	r0, r3
 80081f4:	f000 ff1e 	bl	8009034 <HAL_RCC_ClockConfig>
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d001      	beq.n	8008202 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80081fe:	f000 f86f 	bl	80082e0 <Error_Handler>
  }
}
 8008202:	bf00      	nop
 8008204:	3740      	adds	r7, #64	; 0x40
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
	...

0800820c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008210:	4b11      	ldr	r3, [pc, #68]	; (8008258 <MX_USART2_UART_Init+0x4c>)
 8008212:	4a12      	ldr	r2, [pc, #72]	; (800825c <MX_USART2_UART_Init+0x50>)
 8008214:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8008216:	4b10      	ldr	r3, [pc, #64]	; (8008258 <MX_USART2_UART_Init+0x4c>)
 8008218:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800821c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800821e:	4b0e      	ldr	r3, [pc, #56]	; (8008258 <MX_USART2_UART_Init+0x4c>)
 8008220:	2200      	movs	r2, #0
 8008222:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008224:	4b0c      	ldr	r3, [pc, #48]	; (8008258 <MX_USART2_UART_Init+0x4c>)
 8008226:	2200      	movs	r2, #0
 8008228:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800822a:	4b0b      	ldr	r3, [pc, #44]	; (8008258 <MX_USART2_UART_Init+0x4c>)
 800822c:	2200      	movs	r2, #0
 800822e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008230:	4b09      	ldr	r3, [pc, #36]	; (8008258 <MX_USART2_UART_Init+0x4c>)
 8008232:	220c      	movs	r2, #12
 8008234:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008236:	4b08      	ldr	r3, [pc, #32]	; (8008258 <MX_USART2_UART_Init+0x4c>)
 8008238:	2200      	movs	r2, #0
 800823a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800823c:	4b06      	ldr	r3, [pc, #24]	; (8008258 <MX_USART2_UART_Init+0x4c>)
 800823e:	2200      	movs	r2, #0
 8008240:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008242:	4805      	ldr	r0, [pc, #20]	; (8008258 <MX_USART2_UART_Init+0x4c>)
 8008244:	f001 f884 	bl	8009350 <HAL_UART_Init>
 8008248:	4603      	mov	r3, r0
 800824a:	2b00      	cmp	r3, #0
 800824c:	d001      	beq.n	8008252 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800824e:	f000 f847 	bl	80082e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008252:	bf00      	nop
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	20000044 	.word	0x20000044
 800825c:	40004400 	.word	0x40004400

08008260 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b086      	sub	sp, #24
 8008264:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008266:	f107 0308 	add.w	r3, r7, #8
 800826a:	2200      	movs	r2, #0
 800826c:	601a      	str	r2, [r3, #0]
 800826e:	605a      	str	r2, [r3, #4]
 8008270:	609a      	str	r2, [r3, #8]
 8008272:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008274:	4b17      	ldr	r3, [pc, #92]	; (80082d4 <MX_GPIO_Init+0x74>)
 8008276:	699b      	ldr	r3, [r3, #24]
 8008278:	4a16      	ldr	r2, [pc, #88]	; (80082d4 <MX_GPIO_Init+0x74>)
 800827a:	f043 0320 	orr.w	r3, r3, #32
 800827e:	6193      	str	r3, [r2, #24]
 8008280:	4b14      	ldr	r3, [pc, #80]	; (80082d4 <MX_GPIO_Init+0x74>)
 8008282:	699b      	ldr	r3, [r3, #24]
 8008284:	f003 0320 	and.w	r3, r3, #32
 8008288:	607b      	str	r3, [r7, #4]
 800828a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800828c:	4b11      	ldr	r3, [pc, #68]	; (80082d4 <MX_GPIO_Init+0x74>)
 800828e:	699b      	ldr	r3, [r3, #24]
 8008290:	4a10      	ldr	r2, [pc, #64]	; (80082d4 <MX_GPIO_Init+0x74>)
 8008292:	f043 0304 	orr.w	r3, r3, #4
 8008296:	6193      	str	r3, [r2, #24]
 8008298:	4b0e      	ldr	r3, [pc, #56]	; (80082d4 <MX_GPIO_Init+0x74>)
 800829a:	699b      	ldr	r3, [r3, #24]
 800829c:	f003 0304 	and.w	r3, r3, #4
 80082a0:	603b      	str	r3, [r7, #0]
 80082a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80082a4:	2301      	movs	r3, #1
 80082a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80082a8:	4b0b      	ldr	r3, [pc, #44]	; (80082d8 <MX_GPIO_Init+0x78>)
 80082aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082ac:	2300      	movs	r3, #0
 80082ae:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082b0:	f107 0308 	add.w	r3, r7, #8
 80082b4:	4619      	mov	r1, r3
 80082b6:	4809      	ldr	r0, [pc, #36]	; (80082dc <MX_GPIO_Init+0x7c>)
 80082b8:	f000 fa94 	bl	80087e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80082bc:	2200      	movs	r2, #0
 80082be:	2100      	movs	r1, #0
 80082c0:	2006      	movs	r0, #6
 80082c2:	f000 fa58 	bl	8008776 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80082c6:	2006      	movs	r0, #6
 80082c8:	f000 fa71 	bl	80087ae <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80082cc:	bf00      	nop
 80082ce:	3718      	adds	r7, #24
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	40021000 	.word	0x40021000
 80082d8:	10110000 	.word	0x10110000
 80082dc:	40010800 	.word	0x40010800

080082e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80082e0:	b480      	push	{r7}
 80082e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80082e4:	b672      	cpsid	i
}
 80082e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80082e8:	e7fe      	b.n	80082e8 <Error_Handler+0x8>
	...

080082ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80082f2:	4b0e      	ldr	r3, [pc, #56]	; (800832c <HAL_MspInit+0x40>)
 80082f4:	699b      	ldr	r3, [r3, #24]
 80082f6:	4a0d      	ldr	r2, [pc, #52]	; (800832c <HAL_MspInit+0x40>)
 80082f8:	f043 0301 	orr.w	r3, r3, #1
 80082fc:	6193      	str	r3, [r2, #24]
 80082fe:	4b0b      	ldr	r3, [pc, #44]	; (800832c <HAL_MspInit+0x40>)
 8008300:	699b      	ldr	r3, [r3, #24]
 8008302:	f003 0301 	and.w	r3, r3, #1
 8008306:	607b      	str	r3, [r7, #4]
 8008308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800830a:	4b08      	ldr	r3, [pc, #32]	; (800832c <HAL_MspInit+0x40>)
 800830c:	69db      	ldr	r3, [r3, #28]
 800830e:	4a07      	ldr	r2, [pc, #28]	; (800832c <HAL_MspInit+0x40>)
 8008310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008314:	61d3      	str	r3, [r2, #28]
 8008316:	4b05      	ldr	r3, [pc, #20]	; (800832c <HAL_MspInit+0x40>)
 8008318:	69db      	ldr	r3, [r3, #28]
 800831a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800831e:	603b      	str	r3, [r7, #0]
 8008320:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008322:	bf00      	nop
 8008324:	370c      	adds	r7, #12
 8008326:	46bd      	mov	sp, r7
 8008328:	bc80      	pop	{r7}
 800832a:	4770      	bx	lr
 800832c:	40021000 	.word	0x40021000

08008330 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b088      	sub	sp, #32
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008338:	f107 0310 	add.w	r3, r7, #16
 800833c:	2200      	movs	r2, #0
 800833e:	601a      	str	r2, [r3, #0]
 8008340:	605a      	str	r2, [r3, #4]
 8008342:	609a      	str	r2, [r3, #8]
 8008344:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a1b      	ldr	r2, [pc, #108]	; (80083b8 <HAL_UART_MspInit+0x88>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d12f      	bne.n	80083b0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008350:	4b1a      	ldr	r3, [pc, #104]	; (80083bc <HAL_UART_MspInit+0x8c>)
 8008352:	69db      	ldr	r3, [r3, #28]
 8008354:	4a19      	ldr	r2, [pc, #100]	; (80083bc <HAL_UART_MspInit+0x8c>)
 8008356:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800835a:	61d3      	str	r3, [r2, #28]
 800835c:	4b17      	ldr	r3, [pc, #92]	; (80083bc <HAL_UART_MspInit+0x8c>)
 800835e:	69db      	ldr	r3, [r3, #28]
 8008360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008364:	60fb      	str	r3, [r7, #12]
 8008366:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008368:	4b14      	ldr	r3, [pc, #80]	; (80083bc <HAL_UART_MspInit+0x8c>)
 800836a:	699b      	ldr	r3, [r3, #24]
 800836c:	4a13      	ldr	r2, [pc, #76]	; (80083bc <HAL_UART_MspInit+0x8c>)
 800836e:	f043 0304 	orr.w	r3, r3, #4
 8008372:	6193      	str	r3, [r2, #24]
 8008374:	4b11      	ldr	r3, [pc, #68]	; (80083bc <HAL_UART_MspInit+0x8c>)
 8008376:	699b      	ldr	r3, [r3, #24]
 8008378:	f003 0304 	and.w	r3, r3, #4
 800837c:	60bb      	str	r3, [r7, #8]
 800837e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008380:	2304      	movs	r3, #4
 8008382:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008384:	2302      	movs	r3, #2
 8008386:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008388:	2303      	movs	r3, #3
 800838a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800838c:	f107 0310 	add.w	r3, r7, #16
 8008390:	4619      	mov	r1, r3
 8008392:	480b      	ldr	r0, [pc, #44]	; (80083c0 <HAL_UART_MspInit+0x90>)
 8008394:	f000 fa26 	bl	80087e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8008398:	2308      	movs	r3, #8
 800839a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800839c:	2300      	movs	r3, #0
 800839e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083a0:	2300      	movs	r3, #0
 80083a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083a4:	f107 0310 	add.w	r3, r7, #16
 80083a8:	4619      	mov	r1, r3
 80083aa:	4805      	ldr	r0, [pc, #20]	; (80083c0 <HAL_UART_MspInit+0x90>)
 80083ac:	f000 fa1a 	bl	80087e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80083b0:	bf00      	nop
 80083b2:	3720      	adds	r7, #32
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}
 80083b8:	40004400 	.word	0x40004400
 80083bc:	40021000 	.word	0x40021000
 80083c0:	40010800 	.word	0x40010800

080083c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80083c4:	b480      	push	{r7}
 80083c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80083c8:	e7fe      	b.n	80083c8 <NMI_Handler+0x4>

080083ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80083ca:	b480      	push	{r7}
 80083cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80083ce:	e7fe      	b.n	80083ce <HardFault_Handler+0x4>

080083d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80083d0:	b480      	push	{r7}
 80083d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80083d4:	e7fe      	b.n	80083d4 <MemManage_Handler+0x4>

080083d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80083d6:	b480      	push	{r7}
 80083d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80083da:	e7fe      	b.n	80083da <BusFault_Handler+0x4>

080083dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80083dc:	b480      	push	{r7}
 80083de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80083e0:	e7fe      	b.n	80083e0 <UsageFault_Handler+0x4>

080083e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80083e2:	b480      	push	{r7}
 80083e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80083e6:	bf00      	nop
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bc80      	pop	{r7}
 80083ec:	4770      	bx	lr

080083ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80083ee:	b480      	push	{r7}
 80083f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80083f2:	bf00      	nop
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bc80      	pop	{r7}
 80083f8:	4770      	bx	lr

080083fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80083fa:	b480      	push	{r7}
 80083fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80083fe:	bf00      	nop
 8008400:	46bd      	mov	sp, r7
 8008402:	bc80      	pop	{r7}
 8008404:	4770      	bx	lr

08008406 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008406:	b580      	push	{r7, lr}
 8008408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800840a:	f000 f89d 	bl	8008548 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800840e:	bf00      	nop
 8008410:	bd80      	pop	{r7, pc}
	...

08008414 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8008414:	b5b0      	push	{r4, r5, r7, lr}
 8008416:	b086      	sub	sp, #24
 8008418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	uint8_t Message_EXTI0[] = "EXTI0 is running\r\n";
 800841a:	4b0c      	ldr	r3, [pc, #48]	; (800844c <EXTI0_IRQHandler+0x38>)
 800841c:	1d3c      	adds	r4, r7, #4
 800841e:	461d      	mov	r5, r3
 8008420:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008422:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008424:	682b      	ldr	r3, [r5, #0]
 8008426:	461a      	mov	r2, r3
 8008428:	8022      	strh	r2, [r4, #0]
 800842a:	3402      	adds	r4, #2
 800842c:	0c1b      	lsrs	r3, r3, #16
 800842e:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)Message_EXTI0, sizeof(Message_EXTI0),HAL_MAX_DELAY);
 8008430:	1d39      	adds	r1, r7, #4
 8008432:	f04f 33ff 	mov.w	r3, #4294967295
 8008436:	2213      	movs	r2, #19
 8008438:	4805      	ldr	r0, [pc, #20]	; (8008450 <EXTI0_IRQHandler+0x3c>)
 800843a:	f000 ffd9 	bl	80093f0 <HAL_UART_Transmit>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800843e:	2001      	movs	r0, #1
 8008440:	f000 fb54 	bl	8008aec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8008444:	bf00      	nop
 8008446:	3718      	adds	r7, #24
 8008448:	46bd      	mov	sp, r7
 800844a:	bdb0      	pop	{r4, r5, r7, pc}
 800844c:	08009760 	.word	0x08009760
 8008450:	20000044 	.word	0x20000044

08008454 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008454:	b480      	push	{r7}
 8008456:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | 0x8000; /* Vector Table Relocation in Internal FLASH. */
 8008458:	4b03      	ldr	r3, [pc, #12]	; (8008468 <SystemInit+0x14>)
 800845a:	4a04      	ldr	r2, [pc, #16]	; (800846c <SystemInit+0x18>)
 800845c:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 800845e:	bf00      	nop
 8008460:	46bd      	mov	sp, r7
 8008462:	bc80      	pop	{r7}
 8008464:	4770      	bx	lr
 8008466:	bf00      	nop
 8008468:	e000ed00 	.word	0xe000ed00
 800846c:	08008000 	.word	0x08008000

08008470 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8008470:	f7ff fff0 	bl	8008454 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008474:	480b      	ldr	r0, [pc, #44]	; (80084a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8008476:	490c      	ldr	r1, [pc, #48]	; (80084a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8008478:	4a0c      	ldr	r2, [pc, #48]	; (80084ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800847a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800847c:	e002      	b.n	8008484 <LoopCopyDataInit>

0800847e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800847e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008482:	3304      	adds	r3, #4

08008484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008488:	d3f9      	bcc.n	800847e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800848a:	4a09      	ldr	r2, [pc, #36]	; (80084b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800848c:	4c09      	ldr	r4, [pc, #36]	; (80084b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800848e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008490:	e001      	b.n	8008496 <LoopFillZerobss>

08008492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008494:	3204      	adds	r2, #4

08008496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008498:	d3fb      	bcc.n	8008492 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800849a:	f001 f931 	bl	8009700 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800849e:	f7ff fe55 	bl	800814c <main>
  bx lr
 80084a2:	4770      	bx	lr
  ldr r0, =_sdata
 80084a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80084a8:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 80084ac:	080097a8 	.word	0x080097a8
  ldr r2, =_sbss
 80084b0:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 80084b4:	20000090 	.word	0x20000090

080084b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80084b8:	e7fe      	b.n	80084b8 <ADC1_2_IRQHandler>
	...

080084bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80084c0:	4b08      	ldr	r3, [pc, #32]	; (80084e4 <HAL_Init+0x28>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a07      	ldr	r2, [pc, #28]	; (80084e4 <HAL_Init+0x28>)
 80084c6:	f043 0310 	orr.w	r3, r3, #16
 80084ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80084cc:	2003      	movs	r0, #3
 80084ce:	f000 f947 	bl	8008760 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80084d2:	200f      	movs	r0, #15
 80084d4:	f000 f808 	bl	80084e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80084d8:	f7ff ff08 	bl	80082ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80084dc:	2300      	movs	r3, #0
}
 80084de:	4618      	mov	r0, r3
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	40022000 	.word	0x40022000

080084e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80084f0:	4b12      	ldr	r3, [pc, #72]	; (800853c <HAL_InitTick+0x54>)
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	4b12      	ldr	r3, [pc, #72]	; (8008540 <HAL_InitTick+0x58>)
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	4619      	mov	r1, r3
 80084fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80084fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8008502:	fbb2 f3f3 	udiv	r3, r2, r3
 8008506:	4618      	mov	r0, r3
 8008508:	f000 f95f 	bl	80087ca <HAL_SYSTICK_Config>
 800850c:	4603      	mov	r3, r0
 800850e:	2b00      	cmp	r3, #0
 8008510:	d001      	beq.n	8008516 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008512:	2301      	movs	r3, #1
 8008514:	e00e      	b.n	8008534 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2b0f      	cmp	r3, #15
 800851a:	d80a      	bhi.n	8008532 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800851c:	2200      	movs	r2, #0
 800851e:	6879      	ldr	r1, [r7, #4]
 8008520:	f04f 30ff 	mov.w	r0, #4294967295
 8008524:	f000 f927 	bl	8008776 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008528:	4a06      	ldr	r2, [pc, #24]	; (8008544 <HAL_InitTick+0x5c>)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800852e:	2300      	movs	r3, #0
 8008530:	e000      	b.n	8008534 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008532:	2301      	movs	r3, #1
}
 8008534:	4618      	mov	r0, r3
 8008536:	3708      	adds	r7, #8
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}
 800853c:	2000001c 	.word	0x2000001c
 8008540:	20000024 	.word	0x20000024
 8008544:	20000020 	.word	0x20000020

08008548 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008548:	b480      	push	{r7}
 800854a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800854c:	4b05      	ldr	r3, [pc, #20]	; (8008564 <HAL_IncTick+0x1c>)
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	461a      	mov	r2, r3
 8008552:	4b05      	ldr	r3, [pc, #20]	; (8008568 <HAL_IncTick+0x20>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4413      	add	r3, r2
 8008558:	4a03      	ldr	r2, [pc, #12]	; (8008568 <HAL_IncTick+0x20>)
 800855a:	6013      	str	r3, [r2, #0]
}
 800855c:	bf00      	nop
 800855e:	46bd      	mov	sp, r7
 8008560:	bc80      	pop	{r7}
 8008562:	4770      	bx	lr
 8008564:	20000024 	.word	0x20000024
 8008568:	2000008c 	.word	0x2000008c

0800856c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800856c:	b480      	push	{r7}
 800856e:	af00      	add	r7, sp, #0
  return uwTick;
 8008570:	4b02      	ldr	r3, [pc, #8]	; (800857c <HAL_GetTick+0x10>)
 8008572:	681b      	ldr	r3, [r3, #0]
}
 8008574:	4618      	mov	r0, r3
 8008576:	46bd      	mov	sp, r7
 8008578:	bc80      	pop	{r7}
 800857a:	4770      	bx	lr
 800857c:	2000008c 	.word	0x2000008c

08008580 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008588:	f7ff fff0 	bl	800856c <HAL_GetTick>
 800858c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008598:	d005      	beq.n	80085a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800859a:	4b0a      	ldr	r3, [pc, #40]	; (80085c4 <HAL_Delay+0x44>)
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	461a      	mov	r2, r3
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	4413      	add	r3, r2
 80085a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80085a6:	bf00      	nop
 80085a8:	f7ff ffe0 	bl	800856c <HAL_GetTick>
 80085ac:	4602      	mov	r2, r0
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	1ad3      	subs	r3, r2, r3
 80085b2:	68fa      	ldr	r2, [r7, #12]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d8f7      	bhi.n	80085a8 <HAL_Delay+0x28>
  {
  }
}
 80085b8:	bf00      	nop
 80085ba:	bf00      	nop
 80085bc:	3710      	adds	r7, #16
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	bf00      	nop
 80085c4:	20000024 	.word	0x20000024

080085c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b085      	sub	sp, #20
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f003 0307 	and.w	r3, r3, #7
 80085d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80085d8:	4b0c      	ldr	r3, [pc, #48]	; (800860c <__NVIC_SetPriorityGrouping+0x44>)
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80085de:	68ba      	ldr	r2, [r7, #8]
 80085e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80085e4:	4013      	ands	r3, r2
 80085e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80085f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80085f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80085fa:	4a04      	ldr	r2, [pc, #16]	; (800860c <__NVIC_SetPriorityGrouping+0x44>)
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	60d3      	str	r3, [r2, #12]
}
 8008600:	bf00      	nop
 8008602:	3714      	adds	r7, #20
 8008604:	46bd      	mov	sp, r7
 8008606:	bc80      	pop	{r7}
 8008608:	4770      	bx	lr
 800860a:	bf00      	nop
 800860c:	e000ed00 	.word	0xe000ed00

08008610 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008610:	b480      	push	{r7}
 8008612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008614:	4b04      	ldr	r3, [pc, #16]	; (8008628 <__NVIC_GetPriorityGrouping+0x18>)
 8008616:	68db      	ldr	r3, [r3, #12]
 8008618:	0a1b      	lsrs	r3, r3, #8
 800861a:	f003 0307 	and.w	r3, r3, #7
}
 800861e:	4618      	mov	r0, r3
 8008620:	46bd      	mov	sp, r7
 8008622:	bc80      	pop	{r7}
 8008624:	4770      	bx	lr
 8008626:	bf00      	nop
 8008628:	e000ed00 	.word	0xe000ed00

0800862c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800862c:	b480      	push	{r7}
 800862e:	b083      	sub	sp, #12
 8008630:	af00      	add	r7, sp, #0
 8008632:	4603      	mov	r3, r0
 8008634:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800863a:	2b00      	cmp	r3, #0
 800863c:	db0b      	blt.n	8008656 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800863e:	79fb      	ldrb	r3, [r7, #7]
 8008640:	f003 021f 	and.w	r2, r3, #31
 8008644:	4906      	ldr	r1, [pc, #24]	; (8008660 <__NVIC_EnableIRQ+0x34>)
 8008646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800864a:	095b      	lsrs	r3, r3, #5
 800864c:	2001      	movs	r0, #1
 800864e:	fa00 f202 	lsl.w	r2, r0, r2
 8008652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008656:	bf00      	nop
 8008658:	370c      	adds	r7, #12
 800865a:	46bd      	mov	sp, r7
 800865c:	bc80      	pop	{r7}
 800865e:	4770      	bx	lr
 8008660:	e000e100 	.word	0xe000e100

08008664 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008664:	b480      	push	{r7}
 8008666:	b083      	sub	sp, #12
 8008668:	af00      	add	r7, sp, #0
 800866a:	4603      	mov	r3, r0
 800866c:	6039      	str	r1, [r7, #0]
 800866e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008674:	2b00      	cmp	r3, #0
 8008676:	db0a      	blt.n	800868e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	b2da      	uxtb	r2, r3
 800867c:	490c      	ldr	r1, [pc, #48]	; (80086b0 <__NVIC_SetPriority+0x4c>)
 800867e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008682:	0112      	lsls	r2, r2, #4
 8008684:	b2d2      	uxtb	r2, r2
 8008686:	440b      	add	r3, r1
 8008688:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800868c:	e00a      	b.n	80086a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	b2da      	uxtb	r2, r3
 8008692:	4908      	ldr	r1, [pc, #32]	; (80086b4 <__NVIC_SetPriority+0x50>)
 8008694:	79fb      	ldrb	r3, [r7, #7]
 8008696:	f003 030f 	and.w	r3, r3, #15
 800869a:	3b04      	subs	r3, #4
 800869c:	0112      	lsls	r2, r2, #4
 800869e:	b2d2      	uxtb	r2, r2
 80086a0:	440b      	add	r3, r1
 80086a2:	761a      	strb	r2, [r3, #24]
}
 80086a4:	bf00      	nop
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bc80      	pop	{r7}
 80086ac:	4770      	bx	lr
 80086ae:	bf00      	nop
 80086b0:	e000e100 	.word	0xe000e100
 80086b4:	e000ed00 	.word	0xe000ed00

080086b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b089      	sub	sp, #36	; 0x24
 80086bc:	af00      	add	r7, sp, #0
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	60b9      	str	r1, [r7, #8]
 80086c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f003 0307 	and.w	r3, r3, #7
 80086ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	f1c3 0307 	rsb	r3, r3, #7
 80086d2:	2b04      	cmp	r3, #4
 80086d4:	bf28      	it	cs
 80086d6:	2304      	movcs	r3, #4
 80086d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80086da:	69fb      	ldr	r3, [r7, #28]
 80086dc:	3304      	adds	r3, #4
 80086de:	2b06      	cmp	r3, #6
 80086e0:	d902      	bls.n	80086e8 <NVIC_EncodePriority+0x30>
 80086e2:	69fb      	ldr	r3, [r7, #28]
 80086e4:	3b03      	subs	r3, #3
 80086e6:	e000      	b.n	80086ea <NVIC_EncodePriority+0x32>
 80086e8:	2300      	movs	r3, #0
 80086ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80086ec:	f04f 32ff 	mov.w	r2, #4294967295
 80086f0:	69bb      	ldr	r3, [r7, #24]
 80086f2:	fa02 f303 	lsl.w	r3, r2, r3
 80086f6:	43da      	mvns	r2, r3
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	401a      	ands	r2, r3
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008700:	f04f 31ff 	mov.w	r1, #4294967295
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	fa01 f303 	lsl.w	r3, r1, r3
 800870a:	43d9      	mvns	r1, r3
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008710:	4313      	orrs	r3, r2
         );
}
 8008712:	4618      	mov	r0, r3
 8008714:	3724      	adds	r7, #36	; 0x24
 8008716:	46bd      	mov	sp, r7
 8008718:	bc80      	pop	{r7}
 800871a:	4770      	bx	lr

0800871c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	3b01      	subs	r3, #1
 8008728:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800872c:	d301      	bcc.n	8008732 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800872e:	2301      	movs	r3, #1
 8008730:	e00f      	b.n	8008752 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008732:	4a0a      	ldr	r2, [pc, #40]	; (800875c <SysTick_Config+0x40>)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	3b01      	subs	r3, #1
 8008738:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800873a:	210f      	movs	r1, #15
 800873c:	f04f 30ff 	mov.w	r0, #4294967295
 8008740:	f7ff ff90 	bl	8008664 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008744:	4b05      	ldr	r3, [pc, #20]	; (800875c <SysTick_Config+0x40>)
 8008746:	2200      	movs	r2, #0
 8008748:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800874a:	4b04      	ldr	r3, [pc, #16]	; (800875c <SysTick_Config+0x40>)
 800874c:	2207      	movs	r2, #7
 800874e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008750:	2300      	movs	r3, #0
}
 8008752:	4618      	mov	r0, r3
 8008754:	3708      	adds	r7, #8
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	e000e010 	.word	0xe000e010

08008760 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b082      	sub	sp, #8
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f7ff ff2d 	bl	80085c8 <__NVIC_SetPriorityGrouping>
}
 800876e:	bf00      	nop
 8008770:	3708      	adds	r7, #8
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008776:	b580      	push	{r7, lr}
 8008778:	b086      	sub	sp, #24
 800877a:	af00      	add	r7, sp, #0
 800877c:	4603      	mov	r3, r0
 800877e:	60b9      	str	r1, [r7, #8]
 8008780:	607a      	str	r2, [r7, #4]
 8008782:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008784:	2300      	movs	r3, #0
 8008786:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008788:	f7ff ff42 	bl	8008610 <__NVIC_GetPriorityGrouping>
 800878c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	68b9      	ldr	r1, [r7, #8]
 8008792:	6978      	ldr	r0, [r7, #20]
 8008794:	f7ff ff90 	bl	80086b8 <NVIC_EncodePriority>
 8008798:	4602      	mov	r2, r0
 800879a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800879e:	4611      	mov	r1, r2
 80087a0:	4618      	mov	r0, r3
 80087a2:	f7ff ff5f 	bl	8008664 <__NVIC_SetPriority>
}
 80087a6:	bf00      	nop
 80087a8:	3718      	adds	r7, #24
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}

080087ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80087ae:	b580      	push	{r7, lr}
 80087b0:	b082      	sub	sp, #8
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	4603      	mov	r3, r0
 80087b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80087b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087bc:	4618      	mov	r0, r3
 80087be:	f7ff ff35 	bl	800862c <__NVIC_EnableIRQ>
}
 80087c2:	bf00      	nop
 80087c4:	3708      	adds	r7, #8
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}

080087ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80087ca:	b580      	push	{r7, lr}
 80087cc:	b082      	sub	sp, #8
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f7ff ffa2 	bl	800871c <SysTick_Config>
 80087d8:	4603      	mov	r3, r0
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3708      	adds	r7, #8
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
	...

080087e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b08b      	sub	sp, #44	; 0x2c
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80087ee:	2300      	movs	r3, #0
 80087f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80087f2:	2300      	movs	r3, #0
 80087f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80087f6:	e169      	b.n	8008acc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80087f8:	2201      	movs	r2, #1
 80087fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008800:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	69fa      	ldr	r2, [r7, #28]
 8008808:	4013      	ands	r3, r2
 800880a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800880c:	69ba      	ldr	r2, [r7, #24]
 800880e:	69fb      	ldr	r3, [r7, #28]
 8008810:	429a      	cmp	r2, r3
 8008812:	f040 8158 	bne.w	8008ac6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	4a9a      	ldr	r2, [pc, #616]	; (8008a84 <HAL_GPIO_Init+0x2a0>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d05e      	beq.n	80088de <HAL_GPIO_Init+0xfa>
 8008820:	4a98      	ldr	r2, [pc, #608]	; (8008a84 <HAL_GPIO_Init+0x2a0>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d875      	bhi.n	8008912 <HAL_GPIO_Init+0x12e>
 8008826:	4a98      	ldr	r2, [pc, #608]	; (8008a88 <HAL_GPIO_Init+0x2a4>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d058      	beq.n	80088de <HAL_GPIO_Init+0xfa>
 800882c:	4a96      	ldr	r2, [pc, #600]	; (8008a88 <HAL_GPIO_Init+0x2a4>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d86f      	bhi.n	8008912 <HAL_GPIO_Init+0x12e>
 8008832:	4a96      	ldr	r2, [pc, #600]	; (8008a8c <HAL_GPIO_Init+0x2a8>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d052      	beq.n	80088de <HAL_GPIO_Init+0xfa>
 8008838:	4a94      	ldr	r2, [pc, #592]	; (8008a8c <HAL_GPIO_Init+0x2a8>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d869      	bhi.n	8008912 <HAL_GPIO_Init+0x12e>
 800883e:	4a94      	ldr	r2, [pc, #592]	; (8008a90 <HAL_GPIO_Init+0x2ac>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d04c      	beq.n	80088de <HAL_GPIO_Init+0xfa>
 8008844:	4a92      	ldr	r2, [pc, #584]	; (8008a90 <HAL_GPIO_Init+0x2ac>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d863      	bhi.n	8008912 <HAL_GPIO_Init+0x12e>
 800884a:	4a92      	ldr	r2, [pc, #584]	; (8008a94 <HAL_GPIO_Init+0x2b0>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d046      	beq.n	80088de <HAL_GPIO_Init+0xfa>
 8008850:	4a90      	ldr	r2, [pc, #576]	; (8008a94 <HAL_GPIO_Init+0x2b0>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d85d      	bhi.n	8008912 <HAL_GPIO_Init+0x12e>
 8008856:	2b12      	cmp	r3, #18
 8008858:	d82a      	bhi.n	80088b0 <HAL_GPIO_Init+0xcc>
 800885a:	2b12      	cmp	r3, #18
 800885c:	d859      	bhi.n	8008912 <HAL_GPIO_Init+0x12e>
 800885e:	a201      	add	r2, pc, #4	; (adr r2, 8008864 <HAL_GPIO_Init+0x80>)
 8008860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008864:	080088df 	.word	0x080088df
 8008868:	080088b9 	.word	0x080088b9
 800886c:	080088cb 	.word	0x080088cb
 8008870:	0800890d 	.word	0x0800890d
 8008874:	08008913 	.word	0x08008913
 8008878:	08008913 	.word	0x08008913
 800887c:	08008913 	.word	0x08008913
 8008880:	08008913 	.word	0x08008913
 8008884:	08008913 	.word	0x08008913
 8008888:	08008913 	.word	0x08008913
 800888c:	08008913 	.word	0x08008913
 8008890:	08008913 	.word	0x08008913
 8008894:	08008913 	.word	0x08008913
 8008898:	08008913 	.word	0x08008913
 800889c:	08008913 	.word	0x08008913
 80088a0:	08008913 	.word	0x08008913
 80088a4:	08008913 	.word	0x08008913
 80088a8:	080088c1 	.word	0x080088c1
 80088ac:	080088d5 	.word	0x080088d5
 80088b0:	4a79      	ldr	r2, [pc, #484]	; (8008a98 <HAL_GPIO_Init+0x2b4>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d013      	beq.n	80088de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80088b6:	e02c      	b.n	8008912 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	623b      	str	r3, [r7, #32]
          break;
 80088be:	e029      	b.n	8008914 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	68db      	ldr	r3, [r3, #12]
 80088c4:	3304      	adds	r3, #4
 80088c6:	623b      	str	r3, [r7, #32]
          break;
 80088c8:	e024      	b.n	8008914 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	3308      	adds	r3, #8
 80088d0:	623b      	str	r3, [r7, #32]
          break;
 80088d2:	e01f      	b.n	8008914 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	330c      	adds	r3, #12
 80088da:	623b      	str	r3, [r7, #32]
          break;
 80088dc:	e01a      	b.n	8008914 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d102      	bne.n	80088ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80088e6:	2304      	movs	r3, #4
 80088e8:	623b      	str	r3, [r7, #32]
          break;
 80088ea:	e013      	b.n	8008914 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d105      	bne.n	8008900 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80088f4:	2308      	movs	r3, #8
 80088f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	69fa      	ldr	r2, [r7, #28]
 80088fc:	611a      	str	r2, [r3, #16]
          break;
 80088fe:	e009      	b.n	8008914 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008900:	2308      	movs	r3, #8
 8008902:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	69fa      	ldr	r2, [r7, #28]
 8008908:	615a      	str	r2, [r3, #20]
          break;
 800890a:	e003      	b.n	8008914 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800890c:	2300      	movs	r3, #0
 800890e:	623b      	str	r3, [r7, #32]
          break;
 8008910:	e000      	b.n	8008914 <HAL_GPIO_Init+0x130>
          break;
 8008912:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008914:	69bb      	ldr	r3, [r7, #24]
 8008916:	2bff      	cmp	r3, #255	; 0xff
 8008918:	d801      	bhi.n	800891e <HAL_GPIO_Init+0x13a>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	e001      	b.n	8008922 <HAL_GPIO_Init+0x13e>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	3304      	adds	r3, #4
 8008922:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008924:	69bb      	ldr	r3, [r7, #24]
 8008926:	2bff      	cmp	r3, #255	; 0xff
 8008928:	d802      	bhi.n	8008930 <HAL_GPIO_Init+0x14c>
 800892a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	e002      	b.n	8008936 <HAL_GPIO_Init+0x152>
 8008930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008932:	3b08      	subs	r3, #8
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	210f      	movs	r1, #15
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	fa01 f303 	lsl.w	r3, r1, r3
 8008944:	43db      	mvns	r3, r3
 8008946:	401a      	ands	r2, r3
 8008948:	6a39      	ldr	r1, [r7, #32]
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	fa01 f303 	lsl.w	r3, r1, r3
 8008950:	431a      	orrs	r2, r3
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800895e:	2b00      	cmp	r3, #0
 8008960:	f000 80b1 	beq.w	8008ac6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008964:	4b4d      	ldr	r3, [pc, #308]	; (8008a9c <HAL_GPIO_Init+0x2b8>)
 8008966:	699b      	ldr	r3, [r3, #24]
 8008968:	4a4c      	ldr	r2, [pc, #304]	; (8008a9c <HAL_GPIO_Init+0x2b8>)
 800896a:	f043 0301 	orr.w	r3, r3, #1
 800896e:	6193      	str	r3, [r2, #24]
 8008970:	4b4a      	ldr	r3, [pc, #296]	; (8008a9c <HAL_GPIO_Init+0x2b8>)
 8008972:	699b      	ldr	r3, [r3, #24]
 8008974:	f003 0301 	and.w	r3, r3, #1
 8008978:	60bb      	str	r3, [r7, #8]
 800897a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800897c:	4a48      	ldr	r2, [pc, #288]	; (8008aa0 <HAL_GPIO_Init+0x2bc>)
 800897e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008980:	089b      	lsrs	r3, r3, #2
 8008982:	3302      	adds	r3, #2
 8008984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008988:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800898a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898c:	f003 0303 	and.w	r3, r3, #3
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	220f      	movs	r2, #15
 8008994:	fa02 f303 	lsl.w	r3, r2, r3
 8008998:	43db      	mvns	r3, r3
 800899a:	68fa      	ldr	r2, [r7, #12]
 800899c:	4013      	ands	r3, r2
 800899e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	4a40      	ldr	r2, [pc, #256]	; (8008aa4 <HAL_GPIO_Init+0x2c0>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d013      	beq.n	80089d0 <HAL_GPIO_Init+0x1ec>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	4a3f      	ldr	r2, [pc, #252]	; (8008aa8 <HAL_GPIO_Init+0x2c4>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d00d      	beq.n	80089cc <HAL_GPIO_Init+0x1e8>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	4a3e      	ldr	r2, [pc, #248]	; (8008aac <HAL_GPIO_Init+0x2c8>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d007      	beq.n	80089c8 <HAL_GPIO_Init+0x1e4>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	4a3d      	ldr	r2, [pc, #244]	; (8008ab0 <HAL_GPIO_Init+0x2cc>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d101      	bne.n	80089c4 <HAL_GPIO_Init+0x1e0>
 80089c0:	2303      	movs	r3, #3
 80089c2:	e006      	b.n	80089d2 <HAL_GPIO_Init+0x1ee>
 80089c4:	2304      	movs	r3, #4
 80089c6:	e004      	b.n	80089d2 <HAL_GPIO_Init+0x1ee>
 80089c8:	2302      	movs	r3, #2
 80089ca:	e002      	b.n	80089d2 <HAL_GPIO_Init+0x1ee>
 80089cc:	2301      	movs	r3, #1
 80089ce:	e000      	b.n	80089d2 <HAL_GPIO_Init+0x1ee>
 80089d0:	2300      	movs	r3, #0
 80089d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089d4:	f002 0203 	and.w	r2, r2, #3
 80089d8:	0092      	lsls	r2, r2, #2
 80089da:	4093      	lsls	r3, r2
 80089dc:	68fa      	ldr	r2, [r7, #12]
 80089de:	4313      	orrs	r3, r2
 80089e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80089e2:	492f      	ldr	r1, [pc, #188]	; (8008aa0 <HAL_GPIO_Init+0x2bc>)
 80089e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e6:	089b      	lsrs	r3, r3, #2
 80089e8:	3302      	adds	r3, #2
 80089ea:	68fa      	ldr	r2, [r7, #12]
 80089ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d006      	beq.n	8008a0a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80089fc:	4b2d      	ldr	r3, [pc, #180]	; (8008ab4 <HAL_GPIO_Init+0x2d0>)
 80089fe:	689a      	ldr	r2, [r3, #8]
 8008a00:	492c      	ldr	r1, [pc, #176]	; (8008ab4 <HAL_GPIO_Init+0x2d0>)
 8008a02:	69bb      	ldr	r3, [r7, #24]
 8008a04:	4313      	orrs	r3, r2
 8008a06:	608b      	str	r3, [r1, #8]
 8008a08:	e006      	b.n	8008a18 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008a0a:	4b2a      	ldr	r3, [pc, #168]	; (8008ab4 <HAL_GPIO_Init+0x2d0>)
 8008a0c:	689a      	ldr	r2, [r3, #8]
 8008a0e:	69bb      	ldr	r3, [r7, #24]
 8008a10:	43db      	mvns	r3, r3
 8008a12:	4928      	ldr	r1, [pc, #160]	; (8008ab4 <HAL_GPIO_Init+0x2d0>)
 8008a14:	4013      	ands	r3, r2
 8008a16:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d006      	beq.n	8008a32 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008a24:	4b23      	ldr	r3, [pc, #140]	; (8008ab4 <HAL_GPIO_Init+0x2d0>)
 8008a26:	68da      	ldr	r2, [r3, #12]
 8008a28:	4922      	ldr	r1, [pc, #136]	; (8008ab4 <HAL_GPIO_Init+0x2d0>)
 8008a2a:	69bb      	ldr	r3, [r7, #24]
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	60cb      	str	r3, [r1, #12]
 8008a30:	e006      	b.n	8008a40 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008a32:	4b20      	ldr	r3, [pc, #128]	; (8008ab4 <HAL_GPIO_Init+0x2d0>)
 8008a34:	68da      	ldr	r2, [r3, #12]
 8008a36:	69bb      	ldr	r3, [r7, #24]
 8008a38:	43db      	mvns	r3, r3
 8008a3a:	491e      	ldr	r1, [pc, #120]	; (8008ab4 <HAL_GPIO_Init+0x2d0>)
 8008a3c:	4013      	ands	r3, r2
 8008a3e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d006      	beq.n	8008a5a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008a4c:	4b19      	ldr	r3, [pc, #100]	; (8008ab4 <HAL_GPIO_Init+0x2d0>)
 8008a4e:	685a      	ldr	r2, [r3, #4]
 8008a50:	4918      	ldr	r1, [pc, #96]	; (8008ab4 <HAL_GPIO_Init+0x2d0>)
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	4313      	orrs	r3, r2
 8008a56:	604b      	str	r3, [r1, #4]
 8008a58:	e006      	b.n	8008a68 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008a5a:	4b16      	ldr	r3, [pc, #88]	; (8008ab4 <HAL_GPIO_Init+0x2d0>)
 8008a5c:	685a      	ldr	r2, [r3, #4]
 8008a5e:	69bb      	ldr	r3, [r7, #24]
 8008a60:	43db      	mvns	r3, r3
 8008a62:	4914      	ldr	r1, [pc, #80]	; (8008ab4 <HAL_GPIO_Init+0x2d0>)
 8008a64:	4013      	ands	r3, r2
 8008a66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d021      	beq.n	8008ab8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008a74:	4b0f      	ldr	r3, [pc, #60]	; (8008ab4 <HAL_GPIO_Init+0x2d0>)
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	490e      	ldr	r1, [pc, #56]	; (8008ab4 <HAL_GPIO_Init+0x2d0>)
 8008a7a:	69bb      	ldr	r3, [r7, #24]
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	600b      	str	r3, [r1, #0]
 8008a80:	e021      	b.n	8008ac6 <HAL_GPIO_Init+0x2e2>
 8008a82:	bf00      	nop
 8008a84:	10320000 	.word	0x10320000
 8008a88:	10310000 	.word	0x10310000
 8008a8c:	10220000 	.word	0x10220000
 8008a90:	10210000 	.word	0x10210000
 8008a94:	10120000 	.word	0x10120000
 8008a98:	10110000 	.word	0x10110000
 8008a9c:	40021000 	.word	0x40021000
 8008aa0:	40010000 	.word	0x40010000
 8008aa4:	40010800 	.word	0x40010800
 8008aa8:	40010c00 	.word	0x40010c00
 8008aac:	40011000 	.word	0x40011000
 8008ab0:	40011400 	.word	0x40011400
 8008ab4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008ab8:	4b0b      	ldr	r3, [pc, #44]	; (8008ae8 <HAL_GPIO_Init+0x304>)
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	69bb      	ldr	r3, [r7, #24]
 8008abe:	43db      	mvns	r3, r3
 8008ac0:	4909      	ldr	r1, [pc, #36]	; (8008ae8 <HAL_GPIO_Init+0x304>)
 8008ac2:	4013      	ands	r3, r2
 8008ac4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8008ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac8:	3301      	adds	r3, #1
 8008aca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	f47f ae8e 	bne.w	80087f8 <HAL_GPIO_Init+0x14>
  }
}
 8008adc:	bf00      	nop
 8008ade:	bf00      	nop
 8008ae0:	372c      	adds	r7, #44	; 0x2c
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bc80      	pop	{r7}
 8008ae6:	4770      	bx	lr
 8008ae8:	40010400 	.word	0x40010400

08008aec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b082      	sub	sp, #8
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	4603      	mov	r3, r0
 8008af4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008af6:	4b08      	ldr	r3, [pc, #32]	; (8008b18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008af8:	695a      	ldr	r2, [r3, #20]
 8008afa:	88fb      	ldrh	r3, [r7, #6]
 8008afc:	4013      	ands	r3, r2
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d006      	beq.n	8008b10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008b02:	4a05      	ldr	r2, [pc, #20]	; (8008b18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008b04:	88fb      	ldrh	r3, [r7, #6]
 8008b06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008b08:	88fb      	ldrh	r3, [r7, #6]
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f000 f806 	bl	8008b1c <HAL_GPIO_EXTI_Callback>
  }
}
 8008b10:	bf00      	nop
 8008b12:	3708      	adds	r7, #8
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}
 8008b18:	40010400 	.word	0x40010400

08008b1c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b083      	sub	sp, #12
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	4603      	mov	r3, r0
 8008b24:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8008b26:	bf00      	nop
 8008b28:	370c      	adds	r7, #12
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bc80      	pop	{r7}
 8008b2e:	4770      	bx	lr

08008b30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b086      	sub	sp, #24
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d101      	bne.n	8008b42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e272      	b.n	8009028 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f003 0301 	and.w	r3, r3, #1
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	f000 8087 	beq.w	8008c5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008b50:	4b92      	ldr	r3, [pc, #584]	; (8008d9c <HAL_RCC_OscConfig+0x26c>)
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	f003 030c 	and.w	r3, r3, #12
 8008b58:	2b04      	cmp	r3, #4
 8008b5a:	d00c      	beq.n	8008b76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008b5c:	4b8f      	ldr	r3, [pc, #572]	; (8008d9c <HAL_RCC_OscConfig+0x26c>)
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	f003 030c 	and.w	r3, r3, #12
 8008b64:	2b08      	cmp	r3, #8
 8008b66:	d112      	bne.n	8008b8e <HAL_RCC_OscConfig+0x5e>
 8008b68:	4b8c      	ldr	r3, [pc, #560]	; (8008d9c <HAL_RCC_OscConfig+0x26c>)
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b74:	d10b      	bne.n	8008b8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b76:	4b89      	ldr	r3, [pc, #548]	; (8008d9c <HAL_RCC_OscConfig+0x26c>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d06c      	beq.n	8008c5c <HAL_RCC_OscConfig+0x12c>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d168      	bne.n	8008c5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	e24c      	b.n	8009028 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b96:	d106      	bne.n	8008ba6 <HAL_RCC_OscConfig+0x76>
 8008b98:	4b80      	ldr	r3, [pc, #512]	; (8008d9c <HAL_RCC_OscConfig+0x26c>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a7f      	ldr	r2, [pc, #508]	; (8008d9c <HAL_RCC_OscConfig+0x26c>)
 8008b9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ba2:	6013      	str	r3, [r2, #0]
 8008ba4:	e02e      	b.n	8008c04 <HAL_RCC_OscConfig+0xd4>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d10c      	bne.n	8008bc8 <HAL_RCC_OscConfig+0x98>
 8008bae:	4b7b      	ldr	r3, [pc, #492]	; (8008d9c <HAL_RCC_OscConfig+0x26c>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4a7a      	ldr	r2, [pc, #488]	; (8008d9c <HAL_RCC_OscConfig+0x26c>)
 8008bb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008bb8:	6013      	str	r3, [r2, #0]
 8008bba:	4b78      	ldr	r3, [pc, #480]	; (8008d9c <HAL_RCC_OscConfig+0x26c>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a77      	ldr	r2, [pc, #476]	; (8008d9c <HAL_RCC_OscConfig+0x26c>)
 8008bc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008bc4:	6013      	str	r3, [r2, #0]
 8008bc6:	e01d      	b.n	8008c04 <HAL_RCC_OscConfig+0xd4>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008bd0:	d10c      	bne.n	8008bec <HAL_RCC_OscConfig+0xbc>
 8008bd2:	4b72      	ldr	r3, [pc, #456]	; (8008d9c <HAL_RCC_OscConfig+0x26c>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4a71      	ldr	r2, [pc, #452]	; (8008d9c <HAL_RCC_OscConfig+0x26c>)
 8008bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008bdc:	6013      	str	r3, [r2, #0]
 8008bde:	4b6f      	ldr	r3, [pc, #444]	; (8008d9c <HAL_RCC_OscConfig+0x26c>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a6e      	ldr	r2, [pc, #440]	; (8008d9c <HAL_RCC_OscConfig+0x26c>)
 8008be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008be8:	6013      	str	r3, [r2, #0]
 8008bea:	e00b      	b.n	8008c04 <HAL_RCC_OscConfig+0xd4>
 8008bec:	4b6b      	ldr	r3, [pc, #428]	; (8008d9c <HAL_RCC_OscConfig+0x26c>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a6a      	ldr	r2, [pc, #424]	; (8008d9c <HAL_RCC_OscConfig+0x26c>)
 8008bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008bf6:	6013      	str	r3, [r2, #0]
 8008bf8:	4b68      	ldr	r3, [pc, #416]	; (8008d9c <HAL_RCC_OscConfig+0x26c>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a67      	ldr	r2, [pc, #412]	; (8008d9c <HAL_RCC_OscConfig+0x26c>)
 8008bfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d013      	beq.n	8008c34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c0c:	f7ff fcae 	bl	800856c <HAL_GetTick>
 8008c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c12:	e008      	b.n	8008c26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c14:	f7ff fcaa 	bl	800856c <HAL_GetTick>
 8008c18:	4602      	mov	r2, r0
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	1ad3      	subs	r3, r2, r3
 8008c1e:	2b64      	cmp	r3, #100	; 0x64
 8008c20:	d901      	bls.n	8008c26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008c22:	2303      	movs	r3, #3
 8008c24:	e200      	b.n	8009028 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c26:	4b5d      	ldr	r3, [pc, #372]	; (8008d9c <HAL_RCC_OscConfig+0x26c>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d0f0      	beq.n	8008c14 <HAL_RCC_OscConfig+0xe4>
 8008c32:	e014      	b.n	8008c5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c34:	f7ff fc9a 	bl	800856c <HAL_GetTick>
 8008c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c3a:	e008      	b.n	8008c4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c3c:	f7ff fc96 	bl	800856c <HAL_GetTick>
 8008c40:	4602      	mov	r2, r0
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	1ad3      	subs	r3, r2, r3
 8008c46:	2b64      	cmp	r3, #100	; 0x64
 8008c48:	d901      	bls.n	8008c4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008c4a:	2303      	movs	r3, #3
 8008c4c:	e1ec      	b.n	8009028 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c4e:	4b53      	ldr	r3, [pc, #332]	; (8008d9c <HAL_RCC_OscConfig+0x26c>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d1f0      	bne.n	8008c3c <HAL_RCC_OscConfig+0x10c>
 8008c5a:	e000      	b.n	8008c5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f003 0302 	and.w	r3, r3, #2
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d063      	beq.n	8008d32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008c6a:	4b4c      	ldr	r3, [pc, #304]	; (8008d9c <HAL_RCC_OscConfig+0x26c>)
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	f003 030c 	and.w	r3, r3, #12
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d00b      	beq.n	8008c8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008c76:	4b49      	ldr	r3, [pc, #292]	; (8008d9c <HAL_RCC_OscConfig+0x26c>)
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	f003 030c 	and.w	r3, r3, #12
 8008c7e:	2b08      	cmp	r3, #8
 8008c80:	d11c      	bne.n	8008cbc <HAL_RCC_OscConfig+0x18c>
 8008c82:	4b46      	ldr	r3, [pc, #280]	; (8008d9c <HAL_RCC_OscConfig+0x26c>)
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d116      	bne.n	8008cbc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c8e:	4b43      	ldr	r3, [pc, #268]	; (8008d9c <HAL_RCC_OscConfig+0x26c>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f003 0302 	and.w	r3, r3, #2
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d005      	beq.n	8008ca6 <HAL_RCC_OscConfig+0x176>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	691b      	ldr	r3, [r3, #16]
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	d001      	beq.n	8008ca6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	e1c0      	b.n	8009028 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ca6:	4b3d      	ldr	r3, [pc, #244]	; (8008d9c <HAL_RCC_OscConfig+0x26c>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	695b      	ldr	r3, [r3, #20]
 8008cb2:	00db      	lsls	r3, r3, #3
 8008cb4:	4939      	ldr	r1, [pc, #228]	; (8008d9c <HAL_RCC_OscConfig+0x26c>)
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008cba:	e03a      	b.n	8008d32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	691b      	ldr	r3, [r3, #16]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d020      	beq.n	8008d06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008cc4:	4b36      	ldr	r3, [pc, #216]	; (8008da0 <HAL_RCC_OscConfig+0x270>)
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008cca:	f7ff fc4f 	bl	800856c <HAL_GetTick>
 8008cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008cd0:	e008      	b.n	8008ce4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008cd2:	f7ff fc4b 	bl	800856c <HAL_GetTick>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	1ad3      	subs	r3, r2, r3
 8008cdc:	2b02      	cmp	r3, #2
 8008cde:	d901      	bls.n	8008ce4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008ce0:	2303      	movs	r3, #3
 8008ce2:	e1a1      	b.n	8009028 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ce4:	4b2d      	ldr	r3, [pc, #180]	; (8008d9c <HAL_RCC_OscConfig+0x26c>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f003 0302 	and.w	r3, r3, #2
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d0f0      	beq.n	8008cd2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cf0:	4b2a      	ldr	r3, [pc, #168]	; (8008d9c <HAL_RCC_OscConfig+0x26c>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	695b      	ldr	r3, [r3, #20]
 8008cfc:	00db      	lsls	r3, r3, #3
 8008cfe:	4927      	ldr	r1, [pc, #156]	; (8008d9c <HAL_RCC_OscConfig+0x26c>)
 8008d00:	4313      	orrs	r3, r2
 8008d02:	600b      	str	r3, [r1, #0]
 8008d04:	e015      	b.n	8008d32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008d06:	4b26      	ldr	r3, [pc, #152]	; (8008da0 <HAL_RCC_OscConfig+0x270>)
 8008d08:	2200      	movs	r2, #0
 8008d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d0c:	f7ff fc2e 	bl	800856c <HAL_GetTick>
 8008d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d12:	e008      	b.n	8008d26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d14:	f7ff fc2a 	bl	800856c <HAL_GetTick>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	1ad3      	subs	r3, r2, r3
 8008d1e:	2b02      	cmp	r3, #2
 8008d20:	d901      	bls.n	8008d26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8008d22:	2303      	movs	r3, #3
 8008d24:	e180      	b.n	8009028 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d26:	4b1d      	ldr	r3, [pc, #116]	; (8008d9c <HAL_RCC_OscConfig+0x26c>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f003 0302 	and.w	r3, r3, #2
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d1f0      	bne.n	8008d14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f003 0308 	and.w	r3, r3, #8
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d03a      	beq.n	8008db4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	699b      	ldr	r3, [r3, #24]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d019      	beq.n	8008d7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008d46:	4b17      	ldr	r3, [pc, #92]	; (8008da4 <HAL_RCC_OscConfig+0x274>)
 8008d48:	2201      	movs	r2, #1
 8008d4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d4c:	f7ff fc0e 	bl	800856c <HAL_GetTick>
 8008d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d52:	e008      	b.n	8008d66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008d54:	f7ff fc0a 	bl	800856c <HAL_GetTick>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	1ad3      	subs	r3, r2, r3
 8008d5e:	2b02      	cmp	r3, #2
 8008d60:	d901      	bls.n	8008d66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8008d62:	2303      	movs	r3, #3
 8008d64:	e160      	b.n	8009028 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d66:	4b0d      	ldr	r3, [pc, #52]	; (8008d9c <HAL_RCC_OscConfig+0x26c>)
 8008d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d6a:	f003 0302 	and.w	r3, r3, #2
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d0f0      	beq.n	8008d54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8008d72:	2001      	movs	r0, #1
 8008d74:	f000 face 	bl	8009314 <RCC_Delay>
 8008d78:	e01c      	b.n	8008db4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008d7a:	4b0a      	ldr	r3, [pc, #40]	; (8008da4 <HAL_RCC_OscConfig+0x274>)
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d80:	f7ff fbf4 	bl	800856c <HAL_GetTick>
 8008d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d86:	e00f      	b.n	8008da8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008d88:	f7ff fbf0 	bl	800856c <HAL_GetTick>
 8008d8c:	4602      	mov	r2, r0
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	1ad3      	subs	r3, r2, r3
 8008d92:	2b02      	cmp	r3, #2
 8008d94:	d908      	bls.n	8008da8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8008d96:	2303      	movs	r3, #3
 8008d98:	e146      	b.n	8009028 <HAL_RCC_OscConfig+0x4f8>
 8008d9a:	bf00      	nop
 8008d9c:	40021000 	.word	0x40021000
 8008da0:	42420000 	.word	0x42420000
 8008da4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008da8:	4b92      	ldr	r3, [pc, #584]	; (8008ff4 <HAL_RCC_OscConfig+0x4c4>)
 8008daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dac:	f003 0302 	and.w	r3, r3, #2
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d1e9      	bne.n	8008d88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f003 0304 	and.w	r3, r3, #4
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	f000 80a6 	beq.w	8008f0e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008dc6:	4b8b      	ldr	r3, [pc, #556]	; (8008ff4 <HAL_RCC_OscConfig+0x4c4>)
 8008dc8:	69db      	ldr	r3, [r3, #28]
 8008dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d10d      	bne.n	8008dee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008dd2:	4b88      	ldr	r3, [pc, #544]	; (8008ff4 <HAL_RCC_OscConfig+0x4c4>)
 8008dd4:	69db      	ldr	r3, [r3, #28]
 8008dd6:	4a87      	ldr	r2, [pc, #540]	; (8008ff4 <HAL_RCC_OscConfig+0x4c4>)
 8008dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ddc:	61d3      	str	r3, [r2, #28]
 8008dde:	4b85      	ldr	r3, [pc, #532]	; (8008ff4 <HAL_RCC_OscConfig+0x4c4>)
 8008de0:	69db      	ldr	r3, [r3, #28]
 8008de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008de6:	60bb      	str	r3, [r7, #8]
 8008de8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008dea:	2301      	movs	r3, #1
 8008dec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008dee:	4b82      	ldr	r3, [pc, #520]	; (8008ff8 <HAL_RCC_OscConfig+0x4c8>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d118      	bne.n	8008e2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008dfa:	4b7f      	ldr	r3, [pc, #508]	; (8008ff8 <HAL_RCC_OscConfig+0x4c8>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a7e      	ldr	r2, [pc, #504]	; (8008ff8 <HAL_RCC_OscConfig+0x4c8>)
 8008e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008e06:	f7ff fbb1 	bl	800856c <HAL_GetTick>
 8008e0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e0c:	e008      	b.n	8008e20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e0e:	f7ff fbad 	bl	800856c <HAL_GetTick>
 8008e12:	4602      	mov	r2, r0
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	1ad3      	subs	r3, r2, r3
 8008e18:	2b64      	cmp	r3, #100	; 0x64
 8008e1a:	d901      	bls.n	8008e20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008e1c:	2303      	movs	r3, #3
 8008e1e:	e103      	b.n	8009028 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e20:	4b75      	ldr	r3, [pc, #468]	; (8008ff8 <HAL_RCC_OscConfig+0x4c8>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d0f0      	beq.n	8008e0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d106      	bne.n	8008e42 <HAL_RCC_OscConfig+0x312>
 8008e34:	4b6f      	ldr	r3, [pc, #444]	; (8008ff4 <HAL_RCC_OscConfig+0x4c4>)
 8008e36:	6a1b      	ldr	r3, [r3, #32]
 8008e38:	4a6e      	ldr	r2, [pc, #440]	; (8008ff4 <HAL_RCC_OscConfig+0x4c4>)
 8008e3a:	f043 0301 	orr.w	r3, r3, #1
 8008e3e:	6213      	str	r3, [r2, #32]
 8008e40:	e02d      	b.n	8008e9e <HAL_RCC_OscConfig+0x36e>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	68db      	ldr	r3, [r3, #12]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d10c      	bne.n	8008e64 <HAL_RCC_OscConfig+0x334>
 8008e4a:	4b6a      	ldr	r3, [pc, #424]	; (8008ff4 <HAL_RCC_OscConfig+0x4c4>)
 8008e4c:	6a1b      	ldr	r3, [r3, #32]
 8008e4e:	4a69      	ldr	r2, [pc, #420]	; (8008ff4 <HAL_RCC_OscConfig+0x4c4>)
 8008e50:	f023 0301 	bic.w	r3, r3, #1
 8008e54:	6213      	str	r3, [r2, #32]
 8008e56:	4b67      	ldr	r3, [pc, #412]	; (8008ff4 <HAL_RCC_OscConfig+0x4c4>)
 8008e58:	6a1b      	ldr	r3, [r3, #32]
 8008e5a:	4a66      	ldr	r2, [pc, #408]	; (8008ff4 <HAL_RCC_OscConfig+0x4c4>)
 8008e5c:	f023 0304 	bic.w	r3, r3, #4
 8008e60:	6213      	str	r3, [r2, #32]
 8008e62:	e01c      	b.n	8008e9e <HAL_RCC_OscConfig+0x36e>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	2b05      	cmp	r3, #5
 8008e6a:	d10c      	bne.n	8008e86 <HAL_RCC_OscConfig+0x356>
 8008e6c:	4b61      	ldr	r3, [pc, #388]	; (8008ff4 <HAL_RCC_OscConfig+0x4c4>)
 8008e6e:	6a1b      	ldr	r3, [r3, #32]
 8008e70:	4a60      	ldr	r2, [pc, #384]	; (8008ff4 <HAL_RCC_OscConfig+0x4c4>)
 8008e72:	f043 0304 	orr.w	r3, r3, #4
 8008e76:	6213      	str	r3, [r2, #32]
 8008e78:	4b5e      	ldr	r3, [pc, #376]	; (8008ff4 <HAL_RCC_OscConfig+0x4c4>)
 8008e7a:	6a1b      	ldr	r3, [r3, #32]
 8008e7c:	4a5d      	ldr	r2, [pc, #372]	; (8008ff4 <HAL_RCC_OscConfig+0x4c4>)
 8008e7e:	f043 0301 	orr.w	r3, r3, #1
 8008e82:	6213      	str	r3, [r2, #32]
 8008e84:	e00b      	b.n	8008e9e <HAL_RCC_OscConfig+0x36e>
 8008e86:	4b5b      	ldr	r3, [pc, #364]	; (8008ff4 <HAL_RCC_OscConfig+0x4c4>)
 8008e88:	6a1b      	ldr	r3, [r3, #32]
 8008e8a:	4a5a      	ldr	r2, [pc, #360]	; (8008ff4 <HAL_RCC_OscConfig+0x4c4>)
 8008e8c:	f023 0301 	bic.w	r3, r3, #1
 8008e90:	6213      	str	r3, [r2, #32]
 8008e92:	4b58      	ldr	r3, [pc, #352]	; (8008ff4 <HAL_RCC_OscConfig+0x4c4>)
 8008e94:	6a1b      	ldr	r3, [r3, #32]
 8008e96:	4a57      	ldr	r2, [pc, #348]	; (8008ff4 <HAL_RCC_OscConfig+0x4c4>)
 8008e98:	f023 0304 	bic.w	r3, r3, #4
 8008e9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	68db      	ldr	r3, [r3, #12]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d015      	beq.n	8008ed2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008ea6:	f7ff fb61 	bl	800856c <HAL_GetTick>
 8008eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008eac:	e00a      	b.n	8008ec4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008eae:	f7ff fb5d 	bl	800856c <HAL_GetTick>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	1ad3      	subs	r3, r2, r3
 8008eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d901      	bls.n	8008ec4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008ec0:	2303      	movs	r3, #3
 8008ec2:	e0b1      	b.n	8009028 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ec4:	4b4b      	ldr	r3, [pc, #300]	; (8008ff4 <HAL_RCC_OscConfig+0x4c4>)
 8008ec6:	6a1b      	ldr	r3, [r3, #32]
 8008ec8:	f003 0302 	and.w	r3, r3, #2
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d0ee      	beq.n	8008eae <HAL_RCC_OscConfig+0x37e>
 8008ed0:	e014      	b.n	8008efc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008ed2:	f7ff fb4b 	bl	800856c <HAL_GetTick>
 8008ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ed8:	e00a      	b.n	8008ef0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008eda:	f7ff fb47 	bl	800856c <HAL_GetTick>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	1ad3      	subs	r3, r2, r3
 8008ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d901      	bls.n	8008ef0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008eec:	2303      	movs	r3, #3
 8008eee:	e09b      	b.n	8009028 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ef0:	4b40      	ldr	r3, [pc, #256]	; (8008ff4 <HAL_RCC_OscConfig+0x4c4>)
 8008ef2:	6a1b      	ldr	r3, [r3, #32]
 8008ef4:	f003 0302 	and.w	r3, r3, #2
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d1ee      	bne.n	8008eda <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008efc:	7dfb      	ldrb	r3, [r7, #23]
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d105      	bne.n	8008f0e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f02:	4b3c      	ldr	r3, [pc, #240]	; (8008ff4 <HAL_RCC_OscConfig+0x4c4>)
 8008f04:	69db      	ldr	r3, [r3, #28]
 8008f06:	4a3b      	ldr	r2, [pc, #236]	; (8008ff4 <HAL_RCC_OscConfig+0x4c4>)
 8008f08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f0c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	69db      	ldr	r3, [r3, #28]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	f000 8087 	beq.w	8009026 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008f18:	4b36      	ldr	r3, [pc, #216]	; (8008ff4 <HAL_RCC_OscConfig+0x4c4>)
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	f003 030c 	and.w	r3, r3, #12
 8008f20:	2b08      	cmp	r3, #8
 8008f22:	d061      	beq.n	8008fe8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	69db      	ldr	r3, [r3, #28]
 8008f28:	2b02      	cmp	r3, #2
 8008f2a:	d146      	bne.n	8008fba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f2c:	4b33      	ldr	r3, [pc, #204]	; (8008ffc <HAL_RCC_OscConfig+0x4cc>)
 8008f2e:	2200      	movs	r2, #0
 8008f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f32:	f7ff fb1b 	bl	800856c <HAL_GetTick>
 8008f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008f38:	e008      	b.n	8008f4c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f3a:	f7ff fb17 	bl	800856c <HAL_GetTick>
 8008f3e:	4602      	mov	r2, r0
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	1ad3      	subs	r3, r2, r3
 8008f44:	2b02      	cmp	r3, #2
 8008f46:	d901      	bls.n	8008f4c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008f48:	2303      	movs	r3, #3
 8008f4a:	e06d      	b.n	8009028 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008f4c:	4b29      	ldr	r3, [pc, #164]	; (8008ff4 <HAL_RCC_OscConfig+0x4c4>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d1f0      	bne.n	8008f3a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6a1b      	ldr	r3, [r3, #32]
 8008f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f60:	d108      	bne.n	8008f74 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008f62:	4b24      	ldr	r3, [pc, #144]	; (8008ff4 <HAL_RCC_OscConfig+0x4c4>)
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	689b      	ldr	r3, [r3, #8]
 8008f6e:	4921      	ldr	r1, [pc, #132]	; (8008ff4 <HAL_RCC_OscConfig+0x4c4>)
 8008f70:	4313      	orrs	r3, r2
 8008f72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008f74:	4b1f      	ldr	r3, [pc, #124]	; (8008ff4 <HAL_RCC_OscConfig+0x4c4>)
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6a19      	ldr	r1, [r3, #32]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f84:	430b      	orrs	r3, r1
 8008f86:	491b      	ldr	r1, [pc, #108]	; (8008ff4 <HAL_RCC_OscConfig+0x4c4>)
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f8c:	4b1b      	ldr	r3, [pc, #108]	; (8008ffc <HAL_RCC_OscConfig+0x4cc>)
 8008f8e:	2201      	movs	r2, #1
 8008f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f92:	f7ff faeb 	bl	800856c <HAL_GetTick>
 8008f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008f98:	e008      	b.n	8008fac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f9a:	f7ff fae7 	bl	800856c <HAL_GetTick>
 8008f9e:	4602      	mov	r2, r0
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	1ad3      	subs	r3, r2, r3
 8008fa4:	2b02      	cmp	r3, #2
 8008fa6:	d901      	bls.n	8008fac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008fa8:	2303      	movs	r3, #3
 8008faa:	e03d      	b.n	8009028 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008fac:	4b11      	ldr	r3, [pc, #68]	; (8008ff4 <HAL_RCC_OscConfig+0x4c4>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d0f0      	beq.n	8008f9a <HAL_RCC_OscConfig+0x46a>
 8008fb8:	e035      	b.n	8009026 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008fba:	4b10      	ldr	r3, [pc, #64]	; (8008ffc <HAL_RCC_OscConfig+0x4cc>)
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fc0:	f7ff fad4 	bl	800856c <HAL_GetTick>
 8008fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008fc6:	e008      	b.n	8008fda <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008fc8:	f7ff fad0 	bl	800856c <HAL_GetTick>
 8008fcc:	4602      	mov	r2, r0
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	1ad3      	subs	r3, r2, r3
 8008fd2:	2b02      	cmp	r3, #2
 8008fd4:	d901      	bls.n	8008fda <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008fd6:	2303      	movs	r3, #3
 8008fd8:	e026      	b.n	8009028 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008fda:	4b06      	ldr	r3, [pc, #24]	; (8008ff4 <HAL_RCC_OscConfig+0x4c4>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d1f0      	bne.n	8008fc8 <HAL_RCC_OscConfig+0x498>
 8008fe6:	e01e      	b.n	8009026 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	69db      	ldr	r3, [r3, #28]
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d107      	bne.n	8009000 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	e019      	b.n	8009028 <HAL_RCC_OscConfig+0x4f8>
 8008ff4:	40021000 	.word	0x40021000
 8008ff8:	40007000 	.word	0x40007000
 8008ffc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009000:	4b0b      	ldr	r3, [pc, #44]	; (8009030 <HAL_RCC_OscConfig+0x500>)
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6a1b      	ldr	r3, [r3, #32]
 8009010:	429a      	cmp	r2, r3
 8009012:	d106      	bne.n	8009022 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800901e:	429a      	cmp	r2, r3
 8009020:	d001      	beq.n	8009026 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8009022:	2301      	movs	r3, #1
 8009024:	e000      	b.n	8009028 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8009026:	2300      	movs	r3, #0
}
 8009028:	4618      	mov	r0, r3
 800902a:	3718      	adds	r7, #24
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}
 8009030:	40021000 	.word	0x40021000

08009034 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d101      	bne.n	8009048 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009044:	2301      	movs	r3, #1
 8009046:	e0d0      	b.n	80091ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009048:	4b6a      	ldr	r3, [pc, #424]	; (80091f4 <HAL_RCC_ClockConfig+0x1c0>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f003 0307 	and.w	r3, r3, #7
 8009050:	683a      	ldr	r2, [r7, #0]
 8009052:	429a      	cmp	r2, r3
 8009054:	d910      	bls.n	8009078 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009056:	4b67      	ldr	r3, [pc, #412]	; (80091f4 <HAL_RCC_ClockConfig+0x1c0>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f023 0207 	bic.w	r2, r3, #7
 800905e:	4965      	ldr	r1, [pc, #404]	; (80091f4 <HAL_RCC_ClockConfig+0x1c0>)
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	4313      	orrs	r3, r2
 8009064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009066:	4b63      	ldr	r3, [pc, #396]	; (80091f4 <HAL_RCC_ClockConfig+0x1c0>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f003 0307 	and.w	r3, r3, #7
 800906e:	683a      	ldr	r2, [r7, #0]
 8009070:	429a      	cmp	r2, r3
 8009072:	d001      	beq.n	8009078 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8009074:	2301      	movs	r3, #1
 8009076:	e0b8      	b.n	80091ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f003 0302 	and.w	r3, r3, #2
 8009080:	2b00      	cmp	r3, #0
 8009082:	d020      	beq.n	80090c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f003 0304 	and.w	r3, r3, #4
 800908c:	2b00      	cmp	r3, #0
 800908e:	d005      	beq.n	800909c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009090:	4b59      	ldr	r3, [pc, #356]	; (80091f8 <HAL_RCC_ClockConfig+0x1c4>)
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	4a58      	ldr	r2, [pc, #352]	; (80091f8 <HAL_RCC_ClockConfig+0x1c4>)
 8009096:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800909a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f003 0308 	and.w	r3, r3, #8
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d005      	beq.n	80090b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80090a8:	4b53      	ldr	r3, [pc, #332]	; (80091f8 <HAL_RCC_ClockConfig+0x1c4>)
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	4a52      	ldr	r2, [pc, #328]	; (80091f8 <HAL_RCC_ClockConfig+0x1c4>)
 80090ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80090b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80090b4:	4b50      	ldr	r3, [pc, #320]	; (80091f8 <HAL_RCC_ClockConfig+0x1c4>)
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	494d      	ldr	r1, [pc, #308]	; (80091f8 <HAL_RCC_ClockConfig+0x1c4>)
 80090c2:	4313      	orrs	r3, r2
 80090c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f003 0301 	and.w	r3, r3, #1
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d040      	beq.n	8009154 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d107      	bne.n	80090ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090da:	4b47      	ldr	r3, [pc, #284]	; (80091f8 <HAL_RCC_ClockConfig+0x1c4>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d115      	bne.n	8009112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090e6:	2301      	movs	r3, #1
 80090e8:	e07f      	b.n	80091ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	2b02      	cmp	r3, #2
 80090f0:	d107      	bne.n	8009102 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80090f2:	4b41      	ldr	r3, [pc, #260]	; (80091f8 <HAL_RCC_ClockConfig+0x1c4>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d109      	bne.n	8009112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090fe:	2301      	movs	r3, #1
 8009100:	e073      	b.n	80091ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009102:	4b3d      	ldr	r3, [pc, #244]	; (80091f8 <HAL_RCC_ClockConfig+0x1c4>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f003 0302 	and.w	r3, r3, #2
 800910a:	2b00      	cmp	r3, #0
 800910c:	d101      	bne.n	8009112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800910e:	2301      	movs	r3, #1
 8009110:	e06b      	b.n	80091ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009112:	4b39      	ldr	r3, [pc, #228]	; (80091f8 <HAL_RCC_ClockConfig+0x1c4>)
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	f023 0203 	bic.w	r2, r3, #3
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	4936      	ldr	r1, [pc, #216]	; (80091f8 <HAL_RCC_ClockConfig+0x1c4>)
 8009120:	4313      	orrs	r3, r2
 8009122:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009124:	f7ff fa22 	bl	800856c <HAL_GetTick>
 8009128:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800912a:	e00a      	b.n	8009142 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800912c:	f7ff fa1e 	bl	800856c <HAL_GetTick>
 8009130:	4602      	mov	r2, r0
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	1ad3      	subs	r3, r2, r3
 8009136:	f241 3288 	movw	r2, #5000	; 0x1388
 800913a:	4293      	cmp	r3, r2
 800913c:	d901      	bls.n	8009142 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800913e:	2303      	movs	r3, #3
 8009140:	e053      	b.n	80091ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009142:	4b2d      	ldr	r3, [pc, #180]	; (80091f8 <HAL_RCC_ClockConfig+0x1c4>)
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	f003 020c 	and.w	r2, r3, #12
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	429a      	cmp	r2, r3
 8009152:	d1eb      	bne.n	800912c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009154:	4b27      	ldr	r3, [pc, #156]	; (80091f4 <HAL_RCC_ClockConfig+0x1c0>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f003 0307 	and.w	r3, r3, #7
 800915c:	683a      	ldr	r2, [r7, #0]
 800915e:	429a      	cmp	r2, r3
 8009160:	d210      	bcs.n	8009184 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009162:	4b24      	ldr	r3, [pc, #144]	; (80091f4 <HAL_RCC_ClockConfig+0x1c0>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f023 0207 	bic.w	r2, r3, #7
 800916a:	4922      	ldr	r1, [pc, #136]	; (80091f4 <HAL_RCC_ClockConfig+0x1c0>)
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	4313      	orrs	r3, r2
 8009170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009172:	4b20      	ldr	r3, [pc, #128]	; (80091f4 <HAL_RCC_ClockConfig+0x1c0>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f003 0307 	and.w	r3, r3, #7
 800917a:	683a      	ldr	r2, [r7, #0]
 800917c:	429a      	cmp	r2, r3
 800917e:	d001      	beq.n	8009184 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8009180:	2301      	movs	r3, #1
 8009182:	e032      	b.n	80091ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f003 0304 	and.w	r3, r3, #4
 800918c:	2b00      	cmp	r3, #0
 800918e:	d008      	beq.n	80091a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009190:	4b19      	ldr	r3, [pc, #100]	; (80091f8 <HAL_RCC_ClockConfig+0x1c4>)
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	68db      	ldr	r3, [r3, #12]
 800919c:	4916      	ldr	r1, [pc, #88]	; (80091f8 <HAL_RCC_ClockConfig+0x1c4>)
 800919e:	4313      	orrs	r3, r2
 80091a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f003 0308 	and.w	r3, r3, #8
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d009      	beq.n	80091c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80091ae:	4b12      	ldr	r3, [pc, #72]	; (80091f8 <HAL_RCC_ClockConfig+0x1c4>)
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	691b      	ldr	r3, [r3, #16]
 80091ba:	00db      	lsls	r3, r3, #3
 80091bc:	490e      	ldr	r1, [pc, #56]	; (80091f8 <HAL_RCC_ClockConfig+0x1c4>)
 80091be:	4313      	orrs	r3, r2
 80091c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80091c2:	f000 f821 	bl	8009208 <HAL_RCC_GetSysClockFreq>
 80091c6:	4602      	mov	r2, r0
 80091c8:	4b0b      	ldr	r3, [pc, #44]	; (80091f8 <HAL_RCC_ClockConfig+0x1c4>)
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	091b      	lsrs	r3, r3, #4
 80091ce:	f003 030f 	and.w	r3, r3, #15
 80091d2:	490a      	ldr	r1, [pc, #40]	; (80091fc <HAL_RCC_ClockConfig+0x1c8>)
 80091d4:	5ccb      	ldrb	r3, [r1, r3]
 80091d6:	fa22 f303 	lsr.w	r3, r2, r3
 80091da:	4a09      	ldr	r2, [pc, #36]	; (8009200 <HAL_RCC_ClockConfig+0x1cc>)
 80091dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80091de:	4b09      	ldr	r3, [pc, #36]	; (8009204 <HAL_RCC_ClockConfig+0x1d0>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7ff f980 	bl	80084e8 <HAL_InitTick>

  return HAL_OK;
 80091e8:	2300      	movs	r3, #0
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3710      	adds	r7, #16
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	bf00      	nop
 80091f4:	40022000 	.word	0x40022000
 80091f8:	40021000 	.word	0x40021000
 80091fc:	08009774 	.word	0x08009774
 8009200:	2000001c 	.word	0x2000001c
 8009204:	20000020 	.word	0x20000020

08009208 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009208:	b480      	push	{r7}
 800920a:	b087      	sub	sp, #28
 800920c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800920e:	2300      	movs	r3, #0
 8009210:	60fb      	str	r3, [r7, #12]
 8009212:	2300      	movs	r3, #0
 8009214:	60bb      	str	r3, [r7, #8]
 8009216:	2300      	movs	r3, #0
 8009218:	617b      	str	r3, [r7, #20]
 800921a:	2300      	movs	r3, #0
 800921c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800921e:	2300      	movs	r3, #0
 8009220:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8009222:	4b1e      	ldr	r3, [pc, #120]	; (800929c <HAL_RCC_GetSysClockFreq+0x94>)
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f003 030c 	and.w	r3, r3, #12
 800922e:	2b04      	cmp	r3, #4
 8009230:	d002      	beq.n	8009238 <HAL_RCC_GetSysClockFreq+0x30>
 8009232:	2b08      	cmp	r3, #8
 8009234:	d003      	beq.n	800923e <HAL_RCC_GetSysClockFreq+0x36>
 8009236:	e027      	b.n	8009288 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009238:	4b19      	ldr	r3, [pc, #100]	; (80092a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800923a:	613b      	str	r3, [r7, #16]
      break;
 800923c:	e027      	b.n	800928e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	0c9b      	lsrs	r3, r3, #18
 8009242:	f003 030f 	and.w	r3, r3, #15
 8009246:	4a17      	ldr	r2, [pc, #92]	; (80092a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8009248:	5cd3      	ldrb	r3, [r2, r3]
 800924a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009252:	2b00      	cmp	r3, #0
 8009254:	d010      	beq.n	8009278 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009256:	4b11      	ldr	r3, [pc, #68]	; (800929c <HAL_RCC_GetSysClockFreq+0x94>)
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	0c5b      	lsrs	r3, r3, #17
 800925c:	f003 0301 	and.w	r3, r3, #1
 8009260:	4a11      	ldr	r2, [pc, #68]	; (80092a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8009262:	5cd3      	ldrb	r3, [r2, r3]
 8009264:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	4a0d      	ldr	r2, [pc, #52]	; (80092a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800926a:	fb03 f202 	mul.w	r2, r3, r2
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	fbb2 f3f3 	udiv	r3, r2, r3
 8009274:	617b      	str	r3, [r7, #20]
 8009276:	e004      	b.n	8009282 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	4a0c      	ldr	r2, [pc, #48]	; (80092ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800927c:	fb02 f303 	mul.w	r3, r2, r3
 8009280:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	613b      	str	r3, [r7, #16]
      break;
 8009286:	e002      	b.n	800928e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009288:	4b05      	ldr	r3, [pc, #20]	; (80092a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800928a:	613b      	str	r3, [r7, #16]
      break;
 800928c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800928e:	693b      	ldr	r3, [r7, #16]
}
 8009290:	4618      	mov	r0, r3
 8009292:	371c      	adds	r7, #28
 8009294:	46bd      	mov	sp, r7
 8009296:	bc80      	pop	{r7}
 8009298:	4770      	bx	lr
 800929a:	bf00      	nop
 800929c:	40021000 	.word	0x40021000
 80092a0:	007a1200 	.word	0x007a1200
 80092a4:	0800978c 	.word	0x0800978c
 80092a8:	0800979c 	.word	0x0800979c
 80092ac:	003d0900 	.word	0x003d0900

080092b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80092b0:	b480      	push	{r7}
 80092b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80092b4:	4b02      	ldr	r3, [pc, #8]	; (80092c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80092b6:	681b      	ldr	r3, [r3, #0]
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bc80      	pop	{r7}
 80092be:	4770      	bx	lr
 80092c0:	2000001c 	.word	0x2000001c

080092c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80092c8:	f7ff fff2 	bl	80092b0 <HAL_RCC_GetHCLKFreq>
 80092cc:	4602      	mov	r2, r0
 80092ce:	4b05      	ldr	r3, [pc, #20]	; (80092e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	0a1b      	lsrs	r3, r3, #8
 80092d4:	f003 0307 	and.w	r3, r3, #7
 80092d8:	4903      	ldr	r1, [pc, #12]	; (80092e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80092da:	5ccb      	ldrb	r3, [r1, r3]
 80092dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	bd80      	pop	{r7, pc}
 80092e4:	40021000 	.word	0x40021000
 80092e8:	08009784 	.word	0x08009784

080092ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80092f0:	f7ff ffde 	bl	80092b0 <HAL_RCC_GetHCLKFreq>
 80092f4:	4602      	mov	r2, r0
 80092f6:	4b05      	ldr	r3, [pc, #20]	; (800930c <HAL_RCC_GetPCLK2Freq+0x20>)
 80092f8:	685b      	ldr	r3, [r3, #4]
 80092fa:	0adb      	lsrs	r3, r3, #11
 80092fc:	f003 0307 	and.w	r3, r3, #7
 8009300:	4903      	ldr	r1, [pc, #12]	; (8009310 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009302:	5ccb      	ldrb	r3, [r1, r3]
 8009304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009308:	4618      	mov	r0, r3
 800930a:	bd80      	pop	{r7, pc}
 800930c:	40021000 	.word	0x40021000
 8009310:	08009784 	.word	0x08009784

08009314 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8009314:	b480      	push	{r7}
 8009316:	b085      	sub	sp, #20
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800931c:	4b0a      	ldr	r3, [pc, #40]	; (8009348 <RCC_Delay+0x34>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a0a      	ldr	r2, [pc, #40]	; (800934c <RCC_Delay+0x38>)
 8009322:	fba2 2303 	umull	r2, r3, r2, r3
 8009326:	0a5b      	lsrs	r3, r3, #9
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	fb02 f303 	mul.w	r3, r2, r3
 800932e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8009330:	bf00      	nop
  }
  while (Delay --);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	1e5a      	subs	r2, r3, #1
 8009336:	60fa      	str	r2, [r7, #12]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d1f9      	bne.n	8009330 <RCC_Delay+0x1c>
}
 800933c:	bf00      	nop
 800933e:	bf00      	nop
 8009340:	3714      	adds	r7, #20
 8009342:	46bd      	mov	sp, r7
 8009344:	bc80      	pop	{r7}
 8009346:	4770      	bx	lr
 8009348:	2000001c 	.word	0x2000001c
 800934c:	10624dd3 	.word	0x10624dd3

08009350 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d101      	bne.n	8009362 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	e042      	b.n	80093e8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009368:	b2db      	uxtb	r3, r3
 800936a:	2b00      	cmp	r3, #0
 800936c:	d106      	bne.n	800937c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f7fe ffda 	bl	8008330 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2224      	movs	r2, #36	; 0x24
 8009380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	68da      	ldr	r2, [r3, #12]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009392:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 f91d 	bl	80095d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	691a      	ldr	r2, [r3, #16]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80093a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	695a      	ldr	r2, [r3, #20]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80093b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	68da      	ldr	r2, [r3, #12]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80093c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2200      	movs	r2, #0
 80093ce:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2220      	movs	r2, #32
 80093d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2220      	movs	r2, #32
 80093dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2200      	movs	r2, #0
 80093e4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80093e6:	2300      	movs	r3, #0
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3708      	adds	r7, #8
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b08a      	sub	sp, #40	; 0x28
 80093f4:	af02      	add	r7, sp, #8
 80093f6:	60f8      	str	r0, [r7, #12]
 80093f8:	60b9      	str	r1, [r7, #8]
 80093fa:	603b      	str	r3, [r7, #0]
 80093fc:	4613      	mov	r3, r2
 80093fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009400:	2300      	movs	r3, #0
 8009402:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800940a:	b2db      	uxtb	r3, r3
 800940c:	2b20      	cmp	r3, #32
 800940e:	d16d      	bne.n	80094ec <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d002      	beq.n	800941c <HAL_UART_Transmit+0x2c>
 8009416:	88fb      	ldrh	r3, [r7, #6]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d101      	bne.n	8009420 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800941c:	2301      	movs	r3, #1
 800941e:	e066      	b.n	80094ee <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2200      	movs	r2, #0
 8009424:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2221      	movs	r2, #33	; 0x21
 800942a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800942e:	f7ff f89d 	bl	800856c <HAL_GetTick>
 8009432:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	88fa      	ldrh	r2, [r7, #6]
 8009438:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	88fa      	ldrh	r2, [r7, #6]
 800943e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	689b      	ldr	r3, [r3, #8]
 8009444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009448:	d108      	bne.n	800945c <HAL_UART_Transmit+0x6c>
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	691b      	ldr	r3, [r3, #16]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d104      	bne.n	800945c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009452:	2300      	movs	r3, #0
 8009454:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	61bb      	str	r3, [r7, #24]
 800945a:	e003      	b.n	8009464 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009460:	2300      	movs	r3, #0
 8009462:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009464:	e02a      	b.n	80094bc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	9300      	str	r3, [sp, #0]
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	2200      	movs	r2, #0
 800946e:	2180      	movs	r1, #128	; 0x80
 8009470:	68f8      	ldr	r0, [r7, #12]
 8009472:	f000 f840 	bl	80094f6 <UART_WaitOnFlagUntilTimeout>
 8009476:	4603      	mov	r3, r0
 8009478:	2b00      	cmp	r3, #0
 800947a:	d001      	beq.n	8009480 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800947c:	2303      	movs	r3, #3
 800947e:	e036      	b.n	80094ee <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8009480:	69fb      	ldr	r3, [r7, #28]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d10b      	bne.n	800949e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009486:	69bb      	ldr	r3, [r7, #24]
 8009488:	881b      	ldrh	r3, [r3, #0]
 800948a:	461a      	mov	r2, r3
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009494:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009496:	69bb      	ldr	r3, [r7, #24]
 8009498:	3302      	adds	r3, #2
 800949a:	61bb      	str	r3, [r7, #24]
 800949c:	e007      	b.n	80094ae <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800949e:	69fb      	ldr	r3, [r7, #28]
 80094a0:	781a      	ldrb	r2, [r3, #0]
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80094a8:	69fb      	ldr	r3, [r7, #28]
 80094aa:	3301      	adds	r3, #1
 80094ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80094b2:	b29b      	uxth	r3, r3
 80094b4:	3b01      	subs	r3, #1
 80094b6:	b29a      	uxth	r2, r3
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80094c0:	b29b      	uxth	r3, r3
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d1cf      	bne.n	8009466 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	9300      	str	r3, [sp, #0]
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	2200      	movs	r2, #0
 80094ce:	2140      	movs	r1, #64	; 0x40
 80094d0:	68f8      	ldr	r0, [r7, #12]
 80094d2:	f000 f810 	bl	80094f6 <UART_WaitOnFlagUntilTimeout>
 80094d6:	4603      	mov	r3, r0
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d001      	beq.n	80094e0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80094dc:	2303      	movs	r3, #3
 80094de:	e006      	b.n	80094ee <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2220      	movs	r2, #32
 80094e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80094e8:	2300      	movs	r3, #0
 80094ea:	e000      	b.n	80094ee <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80094ec:	2302      	movs	r3, #2
  }
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3720      	adds	r7, #32
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}

080094f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80094f6:	b580      	push	{r7, lr}
 80094f8:	b090      	sub	sp, #64	; 0x40
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	60f8      	str	r0, [r7, #12]
 80094fe:	60b9      	str	r1, [r7, #8]
 8009500:	603b      	str	r3, [r7, #0]
 8009502:	4613      	mov	r3, r2
 8009504:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009506:	e050      	b.n	80095aa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009508:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800950a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800950e:	d04c      	beq.n	80095aa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009510:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009512:	2b00      	cmp	r3, #0
 8009514:	d007      	beq.n	8009526 <UART_WaitOnFlagUntilTimeout+0x30>
 8009516:	f7ff f829 	bl	800856c <HAL_GetTick>
 800951a:	4602      	mov	r2, r0
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	1ad3      	subs	r3, r2, r3
 8009520:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009522:	429a      	cmp	r2, r3
 8009524:	d241      	bcs.n	80095aa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	330c      	adds	r3, #12
 800952c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800952e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009530:	e853 3f00 	ldrex	r3, [r3]
 8009534:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009538:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800953c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	330c      	adds	r3, #12
 8009544:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009546:	637a      	str	r2, [r7, #52]	; 0x34
 8009548:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800954a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800954c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800954e:	e841 2300 	strex	r3, r2, [r1]
 8009552:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009556:	2b00      	cmp	r3, #0
 8009558:	d1e5      	bne.n	8009526 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	3314      	adds	r3, #20
 8009560:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	e853 3f00 	ldrex	r3, [r3]
 8009568:	613b      	str	r3, [r7, #16]
   return(result);
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	f023 0301 	bic.w	r3, r3, #1
 8009570:	63bb      	str	r3, [r7, #56]	; 0x38
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	3314      	adds	r3, #20
 8009578:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800957a:	623a      	str	r2, [r7, #32]
 800957c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800957e:	69f9      	ldr	r1, [r7, #28]
 8009580:	6a3a      	ldr	r2, [r7, #32]
 8009582:	e841 2300 	strex	r3, r2, [r1]
 8009586:	61bb      	str	r3, [r7, #24]
   return(result);
 8009588:	69bb      	ldr	r3, [r7, #24]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d1e5      	bne.n	800955a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2220      	movs	r2, #32
 8009592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2220      	movs	r2, #32
 800959a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	2200      	movs	r2, #0
 80095a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80095a6:	2303      	movs	r3, #3
 80095a8:	e00f      	b.n	80095ca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	681a      	ldr	r2, [r3, #0]
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	4013      	ands	r3, r2
 80095b4:	68ba      	ldr	r2, [r7, #8]
 80095b6:	429a      	cmp	r2, r3
 80095b8:	bf0c      	ite	eq
 80095ba:	2301      	moveq	r3, #1
 80095bc:	2300      	movne	r3, #0
 80095be:	b2db      	uxtb	r3, r3
 80095c0:	461a      	mov	r2, r3
 80095c2:	79fb      	ldrb	r3, [r7, #7]
 80095c4:	429a      	cmp	r2, r3
 80095c6:	d09f      	beq.n	8009508 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80095c8:	2300      	movs	r3, #0
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3740      	adds	r7, #64	; 0x40
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
	...

080095d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	691b      	ldr	r3, [r3, #16]
 80095e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	68da      	ldr	r2, [r3, #12]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	430a      	orrs	r2, r1
 80095f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	689a      	ldr	r2, [r3, #8]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	691b      	ldr	r3, [r3, #16]
 80095fa:	431a      	orrs	r2, r3
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	695b      	ldr	r3, [r3, #20]
 8009600:	4313      	orrs	r3, r2
 8009602:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	68db      	ldr	r3, [r3, #12]
 800960a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800960e:	f023 030c 	bic.w	r3, r3, #12
 8009612:	687a      	ldr	r2, [r7, #4]
 8009614:	6812      	ldr	r2, [r2, #0]
 8009616:	68b9      	ldr	r1, [r7, #8]
 8009618:	430b      	orrs	r3, r1
 800961a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	695b      	ldr	r3, [r3, #20]
 8009622:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	699a      	ldr	r2, [r3, #24]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	430a      	orrs	r2, r1
 8009630:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4a2c      	ldr	r2, [pc, #176]	; (80096e8 <UART_SetConfig+0x114>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d103      	bne.n	8009644 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800963c:	f7ff fe56 	bl	80092ec <HAL_RCC_GetPCLK2Freq>
 8009640:	60f8      	str	r0, [r7, #12]
 8009642:	e002      	b.n	800964a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009644:	f7ff fe3e 	bl	80092c4 <HAL_RCC_GetPCLK1Freq>
 8009648:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800964a:	68fa      	ldr	r2, [r7, #12]
 800964c:	4613      	mov	r3, r2
 800964e:	009b      	lsls	r3, r3, #2
 8009650:	4413      	add	r3, r2
 8009652:	009a      	lsls	r2, r3, #2
 8009654:	441a      	add	r2, r3
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	685b      	ldr	r3, [r3, #4]
 800965a:	009b      	lsls	r3, r3, #2
 800965c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009660:	4a22      	ldr	r2, [pc, #136]	; (80096ec <UART_SetConfig+0x118>)
 8009662:	fba2 2303 	umull	r2, r3, r2, r3
 8009666:	095b      	lsrs	r3, r3, #5
 8009668:	0119      	lsls	r1, r3, #4
 800966a:	68fa      	ldr	r2, [r7, #12]
 800966c:	4613      	mov	r3, r2
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	4413      	add	r3, r2
 8009672:	009a      	lsls	r2, r3, #2
 8009674:	441a      	add	r2, r3
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	009b      	lsls	r3, r3, #2
 800967c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009680:	4b1a      	ldr	r3, [pc, #104]	; (80096ec <UART_SetConfig+0x118>)
 8009682:	fba3 0302 	umull	r0, r3, r3, r2
 8009686:	095b      	lsrs	r3, r3, #5
 8009688:	2064      	movs	r0, #100	; 0x64
 800968a:	fb00 f303 	mul.w	r3, r0, r3
 800968e:	1ad3      	subs	r3, r2, r3
 8009690:	011b      	lsls	r3, r3, #4
 8009692:	3332      	adds	r3, #50	; 0x32
 8009694:	4a15      	ldr	r2, [pc, #84]	; (80096ec <UART_SetConfig+0x118>)
 8009696:	fba2 2303 	umull	r2, r3, r2, r3
 800969a:	095b      	lsrs	r3, r3, #5
 800969c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80096a0:	4419      	add	r1, r3
 80096a2:	68fa      	ldr	r2, [r7, #12]
 80096a4:	4613      	mov	r3, r2
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	4413      	add	r3, r2
 80096aa:	009a      	lsls	r2, r3, #2
 80096ac:	441a      	add	r2, r3
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	009b      	lsls	r3, r3, #2
 80096b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80096b8:	4b0c      	ldr	r3, [pc, #48]	; (80096ec <UART_SetConfig+0x118>)
 80096ba:	fba3 0302 	umull	r0, r3, r3, r2
 80096be:	095b      	lsrs	r3, r3, #5
 80096c0:	2064      	movs	r0, #100	; 0x64
 80096c2:	fb00 f303 	mul.w	r3, r0, r3
 80096c6:	1ad3      	subs	r3, r2, r3
 80096c8:	011b      	lsls	r3, r3, #4
 80096ca:	3332      	adds	r3, #50	; 0x32
 80096cc:	4a07      	ldr	r2, [pc, #28]	; (80096ec <UART_SetConfig+0x118>)
 80096ce:	fba2 2303 	umull	r2, r3, r2, r3
 80096d2:	095b      	lsrs	r3, r3, #5
 80096d4:	f003 020f 	and.w	r2, r3, #15
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	440a      	add	r2, r1
 80096de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80096e0:	bf00      	nop
 80096e2:	3710      	adds	r7, #16
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}
 80096e8:	40013800 	.word	0x40013800
 80096ec:	51eb851f 	.word	0x51eb851f

080096f0 <memset>:
 80096f0:	4603      	mov	r3, r0
 80096f2:	4402      	add	r2, r0
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d100      	bne.n	80096fa <memset+0xa>
 80096f8:	4770      	bx	lr
 80096fa:	f803 1b01 	strb.w	r1, [r3], #1
 80096fe:	e7f9      	b.n	80096f4 <memset+0x4>

08009700 <__libc_init_array>:
 8009700:	b570      	push	{r4, r5, r6, lr}
 8009702:	2600      	movs	r6, #0
 8009704:	4d0c      	ldr	r5, [pc, #48]	; (8009738 <__libc_init_array+0x38>)
 8009706:	4c0d      	ldr	r4, [pc, #52]	; (800973c <__libc_init_array+0x3c>)
 8009708:	1b64      	subs	r4, r4, r5
 800970a:	10a4      	asrs	r4, r4, #2
 800970c:	42a6      	cmp	r6, r4
 800970e:	d109      	bne.n	8009724 <__libc_init_array+0x24>
 8009710:	f000 f81a 	bl	8009748 <_init>
 8009714:	2600      	movs	r6, #0
 8009716:	4d0a      	ldr	r5, [pc, #40]	; (8009740 <__libc_init_array+0x40>)
 8009718:	4c0a      	ldr	r4, [pc, #40]	; (8009744 <__libc_init_array+0x44>)
 800971a:	1b64      	subs	r4, r4, r5
 800971c:	10a4      	asrs	r4, r4, #2
 800971e:	42a6      	cmp	r6, r4
 8009720:	d105      	bne.n	800972e <__libc_init_array+0x2e>
 8009722:	bd70      	pop	{r4, r5, r6, pc}
 8009724:	f855 3b04 	ldr.w	r3, [r5], #4
 8009728:	4798      	blx	r3
 800972a:	3601      	adds	r6, #1
 800972c:	e7ee      	b.n	800970c <__libc_init_array+0xc>
 800972e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009732:	4798      	blx	r3
 8009734:	3601      	adds	r6, #1
 8009736:	e7f2      	b.n	800971e <__libc_init_array+0x1e>
 8009738:	080097a0 	.word	0x080097a0
 800973c:	080097a0 	.word	0x080097a0
 8009740:	080097a0 	.word	0x080097a0
 8009744:	080097a4 	.word	0x080097a4

08009748 <_init>:
 8009748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800974a:	bf00      	nop
 800974c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800974e:	bc08      	pop	{r3}
 8009750:	469e      	mov	lr, r3
 8009752:	4770      	bx	lr

08009754 <_fini>:
 8009754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009756:	bf00      	nop
 8009758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800975a:	bc08      	pop	{r3}
 800975c:	469e      	mov	lr, r3
 800975e:	4770      	bx	lr
